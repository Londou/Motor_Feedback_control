
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007358  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007644  08007644  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08007644  08007644  00017644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800764c  0800764c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007650  08007650  00017650  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007654  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000328  2000000c  08007660  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000334  08007660  00020334  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001929d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000322c  00000000  00000000  0003931c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001500  00000000  00000000  0003c548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001066  00000000  00000000  0003da48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028512  00000000  00000000  0003eaae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000199fa  00000000  00000000  00066fc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010eb90  00000000  00000000  000809ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000059b4  00000000  00000000  0018f54c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000087  00000000  00000000  00194f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08007518 	.word	0x08007518

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08007518 	.word	0x08007518

08000218 <strcmp>:
 8000218:	f810 2b01 	ldrb.w	r2, [r0], #1
 800021c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000220:	2a01      	cmp	r2, #1
 8000222:	bf28      	it	cs
 8000224:	429a      	cmpcs	r2, r3
 8000226:	d0f7      	beq.n	8000218 <strcmp>
 8000228:	1ad0      	subs	r0, r2, r3
 800022a:	4770      	bx	lr

0800022c <__aeabi_uldivmod>:
 800022c:	b953      	cbnz	r3, 8000244 <__aeabi_uldivmod+0x18>
 800022e:	b94a      	cbnz	r2, 8000244 <__aeabi_uldivmod+0x18>
 8000230:	2900      	cmp	r1, #0
 8000232:	bf08      	it	eq
 8000234:	2800      	cmpeq	r0, #0
 8000236:	bf1c      	itt	ne
 8000238:	f04f 31ff 	movne.w	r1, #4294967295
 800023c:	f04f 30ff 	movne.w	r0, #4294967295
 8000240:	f000 b970 	b.w	8000524 <__aeabi_idiv0>
 8000244:	f1ad 0c08 	sub.w	ip, sp, #8
 8000248:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800024c:	f000 f806 	bl	800025c <__udivmoddi4>
 8000250:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000254:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000258:	b004      	add	sp, #16
 800025a:	4770      	bx	lr

0800025c <__udivmoddi4>:
 800025c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000260:	9e08      	ldr	r6, [sp, #32]
 8000262:	460d      	mov	r5, r1
 8000264:	4604      	mov	r4, r0
 8000266:	460f      	mov	r7, r1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d14a      	bne.n	8000302 <__udivmoddi4+0xa6>
 800026c:	428a      	cmp	r2, r1
 800026e:	4694      	mov	ip, r2
 8000270:	d965      	bls.n	800033e <__udivmoddi4+0xe2>
 8000272:	fab2 f382 	clz	r3, r2
 8000276:	b143      	cbz	r3, 800028a <__udivmoddi4+0x2e>
 8000278:	fa02 fc03 	lsl.w	ip, r2, r3
 800027c:	f1c3 0220 	rsb	r2, r3, #32
 8000280:	409f      	lsls	r7, r3
 8000282:	fa20 f202 	lsr.w	r2, r0, r2
 8000286:	4317      	orrs	r7, r2
 8000288:	409c      	lsls	r4, r3
 800028a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800028e:	fa1f f58c 	uxth.w	r5, ip
 8000292:	fbb7 f1fe 	udiv	r1, r7, lr
 8000296:	0c22      	lsrs	r2, r4, #16
 8000298:	fb0e 7711 	mls	r7, lr, r1, r7
 800029c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002a0:	fb01 f005 	mul.w	r0, r1, r5
 80002a4:	4290      	cmp	r0, r2
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x62>
 80002a8:	eb1c 0202 	adds.w	r2, ip, r2
 80002ac:	f101 37ff 	add.w	r7, r1, #4294967295
 80002b0:	f080 811c 	bcs.w	80004ec <__udivmoddi4+0x290>
 80002b4:	4290      	cmp	r0, r2
 80002b6:	f240 8119 	bls.w	80004ec <__udivmoddi4+0x290>
 80002ba:	3902      	subs	r1, #2
 80002bc:	4462      	add	r2, ip
 80002be:	1a12      	subs	r2, r2, r0
 80002c0:	b2a4      	uxth	r4, r4
 80002c2:	fbb2 f0fe 	udiv	r0, r2, lr
 80002c6:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ce:	fb00 f505 	mul.w	r5, r0, r5
 80002d2:	42a5      	cmp	r5, r4
 80002d4:	d90a      	bls.n	80002ec <__udivmoddi4+0x90>
 80002d6:	eb1c 0404 	adds.w	r4, ip, r4
 80002da:	f100 32ff 	add.w	r2, r0, #4294967295
 80002de:	f080 8107 	bcs.w	80004f0 <__udivmoddi4+0x294>
 80002e2:	42a5      	cmp	r5, r4
 80002e4:	f240 8104 	bls.w	80004f0 <__udivmoddi4+0x294>
 80002e8:	4464      	add	r4, ip
 80002ea:	3802      	subs	r0, #2
 80002ec:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	2100      	movs	r1, #0
 80002f4:	b11e      	cbz	r6, 80002fe <__udivmoddi4+0xa2>
 80002f6:	40dc      	lsrs	r4, r3
 80002f8:	2300      	movs	r3, #0
 80002fa:	e9c6 4300 	strd	r4, r3, [r6]
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	428b      	cmp	r3, r1
 8000304:	d908      	bls.n	8000318 <__udivmoddi4+0xbc>
 8000306:	2e00      	cmp	r6, #0
 8000308:	f000 80ed 	beq.w	80004e6 <__udivmoddi4+0x28a>
 800030c:	2100      	movs	r1, #0
 800030e:	e9c6 0500 	strd	r0, r5, [r6]
 8000312:	4608      	mov	r0, r1
 8000314:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000318:	fab3 f183 	clz	r1, r3
 800031c:	2900      	cmp	r1, #0
 800031e:	d149      	bne.n	80003b4 <__udivmoddi4+0x158>
 8000320:	42ab      	cmp	r3, r5
 8000322:	d302      	bcc.n	800032a <__udivmoddi4+0xce>
 8000324:	4282      	cmp	r2, r0
 8000326:	f200 80f8 	bhi.w	800051a <__udivmoddi4+0x2be>
 800032a:	1a84      	subs	r4, r0, r2
 800032c:	eb65 0203 	sbc.w	r2, r5, r3
 8000330:	2001      	movs	r0, #1
 8000332:	4617      	mov	r7, r2
 8000334:	2e00      	cmp	r6, #0
 8000336:	d0e2      	beq.n	80002fe <__udivmoddi4+0xa2>
 8000338:	e9c6 4700 	strd	r4, r7, [r6]
 800033c:	e7df      	b.n	80002fe <__udivmoddi4+0xa2>
 800033e:	b902      	cbnz	r2, 8000342 <__udivmoddi4+0xe6>
 8000340:	deff      	udf	#255	; 0xff
 8000342:	fab2 f382 	clz	r3, r2
 8000346:	2b00      	cmp	r3, #0
 8000348:	f040 8090 	bne.w	800046c <__udivmoddi4+0x210>
 800034c:	1a8a      	subs	r2, r1, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f fe8c 	uxth.w	lr, ip
 8000356:	2101      	movs	r1, #1
 8000358:	fbb2 f5f7 	udiv	r5, r2, r7
 800035c:	fb07 2015 	mls	r0, r7, r5, r2
 8000360:	0c22      	lsrs	r2, r4, #16
 8000362:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000366:	fb0e f005 	mul.w	r0, lr, r5
 800036a:	4290      	cmp	r0, r2
 800036c:	d908      	bls.n	8000380 <__udivmoddi4+0x124>
 800036e:	eb1c 0202 	adds.w	r2, ip, r2
 8000372:	f105 38ff 	add.w	r8, r5, #4294967295
 8000376:	d202      	bcs.n	800037e <__udivmoddi4+0x122>
 8000378:	4290      	cmp	r0, r2
 800037a:	f200 80cb 	bhi.w	8000514 <__udivmoddi4+0x2b8>
 800037e:	4645      	mov	r5, r8
 8000380:	1a12      	subs	r2, r2, r0
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb2 f0f7 	udiv	r0, r2, r7
 8000388:	fb07 2210 	mls	r2, r7, r0, r2
 800038c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000390:	fb0e fe00 	mul.w	lr, lr, r0
 8000394:	45a6      	cmp	lr, r4
 8000396:	d908      	bls.n	80003aa <__udivmoddi4+0x14e>
 8000398:	eb1c 0404 	adds.w	r4, ip, r4
 800039c:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a0:	d202      	bcs.n	80003a8 <__udivmoddi4+0x14c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f200 80bb 	bhi.w	800051e <__udivmoddi4+0x2c2>
 80003a8:	4610      	mov	r0, r2
 80003aa:	eba4 040e 	sub.w	r4, r4, lr
 80003ae:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003b2:	e79f      	b.n	80002f4 <__udivmoddi4+0x98>
 80003b4:	f1c1 0720 	rsb	r7, r1, #32
 80003b8:	408b      	lsls	r3, r1
 80003ba:	fa22 fc07 	lsr.w	ip, r2, r7
 80003be:	ea4c 0c03 	orr.w	ip, ip, r3
 80003c2:	fa05 f401 	lsl.w	r4, r5, r1
 80003c6:	fa20 f307 	lsr.w	r3, r0, r7
 80003ca:	40fd      	lsrs	r5, r7
 80003cc:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003d0:	4323      	orrs	r3, r4
 80003d2:	fbb5 f8f9 	udiv	r8, r5, r9
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	fb09 5518 	mls	r5, r9, r8, r5
 80003de:	0c1c      	lsrs	r4, r3, #16
 80003e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003e4:	fb08 f50e 	mul.w	r5, r8, lr
 80003e8:	42a5      	cmp	r5, r4
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 f001 	lsl.w	r0, r0, r1
 80003f2:	d90b      	bls.n	800040c <__udivmoddi4+0x1b0>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003fc:	f080 8088 	bcs.w	8000510 <__udivmoddi4+0x2b4>
 8000400:	42a5      	cmp	r5, r4
 8000402:	f240 8085 	bls.w	8000510 <__udivmoddi4+0x2b4>
 8000406:	f1a8 0802 	sub.w	r8, r8, #2
 800040a:	4464      	add	r4, ip
 800040c:	1b64      	subs	r4, r4, r5
 800040e:	b29d      	uxth	r5, r3
 8000410:	fbb4 f3f9 	udiv	r3, r4, r9
 8000414:	fb09 4413 	mls	r4, r9, r3, r4
 8000418:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 800041c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x1da>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f103 35ff 	add.w	r5, r3, #4294967295
 800042c:	d26c      	bcs.n	8000508 <__udivmoddi4+0x2ac>
 800042e:	45a6      	cmp	lr, r4
 8000430:	d96a      	bls.n	8000508 <__udivmoddi4+0x2ac>
 8000432:	3b02      	subs	r3, #2
 8000434:	4464      	add	r4, ip
 8000436:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800043a:	fba3 9502 	umull	r9, r5, r3, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	42ac      	cmp	r4, r5
 8000444:	46c8      	mov	r8, r9
 8000446:	46ae      	mov	lr, r5
 8000448:	d356      	bcc.n	80004f8 <__udivmoddi4+0x29c>
 800044a:	d053      	beq.n	80004f4 <__udivmoddi4+0x298>
 800044c:	b156      	cbz	r6, 8000464 <__udivmoddi4+0x208>
 800044e:	ebb0 0208 	subs.w	r2, r0, r8
 8000452:	eb64 040e 	sbc.w	r4, r4, lr
 8000456:	fa04 f707 	lsl.w	r7, r4, r7
 800045a:	40ca      	lsrs	r2, r1
 800045c:	40cc      	lsrs	r4, r1
 800045e:	4317      	orrs	r7, r2
 8000460:	e9c6 7400 	strd	r7, r4, [r6]
 8000464:	4618      	mov	r0, r3
 8000466:	2100      	movs	r1, #0
 8000468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046c:	f1c3 0120 	rsb	r1, r3, #32
 8000470:	fa02 fc03 	lsl.w	ip, r2, r3
 8000474:	fa20 f201 	lsr.w	r2, r0, r1
 8000478:	fa25 f101 	lsr.w	r1, r5, r1
 800047c:	409d      	lsls	r5, r3
 800047e:	432a      	orrs	r2, r5
 8000480:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000484:	fa1f fe8c 	uxth.w	lr, ip
 8000488:	fbb1 f0f7 	udiv	r0, r1, r7
 800048c:	fb07 1510 	mls	r5, r7, r0, r1
 8000490:	0c11      	lsrs	r1, r2, #16
 8000492:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000496:	fb00 f50e 	mul.w	r5, r0, lr
 800049a:	428d      	cmp	r5, r1
 800049c:	fa04 f403 	lsl.w	r4, r4, r3
 80004a0:	d908      	bls.n	80004b4 <__udivmoddi4+0x258>
 80004a2:	eb1c 0101 	adds.w	r1, ip, r1
 80004a6:	f100 38ff 	add.w	r8, r0, #4294967295
 80004aa:	d22f      	bcs.n	800050c <__udivmoddi4+0x2b0>
 80004ac:	428d      	cmp	r5, r1
 80004ae:	d92d      	bls.n	800050c <__udivmoddi4+0x2b0>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4461      	add	r1, ip
 80004b4:	1b49      	subs	r1, r1, r5
 80004b6:	b292      	uxth	r2, r2
 80004b8:	fbb1 f5f7 	udiv	r5, r1, r7
 80004bc:	fb07 1115 	mls	r1, r7, r5, r1
 80004c0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004c4:	fb05 f10e 	mul.w	r1, r5, lr
 80004c8:	4291      	cmp	r1, r2
 80004ca:	d908      	bls.n	80004de <__udivmoddi4+0x282>
 80004cc:	eb1c 0202 	adds.w	r2, ip, r2
 80004d0:	f105 38ff 	add.w	r8, r5, #4294967295
 80004d4:	d216      	bcs.n	8000504 <__udivmoddi4+0x2a8>
 80004d6:	4291      	cmp	r1, r2
 80004d8:	d914      	bls.n	8000504 <__udivmoddi4+0x2a8>
 80004da:	3d02      	subs	r5, #2
 80004dc:	4462      	add	r2, ip
 80004de:	1a52      	subs	r2, r2, r1
 80004e0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004e4:	e738      	b.n	8000358 <__udivmoddi4+0xfc>
 80004e6:	4631      	mov	r1, r6
 80004e8:	4630      	mov	r0, r6
 80004ea:	e708      	b.n	80002fe <__udivmoddi4+0xa2>
 80004ec:	4639      	mov	r1, r7
 80004ee:	e6e6      	b.n	80002be <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e6fb      	b.n	80002ec <__udivmoddi4+0x90>
 80004f4:	4548      	cmp	r0, r9
 80004f6:	d2a9      	bcs.n	800044c <__udivmoddi4+0x1f0>
 80004f8:	ebb9 0802 	subs.w	r8, r9, r2
 80004fc:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000500:	3b01      	subs	r3, #1
 8000502:	e7a3      	b.n	800044c <__udivmoddi4+0x1f0>
 8000504:	4645      	mov	r5, r8
 8000506:	e7ea      	b.n	80004de <__udivmoddi4+0x282>
 8000508:	462b      	mov	r3, r5
 800050a:	e794      	b.n	8000436 <__udivmoddi4+0x1da>
 800050c:	4640      	mov	r0, r8
 800050e:	e7d1      	b.n	80004b4 <__udivmoddi4+0x258>
 8000510:	46d0      	mov	r8, sl
 8000512:	e77b      	b.n	800040c <__udivmoddi4+0x1b0>
 8000514:	3d02      	subs	r5, #2
 8000516:	4462      	add	r2, ip
 8000518:	e732      	b.n	8000380 <__udivmoddi4+0x124>
 800051a:	4608      	mov	r0, r1
 800051c:	e70a      	b.n	8000334 <__udivmoddi4+0xd8>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e742      	b.n	80003aa <__udivmoddi4+0x14e>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	; 0x30
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800052e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	1d3b      	adds	r3, r7, #4
 800053c:	2220      	movs	r2, #32
 800053e:	2100      	movs	r1, #0
 8000540:	4618      	mov	r0, r3
 8000542:	f006 ffbd 	bl	80074c0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000546:	4b32      	ldr	r3, [pc, #200]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000548:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800054c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800054e:	4b30      	ldr	r3, [pc, #192]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000550:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000554:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000556:	4b2e      	ldr	r3, [pc, #184]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000558:	2200      	movs	r2, #0
 800055a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800055c:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_ADC1_Init+0xe8>)
 800055e:	2200      	movs	r2, #0
 8000560:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000562:	4b2b      	ldr	r3, [pc, #172]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000564:	2200      	movs	r2, #0
 8000566:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000568:	4b29      	ldr	r3, [pc, #164]	; (8000610 <MX_ADC1_Init+0xe8>)
 800056a:	2200      	movs	r2, #0
 800056c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800056e:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000570:	2204      	movs	r2, #4
 8000572:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000574:	4b26      	ldr	r3, [pc, #152]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000576:	2200      	movs	r2, #0
 8000578:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800057a:	4b25      	ldr	r3, [pc, #148]	; (8000610 <MX_ADC1_Init+0xe8>)
 800057c:	2200      	movs	r2, #0
 800057e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000580:	4b23      	ldr	r3, [pc, #140]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000582:	2201      	movs	r2, #1
 8000584:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000586:	4b22      	ldr	r3, [pc, #136]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000588:	2200      	movs	r2, #0
 800058a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800058e:	4b20      	ldr	r3, [pc, #128]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000590:	2200      	movs	r2, #0
 8000592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000594:	4b1e      	ldr	r3, [pc, #120]	; (8000610 <MX_ADC1_Init+0xe8>)
 8000596:	2200      	movs	r2, #0
 8000598:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800059a:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <MX_ADC1_Init+0xe8>)
 800059c:	2200      	movs	r2, #0
 800059e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005a2:	4b1b      	ldr	r3, [pc, #108]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005b0:	4817      	ldr	r0, [pc, #92]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005b2:	f001 f9a9 	bl	8001908 <HAL_ADC_Init>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80005bc:	f000 fb3e 	bl	8000c3c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80005c0:	2300      	movs	r3, #0
 80005c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	4619      	mov	r1, r3
 80005ca:	4811      	ldr	r0, [pc, #68]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005cc:	f001 ffc4 	bl	8002558 <HAL_ADCEx_MultiModeConfigChannel>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d001      	beq.n	80005da <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80005d6:	f000 fb31 	bl	8000c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <MX_ADC1_Init+0xec>)
 80005dc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005de:	2306      	movs	r3, #6
 80005e0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005e2:	2300      	movs	r3, #0
 80005e4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005e6:	237f      	movs	r3, #127	; 0x7f
 80005e8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005ea:	2304      	movs	r3, #4
 80005ec:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005f2:	1d3b      	adds	r3, r7, #4
 80005f4:	4619      	mov	r1, r3
 80005f6:	4806      	ldr	r0, [pc, #24]	; (8000610 <MX_ADC1_Init+0xe8>)
 80005f8:	f001 fb48 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000602:	f000 fb1b 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000606:	bf00      	nop
 8000608:	3730      	adds	r7, #48	; 0x30
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000028 	.word	0x20000028
 8000614:	21800100 	.word	0x21800100

08000618 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b088      	sub	sp, #32
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800061e:	463b      	mov	r3, r7
 8000620:	2220      	movs	r2, #32
 8000622:	2100      	movs	r1, #0
 8000624:	4618      	mov	r0, r3
 8000626:	f006 ff4b 	bl	80074c0 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800062c:	4a2b      	ldr	r2, [pc, #172]	; (80006dc <MX_ADC2_Init+0xc4>)
 800062e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000630:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000632:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000636:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000638:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800063a:	2200      	movs	r2, #0
 800063c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000640:	2200      	movs	r2, #0
 8000642:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000644:	4b24      	ldr	r3, [pc, #144]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000646:	2200      	movs	r2, #0
 8000648:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800064c:	2200      	movs	r2, #0
 800064e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000652:	2204      	movs	r2, #4
 8000654:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000658:	2200      	movs	r2, #0
 800065a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800065e:	2200      	movs	r2, #0
 8000660:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000664:	2201      	movs	r2, #1
 8000666:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800066a:	2200      	movs	r2, #0
 800066c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000670:	4b19      	ldr	r3, [pc, #100]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000672:	2200      	movs	r2, #0
 8000674:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000678:	2200      	movs	r2, #0
 800067a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800067c:	4b16      	ldr	r3, [pc, #88]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800067e:	2200      	movs	r2, #0
 8000680:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000686:	2200      	movs	r2, #0
 8000688:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800068a:	4b13      	ldr	r3, [pc, #76]	; (80006d8 <MX_ADC2_Init+0xc0>)
 800068c:	2200      	movs	r2, #0
 800068e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000692:	4811      	ldr	r0, [pc, #68]	; (80006d8 <MX_ADC2_Init+0xc0>)
 8000694:	f001 f938 	bl	8001908 <HAL_ADC_Init>
 8000698:	4603      	mov	r3, r0
 800069a:	2b00      	cmp	r3, #0
 800069c:	d001      	beq.n	80006a2 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800069e:	f000 facd 	bl	8000c3c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006a2:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <MX_ADC2_Init+0xc8>)
 80006a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a6:	2306      	movs	r3, #6
 80006a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006ae:	237f      	movs	r3, #127	; 0x7f
 80006b0:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006b2:	2304      	movs	r3, #4
 80006b4:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006ba:	463b      	mov	r3, r7
 80006bc:	4619      	mov	r1, r3
 80006be:	4806      	ldr	r0, [pc, #24]	; (80006d8 <MX_ADC2_Init+0xc0>)
 80006c0:	f001 fae4 	bl	8001c8c <HAL_ADC_ConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80006ca:	f000 fab7 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006ce:	bf00      	nop
 80006d0:	3720      	adds	r7, #32
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	20000094 	.word	0x20000094
 80006dc:	50000100 	.word	0x50000100
 80006e0:	19200040 	.word	0x19200040

080006e4 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0a4      	sub	sp, #144	; 0x90
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006fc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000700:	2254      	movs	r2, #84	; 0x54
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f006 fedb 	bl	80074c0 <memset>
  if(adcHandle->Instance==ADC1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000712:	d174      	bne.n	80007fe <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000718:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800071a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800071e:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000720:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000724:	4618      	mov	r0, r3
 8000726:	f003 f997 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000730:	f000 fa84 	bl	8000c3c <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000734:	4b63      	ldr	r3, [pc, #396]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	3301      	adds	r3, #1
 800073a:	4a62      	ldr	r2, [pc, #392]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 800073c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800073e:	4b61      	ldr	r3, [pc, #388]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2b01      	cmp	r3, #1
 8000744:	d10b      	bne.n	800075e <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000746:	4b60      	ldr	r3, [pc, #384]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074a:	4a5f      	ldr	r2, [pc, #380]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800074c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000752:	4b5d      	ldr	r3, [pc, #372]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000756:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
 800075c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800075e:	4b5a      	ldr	r3, [pc, #360]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a59      	ldr	r2, [pc, #356]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b57      	ldr	r3, [pc, #348]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	623b      	str	r3, [r7, #32]
 8000774:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b54      	ldr	r3, [pc, #336]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a53      	ldr	r2, [pc, #332]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b51      	ldr	r3, [pc, #324]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	61fb      	str	r3, [r7, #28]
 800078c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a4d      	ldr	r2, [pc, #308]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b4b      	ldr	r3, [pc, #300]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80007a6:	2304      	movs	r3, #4
 80007a8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007aa:	2303      	movs	r3, #3
 80007ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80007b6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007ba:	4619      	mov	r1, r3
 80007bc:	4843      	ldr	r0, [pc, #268]	; (80008cc <HAL_ADC_MspInit+0x1e8>)
 80007be:	f002 f973 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80007c2:	2302      	movs	r3, #2
 80007c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007c6:	2303      	movs	r3, #3
 80007c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007d6:	4619      	mov	r1, r3
 80007d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007dc:	f002 f964 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007e0:	2303      	movs	r3, #3
 80007e2:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007e4:	2303      	movs	r3, #3
 80007e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007f4:	4619      	mov	r1, r3
 80007f6:	4836      	ldr	r0, [pc, #216]	; (80008d0 <HAL_ADC_MspInit+0x1ec>)
 80007f8:	f002 f956 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80007fc:	e05e      	b.n	80008bc <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a34      	ldr	r2, [pc, #208]	; (80008d4 <HAL_ADC_MspInit+0x1f0>)
 8000804:	4293      	cmp	r3, r2
 8000806:	d159      	bne.n	80008bc <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000808:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800080c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800080e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000812:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000814:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000818:	4618      	mov	r0, r3
 800081a:	f003 f91d 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8000824:	f000 fa0a 	bl	8000c3c <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000828:	4b26      	ldr	r3, [pc, #152]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	3301      	adds	r3, #1
 800082e:	4a25      	ldr	r2, [pc, #148]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000830:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000832:	4b24      	ldr	r3, [pc, #144]	; (80008c4 <HAL_ADC_MspInit+0x1e0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d10b      	bne.n	8000852 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a22      	ldr	r2, [pc, #136]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000840:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800084e:	617b      	str	r3, [r7, #20]
 8000850:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000852:	4b1d      	ldr	r3, [pc, #116]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a1c      	ldr	r2, [pc, #112]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b1a      	ldr	r3, [pc, #104]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0304 	and.w	r3, r3, #4
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086a:	4b17      	ldr	r3, [pc, #92]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 800086c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800086e:	4a16      	ldr	r2, [pc, #88]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000870:	f043 0301 	orr.w	r3, r3, #1
 8000874:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <HAL_ADC_MspInit+0x1e4>)
 8000878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	60fb      	str	r3, [r7, #12]
 8000880:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000882:	230b      	movs	r3, #11
 8000884:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000886:	2303      	movs	r3, #3
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000892:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000896:	4619      	mov	r1, r3
 8000898:	480c      	ldr	r0, [pc, #48]	; (80008cc <HAL_ADC_MspInit+0x1e8>)
 800089a:	f002 f905 	bl	8002aa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a2:	2303      	movs	r3, #3
 80008a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b2:	4619      	mov	r1, r3
 80008b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008b8:	f002 f8f6 	bl	8002aa8 <HAL_GPIO_Init>
}
 80008bc:	bf00      	nop
 80008be:	3790      	adds	r7, #144	; 0x90
 80008c0:	46bd      	mov	sp, r7
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	20000100 	.word	0x20000100
 80008c8:	40021000 	.word	0x40021000
 80008cc:	48000800 	.word	0x48000800
 80008d0:	48000400 	.word	0x48000400
 80008d4:	50000100 	.word	0x50000100

080008d8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08a      	sub	sp, #40	; 0x28
 80008dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 0314 	add.w	r3, r7, #20
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b3f      	ldr	r3, [pc, #252]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a3e      	ldr	r2, [pc, #248]	; (80009ec <MX_GPIO_Init+0x114>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b3c      	ldr	r3, [pc, #240]	; (80009ec <MX_GPIO_Init+0x114>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	613b      	str	r3, [r7, #16]
 8000904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000906:	4b39      	ldr	r3, [pc, #228]	; (80009ec <MX_GPIO_Init+0x114>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a38      	ldr	r2, [pc, #224]	; (80009ec <MX_GPIO_Init+0x114>)
 800090c:	f043 0320 	orr.w	r3, r3, #32
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b36      	ldr	r3, [pc, #216]	; (80009ec <MX_GPIO_Init+0x114>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0320 	and.w	r3, r3, #32
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800091e:	4b33      	ldr	r3, [pc, #204]	; (80009ec <MX_GPIO_Init+0x114>)
 8000920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000922:	4a32      	ldr	r2, [pc, #200]	; (80009ec <MX_GPIO_Init+0x114>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	64d3      	str	r3, [r2, #76]	; 0x4c
 800092a:	4b30      	ldr	r3, [pc, #192]	; (80009ec <MX_GPIO_Init+0x114>)
 800092c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000936:	4b2d      	ldr	r3, [pc, #180]	; (80009ec <MX_GPIO_Init+0x114>)
 8000938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093a:	4a2c      	ldr	r2, [pc, #176]	; (80009ec <MX_GPIO_Init+0x114>)
 800093c:	f043 0302 	orr.w	r3, r3, #2
 8000940:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000942:	4b2a      	ldr	r3, [pc, #168]	; (80009ec <MX_GPIO_Init+0x114>)
 8000944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000946:	f003 0302 	and.w	r3, r3, #2
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800094e:	4b27      	ldr	r3, [pc, #156]	; (80009ec <MX_GPIO_Init+0x114>)
 8000950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000952:	4a26      	ldr	r2, [pc, #152]	; (80009ec <MX_GPIO_Init+0x114>)
 8000954:	f043 0308 	orr.w	r3, r3, #8
 8000958:	64d3      	str	r3, [r2, #76]	; 0x4c
 800095a:	4b24      	ldr	r3, [pc, #144]	; (80009ec <MX_GPIO_Init+0x114>)
 800095c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800095e:	f003 0308 	and.w	r3, r3, #8
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000966:	2200      	movs	r2, #0
 8000968:	2120      	movs	r1, #32
 800096a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800096e:	f002 fa1d 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000972:	2200      	movs	r2, #0
 8000974:	2104      	movs	r1, #4
 8000976:	481e      	ldr	r0, [pc, #120]	; (80009f0 <MX_GPIO_Init+0x118>)
 8000978:	f002 fa18 	bl	8002dac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800097c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000982:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	4619      	mov	r1, r3
 8000992:	4818      	ldr	r0, [pc, #96]	; (80009f4 <MX_GPIO_Init+0x11c>)
 8000994:	f002 f888 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000998:	2320      	movs	r3, #32
 800099a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800099c:	2301      	movs	r3, #1
 800099e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 0314 	add.w	r3, r7, #20
 80009ac:	4619      	mov	r1, r3
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f002 f879 	bl	8002aa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80009b6:	2304      	movs	r3, #4
 80009b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ba:	2301      	movs	r3, #1
 80009bc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009be:	2300      	movs	r3, #0
 80009c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c2:	2300      	movs	r3, #0
 80009c4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80009c6:	f107 0314 	add.w	r3, r7, #20
 80009ca:	4619      	mov	r1, r3
 80009cc:	4808      	ldr	r0, [pc, #32]	; (80009f0 <MX_GPIO_Init+0x118>)
 80009ce:	f002 f86b 	bl	8002aa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2100      	movs	r1, #0
 80009d6:	2028      	movs	r0, #40	; 0x28
 80009d8:	f001 ff7e 	bl	80028d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009dc:	2028      	movs	r0, #40	; 0x28
 80009de:	f001 ff95 	bl	800290c <HAL_NVIC_EnableIRQ>

}
 80009e2:	bf00      	nop
 80009e4:	3728      	adds	r7, #40	; 0x28
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	40021000 	.word	0x40021000
 80009f0:	48000c00 	.word	0x48000c00
 80009f4:	48000800 	.word	0x48000800

080009f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009fc:	f000 fd51 	bl	80014a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a00:	f000 f832 	bl	8000a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a04:	f7ff ff68 	bl	80008d8 <MX_GPIO_Init>
  MX_ADC2_Init();
 8000a08:	f7ff fe06 	bl	8000618 <MX_ADC2_Init>
  MX_ADC1_Init();
 8000a0c:	f7ff fd8c 	bl	8000528 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000a10:	f000 fa04 	bl	8000e1c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a14:	f000 faae 	bl	8000f74 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000a18:	f000 fbe2 	bl	80011e0 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000a1c:	f000 fc2c 	bl	8001278 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Transmit(&huart2, HELLO, sizeof(HELLO), 100);
 8000a20:	2364      	movs	r3, #100	; 0x64
 8000a22:	2210      	movs	r2, #16
 8000a24:	490b      	ldr	r1, [pc, #44]	; (8000a54 <main+0x5c>)
 8000a26:	480c      	ldr	r0, [pc, #48]	; (8000a58 <main+0x60>)
 8000a28:	f004 fd24 	bl	8005474 <HAL_UART_Transmit>
  HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	490b      	ldr	r1, [pc, #44]	; (8000a5c <main+0x64>)
 8000a30:	4809      	ldr	r0, [pc, #36]	; (8000a58 <main+0x60>)
 8000a32:	f004 fdb5 	bl	80055a0 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	//  HAL_UART_Transmit(&huart2, "Tick\r\n", 6, 100);
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&command[idx], 1); //messo da me
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <main+0x68>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <main+0x6c>)
 8000a3c:	4413      	add	r3, r2
 8000a3e:	2201      	movs	r2, #1
 8000a40:	4619      	mov	r1, r3
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <main+0x60>)
 8000a44:	f004 fdac 	bl	80055a0 <HAL_UART_Receive_IT>
	  HAL_Delay(1000);
 8000a48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a4c:	f000 fd60 	bl	8001510 <HAL_Delay>
	  HAL_UART_Receive_IT(&huart2, (uint8_t*)&command[idx], 1); //messo da me
 8000a50:	e7f1      	b.n	8000a36 <main+0x3e>
 8000a52:	bf00      	nop
 8000a54:	080075f4 	.word	0x080075f4
 8000a58:	20000210 	.word	0x20000210
 8000a5c:	20000104 	.word	0x20000104
 8000a60:	20000128 	.word	0x20000128
 8000a64:	20000108 	.word	0x20000108

08000a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b094      	sub	sp, #80	; 0x50
 8000a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6e:	f107 0318 	add.w	r3, r7, #24
 8000a72:	2238      	movs	r2, #56	; 0x38
 8000a74:	2100      	movs	r1, #0
 8000a76:	4618      	mov	r0, r3
 8000a78:	f006 fd22 	bl	80074c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a7c:	1d3b      	adds	r3, r7, #4
 8000a7e:	2200      	movs	r2, #0
 8000a80:	601a      	str	r2, [r3, #0]
 8000a82:	605a      	str	r2, [r3, #4]
 8000a84:	609a      	str	r2, [r3, #8]
 8000a86:	60da      	str	r2, [r3, #12]
 8000a88:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000a8a:	2000      	movs	r0, #0
 8000a8c:	f002 f9ca 	bl	8002e24 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a98:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	2303      	movs	r3, #3
 8000aa0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000aa2:	2306      	movs	r3, #6
 8000aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000aa6:	2355      	movs	r3, #85	; 0x55
 8000aa8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aaa:	2302      	movs	r3, #2
 8000aac:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ab2:	2302      	movs	r3, #2
 8000ab4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	4618      	mov	r0, r3
 8000abc:	f002 fa66 	bl	8002f8c <HAL_RCC_OscConfig>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000ac6:	f000 f8b9 	bl	8000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aca:	230f      	movs	r3, #15
 8000acc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ada:	2300      	movs	r3, #0
 8000adc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ade:	1d3b      	adds	r3, r7, #4
 8000ae0:	2104      	movs	r1, #4
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f002 fd6a 	bl	80035bc <HAL_RCC_ClockConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000aee:	f000 f8a5 	bl	8000c3c <Error_Handler>
  }
}
 8000af2:	bf00      	nop
 8000af4:	3750      	adds	r7, #80	; 0x50
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
	...

08000afc <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, uartRxBuffer, 1, 100); // Echo
 8000b04:	2364      	movs	r3, #100	; 0x64
 8000b06:	2201      	movs	r2, #1
 8000b08:	4936      	ldr	r1, [pc, #216]	; (8000be4 <HAL_UART_RxCpltCallback+0xe8>)
 8000b0a:	4837      	ldr	r0, [pc, #220]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000b0c:	f004 fcb2 	bl	8005474 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, 1); // Activate IT
 8000b10:	2201      	movs	r2, #1
 8000b12:	4934      	ldr	r1, [pc, #208]	; (8000be4 <HAL_UART_RxCpltCallback+0xe8>)
 8000b14:	4834      	ldr	r0, [pc, #208]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000b16:	f004 fd43 	bl	80055a0 <HAL_UART_Receive_IT>
	//command[idx]=uartRxBuffer[0];
	 if (command[idx] == '\r') { // Controllo carattere "ENTER"
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	4a34      	ldr	r2, [pc, #208]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b20:	5cd3      	ldrb	r3, [r2, r3]
 8000b22:	2b0d      	cmp	r3, #13
 8000b24:	d14b      	bne.n	8000bbe <HAL_UART_RxCpltCallback+0xc2>
	    command[idx] = '\0'; // Termina la stringa
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a31      	ldr	r2, [pc, #196]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b2c:	2100      	movs	r1, #0
 8000b2e:	54d1      	strb	r1, [r2, r3]
	    idx = 0; // Resetta l'indice
 8000b30:	4b2e      	ldr	r3, [pc, #184]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	601a      	str	r2, [r3, #0]
	    // Esegue il comando
	    if (strcmp(command, "help") == 0) {
 8000b36:	492f      	ldr	r1, [pc, #188]	; (8000bf4 <HAL_UART_RxCpltCallback+0xf8>)
 8000b38:	482d      	ldr	r0, [pc, #180]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b3a:	f7ff fb6d 	bl	8000218 <strcmp>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d107      	bne.n	8000b54 <HAL_UART_RxCpltCallback+0x58>
	      HAL_UART_Transmit(&huart2, (uint8_t*)"Elenco comandi disponibili: help, pinout, start, stop\r\n", strlen("Elenco comandi disponibili: help, pinout, start, stop\r\n"), HAL_MAX_DELAY);
 8000b44:	f04f 33ff 	mov.w	r3, #4294967295
 8000b48:	2237      	movs	r2, #55	; 0x37
 8000b4a:	492b      	ldr	r1, [pc, #172]	; (8000bf8 <HAL_UART_RxCpltCallback+0xfc>)
 8000b4c:	4826      	ldr	r0, [pc, #152]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000b4e:	f004 fc91 	bl	8005474 <HAL_UART_Transmit>
	    }
	  } else {
	    idx++;
	    HAL_UART_Receive_IT(&huart2, (uint8_t*)&command[idx], 1);
	  }
}
 8000b52:	e042      	b.n	8000bda <HAL_UART_RxCpltCallback+0xde>
	    } else if (strcmp(command, "pinout") == 0) {
 8000b54:	4929      	ldr	r1, [pc, #164]	; (8000bfc <HAL_UART_RxCpltCallback+0x100>)
 8000b56:	4826      	ldr	r0, [pc, #152]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b58:	f7ff fb5e 	bl	8000218 <strcmp>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d107      	bne.n	8000b72 <HAL_UART_RxCpltCallback+0x76>
	      HAL_UART_Transmit(&huart2, (uint8_t*)"Informazioni sul pinout: ... (inserire informazioni qui)\r\n", strlen("Informazioni sul pinout: ... (inserire informazioni qui)\r\n"), HAL_MAX_DELAY);
 8000b62:	f04f 33ff 	mov.w	r3, #4294967295
 8000b66:	223a      	movs	r2, #58	; 0x3a
 8000b68:	4925      	ldr	r1, [pc, #148]	; (8000c00 <HAL_UART_RxCpltCallback+0x104>)
 8000b6a:	481f      	ldr	r0, [pc, #124]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000b6c:	f004 fc82 	bl	8005474 <HAL_UART_Transmit>
}
 8000b70:	e033      	b.n	8000bda <HAL_UART_RxCpltCallback+0xde>
	    } else if (strcmp(command, "start") == 0) {
 8000b72:	4924      	ldr	r1, [pc, #144]	; (8000c04 <HAL_UART_RxCpltCallback+0x108>)
 8000b74:	481e      	ldr	r0, [pc, #120]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b76:	f7ff fb4f 	bl	8000218 <strcmp>
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d107      	bne.n	8000b90 <HAL_UART_RxCpltCallback+0x94>
	      HAL_UART_Transmit(&huart2, (uint8_t*)"Power ON\r\n", strlen("Power ON\r\n"), HAL_MAX_DELAY);
 8000b80:	f04f 33ff 	mov.w	r3, #4294967295
 8000b84:	220a      	movs	r2, #10
 8000b86:	4920      	ldr	r1, [pc, #128]	; (8000c08 <HAL_UART_RxCpltCallback+0x10c>)
 8000b88:	4817      	ldr	r0, [pc, #92]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000b8a:	f004 fc73 	bl	8005474 <HAL_UART_Transmit>
}
 8000b8e:	e024      	b.n	8000bda <HAL_UART_RxCpltCallback+0xde>
	    } else if (strcmp(command, "stop") == 0) {
 8000b90:	491e      	ldr	r1, [pc, #120]	; (8000c0c <HAL_UART_RxCpltCallback+0x110>)
 8000b92:	4817      	ldr	r0, [pc, #92]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000b94:	f7ff fb40 	bl	8000218 <strcmp>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d107      	bne.n	8000bae <HAL_UART_RxCpltCallback+0xb2>
	      HAL_UART_Transmit(&huart2, (uint8_t*)"Power OFF\r\n", strlen("Power OFF\r\n"), HAL_MAX_DELAY);
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	220b      	movs	r2, #11
 8000ba4:	491a      	ldr	r1, [pc, #104]	; (8000c10 <HAL_UART_RxCpltCallback+0x114>)
 8000ba6:	4810      	ldr	r0, [pc, #64]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000ba8:	f004 fc64 	bl	8005474 <HAL_UART_Transmit>
}
 8000bac:	e015      	b.n	8000bda <HAL_UART_RxCpltCallback+0xde>
	      HAL_UART_Transmit(&huart2, (uint8_t*)"Comando non trovato\r\n", strlen("Comando non trovato\r\n"), HAL_MAX_DELAY);
 8000bae:	f04f 33ff 	mov.w	r3, #4294967295
 8000bb2:	2215      	movs	r2, #21
 8000bb4:	4917      	ldr	r1, [pc, #92]	; (8000c14 <HAL_UART_RxCpltCallback+0x118>)
 8000bb6:	480c      	ldr	r0, [pc, #48]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000bb8:	f004 fc5c 	bl	8005474 <HAL_UART_Transmit>
}
 8000bbc:	e00d      	b.n	8000bda <HAL_UART_RxCpltCallback+0xde>
	    idx++;
 8000bbe:	4b0b      	ldr	r3, [pc, #44]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000bc6:	6013      	str	r3, [r2, #0]
	    HAL_UART_Receive_IT(&huart2, (uint8_t*)&command[idx], 1);
 8000bc8:	4b08      	ldr	r3, [pc, #32]	; (8000bec <HAL_UART_RxCpltCallback+0xf0>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	4a08      	ldr	r2, [pc, #32]	; (8000bf0 <HAL_UART_RxCpltCallback+0xf4>)
 8000bce:	4413      	add	r3, r2
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <HAL_UART_RxCpltCallback+0xec>)
 8000bd6:	f004 fce3 	bl	80055a0 <HAL_UART_Receive_IT>
}
 8000bda:	bf00      	nop
 8000bdc:	3708      	adds	r7, #8
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	20000104 	.word	0x20000104
 8000be8:	20000210 	.word	0x20000210
 8000bec:	20000128 	.word	0x20000128
 8000bf0:	20000108 	.word	0x20000108
 8000bf4:	08007530 	.word	0x08007530
 8000bf8:	08007538 	.word	0x08007538
 8000bfc:	08007570 	.word	0x08007570
 8000c00:	08007578 	.word	0x08007578
 8000c04:	080075b4 	.word	0x080075b4
 8000c08:	080075bc 	.word	0x080075bc
 8000c0c:	080075c8 	.word	0x080075c8
 8000c10:	080075d0 	.word	0x080075d0
 8000c14:	080075dc 	.word	0x080075dc

08000c18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d101      	bne.n	8000c2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c2a:	f000 fc53 	bl	80014d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	40001000 	.word	0x40001000

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <HAL_MspInit+0x44>)
 8000c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <HAL_MspInit+0x44>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6613      	str	r3, [r2, #96]	; 0x60
 8000c5a:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <HAL_MspInit+0x44>)
 8000c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c66:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <HAL_MspInit+0x44>)
 8000c68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6a:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <HAL_MspInit+0x44>)
 8000c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c70:	6593      	str	r3, [r2, #88]	; 0x58
 8000c72:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_MspInit+0x44>)
 8000c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c7e:	f002 f975 	bl	8002f6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000

08000c90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b08c      	sub	sp, #48	; 0x30
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ca0:	4b2c      	ldr	r3, [pc, #176]	; (8000d54 <HAL_InitTick+0xc4>)
 8000ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca4:	4a2b      	ldr	r2, [pc, #172]	; (8000d54 <HAL_InitTick+0xc4>)
 8000ca6:	f043 0310 	orr.w	r3, r3, #16
 8000caa:	6593      	str	r3, [r2, #88]	; 0x58
 8000cac:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <HAL_InitTick+0xc4>)
 8000cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cb0:	f003 0310 	and.w	r3, r3, #16
 8000cb4:	60bb      	str	r3, [r7, #8]
 8000cb6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb8:	f107 020c 	add.w	r2, r7, #12
 8000cbc:	f107 0310 	add.w	r3, r7, #16
 8000cc0:	4611      	mov	r1, r2
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f002 fe50 	bl	8003968 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc8:	f002 fe22 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8000ccc:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cd0:	4a21      	ldr	r2, [pc, #132]	; (8000d58 <HAL_InitTick+0xc8>)
 8000cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8000cd6:	0c9b      	lsrs	r3, r3, #18
 8000cd8:	3b01      	subs	r3, #1
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cdc:	4b1f      	ldr	r3, [pc, #124]	; (8000d5c <HAL_InitTick+0xcc>)
 8000cde:	4a20      	ldr	r2, [pc, #128]	; (8000d60 <HAL_InitTick+0xd0>)
 8000ce0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce2:	4b1e      	ldr	r3, [pc, #120]	; (8000d5c <HAL_InitTick+0xcc>)
 8000ce4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cea:	4a1c      	ldr	r2, [pc, #112]	; (8000d5c <HAL_InitTick+0xcc>)
 8000cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cee:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <HAL_InitTick+0xcc>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf6:	4b19      	ldr	r3, [pc, #100]	; (8000d5c <HAL_InitTick+0xcc>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000cfc:	4817      	ldr	r0, [pc, #92]	; (8000d5c <HAL_InitTick+0xcc>)
 8000cfe:	f003 f8f9 	bl	8003ef4 <HAL_TIM_Base_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d11b      	bne.n	8000d48 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <HAL_InitTick+0xcc>)
 8000d12:	f003 f951 	bl	8003fb8 <HAL_TIM_Base_Start_IT>
 8000d16:	4603      	mov	r3, r0
 8000d18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d111      	bne.n	8000d48 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d24:	2036      	movs	r0, #54	; 0x36
 8000d26:	f001 fdf1 	bl	800290c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2b0f      	cmp	r3, #15
 8000d2e:	d808      	bhi.n	8000d42 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d30:	2200      	movs	r2, #0
 8000d32:	6879      	ldr	r1, [r7, #4]
 8000d34:	2036      	movs	r0, #54	; 0x36
 8000d36:	f001 fdcf 	bl	80028d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <HAL_InitTick+0xd4>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6013      	str	r3, [r2, #0]
 8000d40:	e002      	b.n	8000d48 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d48:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3730      	adds	r7, #48	; 0x30
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	40021000 	.word	0x40021000
 8000d58:	431bde83 	.word	0x431bde83
 8000d5c:	2000012c 	.word	0x2000012c
 8000d60:	40001000 	.word	0x40001000
 8000d64:	20000004 	.word	0x20000004

08000d68 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <NMI_Handler+0x4>

08000d6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d72:	e7fe      	b.n	8000d72 <HardFault_Handler+0x4>

08000d74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <MemManage_Handler+0x4>

08000d7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <BusFault_Handler+0x4>

08000d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <UsageFault_Handler+0x4>

08000d86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d8a:	bf00      	nop
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d98:	bf00      	nop
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr

08000da2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dc4:	4802      	ldr	r0, [pc, #8]	; (8000dd0 <USART2_IRQHandler+0x10>)
 8000dc6:	f004 fc41 	bl	800564c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dca:	bf00      	nop
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	20000210 	.word	0x20000210

08000dd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000dd8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000ddc:	f001 fffe 	bl	8002ddc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <TIM6_DAC_IRQHandler+0x10>)
 8000dea:	f003 f9b4 	bl	8004156 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000012c 	.word	0x2000012c

08000df8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000dfc:	4b06      	ldr	r3, [pc, #24]	; (8000e18 <SystemInit+0x20>)
 8000dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e02:	4a05      	ldr	r2, [pc, #20]	; (8000e18 <SystemInit+0x20>)
 8000e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	e000ed00 	.word	0xe000ed00

08000e1c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b098      	sub	sp, #96	; 0x60
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e22:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e2e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	605a      	str	r2, [r3, #4]
 8000e38:	609a      	str	r2, [r3, #8]
 8000e3a:	60da      	str	r2, [r3, #12]
 8000e3c:	611a      	str	r2, [r3, #16]
 8000e3e:	615a      	str	r2, [r3, #20]
 8000e40:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	2234      	movs	r2, #52	; 0x34
 8000e46:	2100      	movs	r1, #0
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f006 fb39 	bl	80074c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e4e:	4b47      	ldr	r3, [pc, #284]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e50:	4a47      	ldr	r2, [pc, #284]	; (8000f70 <MX_TIM1_Init+0x154>)
 8000e52:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e54:	4b45      	ldr	r3, [pc, #276]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5a:	4b44      	ldr	r3, [pc, #272]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000e60:	4b42      	ldr	r3, [pc, #264]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b40      	ldr	r3, [pc, #256]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e6e:	4b3f      	ldr	r3, [pc, #252]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e74:	4b3d      	ldr	r3, [pc, #244]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e7a:	483c      	ldr	r0, [pc, #240]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e7c:	f003 f914 	bl	80040a8 <HAL_TIM_PWM_Init>
 8000e80:	4603      	mov	r3, r0
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000e86:	f7ff fed9 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e96:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	4833      	ldr	r0, [pc, #204]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000e9e:	f004 f90b 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000ea8:	f7ff fec8 	bl	8000c3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eac:	2360      	movs	r3, #96	; 0x60
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ec8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ecc:	2200      	movs	r2, #0
 8000ece:	4619      	mov	r1, r3
 8000ed0:	4826      	ldr	r0, [pc, #152]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000ed2:	f003 fabf 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000edc:	f7ff feae 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ee0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4820      	ldr	r0, [pc, #128]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000eea:	f003 fab3 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
 8000ef4:	f7ff fea2 	bl	8000c3c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ef8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000efc:	2208      	movs	r2, #8
 8000efe:	4619      	mov	r1, r3
 8000f00:	481a      	ldr	r0, [pc, #104]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000f02:	f003 faa7 	bl	8004454 <HAL_TIM_PWM_ConfigChannel>
 8000f06:	4603      	mov	r3, r0
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d001      	beq.n	8000f10 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8000f0c:	f7ff fe96 	bl	8000c3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000f10:	2300      	movs	r3, #0
 8000f12:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000f20:	2300      	movs	r3, #0
 8000f22:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000f24:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f28:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000f36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000f40:	2300      	movs	r3, #0
 8000f42:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4807      	ldr	r0, [pc, #28]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000f4e:	f004 f949 	bl	80051e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000f58:	f7ff fe70 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000f5c:	4803      	ldr	r0, [pc, #12]	; (8000f6c <MX_TIM1_Init+0x150>)
 8000f5e:	f000 f8d7 	bl	8001110 <HAL_TIM_MspPostInit>

}
 8000f62:	bf00      	nop
 8000f64:	3760      	adds	r7, #96	; 0x60
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000178 	.word	0x20000178
 8000f70:	40012c00 	.word	0x40012c00

08000f74 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b088      	sub	sp, #32
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8000f7a:	f107 0310 	add.w	r3, r7, #16
 8000f7e:	2200      	movs	r2, #0
 8000f80:	601a      	str	r2, [r3, #0]
 8000f82:	605a      	str	r2, [r3, #4]
 8000f84:	609a      	str	r2, [r3, #8]
 8000f86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f88:	1d3b      	adds	r3, r7, #4
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	601a      	str	r2, [r3, #0]
 8000f8e:	605a      	str	r2, [r3, #4]
 8000f90:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_TIM3_Init+0x90>)
 8000f94:	4a1c      	ldr	r2, [pc, #112]	; (8001008 <MX_TIM3_Init+0x94>)
 8000f96:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM3_Init+0x90>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000fa4:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fa6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000faa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8000fc8:	f107 0310 	add.w	r3, r7, #16
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fd0:	f003 ffc2 	bl	8004f58 <HAL_TIMEx_HallSensor_Init>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8000fda:	f7ff fe2f 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8000fde:	2350      	movs	r3, #80	; 0x50
 8000fe0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_TIM3_Init+0x90>)
 8000fec:	f004 f864 	bl	80050b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8000ff6:	f7ff fe21 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3720      	adds	r7, #32
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	200001c4 	.word	0x200001c4
 8001008:	40000400 	.word	0x40000400

0800100c <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_TIM_PWM_MspInit+0x38>)
 800101a:	4293      	cmp	r3, r2
 800101c:	d10b      	bne.n	8001036 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800101e:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_TIM_PWM_MspInit+0x3c>)
 8001020:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001022:	4a09      	ldr	r2, [pc, #36]	; (8001048 <HAL_TIM_PWM_MspInit+0x3c>)
 8001024:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001028:	6613      	str	r3, [r2, #96]	; 0x60
 800102a:	4b07      	ldr	r3, [pc, #28]	; (8001048 <HAL_TIM_PWM_MspInit+0x3c>)
 800102c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40012c00 	.word	0x40012c00
 8001048:	40021000 	.word	0x40021000

0800104c <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08a      	sub	sp, #40	; 0x28
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0314 	add.w	r3, r7, #20
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	4a26      	ldr	r2, [pc, #152]	; (8001104 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d145      	bne.n	80010fa <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800106e:	4b26      	ldr	r3, [pc, #152]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001072:	4a25      	ldr	r2, [pc, #148]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	6593      	str	r3, [r2, #88]	; 0x58
 800107a:	4b23      	ldr	r3, [pc, #140]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800107c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107e:	f003 0302 	and.w	r3, r3, #2
 8001082:	613b      	str	r3, [r7, #16]
 8001084:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001086:	4b20      	ldr	r3, [pc, #128]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108a:	4a1f      	ldr	r2, [pc, #124]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800108c:	f043 0301 	orr.w	r3, r3, #1
 8001090:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001092:	4b1d      	ldr	r3, [pc, #116]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001094:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800109e:	4b1a      	ldr	r3, [pc, #104]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a2:	4a19      	ldr	r2, [pc, #100]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010a4:	f043 0304 	orr.w	r3, r3, #4
 80010a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	f003 0304 	and.w	r3, r3, #4
 80010b2:	60bb      	str	r3, [r7, #8]
 80010b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80010b6:	2350      	movs	r3, #80	; 0x50
 80010b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ba:	2302      	movs	r3, #2
 80010bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	2300      	movs	r3, #0
 80010c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010c6:	2302      	movs	r3, #2
 80010c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ca:	f107 0314 	add.w	r3, r7, #20
 80010ce:	4619      	mov	r1, r3
 80010d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010d4:	f001 fce8 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80010d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010de:	2302      	movs	r3, #2
 80010e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010ea:	2302      	movs	r3, #2
 80010ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010ee:	f107 0314 	add.w	r3, r7, #20
 80010f2:	4619      	mov	r1, r3
 80010f4:	4805      	ldr	r0, [pc, #20]	; (800110c <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 80010f6:	f001 fcd7 	bl	8002aa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80010fa:	bf00      	nop
 80010fc:	3728      	adds	r7, #40	; 0x28
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40000400 	.word	0x40000400
 8001108:	40021000 	.word	0x40021000
 800110c:	48000800 	.word	0x48000800

08001110 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b08a      	sub	sp, #40	; 0x28
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	4a29      	ldr	r2, [pc, #164]	; (80011d4 <HAL_TIM_MspPostInit+0xc4>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d14b      	bne.n	80011ca <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a28      	ldr	r2, [pc, #160]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b26      	ldr	r3, [pc, #152]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a22      	ldr	r2, [pc, #136]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b20      	ldr	r3, [pc, #128]	; (80011d8 <HAL_TIM_MspPostInit+0xc8>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0301 	and.w	r3, r3, #1
 800115e:	60fb      	str	r3, [r7, #12]
 8001160:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001162:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001166:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001174:	2306      	movs	r3, #6
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 0314 	add.w	r3, r7, #20
 800117c:	4619      	mov	r1, r3
 800117e:	4817      	ldr	r0, [pc, #92]	; (80011dc <HAL_TIM_MspPostInit+0xcc>)
 8001180:	f001 fc92 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001184:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118a:	2302      	movs	r3, #2
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001192:	2300      	movs	r3, #0
 8001194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001196:	2304      	movs	r3, #4
 8001198:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800119a:	f107 0314 	add.w	r3, r7, #20
 800119e:	4619      	mov	r1, r3
 80011a0:	480e      	ldr	r0, [pc, #56]	; (80011dc <HAL_TIM_MspPostInit+0xcc>)
 80011a2:	f001 fc81 	bl	8002aa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80011a6:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80011aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ac:	2302      	movs	r3, #2
 80011ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b0:	2300      	movs	r3, #0
 80011b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b4:	2300      	movs	r3, #0
 80011b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80011b8:	2306      	movs	r3, #6
 80011ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	4619      	mov	r1, r3
 80011c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c6:	f001 fc6f 	bl	8002aa8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80011ca:	bf00      	nop
 80011cc:	3728      	adds	r7, #40	; 0x28
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	40012c00 	.word	0x40012c00
 80011d8:	40021000 	.word	0x40021000
 80011dc:	48000400 	.word	0x48000400

080011e0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011e4:	4b22      	ldr	r3, [pc, #136]	; (8001270 <MX_USART2_UART_Init+0x90>)
 80011e6:	4a23      	ldr	r2, [pc, #140]	; (8001274 <MX_USART2_UART_Init+0x94>)
 80011e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011ea:	4b21      	ldr	r3, [pc, #132]	; (8001270 <MX_USART2_UART_Init+0x90>)
 80011ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <MX_USART2_UART_Init+0x90>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f8:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <MX_USART2_UART_Init+0x90>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_USART2_UART_Init+0x90>)
 8001200:	2200      	movs	r2, #0
 8001202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001204:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <MX_USART2_UART_Init+0x90>)
 8001206:	220c      	movs	r2, #12
 8001208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800120c:	2200      	movs	r2, #0
 800120e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001210:	4b17      	ldr	r3, [pc, #92]	; (8001270 <MX_USART2_UART_Init+0x90>)
 8001212:	2200      	movs	r2, #0
 8001214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001216:	4b16      	ldr	r3, [pc, #88]	; (8001270 <MX_USART2_UART_Init+0x90>)
 8001218:	2200      	movs	r2, #0
 800121a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800121e:	2200      	movs	r2, #0
 8001220:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001222:	4b13      	ldr	r3, [pc, #76]	; (8001270 <MX_USART2_UART_Init+0x90>)
 8001224:	2200      	movs	r2, #0
 8001226:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001228:	4811      	ldr	r0, [pc, #68]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800122a:	f004 f8d3 	bl	80053d4 <HAL_UART_Init>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001234:	f7ff fd02 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001238:	2100      	movs	r1, #0
 800123a:	480d      	ldr	r0, [pc, #52]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800123c:	f006 f875 	bl	800732a <HAL_UARTEx_SetTxFifoThreshold>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001246:	f7ff fcf9 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800124a:	2100      	movs	r1, #0
 800124c:	4808      	ldr	r0, [pc, #32]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800124e:	f006 f8aa 	bl	80073a6 <HAL_UARTEx_SetRxFifoThreshold>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001258:	f7ff fcf0 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800125c:	4804      	ldr	r0, [pc, #16]	; (8001270 <MX_USART2_UART_Init+0x90>)
 800125e:	f006 f82b 	bl	80072b8 <HAL_UARTEx_DisableFifoMode>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001268:	f7ff fce8 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800126c:	bf00      	nop
 800126e:	bd80      	pop	{r7, pc}
 8001270:	20000210 	.word	0x20000210
 8001274:	40004400 	.word	0x40004400

08001278 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800127c:	4b22      	ldr	r3, [pc, #136]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800127e:	4a23      	ldr	r2, [pc, #140]	; (800130c <MX_USART3_UART_Init+0x94>)
 8001280:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001282:	4b21      	ldr	r3, [pc, #132]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001284:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001288:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b1f      	ldr	r3, [pc, #124]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b1d      	ldr	r3, [pc, #116]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001296:	4b1c      	ldr	r3, [pc, #112]	; (8001308 <MX_USART3_UART_Init+0x90>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <MX_USART3_UART_Init+0x90>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b19      	ldr	r3, [pc, #100]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b17      	ldr	r3, [pc, #92]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b4:	4b14      	ldr	r3, [pc, #80]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012bc:	2200      	movs	r2, #0
 80012be:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012c0:	4811      	ldr	r0, [pc, #68]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012c2:	f004 f887 	bl	80053d4 <HAL_UART_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80012cc:	f7ff fcb6 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012d0:	2100      	movs	r1, #0
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012d4:	f006 f829 	bl	800732a <HAL_UARTEx_SetTxFifoThreshold>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d001      	beq.n	80012e2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80012de:	f7ff fcad 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e2:	2100      	movs	r1, #0
 80012e4:	4808      	ldr	r0, [pc, #32]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012e6:	f006 f85e 	bl	80073a6 <HAL_UARTEx_SetRxFifoThreshold>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80012f0:	f7ff fca4 	bl	8000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012f4:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_USART3_UART_Init+0x90>)
 80012f6:	f005 ffdf 	bl	80072b8 <HAL_UARTEx_DisableFifoMode>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d001      	beq.n	8001304 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001300:	f7ff fc9c 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001304:	bf00      	nop
 8001306:	bd80      	pop	{r7, pc}
 8001308:	200002a0 	.word	0x200002a0
 800130c:	40004800 	.word	0x40004800

08001310 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b0a0      	sub	sp, #128	; 0x80
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001318:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001328:	f107 0318 	add.w	r3, r7, #24
 800132c:	2254      	movs	r2, #84	; 0x54
 800132e:	2100      	movs	r1, #0
 8001330:	4618      	mov	r0, r3
 8001332:	f006 f8c5 	bl	80074c0 <memset>
  if(uartHandle->Instance==USART2)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a41      	ldr	r2, [pc, #260]	; (8001440 <HAL_UART_MspInit+0x130>)
 800133c:	4293      	cmp	r3, r2
 800133e:	d13f      	bne.n	80013c0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001340:	2302      	movs	r3, #2
 8001342:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001348:	f107 0318 	add.w	r3, r7, #24
 800134c:	4618      	mov	r0, r3
 800134e:	f002 fb83 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001358:	f7ff fc70 	bl	8000c3c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b39      	ldr	r3, [pc, #228]	; (8001444 <HAL_UART_MspInit+0x134>)
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	4a38      	ldr	r2, [pc, #224]	; (8001444 <HAL_UART_MspInit+0x134>)
 8001362:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001366:	6593      	str	r3, [r2, #88]	; 0x58
 8001368:	4b36      	ldr	r3, [pc, #216]	; (8001444 <HAL_UART_MspInit+0x134>)
 800136a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800136c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001370:	617b      	str	r3, [r7, #20]
 8001372:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b33      	ldr	r3, [pc, #204]	; (8001444 <HAL_UART_MspInit+0x134>)
 8001376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001378:	4a32      	ldr	r2, [pc, #200]	; (8001444 <HAL_UART_MspInit+0x134>)
 800137a:	f043 0301 	orr.w	r3, r3, #1
 800137e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001380:	4b30      	ldr	r3, [pc, #192]	; (8001444 <HAL_UART_MspInit+0x134>)
 8001382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001384:	f003 0301 	and.w	r3, r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800138c:	230c      	movs	r3, #12
 800138e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001398:	2300      	movs	r3, #0
 800139a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800139c:	2307      	movs	r3, #7
 800139e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80013a4:	4619      	mov	r1, r3
 80013a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013aa:	f001 fb7d 	bl	8002aa8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	2026      	movs	r0, #38	; 0x26
 80013b4:	f001 fa90 	bl	80028d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80013b8:	2026      	movs	r0, #38	; 0x26
 80013ba:	f001 faa7 	bl	800290c <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013be:	e03b      	b.n	8001438 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a20      	ldr	r2, [pc, #128]	; (8001448 <HAL_UART_MspInit+0x138>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d136      	bne.n	8001438 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80013ca:	2304      	movs	r3, #4
 80013cc:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80013d2:	f107 0318 	add.w	r3, r7, #24
 80013d6:	4618      	mov	r0, r3
 80013d8:	f002 fb3e 	bl	8003a58 <HAL_RCCEx_PeriphCLKConfig>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d001      	beq.n	80013e6 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80013e2:	f7ff fc2b 	bl	8000c3c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80013e6:	4b17      	ldr	r3, [pc, #92]	; (8001444 <HAL_UART_MspInit+0x134>)
 80013e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ea:	4a16      	ldr	r2, [pc, #88]	; (8001444 <HAL_UART_MspInit+0x134>)
 80013ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013f0:	6593      	str	r3, [r2, #88]	; 0x58
 80013f2:	4b14      	ldr	r3, [pc, #80]	; (8001444 <HAL_UART_MspInit+0x134>)
 80013f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013fa:	60fb      	str	r3, [r7, #12]
 80013fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	4b11      	ldr	r3, [pc, #68]	; (8001444 <HAL_UART_MspInit+0x134>)
 8001400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001402:	4a10      	ldr	r2, [pc, #64]	; (8001444 <HAL_UART_MspInit+0x134>)
 8001404:	f043 0304 	orr.w	r3, r3, #4
 8001408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <HAL_UART_MspInit+0x134>)
 800140c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140e:	f003 0304 	and.w	r3, r3, #4
 8001412:	60bb      	str	r3, [r7, #8]
 8001414:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001416:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800141a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800141c:	2302      	movs	r3, #2
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001420:	2300      	movs	r3, #0
 8001422:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001424:	2300      	movs	r3, #0
 8001426:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001428:	2307      	movs	r3, #7
 800142a:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <HAL_UART_MspInit+0x13c>)
 8001434:	f001 fb38 	bl	8002aa8 <HAL_GPIO_Init>
}
 8001438:	bf00      	nop
 800143a:	3780      	adds	r7, #128	; 0x80
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}
 8001440:	40004400 	.word	0x40004400
 8001444:	40021000 	.word	0x40021000
 8001448:	40004800 	.word	0x40004800
 800144c:	48000800 	.word	0x48000800

08001450 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001450:	480d      	ldr	r0, [pc, #52]	; (8001488 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001452:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001454:	480d      	ldr	r0, [pc, #52]	; (800148c <LoopForever+0x6>)
  ldr r1, =_edata
 8001456:	490e      	ldr	r1, [pc, #56]	; (8001490 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001458:	4a0e      	ldr	r2, [pc, #56]	; (8001494 <LoopForever+0xe>)
  movs r3, #0
 800145a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800145c:	e002      	b.n	8001464 <LoopCopyDataInit>

0800145e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800145e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001462:	3304      	adds	r3, #4

08001464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001468:	d3f9      	bcc.n	800145e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800146a:	4a0b      	ldr	r2, [pc, #44]	; (8001498 <LoopForever+0x12>)
  ldr r4, =_ebss
 800146c:	4c0b      	ldr	r4, [pc, #44]	; (800149c <LoopForever+0x16>)
  movs r3, #0
 800146e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001470:	e001      	b.n	8001476 <LoopFillZerobss>

08001472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001474:	3204      	adds	r2, #4

08001476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001478:	d3fb      	bcc.n	8001472 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800147a:	f7ff fcbd 	bl	8000df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800147e:	f006 f827 	bl	80074d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001482:	f7ff fab9 	bl	80009f8 <main>

08001486 <LoopForever>:

LoopForever:
    b LoopForever
 8001486:	e7fe      	b.n	8001486 <LoopForever>
  ldr   r0, =_estack
 8001488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800148c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001490:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001494:	08007654 	.word	0x08007654
  ldr r2, =_sbss
 8001498:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800149c:	20000334 	.word	0x20000334

080014a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014a0:	e7fe      	b.n	80014a0 <ADC1_2_IRQHandler>

080014a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014a8:	2300      	movs	r3, #0
 80014aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014ac:	2003      	movs	r0, #3
 80014ae:	f001 fa08 	bl	80028c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014b2:	200f      	movs	r0, #15
 80014b4:	f7ff fbec 	bl	8000c90 <HAL_InitTick>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d002      	beq.n	80014c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	71fb      	strb	r3, [r7, #7]
 80014c2:	e001      	b.n	80014c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014c4:	f7ff fbc0 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014c8:	79fb      	ldrb	r3, [r7, #7]

}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
	...

080014d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <HAL_IncTick+0x1c>)
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	4b05      	ldr	r3, [pc, #20]	; (80014f4 <HAL_IncTick+0x20>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a03      	ldr	r2, [pc, #12]	; (80014f0 <HAL_IncTick+0x1c>)
 80014e4:	6013      	str	r3, [r2, #0]
}
 80014e6:	bf00      	nop
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	20000330 	.word	0x20000330
 80014f4:	20000008 	.word	0x20000008

080014f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return uwTick;
 80014fc:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_GetTick+0x14>)
 80014fe:	681b      	ldr	r3, [r3, #0]
}
 8001500:	4618      	mov	r0, r3
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000330 	.word	0x20000330

08001510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001518:	f7ff ffee 	bl	80014f8 <HAL_GetTick>
 800151c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001528:	d004      	beq.n	8001534 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800152a:	4b09      	ldr	r3, [pc, #36]	; (8001550 <HAL_Delay+0x40>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	68fa      	ldr	r2, [r7, #12]
 8001530:	4413      	add	r3, r2
 8001532:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001534:	bf00      	nop
 8001536:	f7ff ffdf 	bl	80014f8 <HAL_GetTick>
 800153a:	4602      	mov	r2, r0
 800153c:	68bb      	ldr	r3, [r7, #8]
 800153e:	1ad3      	subs	r3, r2, r3
 8001540:	68fa      	ldr	r2, [r7, #12]
 8001542:	429a      	cmp	r2, r3
 8001544:	d8f7      	bhi.n	8001536 <HAL_Delay+0x26>
  {
  }
}
 8001546:	bf00      	nop
 8001548:	bf00      	nop
 800154a:	3710      	adds	r7, #16
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	20000008 	.word	0x20000008

08001554 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	431a      	orrs	r2, r3
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	609a      	str	r2, [r3, #8]
}
 800156e:	bf00      	nop
 8001570:	370c      	adds	r7, #12
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr

0800157a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800157a:	b480      	push	{r7}
 800157c:	b083      	sub	sp, #12
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
 8001582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	689b      	ldr	r3, [r3, #8]
 8001588:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	431a      	orrs	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	609a      	str	r2, [r3, #8]
}
 8001594:	bf00      	nop
 8001596:	370c      	adds	r7, #12
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	60f8      	str	r0, [r7, #12]
 80015c4:	60b9      	str	r1, [r7, #8]
 80015c6:	607a      	str	r2, [r7, #4]
 80015c8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3360      	adds	r3, #96	; 0x60
 80015ce:	461a      	mov	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <LL_ADC_SetOffset+0x44>)
 80015de:	4013      	ands	r3, r2
 80015e0:	687a      	ldr	r2, [r7, #4]
 80015e2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	4313      	orrs	r3, r2
 80015ec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80015f0:	697b      	ldr	r3, [r7, #20]
 80015f2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80015f4:	bf00      	nop
 80015f6:	371c      	adds	r7, #28
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	03fff000 	.word	0x03fff000

08001604 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	3360      	adds	r3, #96	; 0x60
 8001612:	461a      	mov	r2, r3
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001624:	4618      	mov	r0, r3
 8001626:	3714      	adds	r7, #20
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001630:	b480      	push	{r7}
 8001632:	b087      	sub	sp, #28
 8001634:	af00      	add	r7, sp, #0
 8001636:	60f8      	str	r0, [r7, #12]
 8001638:	60b9      	str	r1, [r7, #8]
 800163a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	3360      	adds	r3, #96	; 0x60
 8001640:	461a      	mov	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	4413      	add	r3, r2
 8001648:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	431a      	orrs	r2, r3
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800165a:	bf00      	nop
 800165c:	371c      	adds	r7, #28
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001666:	b480      	push	{r7}
 8001668:	b087      	sub	sp, #28
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	60b9      	str	r1, [r7, #8]
 8001670:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	3360      	adds	r3, #96	; 0x60
 8001676:	461a      	mov	r2, r3
 8001678:	68bb      	ldr	r3, [r7, #8]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	431a      	orrs	r2, r3
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001690:	bf00      	nop
 8001692:	371c      	adds	r7, #28
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800169c:	b480      	push	{r7}
 800169e:	b087      	sub	sp, #28
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	60f8      	str	r0, [r7, #12]
 80016a4:	60b9      	str	r1, [r7, #8]
 80016a6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	3360      	adds	r3, #96	; 0x60
 80016ac:	461a      	mov	r2, r3
 80016ae:	68bb      	ldr	r3, [r7, #8]
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	4413      	add	r3, r2
 80016b4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	431a      	orrs	r2, r3
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80016c6:	bf00      	nop
 80016c8:	371c      	adds	r7, #28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b083      	sub	sp, #12
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	695b      	ldr	r3, [r3, #20]
 80016e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	431a      	orrs	r2, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	615a      	str	r2, [r3, #20]
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80016f8:	b480      	push	{r7}
 80016fa:	b087      	sub	sp, #28
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	3330      	adds	r3, #48	; 0x30
 8001708:	461a      	mov	r2, r3
 800170a:	68bb      	ldr	r3, [r7, #8]
 800170c:	0a1b      	lsrs	r3, r3, #8
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	f003 030c 	and.w	r3, r3, #12
 8001714:	4413      	add	r3, r2
 8001716:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	f003 031f 	and.w	r3, r3, #31
 8001722:	211f      	movs	r1, #31
 8001724:	fa01 f303 	lsl.w	r3, r1, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	401a      	ands	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	0e9b      	lsrs	r3, r3, #26
 8001730:	f003 011f 	and.w	r1, r3, #31
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa01 f303 	lsl.w	r3, r1, r3
 800173e:	431a      	orrs	r2, r3
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001744:	bf00      	nop
 8001746:	371c      	adds	r7, #28
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3314      	adds	r3, #20
 8001760:	461a      	mov	r2, r3
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	0e5b      	lsrs	r3, r3, #25
 8001766:	009b      	lsls	r3, r3, #2
 8001768:	f003 0304 	and.w	r3, r3, #4
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	68bb      	ldr	r3, [r7, #8]
 8001776:	0d1b      	lsrs	r3, r3, #20
 8001778:	f003 031f 	and.w	r3, r3, #31
 800177c:	2107      	movs	r1, #7
 800177e:	fa01 f303 	lsl.w	r3, r1, r3
 8001782:	43db      	mvns	r3, r3
 8001784:	401a      	ands	r2, r3
 8001786:	68bb      	ldr	r3, [r7, #8]
 8001788:	0d1b      	lsrs	r3, r3, #20
 800178a:	f003 031f 	and.w	r3, r3, #31
 800178e:	6879      	ldr	r1, [r7, #4]
 8001790:	fa01 f303 	lsl.w	r3, r1, r3
 8001794:	431a      	orrs	r2, r3
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	60f8      	str	r0, [r7, #12]
 80017b0:	60b9      	str	r1, [r7, #8]
 80017b2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	4a0f      	ldr	r2, [pc, #60]	; (80017f4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d10a      	bne.n	80017d2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017c8:	431a      	orrs	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80017d0:	e00a      	b.n	80017e8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80017de:	43db      	mvns	r3, r3
 80017e0:	401a      	ands	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80017e8:	bf00      	nop
 80017ea:	3714      	adds	r7, #20
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	407f0000 	.word	0x407f0000

080017f8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001808:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	6093      	str	r3, [r2, #8]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800182c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001830:	d101      	bne.n	8001836 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001832:	2301      	movs	r3, #1
 8001834:	e000      	b.n	8001838 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001836:	2300      	movs	r3, #0
}
 8001838:	4618      	mov	r0, r3
 800183a:	370c      	adds	r7, #12
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001854:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001858:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001860:	bf00      	nop
 8001862:	370c      	adds	r7, #12
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr

0800186c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800187c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001880:	d101      	bne.n	8001886 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001882:	2301      	movs	r3, #1
 8001884:	e000      	b.n	8001888 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001886:	2300      	movs	r3, #0
}
 8001888:	4618      	mov	r0, r3
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr

08001894 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 0301 	and.w	r3, r3, #1
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d101      	bne.n	80018ac <LL_ADC_IsEnabled+0x18>
 80018a8:	2301      	movs	r3, #1
 80018aa:	e000      	b.n	80018ae <LL_ADC_IsEnabled+0x1a>
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b8:	4770      	bx	lr

080018ba <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018ba:	b480      	push	{r7}
 80018bc:	b083      	sub	sp, #12
 80018be:	af00      	add	r7, sp, #0
 80018c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 0304 	and.w	r3, r3, #4
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	d101      	bne.n	80018d2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e000      	b.n	80018d4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80018d2:	2300      	movs	r3, #0
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	f003 0308 	and.w	r3, r3, #8
 80018f0:	2b08      	cmp	r3, #8
 80018f2:	d101      	bne.n	80018f8 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80018f4:	2301      	movs	r3, #1
 80018f6:	e000      	b.n	80018fa <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
	...

08001908 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001908:	b590      	push	{r4, r7, lr}
 800190a:	b089      	sub	sp, #36	; 0x24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001914:	2300      	movs	r3, #0
 8001916:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b00      	cmp	r3, #0
 800191c:	d101      	bne.n	8001922 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800191e:	2301      	movs	r3, #1
 8001920:	e1af      	b.n	8001c82 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	695b      	ldr	r3, [r3, #20]
 8001926:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800192c:	2b00      	cmp	r3, #0
 800192e:	d109      	bne.n	8001944 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7fe fed7 	bl	80006e4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7ff ff67 	bl	800181c <LL_ADC_IsDeepPowerDownEnabled>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d004      	beq.n	800195e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff ff4d 	bl	80017f8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ff82 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d115      	bne.n	800199a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f7ff ff66 	bl	8001844 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001978:	4b9f      	ldr	r3, [pc, #636]	; (8001bf8 <HAL_ADC_Init+0x2f0>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	4a9f      	ldr	r2, [pc, #636]	; (8001bfc <HAL_ADC_Init+0x2f4>)
 8001980:	fba2 2303 	umull	r2, r3, r2, r3
 8001984:	099b      	lsrs	r3, r3, #6
 8001986:	3301      	adds	r3, #1
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800198c:	e002      	b.n	8001994 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800198e:	68bb      	ldr	r3, [r7, #8]
 8001990:	3b01      	subs	r3, #1
 8001992:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d1f9      	bne.n	800198e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4618      	mov	r0, r3
 80019a0:	f7ff ff64 	bl	800186c <LL_ADC_IsInternalRegulatorEnabled>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10d      	bne.n	80019c6 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ae:	f043 0210 	orr.w	r2, r3, #16
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019ba:	f043 0201 	orr.w	r2, r3, #1
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80019c2:	2301      	movs	r3, #1
 80019c4:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff ff75 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 80019d0:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d6:	f003 0310 	and.w	r3, r3, #16
 80019da:	2b00      	cmp	r3, #0
 80019dc:	f040 8148 	bne.w	8001c70 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	f040 8144 	bne.w	8001c70 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80019f0:	f043 0202 	orr.w	r2, r3, #2
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff49 	bl	8001894 <LL_ADC_IsEnabled>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d141      	bne.n	8001a8c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a10:	d004      	beq.n	8001a1c <HAL_ADC_Init+0x114>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a7a      	ldr	r2, [pc, #488]	; (8001c00 <HAL_ADC_Init+0x2f8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d10f      	bne.n	8001a3c <HAL_ADC_Init+0x134>
 8001a1c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a20:	f7ff ff38 	bl	8001894 <LL_ADC_IsEnabled>
 8001a24:	4604      	mov	r4, r0
 8001a26:	4876      	ldr	r0, [pc, #472]	; (8001c00 <HAL_ADC_Init+0x2f8>)
 8001a28:	f7ff ff34 	bl	8001894 <LL_ADC_IsEnabled>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	4323      	orrs	r3, r4
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	bf0c      	ite	eq
 8001a34:	2301      	moveq	r3, #1
 8001a36:	2300      	movne	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e012      	b.n	8001a62 <HAL_ADC_Init+0x15a>
 8001a3c:	4871      	ldr	r0, [pc, #452]	; (8001c04 <HAL_ADC_Init+0x2fc>)
 8001a3e:	f7ff ff29 	bl	8001894 <LL_ADC_IsEnabled>
 8001a42:	4604      	mov	r4, r0
 8001a44:	4870      	ldr	r0, [pc, #448]	; (8001c08 <HAL_ADC_Init+0x300>)
 8001a46:	f7ff ff25 	bl	8001894 <LL_ADC_IsEnabled>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	431c      	orrs	r4, r3
 8001a4e:	486f      	ldr	r0, [pc, #444]	; (8001c0c <HAL_ADC_Init+0x304>)
 8001a50:	f7ff ff20 	bl	8001894 <LL_ADC_IsEnabled>
 8001a54:	4603      	mov	r3, r0
 8001a56:	4323      	orrs	r3, r4
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	bf0c      	ite	eq
 8001a5c:	2301      	moveq	r3, #1
 8001a5e:	2300      	movne	r3, #0
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d012      	beq.n	8001a8c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a6e:	d004      	beq.n	8001a7a <HAL_ADC_Init+0x172>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a62      	ldr	r2, [pc, #392]	; (8001c00 <HAL_ADC_Init+0x2f8>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d101      	bne.n	8001a7e <HAL_ADC_Init+0x176>
 8001a7a:	4a65      	ldr	r2, [pc, #404]	; (8001c10 <HAL_ADC_Init+0x308>)
 8001a7c:	e000      	b.n	8001a80 <HAL_ADC_Init+0x178>
 8001a7e:	4a65      	ldr	r2, [pc, #404]	; (8001c14 <HAL_ADC_Init+0x30c>)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f7ff fd64 	bl	8001554 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	7f5b      	ldrb	r3, [r3, #29]
 8001a90:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001a96:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001a9c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001aa2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001aaa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001aac:	4313      	orrs	r3, r2
 8001aae:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d106      	bne.n	8001ac8 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001abe:	3b01      	subs	r3, #1
 8001ac0:	045b      	lsls	r3, r3, #17
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad4:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001adc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ade:	69ba      	ldr	r2, [r7, #24]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	4b4b      	ldr	r3, [pc, #300]	; (8001c18 <HAL_ADC_Init+0x310>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	6812      	ldr	r2, [r2, #0]
 8001af2:	69b9      	ldr	r1, [r7, #24]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	691b      	ldr	r3, [r3, #16]
 8001afe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	430a      	orrs	r2, r1
 8001b0c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f7ff fed1 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001b18:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff fede 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001b24:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d17f      	bne.n	8001c2c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d17c      	bne.n	8001c2c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b36:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b3e:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b40:	4313      	orrs	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68db      	ldr	r3, [r3, #12]
 8001b4a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b4e:	f023 0302 	bic.w	r3, r3, #2
 8001b52:	687a      	ldr	r2, [r7, #4]
 8001b54:	6812      	ldr	r2, [r2, #0]
 8001b56:	69b9      	ldr	r1, [r7, #24]
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	691b      	ldr	r3, [r3, #16]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d017      	beq.n	8001b94 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	691a      	ldr	r2, [r3, #16]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001b72:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001b7c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6911      	ldr	r1, [r2, #16]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	6812      	ldr	r2, [r2, #0]
 8001b8c:	430b      	orrs	r3, r1
 8001b8e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001b92:	e013      	b.n	8001bbc <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	691a      	ldr	r2, [r3, #16]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ba2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001bac:	687a      	ldr	r2, [r7, #4]
 8001bae:	6812      	ldr	r2, [r2, #0]
 8001bb0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001bb4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bb8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d12a      	bne.n	8001c1c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	691b      	ldr	r3, [r3, #16]
 8001bcc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001bd0:	f023 0304 	bic.w	r3, r3, #4
 8001bd4:	687a      	ldr	r2, [r7, #4]
 8001bd6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001bd8:	687a      	ldr	r2, [r7, #4]
 8001bda:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001bdc:	4311      	orrs	r1, r2
 8001bde:	687a      	ldr	r2, [r7, #4]
 8001be0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001be2:	4311      	orrs	r1, r2
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001be8:	430a      	orrs	r2, r1
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f042 0201 	orr.w	r2, r2, #1
 8001bf4:	611a      	str	r2, [r3, #16]
 8001bf6:	e019      	b.n	8001c2c <HAL_ADC_Init+0x324>
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	053e2d63 	.word	0x053e2d63
 8001c00:	50000100 	.word	0x50000100
 8001c04:	50000400 	.word	0x50000400
 8001c08:	50000500 	.word	0x50000500
 8001c0c:	50000600 	.word	0x50000600
 8001c10:	50000300 	.word	0x50000300
 8001c14:	50000700 	.word	0x50000700
 8001c18:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	691a      	ldr	r2, [r3, #16]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f022 0201 	bic.w	r2, r2, #1
 8001c2a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	695b      	ldr	r3, [r3, #20]
 8001c30:	2b01      	cmp	r3, #1
 8001c32:	d10c      	bne.n	8001c4e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3a:	f023 010f 	bic.w	r1, r3, #15
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
 8001c42:	1e5a      	subs	r2, r3, #1
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	631a      	str	r2, [r3, #48]	; 0x30
 8001c4c:	e007      	b.n	8001c5e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f022 020f 	bic.w	r2, r2, #15
 8001c5c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c62:	f023 0303 	bic.w	r3, r3, #3
 8001c66:	f043 0201 	orr.w	r2, r3, #1
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c6e:	e007      	b.n	8001c80 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	f043 0210 	orr.w	r2, r3, #16
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c80:	7ffb      	ldrb	r3, [r7, #31]
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3724      	adds	r7, #36	; 0x24
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}
 8001c8a:	bf00      	nop

08001c8c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	b0b6      	sub	sp, #216	; 0xd8
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ca6:	2b01      	cmp	r3, #1
 8001ca8:	d102      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x24>
 8001caa:	2302      	movs	r3, #2
 8001cac:	f000 bc13 	b.w	80024d6 <HAL_ADC_ConfigChannel+0x84a>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff fdfc 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f040 83f3 	bne.w	80024b0 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	6859      	ldr	r1, [r3, #4]
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	f7ff fd0e 	bl	80016f8 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f7ff fdea 	bl	80018ba <LL_ADC_REG_IsConversionOngoing>
 8001ce6:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f7ff fdf6 	bl	80018e0 <LL_ADC_INJ_IsConversionOngoing>
 8001cf4:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001cf8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	f040 81d9 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d02:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f040 81d4 	bne.w	80020b4 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	689b      	ldr	r3, [r3, #8]
 8001d10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d14:	d10f      	bne.n	8001d36 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6818      	ldr	r0, [r3, #0]
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	4619      	mov	r1, r3
 8001d22:	f7ff fd15 	bl	8001750 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fccf 	bl	80016d2 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d34:	e00e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6818      	ldr	r0, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6819      	ldr	r1, [r3, #0]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f7ff fd04 	bl	8001750 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	4618      	mov	r0, r3
 8001d50:	f7ff fcbf 	bl	80016d2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	695a      	ldr	r2, [r3, #20]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	08db      	lsrs	r3, r3, #3
 8001d60:	f003 0303 	and.w	r3, r3, #3
 8001d64:	005b      	lsls	r3, r3, #1
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	2b04      	cmp	r3, #4
 8001d74:	d022      	beq.n	8001dbc <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6818      	ldr	r0, [r3, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	6919      	ldr	r1, [r3, #16]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001d86:	f7ff fc19 	bl	80015bc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6818      	ldr	r0, [r3, #0]
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	6919      	ldr	r1, [r3, #16]
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	699b      	ldr	r3, [r3, #24]
 8001d96:	461a      	mov	r2, r3
 8001d98:	f7ff fc65 	bl	8001666 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6919      	ldr	r1, [r3, #16]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	7f1b      	ldrb	r3, [r3, #28]
 8001da8:	2b01      	cmp	r3, #1
 8001daa:	d102      	bne.n	8001db2 <HAL_ADC_ConfigChannel+0x126>
 8001dac:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001db0:	e000      	b.n	8001db4 <HAL_ADC_ConfigChannel+0x128>
 8001db2:	2300      	movs	r3, #0
 8001db4:	461a      	mov	r2, r3
 8001db6:	f7ff fc71 	bl	800169c <LL_ADC_SetOffsetSaturation>
 8001dba:	e17b      	b.n	80020b4 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7ff fc1e 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d10a      	bne.n	8001de8 <HAL_ADC_ConfigChannel+0x15c>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f7ff fc13 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001dde:	4603      	mov	r3, r0
 8001de0:	0e9b      	lsrs	r3, r3, #26
 8001de2:	f003 021f 	and.w	r2, r3, #31
 8001de6:	e01e      	b.n	8001e26 <HAL_ADC_ConfigChannel+0x19a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff fc08 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e06:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8001e0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001e0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8001e16:	2320      	movs	r3, #32
 8001e18:	e004      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8001e1a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8001e1e:	fab3 f383 	clz	r3, r3
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d105      	bne.n	8001e3e <HAL_ADC_ConfigChannel+0x1b2>
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	0e9b      	lsrs	r3, r3, #26
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	e018      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1e4>
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e46:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8001e4a:	fa93 f3a3 	rbit	r3, r3
 8001e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8001e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001e56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8001e5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d101      	bne.n	8001e66 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8001e62:	2320      	movs	r3, #32
 8001e64:	e004      	b.n	8001e70 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8001e66:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8001e6a:	fab3 f383 	clz	r3, r3
 8001e6e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d106      	bne.n	8001e82 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2200      	movs	r2, #0
 8001e7a:	2100      	movs	r1, #0
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f7ff fbd7 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	2101      	movs	r1, #1
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fbbb 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10a      	bne.n	8001eae <HAL_ADC_ConfigChannel+0x222>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7ff fbb0 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	0e9b      	lsrs	r3, r3, #26
 8001ea8:	f003 021f 	and.w	r2, r3, #31
 8001eac:	e01e      	b.n	8001eec <HAL_ADC_ConfigChannel+0x260>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2101      	movs	r1, #1
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fba5 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001ec4:	fa93 f3a3 	rbit	r3, r3
 8001ec8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8001ecc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8001ed4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d101      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8001edc:	2320      	movs	r3, #32
 8001ede:	e004      	b.n	8001eea <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8001ee0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001ee4:	fab3 f383 	clz	r3, r3
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d105      	bne.n	8001f04 <HAL_ADC_ConfigChannel+0x278>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	0e9b      	lsrs	r3, r3, #26
 8001efe:	f003 031f 	and.w	r3, r3, #31
 8001f02:	e018      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x2aa>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001f10:	fa93 f3a3 	rbit	r3, r3
 8001f14:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8001f18:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8001f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8001f28:	2320      	movs	r3, #32
 8001f2a:	e004      	b.n	8001f36 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8001f2c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f30:	fab3 f383 	clz	r3, r3
 8001f34:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d106      	bne.n	8001f48 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2101      	movs	r1, #1
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7ff fb74 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2102      	movs	r1, #2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f7ff fb58 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f54:	4603      	mov	r3, r0
 8001f56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d10a      	bne.n	8001f74 <HAL_ADC_ConfigChannel+0x2e8>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	2102      	movs	r1, #2
 8001f64:	4618      	mov	r0, r3
 8001f66:	f7ff fb4d 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	0e9b      	lsrs	r3, r3, #26
 8001f6e:	f003 021f 	and.w	r2, r3, #31
 8001f72:	e01e      	b.n	8001fb2 <HAL_ADC_ConfigChannel+0x326>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2102      	movs	r1, #2
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f7ff fb42 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001f8a:	fa93 f3a3 	rbit	r3, r3
 8001f8e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8001f92:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001f96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8001f9a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d101      	bne.n	8001fa6 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8001fa2:	2320      	movs	r3, #32
 8001fa4:	e004      	b.n	8001fb0 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8001fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001faa:	fab3 f383 	clz	r3, r3
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d105      	bne.n	8001fca <HAL_ADC_ConfigChannel+0x33e>
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0e9b      	lsrs	r3, r3, #26
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	e016      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x36c>
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8001fdc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001fde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8001fe2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8001fea:	2320      	movs	r3, #32
 8001fec:	e004      	b.n	8001ff8 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8001fee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d106      	bne.n	800200a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2200      	movs	r2, #0
 8002002:	2102      	movs	r1, #2
 8002004:	4618      	mov	r0, r3
 8002006:	f7ff fb13 	bl	8001630 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2103      	movs	r1, #3
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff faf7 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002016:	4603      	mov	r3, r0
 8002018:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800201c:	2b00      	cmp	r3, #0
 800201e:	d10a      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x3aa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	2103      	movs	r1, #3
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff faec 	bl	8001604 <LL_ADC_GetOffsetChannel>
 800202c:	4603      	mov	r3, r0
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	f003 021f 	and.w	r2, r3, #31
 8002034:	e017      	b.n	8002066 <HAL_ADC_ConfigChannel+0x3da>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	2103      	movs	r1, #3
 800203c:	4618      	mov	r0, r3
 800203e:	f7ff fae1 	bl	8001604 <LL_ADC_GetOffsetChannel>
 8002042:	4603      	mov	r3, r0
 8002044:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002046:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002048:	fa93 f3a3 	rbit	r3, r3
 800204c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800204e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002050:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002052:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002054:	2b00      	cmp	r3, #0
 8002056:	d101      	bne.n	800205c <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002058:	2320      	movs	r3, #32
 800205a:	e003      	b.n	8002064 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 800205c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800205e:	fab3 f383 	clz	r3, r3
 8002062:	b2db      	uxtb	r3, r3
 8002064:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800206e:	2b00      	cmp	r3, #0
 8002070:	d105      	bne.n	800207e <HAL_ADC_ConfigChannel+0x3f2>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	0e9b      	lsrs	r3, r3, #26
 8002078:	f003 031f 	and.w	r3, r3, #31
 800207c:	e011      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x416>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800208c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800208e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002090:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8002096:	2320      	movs	r3, #32
 8002098:	e003      	b.n	80020a2 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800209a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800209c:	fab3 f383 	clz	r3, r3
 80020a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d106      	bne.n	80020b4 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2200      	movs	r2, #0
 80020ac:	2103      	movs	r1, #3
 80020ae:	4618      	mov	r0, r3
 80020b0:	f7ff fabe 	bl	8001630 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff fbeb 	bl	8001894 <LL_ADC_IsEnabled>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	f040 813d 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6819      	ldr	r1, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	461a      	mov	r2, r3
 80020d4:	f7ff fb68 	bl	80017a8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	4aa2      	ldr	r2, [pc, #648]	; (8002368 <HAL_ADC_ConfigChannel+0x6dc>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	f040 812e 	bne.w	8002340 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_ADC_ConfigChannel+0x480>
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	0e9b      	lsrs	r3, r3, #26
 80020fa:	3301      	adds	r3, #1
 80020fc:	f003 031f 	and.w	r3, r3, #31
 8002100:	2b09      	cmp	r3, #9
 8002102:	bf94      	ite	ls
 8002104:	2301      	movls	r3, #1
 8002106:	2300      	movhi	r3, #0
 8002108:	b2db      	uxtb	r3, r3
 800210a:	e019      	b.n	8002140 <HAL_ADC_ConfigChannel+0x4b4>
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002112:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002114:	fa93 f3a3 	rbit	r3, r3
 8002118:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800211a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800211c:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800211e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002120:	2b00      	cmp	r3, #0
 8002122:	d101      	bne.n	8002128 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002124:	2320      	movs	r3, #32
 8002126:	e003      	b.n	8002130 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002128:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800212a:	fab3 f383 	clz	r3, r3
 800212e:	b2db      	uxtb	r3, r3
 8002130:	3301      	adds	r3, #1
 8002132:	f003 031f 	and.w	r3, r3, #31
 8002136:	2b09      	cmp	r3, #9
 8002138:	bf94      	ite	ls
 800213a:	2301      	movls	r3, #1
 800213c:	2300      	movhi	r3, #0
 800213e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002140:	2b00      	cmp	r3, #0
 8002142:	d079      	beq.n	8002238 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_ADC_ConfigChannel+0x4d4>
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	0e9b      	lsrs	r3, r3, #26
 8002156:	3301      	adds	r3, #1
 8002158:	069b      	lsls	r3, r3, #26
 800215a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800215e:	e015      	b.n	800218c <HAL_ADC_ConfigChannel+0x500>
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002168:	fa93 f3a3 	rbit	r3, r3
 800216c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002178:	2320      	movs	r3, #32
 800217a:	e003      	b.n	8002184 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800217c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800217e:	fab3 f383 	clz	r3, r3
 8002182:	b2db      	uxtb	r3, r3
 8002184:	3301      	adds	r3, #1
 8002186:	069b      	lsls	r3, r3, #26
 8002188:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_ADC_ConfigChannel+0x520>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0e9b      	lsrs	r3, r3, #26
 800219e:	3301      	adds	r3, #1
 80021a0:	f003 031f 	and.w	r3, r3, #31
 80021a4:	2101      	movs	r1, #1
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	e017      	b.n	80021dc <HAL_ADC_ConfigChannel+0x550>
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80021ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80021be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80021c4:	2320      	movs	r3, #32
 80021c6:	e003      	b.n	80021d0 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80021c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021ca:	fab3 f383 	clz	r3, r3
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	3301      	adds	r3, #1
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	ea42 0103 	orr.w	r1, r2, r3
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d10a      	bne.n	8002202 <HAL_ADC_ConfigChannel+0x576>
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	0e9b      	lsrs	r3, r3, #26
 80021f2:	3301      	adds	r3, #1
 80021f4:	f003 021f 	and.w	r2, r3, #31
 80021f8:	4613      	mov	r3, r2
 80021fa:	005b      	lsls	r3, r3, #1
 80021fc:	4413      	add	r3, r2
 80021fe:	051b      	lsls	r3, r3, #20
 8002200:	e018      	b.n	8002234 <HAL_ADC_ConfigChannel+0x5a8>
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800220a:	fa93 f3a3 	rbit	r3, r3
 800220e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002212:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800221a:	2320      	movs	r3, #32
 800221c:	e003      	b.n	8002226 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800221e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	3301      	adds	r3, #1
 8002228:	f003 021f 	and.w	r2, r3, #31
 800222c:	4613      	mov	r3, r2
 800222e:	005b      	lsls	r3, r3, #1
 8002230:	4413      	add	r3, r2
 8002232:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002234:	430b      	orrs	r3, r1
 8002236:	e07e      	b.n	8002336 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002240:	2b00      	cmp	r3, #0
 8002242:	d107      	bne.n	8002254 <HAL_ADC_ConfigChannel+0x5c8>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	069b      	lsls	r3, r3, #26
 800224e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002252:	e015      	b.n	8002280 <HAL_ADC_ConfigChannel+0x5f4>
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225c:	fa93 f3a3 	rbit	r3, r3
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002264:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 800226c:	2320      	movs	r3, #32
 800226e:	e003      	b.n	8002278 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002272:	fab3 f383 	clz	r3, r3
 8002276:	b2db      	uxtb	r3, r3
 8002278:	3301      	adds	r3, #1
 800227a:	069b      	lsls	r3, r3, #26
 800227c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d109      	bne.n	80022a0 <HAL_ADC_ConfigChannel+0x614>
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	0e9b      	lsrs	r3, r3, #26
 8002292:	3301      	adds	r3, #1
 8002294:	f003 031f 	and.w	r3, r3, #31
 8002298:	2101      	movs	r1, #1
 800229a:	fa01 f303 	lsl.w	r3, r1, r3
 800229e:	e017      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x644>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a6:	6a3b      	ldr	r3, [r7, #32]
 80022a8:	fa93 f3a3 	rbit	r3, r3
 80022ac:	61fb      	str	r3, [r7, #28]
  return result;
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d101      	bne.n	80022bc <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80022b8:	2320      	movs	r3, #32
 80022ba:	e003      	b.n	80022c4 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	fab3 f383 	clz	r3, r3
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	3301      	adds	r3, #1
 80022c6:	f003 031f 	and.w	r3, r3, #31
 80022ca:	2101      	movs	r1, #1
 80022cc:	fa01 f303 	lsl.w	r3, r1, r3
 80022d0:	ea42 0103 	orr.w	r1, r2, r3
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d10d      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x670>
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	0e9b      	lsrs	r3, r3, #26
 80022e6:	3301      	adds	r3, #1
 80022e8:	f003 021f 	and.w	r2, r3, #31
 80022ec:	4613      	mov	r3, r2
 80022ee:	005b      	lsls	r3, r3, #1
 80022f0:	4413      	add	r3, r2
 80022f2:	3b1e      	subs	r3, #30
 80022f4:	051b      	lsls	r3, r3, #20
 80022f6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022fa:	e01b      	b.n	8002334 <HAL_ADC_ConfigChannel+0x6a8>
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	613b      	str	r3, [r7, #16]
  return result;
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800230e:	69bb      	ldr	r3, [r7, #24]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002314:	2320      	movs	r3, #32
 8002316:	e003      	b.n	8002320 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	fab3 f383 	clz	r3, r3
 800231e:	b2db      	uxtb	r3, r3
 8002320:	3301      	adds	r3, #1
 8002322:	f003 021f 	and.w	r2, r3, #31
 8002326:	4613      	mov	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	4413      	add	r3, r2
 800232c:	3b1e      	subs	r3, #30
 800232e:	051b      	lsls	r3, r3, #20
 8002330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002334:	430b      	orrs	r3, r1
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	6892      	ldr	r2, [r2, #8]
 800233a:	4619      	mov	r1, r3
 800233c:	f7ff fa08 	bl	8001750 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	4b09      	ldr	r3, [pc, #36]	; (800236c <HAL_ADC_ConfigChannel+0x6e0>)
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	f000 80be 	beq.w	80024ca <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002356:	d004      	beq.n	8002362 <HAL_ADC_ConfigChannel+0x6d6>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_ADC_ConfigChannel+0x6e4>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10a      	bne.n	8002378 <HAL_ADC_ConfigChannel+0x6ec>
 8002362:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_ADC_ConfigChannel+0x6e8>)
 8002364:	e009      	b.n	800237a <HAL_ADC_ConfigChannel+0x6ee>
 8002366:	bf00      	nop
 8002368:	407f0000 	.word	0x407f0000
 800236c:	80080000 	.word	0x80080000
 8002370:	50000100 	.word	0x50000100
 8002374:	50000300 	.word	0x50000300
 8002378:	4b59      	ldr	r3, [pc, #356]	; (80024e0 <HAL_ADC_ConfigChannel+0x854>)
 800237a:	4618      	mov	r0, r3
 800237c:	f7ff f910 	bl	80015a0 <LL_ADC_GetCommonPathInternalCh>
 8002380:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a56      	ldr	r2, [pc, #344]	; (80024e4 <HAL_ADC_ConfigChannel+0x858>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d004      	beq.n	8002398 <HAL_ADC_ConfigChannel+0x70c>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	4a55      	ldr	r2, [pc, #340]	; (80024e8 <HAL_ADC_ConfigChannel+0x85c>)
 8002394:	4293      	cmp	r3, r2
 8002396:	d13a      	bne.n	800240e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002398:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800239c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d134      	bne.n	800240e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ac:	d005      	beq.n	80023ba <HAL_ADC_ConfigChannel+0x72e>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a4e      	ldr	r2, [pc, #312]	; (80024ec <HAL_ADC_ConfigChannel+0x860>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	f040 8085 	bne.w	80024c4 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023c2:	d004      	beq.n	80023ce <HAL_ADC_ConfigChannel+0x742>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a49      	ldr	r2, [pc, #292]	; (80024f0 <HAL_ADC_ConfigChannel+0x864>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_ADC_ConfigChannel+0x746>
 80023ce:	4a49      	ldr	r2, [pc, #292]	; (80024f4 <HAL_ADC_ConfigChannel+0x868>)
 80023d0:	e000      	b.n	80023d4 <HAL_ADC_ConfigChannel+0x748>
 80023d2:	4a43      	ldr	r2, [pc, #268]	; (80024e0 <HAL_ADC_ConfigChannel+0x854>)
 80023d4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80023d8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023dc:	4619      	mov	r1, r3
 80023de:	4610      	mov	r0, r2
 80023e0:	f7ff f8cb 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80023e4:	4b44      	ldr	r3, [pc, #272]	; (80024f8 <HAL_ADC_ConfigChannel+0x86c>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	099b      	lsrs	r3, r3, #6
 80023ea:	4a44      	ldr	r2, [pc, #272]	; (80024fc <HAL_ADC_ConfigChannel+0x870>)
 80023ec:	fba2 2303 	umull	r2, r3, r2, r3
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	1c5a      	adds	r2, r3, #1
 80023f4:	4613      	mov	r3, r2
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4413      	add	r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80023fe:	e002      	b.n	8002406 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	3b01      	subs	r3, #1
 8002404:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2b00      	cmp	r3, #0
 800240a:	d1f9      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800240c:	e05a      	b.n	80024c4 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4a3b      	ldr	r2, [pc, #236]	; (8002500 <HAL_ADC_ConfigChannel+0x874>)
 8002414:	4293      	cmp	r3, r2
 8002416:	d125      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x7d8>
 8002418:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800241c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11f      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a31      	ldr	r2, [pc, #196]	; (80024f0 <HAL_ADC_ConfigChannel+0x864>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d104      	bne.n	8002438 <HAL_ADC_ConfigChannel+0x7ac>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a34      	ldr	r2, [pc, #208]	; (8002504 <HAL_ADC_ConfigChannel+0x878>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d047      	beq.n	80024c8 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002440:	d004      	beq.n	800244c <HAL_ADC_ConfigChannel+0x7c0>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a2a      	ldr	r2, [pc, #168]	; (80024f0 <HAL_ADC_ConfigChannel+0x864>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x7c4>
 800244c:	4a29      	ldr	r2, [pc, #164]	; (80024f4 <HAL_ADC_ConfigChannel+0x868>)
 800244e:	e000      	b.n	8002452 <HAL_ADC_ConfigChannel+0x7c6>
 8002450:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <HAL_ADC_ConfigChannel+0x854>)
 8002452:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002456:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800245a:	4619      	mov	r1, r3
 800245c:	4610      	mov	r0, r2
 800245e:	f7ff f88c 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002462:	e031      	b.n	80024c8 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a27      	ldr	r2, [pc, #156]	; (8002508 <HAL_ADC_ConfigChannel+0x87c>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d12d      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800246e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d127      	bne.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1c      	ldr	r2, [pc, #112]	; (80024f0 <HAL_ADC_ConfigChannel+0x864>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d022      	beq.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800248c:	d004      	beq.n	8002498 <HAL_ADC_ConfigChannel+0x80c>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a17      	ldr	r2, [pc, #92]	; (80024f0 <HAL_ADC_ConfigChannel+0x864>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d101      	bne.n	800249c <HAL_ADC_ConfigChannel+0x810>
 8002498:	4a16      	ldr	r2, [pc, #88]	; (80024f4 <HAL_ADC_ConfigChannel+0x868>)
 800249a:	e000      	b.n	800249e <HAL_ADC_ConfigChannel+0x812>
 800249c:	4a10      	ldr	r2, [pc, #64]	; (80024e0 <HAL_ADC_ConfigChannel+0x854>)
 800249e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80024a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024a6:	4619      	mov	r1, r3
 80024a8:	4610      	mov	r0, r2
 80024aa:	f7ff f866 	bl	800157a <LL_ADC_SetCommonPathInternalCh>
 80024ae:	e00c      	b.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b4:	f043 0220 	orr.w	r2, r3, #32
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80024bc:	2301      	movs	r3, #1
 80024be:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80024c2:	e002      	b.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024c4:	bf00      	nop
 80024c6:	e000      	b.n	80024ca <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024c8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80024d2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80024d6:	4618      	mov	r0, r3
 80024d8:	37d8      	adds	r7, #216	; 0xd8
 80024da:	46bd      	mov	sp, r7
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	50000700 	.word	0x50000700
 80024e4:	c3210000 	.word	0xc3210000
 80024e8:	90c00010 	.word	0x90c00010
 80024ec:	50000600 	.word	0x50000600
 80024f0:	50000100 	.word	0x50000100
 80024f4:	50000300 	.word	0x50000300
 80024f8:	20000000 	.word	0x20000000
 80024fc:	053e2d63 	.word	0x053e2d63
 8002500:	c7520000 	.word	0xc7520000
 8002504:	50000500 	.word	0x50000500
 8002508:	cb840000 	.word	0xcb840000

0800250c <LL_ADC_IsEnabled>:
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <LL_ADC_IsEnabled+0x18>
 8002520:	2301      	movs	r3, #1
 8002522:	e000      	b.n	8002526 <LL_ADC_IsEnabled+0x1a>
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <LL_ADC_REG_IsConversionOngoing>:
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b04      	cmp	r3, #4
 8002544:	d101      	bne.n	800254a <LL_ADC_REG_IsConversionOngoing+0x18>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b0a1      	sub	sp, #132	; 0x84
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
 8002560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002562:	2300      	movs	r3, #0
 8002564:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002572:	2302      	movs	r3, #2
 8002574:	e0e7      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 800257e:	2300      	movs	r3, #0
 8002580:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002582:	2300      	movs	r3, #0
 8002584:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800258e:	d102      	bne.n	8002596 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002590:	4b6f      	ldr	r3, [pc, #444]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	e009      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a6e      	ldr	r2, [pc, #440]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d102      	bne.n	80025a6 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80025a0:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80025a2:	60bb      	str	r3, [r7, #8]
 80025a4:	e001      	b.n	80025aa <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80025a6:	2300      	movs	r3, #0
 80025a8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	f043 0220 	orr.w	r2, r3, #32
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e0be      	b.n	8002746 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffb1 	bl	8002532 <LL_ADC_REG_IsConversionOngoing>
 80025d0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7ff ffab 	bl	8002532 <LL_ADC_REG_IsConversionOngoing>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	f040 80a0 	bne.w	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80025e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	f040 809c 	bne.w	8002724 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025f4:	d004      	beq.n	8002600 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a55      	ldr	r2, [pc, #340]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d101      	bne.n	8002604 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002600:	4b56      	ldr	r3, [pc, #344]	; (800275c <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002602:	e000      	b.n	8002606 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002604:	4b56      	ldr	r3, [pc, #344]	; (8002760 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002606:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d04b      	beq.n	80026a8 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002622:	035b      	lsls	r3, r3, #13
 8002624:	430b      	orrs	r3, r1
 8002626:	431a      	orrs	r2, r3
 8002628:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800262a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002634:	d004      	beq.n	8002640 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a45      	ldr	r2, [pc, #276]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d10f      	bne.n	8002660 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002640:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002644:	f7ff ff62 	bl	800250c <LL_ADC_IsEnabled>
 8002648:	4604      	mov	r4, r0
 800264a:	4841      	ldr	r0, [pc, #260]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800264c:	f7ff ff5e 	bl	800250c <LL_ADC_IsEnabled>
 8002650:	4603      	mov	r3, r0
 8002652:	4323      	orrs	r3, r4
 8002654:	2b00      	cmp	r3, #0
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	e012      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002660:	483c      	ldr	r0, [pc, #240]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002662:	f7ff ff53 	bl	800250c <LL_ADC_IsEnabled>
 8002666:	4604      	mov	r4, r0
 8002668:	483b      	ldr	r0, [pc, #236]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800266a:	f7ff ff4f 	bl	800250c <LL_ADC_IsEnabled>
 800266e:	4603      	mov	r3, r0
 8002670:	431c      	orrs	r4, r3
 8002672:	483c      	ldr	r0, [pc, #240]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002674:	f7ff ff4a 	bl	800250c <LL_ADC_IsEnabled>
 8002678:	4603      	mov	r3, r0
 800267a:	4323      	orrs	r3, r4
 800267c:	2b00      	cmp	r3, #0
 800267e:	bf0c      	ite	eq
 8002680:	2301      	moveq	r3, #1
 8002682:	2300      	movne	r3, #0
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d056      	beq.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800268a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002692:	f023 030f 	bic.w	r3, r3, #15
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	6811      	ldr	r1, [r2, #0]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	6892      	ldr	r2, [r2, #8]
 800269e:	430a      	orrs	r2, r1
 80026a0:	431a      	orrs	r2, r3
 80026a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026a4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80026a6:	e047      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80026a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80026b2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80026bc:	d004      	beq.n	80026c8 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a23      	ldr	r2, [pc, #140]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d10f      	bne.n	80026e8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80026c8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80026cc:	f7ff ff1e 	bl	800250c <LL_ADC_IsEnabled>
 80026d0:	4604      	mov	r4, r0
 80026d2:	481f      	ldr	r0, [pc, #124]	; (8002750 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80026d4:	f7ff ff1a 	bl	800250c <LL_ADC_IsEnabled>
 80026d8:	4603      	mov	r3, r0
 80026da:	4323      	orrs	r3, r4
 80026dc:	2b00      	cmp	r3, #0
 80026de:	bf0c      	ite	eq
 80026e0:	2301      	moveq	r3, #1
 80026e2:	2300      	movne	r3, #0
 80026e4:	b2db      	uxtb	r3, r3
 80026e6:	e012      	b.n	800270e <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 80026e8:	481a      	ldr	r0, [pc, #104]	; (8002754 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80026ea:	f7ff ff0f 	bl	800250c <LL_ADC_IsEnabled>
 80026ee:	4604      	mov	r4, r0
 80026f0:	4819      	ldr	r0, [pc, #100]	; (8002758 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80026f2:	f7ff ff0b 	bl	800250c <LL_ADC_IsEnabled>
 80026f6:	4603      	mov	r3, r0
 80026f8:	431c      	orrs	r4, r3
 80026fa:	481a      	ldr	r0, [pc, #104]	; (8002764 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80026fc:	f7ff ff06 	bl	800250c <LL_ADC_IsEnabled>
 8002700:	4603      	mov	r3, r0
 8002702:	4323      	orrs	r3, r4
 8002704:	2b00      	cmp	r3, #0
 8002706:	bf0c      	ite	eq
 8002708:	2301      	moveq	r3, #1
 800270a:	2300      	movne	r3, #0
 800270c:	b2db      	uxtb	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d012      	beq.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002712:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800271a:	f023 030f 	bic.w	r3, r3, #15
 800271e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002720:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002722:	e009      	b.n	8002738 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	f043 0220 	orr.w	r2, r3, #32
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002736:	e000      	b.n	800273a <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002738:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002742:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002746:	4618      	mov	r0, r3
 8002748:	3784      	adds	r7, #132	; 0x84
 800274a:	46bd      	mov	sp, r7
 800274c:	bd90      	pop	{r4, r7, pc}
 800274e:	bf00      	nop
 8002750:	50000100 	.word	0x50000100
 8002754:	50000400 	.word	0x50000400
 8002758:	50000500 	.word	0x50000500
 800275c:	50000300 	.word	0x50000300
 8002760:	50000700 	.word	0x50000700
 8002764:	50000600 	.word	0x50000600

08002768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002768:	b480      	push	{r7}
 800276a:	b085      	sub	sp, #20
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002778:	4b0c      	ldr	r3, [pc, #48]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800277e:	68ba      	ldr	r2, [r7, #8]
 8002780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002784:	4013      	ands	r3, r2
 8002786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800278c:	68bb      	ldr	r3, [r7, #8]
 800278e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279a:	4a04      	ldr	r2, [pc, #16]	; (80027ac <__NVIC_SetPriorityGrouping+0x44>)
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	60d3      	str	r3, [r2, #12]
}
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr
 80027ac:	e000ed00 	.word	0xe000ed00

080027b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b0:	b480      	push	{r7}
 80027b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b4:	4b04      	ldr	r3, [pc, #16]	; (80027c8 <__NVIC_GetPriorityGrouping+0x18>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	0a1b      	lsrs	r3, r3, #8
 80027ba:	f003 0307 	and.w	r3, r3, #7
}
 80027be:	4618      	mov	r0, r3
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr
 80027c8:	e000ed00 	.word	0xe000ed00

080027cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	db0b      	blt.n	80027f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027de:	79fb      	ldrb	r3, [r7, #7]
 80027e0:	f003 021f 	and.w	r2, r3, #31
 80027e4:	4907      	ldr	r1, [pc, #28]	; (8002804 <__NVIC_EnableIRQ+0x38>)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	095b      	lsrs	r3, r3, #5
 80027ec:	2001      	movs	r0, #1
 80027ee:	fa00 f202 	lsl.w	r2, r0, r2
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr
 8002802:	bf00      	nop
 8002804:	e000e100 	.word	0xe000e100

08002808 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002808:	b480      	push	{r7}
 800280a:	b083      	sub	sp, #12
 800280c:	af00      	add	r7, sp, #0
 800280e:	4603      	mov	r3, r0
 8002810:	6039      	str	r1, [r7, #0]
 8002812:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002814:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002818:	2b00      	cmp	r3, #0
 800281a:	db0a      	blt.n	8002832 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	490c      	ldr	r1, [pc, #48]	; (8002854 <__NVIC_SetPriority+0x4c>)
 8002822:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002826:	0112      	lsls	r2, r2, #4
 8002828:	b2d2      	uxtb	r2, r2
 800282a:	440b      	add	r3, r1
 800282c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002830:	e00a      	b.n	8002848 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	b2da      	uxtb	r2, r3
 8002836:	4908      	ldr	r1, [pc, #32]	; (8002858 <__NVIC_SetPriority+0x50>)
 8002838:	79fb      	ldrb	r3, [r7, #7]
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	3b04      	subs	r3, #4
 8002840:	0112      	lsls	r2, r2, #4
 8002842:	b2d2      	uxtb	r2, r2
 8002844:	440b      	add	r3, r1
 8002846:	761a      	strb	r2, [r3, #24]
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	e000e100 	.word	0xe000e100
 8002858:	e000ed00 	.word	0xe000ed00

0800285c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	60b9      	str	r1, [r7, #8]
 8002866:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f003 0307 	and.w	r3, r3, #7
 800286e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	f1c3 0307 	rsb	r3, r3, #7
 8002876:	2b04      	cmp	r3, #4
 8002878:	bf28      	it	cs
 800287a:	2304      	movcs	r3, #4
 800287c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	3304      	adds	r3, #4
 8002882:	2b06      	cmp	r3, #6
 8002884:	d902      	bls.n	800288c <NVIC_EncodePriority+0x30>
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	3b03      	subs	r3, #3
 800288a:	e000      	b.n	800288e <NVIC_EncodePriority+0x32>
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002890:	f04f 32ff 	mov.w	r2, #4294967295
 8002894:	69bb      	ldr	r3, [r7, #24]
 8002896:	fa02 f303 	lsl.w	r3, r2, r3
 800289a:	43da      	mvns	r2, r3
 800289c:	68bb      	ldr	r3, [r7, #8]
 800289e:	401a      	ands	r2, r3
 80028a0:	697b      	ldr	r3, [r7, #20]
 80028a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a4:	f04f 31ff 	mov.w	r1, #4294967295
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	fa01 f303 	lsl.w	r3, r1, r3
 80028ae:	43d9      	mvns	r1, r3
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b4:	4313      	orrs	r3, r2
         );
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3724      	adds	r7, #36	; 0x24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr

080028c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c2:	b580      	push	{r7, lr}
 80028c4:	b082      	sub	sp, #8
 80028c6:	af00      	add	r7, sp, #0
 80028c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f7ff ff4c 	bl	8002768 <__NVIC_SetPriorityGrouping>
}
 80028d0:	bf00      	nop
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b086      	sub	sp, #24
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80028e6:	f7ff ff63 	bl	80027b0 <__NVIC_GetPriorityGrouping>
 80028ea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80028ec:	687a      	ldr	r2, [r7, #4]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6978      	ldr	r0, [r7, #20]
 80028f2:	f7ff ffb3 	bl	800285c <NVIC_EncodePriority>
 80028f6:	4602      	mov	r2, r0
 80028f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80028fc:	4611      	mov	r1, r2
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff ff82 	bl	8002808 <__NVIC_SetPriority>
}
 8002904:	bf00      	nop
 8002906:	3718      	adds	r7, #24
 8002908:	46bd      	mov	sp, r7
 800290a:	bd80      	pop	{r7, pc}

0800290c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff ff56 	bl	80027cc <__NVIC_EnableIRQ>
}
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002928:	b480      	push	{r7}
 800292a:	b085      	sub	sp, #20
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002930:	2300      	movs	r3, #0
 8002932:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800293a:	b2db      	uxtb	r3, r3
 800293c:	2b02      	cmp	r3, #2
 800293e:	d005      	beq.n	800294c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2204      	movs	r2, #4
 8002944:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	73fb      	strb	r3, [r7, #15]
 800294a:	e037      	b.n	80029bc <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f022 020e 	bic.w	r2, r2, #14
 800295a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002960:	681a      	ldr	r2, [r3, #0]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800296a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0201 	bic.w	r2, r2, #1
 800297a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f003 021f 	and.w	r2, r3, #31
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002988:	2101      	movs	r1, #1
 800298a:	fa01 f202 	lsl.w	r2, r1, r2
 800298e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002994:	687a      	ldr	r2, [r7, #4]
 8002996:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002998:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00c      	beq.n	80029bc <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80029b0:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80029ba:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2201      	movs	r2, #1
 80029c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	2200      	movs	r2, #0
 80029c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029ce:	4618      	mov	r0, r3
 80029d0:	3714      	adds	r7, #20
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr

080029da <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b084      	sub	sp, #16
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80029e2:	2300      	movs	r3, #0
 80029e4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d00d      	beq.n	8002a0e <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2204      	movs	r2, #4
 80029f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	73fb      	strb	r3, [r7, #15]
 8002a0c:	e047      	b.n	8002a9e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 020e 	bic.w	r2, r2, #14
 8002a1c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 0201 	bic.w	r2, r2, #1
 8002a2c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a3c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	f003 021f 	and.w	r2, r3, #31
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	fa01 f202 	lsl.w	r2, r1, r2
 8002a50:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002a5a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00c      	beq.n	8002a7e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002a72:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a78:	687a      	ldr	r2, [r7, #4]
 8002a7a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002a7c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d003      	beq.n	8002a9e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	4798      	blx	r3
    }
  }
  return status;
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3710      	adds	r7, #16
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}

08002aa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b087      	sub	sp, #28
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002ab6:	e15a      	b.n	8002d6e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	681a      	ldr	r2, [r3, #0]
 8002abc:	2101      	movs	r1, #1
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 814c 	beq.w	8002d68 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 0303 	and.w	r3, r3, #3
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d005      	beq.n	8002ae8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d130      	bne.n	8002b4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	005b      	lsls	r3, r3, #1
 8002af2:	2203      	movs	r2, #3
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43db      	mvns	r3, r3
 8002afa:	693a      	ldr	r2, [r7, #16]
 8002afc:	4013      	ands	r3, r2
 8002afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	68da      	ldr	r2, [r3, #12]
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002b1e:	2201      	movs	r2, #1
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	fa02 f303 	lsl.w	r3, r2, r3
 8002b26:	43db      	mvns	r3, r3
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	091b      	lsrs	r3, r3, #4
 8002b34:	f003 0201 	and.w	r2, r3, #1
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	2b03      	cmp	r3, #3
 8002b54:	d017      	beq.n	8002b86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	68db      	ldr	r3, [r3, #12]
 8002b5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	2203      	movs	r2, #3
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	43db      	mvns	r3, r3
 8002b68:	693a      	ldr	r2, [r7, #16]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	697b      	ldr	r3, [r7, #20]
 8002b74:	005b      	lsls	r3, r3, #1
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	f003 0303 	and.w	r3, r3, #3
 8002b8e:	2b02      	cmp	r3, #2
 8002b90:	d123      	bne.n	8002bda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	08da      	lsrs	r2, r3, #3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	3208      	adds	r2, #8
 8002b9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	220f      	movs	r2, #15
 8002baa:	fa02 f303 	lsl.w	r3, r2, r3
 8002bae:	43db      	mvns	r3, r3
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	691a      	ldr	r2, [r3, #16]
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f003 0307 	and.w	r3, r3, #7
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	08da      	lsrs	r2, r3, #3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3208      	adds	r2, #8
 8002bd4:	6939      	ldr	r1, [r7, #16]
 8002bd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	2203      	movs	r2, #3
 8002be6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bea:	43db      	mvns	r3, r3
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4013      	ands	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 0203 	and.w	r2, r3, #3
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	005b      	lsls	r3, r3, #1
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4313      	orrs	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	685b      	ldr	r3, [r3, #4]
 8002c12:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80a6 	beq.w	8002d68 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c1c:	4b5b      	ldr	r3, [pc, #364]	; (8002d8c <HAL_GPIO_Init+0x2e4>)
 8002c1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c20:	4a5a      	ldr	r2, [pc, #360]	; (8002d8c <HAL_GPIO_Init+0x2e4>)
 8002c22:	f043 0301 	orr.w	r3, r3, #1
 8002c26:	6613      	str	r3, [r2, #96]	; 0x60
 8002c28:	4b58      	ldr	r3, [pc, #352]	; (8002d8c <HAL_GPIO_Init+0x2e4>)
 8002c2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	60bb      	str	r3, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c34:	4a56      	ldr	r2, [pc, #344]	; (8002d90 <HAL_GPIO_Init+0x2e8>)
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	089b      	lsrs	r3, r3, #2
 8002c3a:	3302      	adds	r3, #2
 8002c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c40:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f003 0303 	and.w	r3, r3, #3
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	220f      	movs	r2, #15
 8002c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c50:	43db      	mvns	r3, r3
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	4013      	ands	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c5e:	d01f      	beq.n	8002ca0 <HAL_GPIO_Init+0x1f8>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	4a4c      	ldr	r2, [pc, #304]	; (8002d94 <HAL_GPIO_Init+0x2ec>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d019      	beq.n	8002c9c <HAL_GPIO_Init+0x1f4>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a4b      	ldr	r2, [pc, #300]	; (8002d98 <HAL_GPIO_Init+0x2f0>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d013      	beq.n	8002c98 <HAL_GPIO_Init+0x1f0>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	4a4a      	ldr	r2, [pc, #296]	; (8002d9c <HAL_GPIO_Init+0x2f4>)
 8002c74:	4293      	cmp	r3, r2
 8002c76:	d00d      	beq.n	8002c94 <HAL_GPIO_Init+0x1ec>
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a49      	ldr	r2, [pc, #292]	; (8002da0 <HAL_GPIO_Init+0x2f8>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d007      	beq.n	8002c90 <HAL_GPIO_Init+0x1e8>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a48      	ldr	r2, [pc, #288]	; (8002da4 <HAL_GPIO_Init+0x2fc>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d101      	bne.n	8002c8c <HAL_GPIO_Init+0x1e4>
 8002c88:	2305      	movs	r3, #5
 8002c8a:	e00a      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002c8c:	2306      	movs	r3, #6
 8002c8e:	e008      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002c90:	2304      	movs	r3, #4
 8002c92:	e006      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002c94:	2303      	movs	r3, #3
 8002c96:	e004      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002c98:	2302      	movs	r3, #2
 8002c9a:	e002      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	e000      	b.n	8002ca2 <HAL_GPIO_Init+0x1fa>
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	f002 0203 	and.w	r2, r2, #3
 8002ca8:	0092      	lsls	r2, r2, #2
 8002caa:	4093      	lsls	r3, r2
 8002cac:	693a      	ldr	r2, [r7, #16]
 8002cae:	4313      	orrs	r3, r2
 8002cb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cb2:	4937      	ldr	r1, [pc, #220]	; (8002d90 <HAL_GPIO_Init+0x2e8>)
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	089b      	lsrs	r3, r3, #2
 8002cb8:	3302      	adds	r3, #2
 8002cba:	693a      	ldr	r2, [r7, #16]
 8002cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002cc0:	4b39      	ldr	r3, [pc, #228]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	43db      	mvns	r3, r3
 8002cca:	693a      	ldr	r2, [r7, #16]
 8002ccc:	4013      	ands	r3, r2
 8002cce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d003      	beq.n	8002ce4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002ce4:	4a30      	ldr	r2, [pc, #192]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002cea:	4b2f      	ldr	r3, [pc, #188]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	43db      	mvns	r3, r3
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	685b      	ldr	r3, [r3, #4]
 8002cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002d06:	693a      	ldr	r2, [r7, #16]
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002d0e:	4a26      	ldr	r2, [pc, #152]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002d14:	4b24      	ldr	r3, [pc, #144]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002d16:	685b      	ldr	r3, [r3, #4]
 8002d18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	43db      	mvns	r3, r3
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	4013      	ands	r3, r2
 8002d22:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	685b      	ldr	r3, [r3, #4]
 8002d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8002d30:	693a      	ldr	r2, [r7, #16]
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002d38:	4a1b      	ldr	r2, [pc, #108]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002d3e:	4b1a      	ldr	r3, [pc, #104]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d003      	beq.n	8002d62 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8002d5a:	693a      	ldr	r2, [r7, #16]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002d62:	4a11      	ldr	r2, [pc, #68]	; (8002da8 <HAL_GPIO_Init+0x300>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002d68:	697b      	ldr	r3, [r7, #20]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f47f ae9d 	bne.w	8002ab8 <HAL_GPIO_Init+0x10>
  }
}
 8002d7e:	bf00      	nop
 8002d80:	bf00      	nop
 8002d82:	371c      	adds	r7, #28
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40010000 	.word	0x40010000
 8002d94:	48000400 	.word	0x48000400
 8002d98:	48000800 	.word	0x48000800
 8002d9c:	48000c00 	.word	0x48000c00
 8002da0:	48001000 	.word	0x48001000
 8002da4:	48001400 	.word	0x48001400
 8002da8:	40010400 	.word	0x40010400

08002dac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
 8002db8:	4613      	mov	r3, r2
 8002dba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002dbc:	787b      	ldrb	r3, [r7, #1]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d003      	beq.n	8002dca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dc2:	887a      	ldrh	r2, [r7, #2]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc8:	e002      	b.n	8002dd0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dca:	887a      	ldrh	r2, [r7, #2]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	4603      	mov	r3, r0
 8002de4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de8:	695a      	ldr	r2, [r3, #20]
 8002dea:	88fb      	ldrh	r3, [r7, #6]
 8002dec:	4013      	ands	r3, r2
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002df2:	4a05      	ldr	r2, [pc, #20]	; (8002e08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f806 	bl	8002e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002e00:	bf00      	nop
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40010400 	.word	0x40010400

08002e0c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	4603      	mov	r3, r0
 8002e14:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e16:	bf00      	nop
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b085      	sub	sp, #20
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d141      	bne.n	8002eb6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e32:	4b4b      	ldr	r3, [pc, #300]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002e3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e3e:	d131      	bne.n	8002ea4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002e40:	4b47      	ldr	r3, [pc, #284]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e46:	4a46      	ldr	r2, [pc, #280]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002e50:	4b43      	ldr	r3, [pc, #268]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002e58:	4a41      	ldr	r2, [pc, #260]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002e60:	4b40      	ldr	r3, [pc, #256]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	2232      	movs	r2, #50	; 0x32
 8002e66:	fb02 f303 	mul.w	r3, r2, r3
 8002e6a:	4a3f      	ldr	r2, [pc, #252]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002e6c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e70:	0c9b      	lsrs	r3, r3, #18
 8002e72:	3301      	adds	r3, #1
 8002e74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e76:	e002      	b.n	8002e7e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002e7e:	4b38      	ldr	r3, [pc, #224]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e80:	695b      	ldr	r3, [r3, #20]
 8002e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e8a:	d102      	bne.n	8002e92 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d1f2      	bne.n	8002e78 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002e92:	4b33      	ldr	r3, [pc, #204]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e9e:	d158      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e057      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ea4:	4b2e      	ldr	r3, [pc, #184]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eaa:	4a2d      	ldr	r2, [pc, #180]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002eac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002eb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002eb4:	e04d      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ebc:	d141      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ebe:	4b28      	ldr	r3, [pc, #160]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ec6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eca:	d131      	bne.n	8002f30 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ecc:	4b24      	ldr	r3, [pc, #144]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ed2:	4a23      	ldr	r2, [pc, #140]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ed4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002edc:	4b20      	ldr	r3, [pc, #128]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ee4:	4a1e      	ldr	r2, [pc, #120]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002eea:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002eec:	4b1d      	ldr	r3, [pc, #116]	; (8002f64 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2232      	movs	r2, #50	; 0x32
 8002ef2:	fb02 f303 	mul.w	r3, r2, r3
 8002ef6:	4a1c      	ldr	r2, [pc, #112]	; (8002f68 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002ef8:	fba2 2303 	umull	r2, r3, r2, r3
 8002efc:	0c9b      	lsrs	r3, r3, #18
 8002efe:	3301      	adds	r3, #1
 8002f00:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f02:	e002      	b.n	8002f0a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3b01      	subs	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f0a:	4b15      	ldr	r3, [pc, #84]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0c:	695b      	ldr	r3, [r3, #20]
 8002f0e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f12:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f16:	d102      	bne.n	8002f1e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1f2      	bne.n	8002f04 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f2a:	d112      	bne.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e011      	b.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f32:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f36:	4a0a      	ldr	r2, [pc, #40]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f3c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f40:	e007      	b.n	8002f52 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f4c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002f50:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr
 8002f60:	40007000 	.word	0x40007000
 8002f64:	20000000 	.word	0x20000000
 8002f68:	431bde83 	.word	0x431bde83

08002f6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	4a04      	ldr	r2, [pc, #16]	; (8002f88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002f76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f7a:	6093      	str	r3, [r2, #8]
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	40007000 	.word	0x40007000

08002f8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b088      	sub	sp, #32
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e306      	b.n	80035ac <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d075      	beq.n	8003096 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002faa:	4b97      	ldr	r3, [pc, #604]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8002fac:	689b      	ldr	r3, [r3, #8]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fb4:	4b94      	ldr	r3, [pc, #592]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0303 	and.w	r3, r3, #3
 8002fbc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b0c      	cmp	r3, #12
 8002fc2:	d102      	bne.n	8002fca <HAL_RCC_OscConfig+0x3e>
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	2b03      	cmp	r3, #3
 8002fc8:	d002      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x44>
 8002fca:	69bb      	ldr	r3, [r7, #24]
 8002fcc:	2b08      	cmp	r3, #8
 8002fce:	d10b      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	4b8d      	ldr	r3, [pc, #564]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d05b      	beq.n	8003094 <HAL_RCC_OscConfig+0x108>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d157      	bne.n	8003094 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e2e1      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff0:	d106      	bne.n	8003000 <HAL_RCC_OscConfig+0x74>
 8002ff2:	4b85      	ldr	r3, [pc, #532]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a84      	ldr	r2, [pc, #528]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8002ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01d      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003008:	d10c      	bne.n	8003024 <HAL_RCC_OscConfig+0x98>
 800300a:	4b7f      	ldr	r3, [pc, #508]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4a7e      	ldr	r2, [pc, #504]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003014:	6013      	str	r3, [r2, #0]
 8003016:	4b7c      	ldr	r3, [pc, #496]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a7b      	ldr	r2, [pc, #492]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 800301c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e00b      	b.n	800303c <HAL_RCC_OscConfig+0xb0>
 8003024:	4b78      	ldr	r3, [pc, #480]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a77      	ldr	r2, [pc, #476]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 800302a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	4b75      	ldr	r3, [pc, #468]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a74      	ldr	r2, [pc, #464]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003036:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800303a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d013      	beq.n	800306c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003044:	f7fe fa58 	bl	80014f8 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800304c:	f7fe fa54 	bl	80014f8 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b64      	cmp	r3, #100	; 0x64
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e2a6      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d0f0      	beq.n	800304c <HAL_RCC_OscConfig+0xc0>
 800306a:	e014      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800306c:	f7fe fa44 	bl	80014f8 <HAL_GetTick>
 8003070:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003072:	e008      	b.n	8003086 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003074:	f7fe fa40 	bl	80014f8 <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	2b64      	cmp	r3, #100	; 0x64
 8003080:	d901      	bls.n	8003086 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e292      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003086:	4b60      	ldr	r3, [pc, #384]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1f0      	bne.n	8003074 <HAL_RCC_OscConfig+0xe8>
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d075      	beq.n	800318e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030a2:	4b59      	ldr	r3, [pc, #356]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 030c 	and.w	r3, r3, #12
 80030aa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80030ac:	4b56      	ldr	r3, [pc, #344]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	f003 0303 	and.w	r3, r3, #3
 80030b4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0c      	cmp	r3, #12
 80030ba:	d102      	bne.n	80030c2 <HAL_RCC_OscConfig+0x136>
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b02      	cmp	r3, #2
 80030c0:	d002      	beq.n	80030c8 <HAL_RCC_OscConfig+0x13c>
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	2b04      	cmp	r3, #4
 80030c6:	d11f      	bne.n	8003108 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030c8:	4b4f      	ldr	r3, [pc, #316]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d005      	beq.n	80030e0 <HAL_RCC_OscConfig+0x154>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d101      	bne.n	80030e0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e265      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030e0:	4b49      	ldr	r3, [pc, #292]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	691b      	ldr	r3, [r3, #16]
 80030ec:	061b      	lsls	r3, r3, #24
 80030ee:	4946      	ldr	r1, [pc, #280]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80030f4:	4b45      	ldr	r3, [pc, #276]	; (800320c <HAL_RCC_OscConfig+0x280>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f7fd fdc9 	bl	8000c90 <HAL_InitTick>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d043      	beq.n	800318c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e251      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	68db      	ldr	r3, [r3, #12]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d023      	beq.n	8003158 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003110:	4b3d      	ldr	r3, [pc, #244]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003116:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800311a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fe f9ec 	bl	80014f8 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003124:	f7fe f9e8 	bl	80014f8 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b02      	cmp	r3, #2
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e23a      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003136:	4b34      	ldr	r3, [pc, #208]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b31      	ldr	r3, [pc, #196]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	061b      	lsls	r3, r3, #24
 8003150:	492d      	ldr	r1, [pc, #180]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003152:	4313      	orrs	r3, r2
 8003154:	604b      	str	r3, [r1, #4]
 8003156:	e01a      	b.n	800318e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003158:	4b2b      	ldr	r3, [pc, #172]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a2a      	ldr	r2, [pc, #168]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 800315e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003162:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003164:	f7fe f9c8 	bl	80014f8 <HAL_GetTick>
 8003168:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800316a:	e008      	b.n	800317e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800316c:	f7fe f9c4 	bl	80014f8 <HAL_GetTick>
 8003170:	4602      	mov	r2, r0
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	1ad3      	subs	r3, r2, r3
 8003176:	2b02      	cmp	r3, #2
 8003178:	d901      	bls.n	800317e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800317a:	2303      	movs	r3, #3
 800317c:	e216      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800317e:	4b22      	ldr	r3, [pc, #136]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003186:	2b00      	cmp	r3, #0
 8003188:	d1f0      	bne.n	800316c <HAL_RCC_OscConfig+0x1e0>
 800318a:	e000      	b.n	800318e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800318c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0308 	and.w	r3, r3, #8
 8003196:	2b00      	cmp	r3, #0
 8003198:	d041      	beq.n	800321e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d01c      	beq.n	80031dc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031a2:	4b19      	ldr	r3, [pc, #100]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031a8:	4a17      	ldr	r2, [pc, #92]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031aa:	f043 0301 	orr.w	r3, r3, #1
 80031ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b2:	f7fe f9a1 	bl	80014f8 <HAL_GetTick>
 80031b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031b8:	e008      	b.n	80031cc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031ba:	f7fe f99d 	bl	80014f8 <HAL_GetTick>
 80031be:	4602      	mov	r2, r0
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	1ad3      	subs	r3, r2, r3
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d901      	bls.n	80031cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e1ef      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80031cc:	4b0e      	ldr	r3, [pc, #56]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d0ef      	beq.n	80031ba <HAL_RCC_OscConfig+0x22e>
 80031da:	e020      	b.n	800321e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80031e2:	4a09      	ldr	r2, [pc, #36]	; (8003208 <HAL_RCC_OscConfig+0x27c>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ec:	f7fe f984 	bl	80014f8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80031f2:	e00d      	b.n	8003210 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f4:	f7fe f980 	bl	80014f8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d906      	bls.n	8003210 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1d2      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000
 800320c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003210:	4b8c      	ldr	r3, [pc, #560]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003212:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d1ea      	bne.n	80031f4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0304 	and.w	r3, r3, #4
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80a6 	beq.w	8003378 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800322c:	2300      	movs	r3, #0
 800322e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003230:	4b84      	ldr	r3, [pc, #528]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d101      	bne.n	8003240 <HAL_RCC_OscConfig+0x2b4>
 800323c:	2301      	movs	r3, #1
 800323e:	e000      	b.n	8003242 <HAL_RCC_OscConfig+0x2b6>
 8003240:	2300      	movs	r3, #0
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00d      	beq.n	8003262 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003246:	4b7f      	ldr	r3, [pc, #508]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800324a:	4a7e      	ldr	r2, [pc, #504]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800324c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003250:	6593      	str	r3, [r2, #88]	; 0x58
 8003252:	4b7c      	ldr	r3, [pc, #496]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800325a:	60fb      	str	r3, [r7, #12]
 800325c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800325e:	2301      	movs	r3, #1
 8003260:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003262:	4b79      	ldr	r3, [pc, #484]	; (8003448 <HAL_RCC_OscConfig+0x4bc>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326a:	2b00      	cmp	r3, #0
 800326c:	d118      	bne.n	80032a0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800326e:	4b76      	ldr	r3, [pc, #472]	; (8003448 <HAL_RCC_OscConfig+0x4bc>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a75      	ldr	r2, [pc, #468]	; (8003448 <HAL_RCC_OscConfig+0x4bc>)
 8003274:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003278:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800327a:	f7fe f93d 	bl	80014f8 <HAL_GetTick>
 800327e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003280:	e008      	b.n	8003294 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003282:	f7fe f939 	bl	80014f8 <HAL_GetTick>
 8003286:	4602      	mov	r2, r0
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	2b02      	cmp	r3, #2
 800328e:	d901      	bls.n	8003294 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	e18b      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003294:	4b6c      	ldr	r3, [pc, #432]	; (8003448 <HAL_RCC_OscConfig+0x4bc>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800329c:	2b00      	cmp	r3, #0
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	2b01      	cmp	r3, #1
 80032a6:	d108      	bne.n	80032ba <HAL_RCC_OscConfig+0x32e>
 80032a8:	4b66      	ldr	r3, [pc, #408]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ae:	4a65      	ldr	r2, [pc, #404]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032b8:	e024      	b.n	8003304 <HAL_RCC_OscConfig+0x378>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	2b05      	cmp	r3, #5
 80032c0:	d110      	bne.n	80032e4 <HAL_RCC_OscConfig+0x358>
 80032c2:	4b60      	ldr	r3, [pc, #384]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032c8:	4a5e      	ldr	r2, [pc, #376]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032ca:	f043 0304 	orr.w	r3, r3, #4
 80032ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032d2:	4b5c      	ldr	r3, [pc, #368]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032d8:	4a5a      	ldr	r2, [pc, #360]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032e2:	e00f      	b.n	8003304 <HAL_RCC_OscConfig+0x378>
 80032e4:	4b57      	ldr	r3, [pc, #348]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ea:	4a56      	ldr	r2, [pc, #344]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80032f4:	4b53      	ldr	r3, [pc, #332]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032fa:	4a52      	ldr	r2, [pc, #328]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80032fc:	f023 0304 	bic.w	r3, r3, #4
 8003300:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d016      	beq.n	800333a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330c:	f7fe f8f4 	bl	80014f8 <HAL_GetTick>
 8003310:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	e00a      	b.n	800332a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003314:	f7fe f8f0 	bl	80014f8 <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003322:	4293      	cmp	r3, r2
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e140      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800332a:	4b46      	ldr	r3, [pc, #280]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800332c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003330:	f003 0302 	and.w	r3, r3, #2
 8003334:	2b00      	cmp	r3, #0
 8003336:	d0ed      	beq.n	8003314 <HAL_RCC_OscConfig+0x388>
 8003338:	e015      	b.n	8003366 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800333a:	f7fe f8dd 	bl	80014f8 <HAL_GetTick>
 800333e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003340:	e00a      	b.n	8003358 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fe f8d9 	bl	80014f8 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d901      	bls.n	8003358 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	e129      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003358:	4b3a      	ldr	r3, [pc, #232]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800335a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800335e:	f003 0302 	and.w	r3, r3, #2
 8003362:	2b00      	cmp	r3, #0
 8003364:	d1ed      	bne.n	8003342 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003366:	7ffb      	ldrb	r3, [r7, #31]
 8003368:	2b01      	cmp	r3, #1
 800336a:	d105      	bne.n	8003378 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800336c:	4b35      	ldr	r3, [pc, #212]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800336e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003370:	4a34      	ldr	r2, [pc, #208]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003372:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003376:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f003 0320 	and.w	r3, r3, #32
 8003380:	2b00      	cmp	r3, #0
 8003382:	d03c      	beq.n	80033fe <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01c      	beq.n	80033c6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800338c:	4b2d      	ldr	r3, [pc, #180]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800338e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003392:	4a2c      	ldr	r2, [pc, #176]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003394:	f043 0301 	orr.w	r3, r3, #1
 8003398:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800339c:	f7fe f8ac 	bl	80014f8 <HAL_GetTick>
 80033a0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033a2:	e008      	b.n	80033b6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033a4:	f7fe f8a8 	bl	80014f8 <HAL_GetTick>
 80033a8:	4602      	mov	r2, r0
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	1ad3      	subs	r3, r2, r3
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d901      	bls.n	80033b6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80033b2:	2303      	movs	r3, #3
 80033b4:	e0fa      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80033b6:	4b23      	ldr	r3, [pc, #140]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80033b8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0ef      	beq.n	80033a4 <HAL_RCC_OscConfig+0x418>
 80033c4:	e01b      	b.n	80033fe <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80033c6:	4b1f      	ldr	r3, [pc, #124]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80033c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033cc:	4a1d      	ldr	r2, [pc, #116]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033d6:	f7fe f88f 	bl	80014f8 <HAL_GetTick>
 80033da:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033dc:	e008      	b.n	80033f0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80033de:	f7fe f88b 	bl	80014f8 <HAL_GetTick>
 80033e2:	4602      	mov	r2, r0
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	1ad3      	subs	r3, r2, r3
 80033e8:	2b02      	cmp	r3, #2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e0dd      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80033f0:	4b14      	ldr	r3, [pc, #80]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 80033f2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80033f6:	f003 0302 	and.w	r3, r3, #2
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d1ef      	bne.n	80033de <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	69db      	ldr	r3, [r3, #28]
 8003402:	2b00      	cmp	r3, #0
 8003404:	f000 80d1 	beq.w	80035aa <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003408:	4b0e      	ldr	r3, [pc, #56]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	f003 030c 	and.w	r3, r3, #12
 8003410:	2b0c      	cmp	r3, #12
 8003412:	f000 808b 	beq.w	800352c <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	69db      	ldr	r3, [r3, #28]
 800341a:	2b02      	cmp	r3, #2
 800341c:	d15e      	bne.n	80034dc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341e:	4b09      	ldr	r3, [pc, #36]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4a08      	ldr	r2, [pc, #32]	; (8003444 <HAL_RCC_OscConfig+0x4b8>)
 8003424:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003428:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342a:	f7fe f865 	bl	80014f8 <HAL_GetTick>
 800342e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003430:	e00c      	b.n	800344c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003432:	f7fe f861 	bl	80014f8 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	2b02      	cmp	r3, #2
 800343e:	d905      	bls.n	800344c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e0b3      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
 8003444:	40021000 	.word	0x40021000
 8003448:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800344c:	4b59      	ldr	r3, [pc, #356]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d1ec      	bne.n	8003432 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003458:	4b56      	ldr	r3, [pc, #344]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 800345a:	68da      	ldr	r2, [r3, #12]
 800345c:	4b56      	ldr	r3, [pc, #344]	; (80035b8 <HAL_RCC_OscConfig+0x62c>)
 800345e:	4013      	ands	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6a11      	ldr	r1, [r2, #32]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003468:	3a01      	subs	r2, #1
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	4311      	orrs	r1, r2
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003472:	0212      	lsls	r2, r2, #8
 8003474:	4311      	orrs	r1, r2
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800347a:	0852      	lsrs	r2, r2, #1
 800347c:	3a01      	subs	r2, #1
 800347e:	0552      	lsls	r2, r2, #21
 8003480:	4311      	orrs	r1, r2
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003486:	0852      	lsrs	r2, r2, #1
 8003488:	3a01      	subs	r2, #1
 800348a:	0652      	lsls	r2, r2, #25
 800348c:	4311      	orrs	r1, r2
 800348e:	687a      	ldr	r2, [r7, #4]
 8003490:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003492:	06d2      	lsls	r2, r2, #27
 8003494:	430a      	orrs	r2, r1
 8003496:	4947      	ldr	r1, [pc, #284]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 8003498:	4313      	orrs	r3, r2
 800349a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800349c:	4b45      	ldr	r3, [pc, #276]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a44      	ldr	r2, [pc, #272]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034a6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80034a8:	4b42      	ldr	r3, [pc, #264]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	4a41      	ldr	r2, [pc, #260]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034b2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe f820 	bl	80014f8 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034bc:	f7fe f81c 	bl	80014f8 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e06e      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80034ce:	4b39      	ldr	r3, [pc, #228]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x530>
 80034da:	e066      	b.n	80035aa <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034dc:	4b35      	ldr	r3, [pc, #212]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a34      	ldr	r2, [pc, #208]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80034e8:	4b32      	ldr	r3, [pc, #200]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	4a31      	ldr	r2, [pc, #196]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034ee:	f023 0303 	bic.w	r3, r3, #3
 80034f2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80034f4:	4b2f      	ldr	r3, [pc, #188]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	4a2e      	ldr	r2, [pc, #184]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 80034fa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80034fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003502:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fff8 	bl	80014f8 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800350c:	f7fd fff4 	bl	80014f8 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e046      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800351e:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003526:	2b00      	cmp	r3, #0
 8003528:	d1f0      	bne.n	800350c <HAL_RCC_OscConfig+0x580>
 800352a:	e03e      	b.n	80035aa <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	69db      	ldr	r3, [r3, #28]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003534:	2301      	movs	r3, #1
 8003536:	e039      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003538:	4b1e      	ldr	r3, [pc, #120]	; (80035b4 <HAL_RCC_OscConfig+0x628>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	f003 0203 	and.w	r2, r3, #3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a1b      	ldr	r3, [r3, #32]
 8003548:	429a      	cmp	r2, r3
 800354a:	d12c      	bne.n	80035a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003556:	3b01      	subs	r3, #1
 8003558:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800355a:	429a      	cmp	r2, r3
 800355c:	d123      	bne.n	80035a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003568:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800356a:	429a      	cmp	r2, r3
 800356c:	d11b      	bne.n	80035a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800357a:	429a      	cmp	r2, r3
 800357c:	d113      	bne.n	80035a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003588:	085b      	lsrs	r3, r3, #1
 800358a:	3b01      	subs	r3, #1
 800358c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800358e:	429a      	cmp	r2, r3
 8003590:	d109      	bne.n	80035a6 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003592:	697b      	ldr	r3, [r7, #20]
 8003594:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800359c:	085b      	lsrs	r3, r3, #1
 800359e:	3b01      	subs	r3, #1
 80035a0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d001      	beq.n	80035aa <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3720      	adds	r7, #32
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40021000 	.word	0x40021000
 80035b8:	019f800c 	.word	0x019f800c

080035bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e11e      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035d4:	4b91      	ldr	r3, [pc, #580]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 030f 	and.w	r3, r3, #15
 80035dc:	683a      	ldr	r2, [r7, #0]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d910      	bls.n	8003604 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035e2:	4b8e      	ldr	r3, [pc, #568]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f023 020f 	bic.w	r2, r3, #15
 80035ea:	498c      	ldr	r1, [pc, #560]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	4313      	orrs	r3, r2
 80035f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035f2:	4b8a      	ldr	r3, [pc, #552]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d001      	beq.n	8003604 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e106      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0301 	and.w	r3, r3, #1
 800360c:	2b00      	cmp	r3, #0
 800360e:	d073      	beq.n	80036f8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b03      	cmp	r3, #3
 8003616:	d129      	bne.n	800366c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003618:	4b81      	ldr	r3, [pc, #516]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e0f4      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003628:	f000 f9d0 	bl	80039cc <RCC_GetSysClockFreqFromPLLSource>
 800362c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800362e:	693b      	ldr	r3, [r7, #16]
 8003630:	4a7c      	ldr	r2, [pc, #496]	; (8003824 <HAL_RCC_ClockConfig+0x268>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d93f      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003636:	4b7a      	ldr	r3, [pc, #488]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800363e:	2b00      	cmp	r3, #0
 8003640:	d009      	beq.n	8003656 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d033      	beq.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003652:	2b00      	cmp	r3, #0
 8003654:	d12f      	bne.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003656:	4b72      	ldr	r3, [pc, #456]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800365e:	4a70      	ldr	r2, [pc, #448]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003664:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	617b      	str	r3, [r7, #20]
 800366a:	e024      	b.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b02      	cmp	r3, #2
 8003672:	d107      	bne.n	8003684 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003674:	4b6a      	ldr	r3, [pc, #424]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d109      	bne.n	8003694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	e0c6      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003684:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d101      	bne.n	8003694 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e0be      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003694:	f000 f8ce 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 8003698:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	4a61      	ldr	r2, [pc, #388]	; (8003824 <HAL_RCC_ClockConfig+0x268>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d909      	bls.n	80036b6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80036a2:	4b5f      	ldr	r3, [pc, #380]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036aa:	4a5d      	ldr	r2, [pc, #372]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036b0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80036b2:	2380      	movs	r3, #128	; 0x80
 80036b4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80036b6:	4b5a      	ldr	r3, [pc, #360]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f023 0203 	bic.w	r2, r3, #3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4957      	ldr	r1, [pc, #348]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036c4:	4313      	orrs	r3, r2
 80036c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c8:	f7fd ff16 	bl	80014f8 <HAL_GetTick>
 80036cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036ce:	e00a      	b.n	80036e6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036d0:	f7fd ff12 	bl	80014f8 <HAL_GetTick>
 80036d4:	4602      	mov	r2, r0
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	1ad3      	subs	r3, r2, r3
 80036da:	f241 3288 	movw	r2, #5000	; 0x1388
 80036de:	4293      	cmp	r3, r2
 80036e0:	d901      	bls.n	80036e6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e095      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036e6:	4b4e      	ldr	r3, [pc, #312]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 020c 	and.w	r2, r3, #12
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d1eb      	bne.n	80036d0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 0302 	and.w	r3, r3, #2
 8003700:	2b00      	cmp	r3, #0
 8003702:	d023      	beq.n	800374c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0304 	and.w	r3, r3, #4
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003710:	4b43      	ldr	r3, [pc, #268]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a42      	ldr	r2, [pc, #264]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800371a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0308 	and.w	r3, r3, #8
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003728:	4b3d      	ldr	r3, [pc, #244]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003730:	4a3b      	ldr	r2, [pc, #236]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003732:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003736:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003738:	4b39      	ldr	r3, [pc, #228]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4936      	ldr	r1, [pc, #216]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003746:	4313      	orrs	r3, r2
 8003748:	608b      	str	r3, [r1, #8]
 800374a:	e008      	b.n	800375e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b80      	cmp	r3, #128	; 0x80
 8003750:	d105      	bne.n	800375e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003752:	4b33      	ldr	r3, [pc, #204]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4a32      	ldr	r2, [pc, #200]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 8003758:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800375c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800375e:	4b2f      	ldr	r3, [pc, #188]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	683a      	ldr	r2, [r7, #0]
 8003768:	429a      	cmp	r2, r3
 800376a:	d21d      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376c:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 020f 	bic.w	r2, r3, #15
 8003774:	4929      	ldr	r1, [pc, #164]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	4313      	orrs	r3, r2
 800377a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800377c:	f7fd febc 	bl	80014f8 <HAL_GetTick>
 8003780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003782:	e00a      	b.n	800379a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003784:	f7fd feb8 	bl	80014f8 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e03b      	b.n	8003812 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800379a:	4b20      	ldr	r3, [pc, #128]	; (800381c <HAL_RCC_ClockConfig+0x260>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	683a      	ldr	r2, [r7, #0]
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d1ed      	bne.n	8003784 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b1a      	ldr	r3, [pc, #104]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b13      	ldr	r3, [pc, #76]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	490f      	ldr	r1, [pc, #60]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037e6:	f000 f825 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <HAL_RCC_ClockConfig+0x264>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	490c      	ldr	r1, [pc, #48]	; (8003828 <HAL_RCC_ClockConfig+0x26c>)
 80037f8:	5ccb      	ldrb	r3, [r1, r3]
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	fa22 f303 	lsr.w	r3, r2, r3
 8003802:	4a0a      	ldr	r2, [pc, #40]	; (800382c <HAL_RCC_ClockConfig+0x270>)
 8003804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003806:	4b0a      	ldr	r3, [pc, #40]	; (8003830 <HAL_RCC_ClockConfig+0x274>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4618      	mov	r0, r3
 800380c:	f7fd fa40 	bl	8000c90 <HAL_InitTick>
 8003810:	4603      	mov	r3, r0
}
 8003812:	4618      	mov	r0, r3
 8003814:	3718      	adds	r7, #24
 8003816:	46bd      	mov	sp, r7
 8003818:	bd80      	pop	{r7, pc}
 800381a:	bf00      	nop
 800381c:	40022000 	.word	0x40022000
 8003820:	40021000 	.word	0x40021000
 8003824:	04c4b400 	.word	0x04c4b400
 8003828:	08007604 	.word	0x08007604
 800382c:	20000000 	.word	0x20000000
 8003830:	20000004 	.word	0x20000004

08003834 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800383a:	4b2c      	ldr	r3, [pc, #176]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	f003 030c 	and.w	r3, r3, #12
 8003842:	2b04      	cmp	r3, #4
 8003844:	d102      	bne.n	800384c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003846:	4b2a      	ldr	r3, [pc, #168]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003848:	613b      	str	r3, [r7, #16]
 800384a:	e047      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800384c:	4b27      	ldr	r3, [pc, #156]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 030c 	and.w	r3, r3, #12
 8003854:	2b08      	cmp	r3, #8
 8003856:	d102      	bne.n	800385e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003858:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	e03e      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800385e:	4b23      	ldr	r3, [pc, #140]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b0c      	cmp	r3, #12
 8003868:	d136      	bne.n	80038d8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800386a:	4b20      	ldr	r3, [pc, #128]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 800386c:	68db      	ldr	r3, [r3, #12]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003874:	4b1d      	ldr	r3, [pc, #116]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	091b      	lsrs	r3, r3, #4
 800387a:	f003 030f 	and.w	r3, r3, #15
 800387e:	3301      	adds	r3, #1
 8003880:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2b03      	cmp	r3, #3
 8003886:	d10c      	bne.n	80038a2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003888:	4a1a      	ldr	r2, [pc, #104]	; (80038f4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003890:	4a16      	ldr	r2, [pc, #88]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 8003892:	68d2      	ldr	r2, [r2, #12]
 8003894:	0a12      	lsrs	r2, r2, #8
 8003896:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800389a:	fb02 f303 	mul.w	r3, r2, r3
 800389e:	617b      	str	r3, [r7, #20]
      break;
 80038a0:	e00c      	b.n	80038bc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80038a2:	4a13      	ldr	r2, [pc, #76]	; (80038f0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80038aa:	4a10      	ldr	r2, [pc, #64]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80038ac:	68d2      	ldr	r2, [r2, #12]
 80038ae:	0a12      	lsrs	r2, r2, #8
 80038b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80038b4:	fb02 f303 	mul.w	r3, r2, r3
 80038b8:	617b      	str	r3, [r7, #20]
      break;
 80038ba:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80038bc:	4b0b      	ldr	r3, [pc, #44]	; (80038ec <HAL_RCC_GetSysClockFreq+0xb8>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	0e5b      	lsrs	r3, r3, #25
 80038c2:	f003 0303 	and.w	r3, r3, #3
 80038c6:	3301      	adds	r3, #1
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d4:	613b      	str	r3, [r7, #16]
 80038d6:	e001      	b.n	80038dc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80038d8:	2300      	movs	r3, #0
 80038da:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80038dc:	693b      	ldr	r3, [r7, #16]
}
 80038de:	4618      	mov	r0, r3
 80038e0:	371c      	adds	r7, #28
 80038e2:	46bd      	mov	sp, r7
 80038e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40021000 	.word	0x40021000
 80038f0:	00f42400 	.word	0x00f42400
 80038f4:	016e3600 	.word	0x016e3600

080038f8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038fc:	4b03      	ldr	r3, [pc, #12]	; (800390c <HAL_RCC_GetHCLKFreq+0x14>)
 80038fe:	681b      	ldr	r3, [r3, #0]
}
 8003900:	4618      	mov	r0, r3
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr
 800390a:	bf00      	nop
 800390c:	20000000 	.word	0x20000000

08003910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003914:	f7ff fff0 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003918:	4602      	mov	r2, r0
 800391a:	4b06      	ldr	r3, [pc, #24]	; (8003934 <HAL_RCC_GetPCLK1Freq+0x24>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	0a1b      	lsrs	r3, r3, #8
 8003920:	f003 0307 	and.w	r3, r3, #7
 8003924:	4904      	ldr	r1, [pc, #16]	; (8003938 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003926:	5ccb      	ldrb	r3, [r1, r3]
 8003928:	f003 031f 	and.w	r3, r3, #31
 800392c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003930:	4618      	mov	r0, r3
 8003932:	bd80      	pop	{r7, pc}
 8003934:	40021000 	.word	0x40021000
 8003938:	08007614 	.word	0x08007614

0800393c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003940:	f7ff ffda 	bl	80038f8 <HAL_RCC_GetHCLKFreq>
 8003944:	4602      	mov	r2, r0
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	0adb      	lsrs	r3, r3, #11
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	4904      	ldr	r1, [pc, #16]	; (8003964 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003952:	5ccb      	ldrb	r3, [r1, r3]
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	fa22 f303 	lsr.w	r3, r2, r3
}
 800395c:	4618      	mov	r0, r3
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40021000 	.word	0x40021000
 8003964:	08007614 	.word	0x08007614

08003968 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003968:	b480      	push	{r7}
 800396a:	b083      	sub	sp, #12
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
 8003970:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	220f      	movs	r2, #15
 8003976:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003978:	4b12      	ldr	r3, [pc, #72]	; (80039c4 <HAL_RCC_GetClockConfig+0x5c>)
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f003 0203 	and.w	r2, r3, #3
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003984:	4b0f      	ldr	r3, [pc, #60]	; (80039c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003990:	4b0c      	ldr	r3, [pc, #48]	; (80039c4 <HAL_RCC_GetClockConfig+0x5c>)
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800399c:	4b09      	ldr	r3, [pc, #36]	; (80039c4 <HAL_RCC_GetClockConfig+0x5c>)
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	08db      	lsrs	r3, r3, #3
 80039a2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80039aa:	4b07      	ldr	r3, [pc, #28]	; (80039c8 <HAL_RCC_GetClockConfig+0x60>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 020f 	and.w	r2, r3, #15
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	601a      	str	r2, [r3, #0]
}
 80039b6:	bf00      	nop
 80039b8:	370c      	adds	r7, #12
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	40021000 	.word	0x40021000
 80039c8:	40022000 	.word	0x40022000

080039cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80039d2:	4b1e      	ldr	r3, [pc, #120]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80039dc:	4b1b      	ldr	r3, [pc, #108]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039de:	68db      	ldr	r3, [r3, #12]
 80039e0:	091b      	lsrs	r3, r3, #4
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	3301      	adds	r3, #1
 80039e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	2b03      	cmp	r3, #3
 80039ee:	d10c      	bne.n	8003a0a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80039f0:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039f8:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80039fa:	68d2      	ldr	r2, [r2, #12]
 80039fc:	0a12      	lsrs	r2, r2, #8
 80039fe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a02:	fb02 f303 	mul.w	r3, r2, r3
 8003a06:	617b      	str	r3, [r7, #20]
    break;
 8003a08:	e00c      	b.n	8003a24 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4a0e      	ldr	r2, [pc, #56]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a14:	68d2      	ldr	r2, [r2, #12]
 8003a16:	0a12      	lsrs	r2, r2, #8
 8003a18:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
    break;
 8003a22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003a24:	4b09      	ldr	r3, [pc, #36]	; (8003a4c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	0e5b      	lsrs	r3, r3, #25
 8003a2a:	f003 0303 	and.w	r3, r3, #3
 8003a2e:	3301      	adds	r3, #1
 8003a30:	005b      	lsls	r3, r3, #1
 8003a32:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003a34:	697a      	ldr	r2, [r7, #20]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a3c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003a3e:	687b      	ldr	r3, [r7, #4]
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	371c      	adds	r7, #28
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40021000 	.word	0x40021000
 8003a50:	016e3600 	.word	0x016e3600
 8003a54:	00f42400 	.word	0x00f42400

08003a58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003a60:	2300      	movs	r3, #0
 8003a62:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003a64:	2300      	movs	r3, #0
 8003a66:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f000 8098 	beq.w	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a76:	2300      	movs	r3, #0
 8003a78:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a7a:	4b43      	ldr	r3, [pc, #268]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d10d      	bne.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a86:	4b40      	ldr	r3, [pc, #256]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a8a:	4a3f      	ldr	r2, [pc, #252]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a90:	6593      	str	r3, [r2, #88]	; 0x58
 8003a92:	4b3d      	ldr	r3, [pc, #244]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	60bb      	str	r3, [r7, #8]
 8003a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003aa2:	4b3a      	ldr	r3, [pc, #232]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a39      	ldr	r2, [pc, #228]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aae:	f7fd fd23 	bl	80014f8 <HAL_GetTick>
 8003ab2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ab4:	e009      	b.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab6:	f7fd fd1f 	bl	80014f8 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d902      	bls.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	74fb      	strb	r3, [r7, #19]
        break;
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003aca:	4b30      	ldr	r3, [pc, #192]	; (8003b8c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d0ef      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003ad6:	7cfb      	ldrb	r3, [r7, #19]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d159      	bne.n	8003b90 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003adc:	4b2a      	ldr	r3, [pc, #168]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ae2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d01e      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003af2:	697a      	ldr	r2, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d019      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003af8:	4b23      	ldr	r3, [pc, #140]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003afe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b02:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b04:	4b20      	ldr	r3, [pc, #128]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b14:	4b1c      	ldr	r3, [pc, #112]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1a:	4a1b      	ldr	r2, [pc, #108]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003b24:	4a18      	ldr	r2, [pc, #96]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d016      	beq.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b36:	f7fd fcdf 	bl	80014f8 <HAL_GetTick>
 8003b3a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b3c:	e00b      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b3e:	f7fd fcdb 	bl	80014f8 <HAL_GetTick>
 8003b42:	4602      	mov	r2, r0
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d902      	bls.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	74fb      	strb	r3, [r7, #19]
            break;
 8003b54:	e006      	b.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003b56:	4b0c      	ldr	r3, [pc, #48]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b5c:	f003 0302 	and.w	r3, r3, #2
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0ec      	beq.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003b64:	7cfb      	ldrb	r3, [r7, #19]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10b      	bne.n	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b6a:	4b07      	ldr	r3, [pc, #28]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b78:	4903      	ldr	r1, [pc, #12]	; (8003b88 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b80:	e008      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003b82:	7cfb      	ldrb	r3, [r7, #19]
 8003b84:	74bb      	strb	r3, [r7, #18]
 8003b86:	e005      	b.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003b88:	40021000 	.word	0x40021000
 8003b8c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b90:	7cfb      	ldrb	r3, [r7, #19]
 8003b92:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003b94:	7c7b      	ldrb	r3, [r7, #17]
 8003b96:	2b01      	cmp	r3, #1
 8003b98:	d105      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b9a:	4ba7      	ldr	r3, [pc, #668]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9e:	4aa6      	ldr	r2, [pc, #664]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ba4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0301 	and.w	r3, r3, #1
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bb2:	4ba1      	ldr	r3, [pc, #644]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bb8:	f023 0203 	bic.w	r2, r3, #3
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	499d      	ldr	r1, [pc, #628]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0302 	and.w	r3, r3, #2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bd4:	4b98      	ldr	r3, [pc, #608]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bda:	f023 020c 	bic.w	r2, r3, #12
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	4995      	ldr	r1, [pc, #596]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0304 	and.w	r3, r3, #4
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003bf6:	4b90      	ldr	r3, [pc, #576]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bf8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bfc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	498c      	ldr	r1, [pc, #560]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0308 	and.w	r3, r3, #8
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c18:	4b87      	ldr	r3, [pc, #540]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c1e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	691b      	ldr	r3, [r3, #16]
 8003c26:	4984      	ldr	r1, [pc, #528]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c3a:	4b7f      	ldr	r3, [pc, #508]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	497b      	ldr	r1, [pc, #492]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f003 0320 	and.w	r3, r3, #32
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003c5c:	4b76      	ldr	r3, [pc, #472]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c62:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	4973      	ldr	r1, [pc, #460]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003c7e:	4b6e      	ldr	r3, [pc, #440]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c84:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	69db      	ldr	r3, [r3, #28]
 8003c8c:	496a      	ldr	r1, [pc, #424]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ca2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ca6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6a1b      	ldr	r3, [r3, #32]
 8003cae:	4962      	ldr	r1, [pc, #392]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cc8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	4959      	ldr	r1, [pc, #356]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ce4:	4b54      	ldr	r3, [pc, #336]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ce6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003cea:	f023 0203 	bic.w	r2, r3, #3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cf2:	4951      	ldr	r1, [pc, #324]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d06:	4b4c      	ldr	r3, [pc, #304]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d0c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	4948      	ldr	r1, [pc, #288]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d015      	beq.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d28:	4b43      	ldr	r3, [pc, #268]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d36:	4940      	ldr	r1, [pc, #256]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d42:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d46:	d105      	bne.n	8003d54 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d48:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4a:	68db      	ldr	r3, [r3, #12]
 8003d4c:	4a3a      	ldr	r2, [pc, #232]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d4e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d52:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d015      	beq.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d60:	4b35      	ldr	r3, [pc, #212]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d66:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d6e:	4932      	ldr	r1, [pc, #200]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d7e:	d105      	bne.n	8003d8c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003d80:	4b2d      	ldr	r3, [pc, #180]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	4a2c      	ldr	r2, [pc, #176]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003d8a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d015      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d98:	4b27      	ldr	r3, [pc, #156]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d9e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da6:	4924      	ldr	r1, [pc, #144]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003db2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003db6:	d105      	bne.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003db8:	4b1f      	ldr	r3, [pc, #124]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	4a1e      	ldr	r2, [pc, #120]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dbe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dc2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d015      	beq.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003dd6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	4916      	ldr	r1, [pc, #88]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003dee:	d105      	bne.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003df0:	4b11      	ldr	r3, [pc, #68]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a10      	ldr	r2, [pc, #64]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003dfa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d019      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e16:	4908      	ldr	r1, [pc, #32]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e26:	d109      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003e28:	4b03      	ldr	r3, [pc, #12]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	4a02      	ldr	r2, [pc, #8]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003e2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e32:	60d3      	str	r3, [r2, #12]
 8003e34:	e002      	b.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003e36:	bf00      	nop
 8003e38:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d015      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003e48:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e4e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e56:	4926      	ldr	r1, [pc, #152]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e62:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e66:	d105      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003e68:	4b21      	ldr	r3, [pc, #132]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	4a20      	ldr	r2, [pc, #128]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e72:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d015      	beq.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e86:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e8e:	4918      	ldr	r1, [pc, #96]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e9e:	d105      	bne.n	8003eac <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003ea0:	4b13      	ldr	r3, [pc, #76]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	4a12      	ldr	r2, [pc, #72]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ea6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eaa:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d015      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003eb8:	4b0d      	ldr	r3, [pc, #52]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ec6:	490a      	ldr	r1, [pc, #40]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ed2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ed6:	d105      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ed8:	4b05      	ldr	r3, [pc, #20]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	4a04      	ldr	r2, [pc, #16]	; (8003ef0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003ede:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ee2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003ee4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3718      	adds	r7, #24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40021000 	.word	0x40021000

08003ef4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e049      	b.n	8003f9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f0c:	b2db      	uxtb	r3, r3
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d106      	bne.n	8003f20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f841 	bl	8003fa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2202      	movs	r2, #2
 8003f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	3304      	adds	r3, #4
 8003f30:	4619      	mov	r1, r3
 8003f32:	4610      	mov	r0, r2
 8003f34:	f000 fbca 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3708      	adds	r7, #8
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fa2:	b480      	push	{r7}
 8003fa4:	b083      	sub	sp, #12
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003faa:	bf00      	nop
 8003fac:	370c      	adds	r7, #12
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
	...

08003fb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b085      	sub	sp, #20
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d001      	beq.n	8003fd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e054      	b.n	800407a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2202      	movs	r2, #2
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	68da      	ldr	r2, [r3, #12]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f042 0201 	orr.w	r2, r2, #1
 8003fe6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a26      	ldr	r2, [pc, #152]	; (8004088 <HAL_TIM_Base_Start_IT+0xd0>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d022      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffa:	d01d      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_TIM_Base_Start_IT+0xd4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d018      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a21      	ldr	r2, [pc, #132]	; (8004090 <HAL_TIM_Base_Start_IT+0xd8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d013      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_TIM_Base_Start_IT+0xdc>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d00e      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_TIM_Base_Start_IT+0xe0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d009      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <HAL_TIM_Base_Start_IT+0xe4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d004      	beq.n	8004038 <HAL_TIM_Base_Start_IT+0x80>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a1b      	ldr	r2, [pc, #108]	; (80040a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d115      	bne.n	8004064 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	689a      	ldr	r2, [r3, #8]
 800403e:	4b19      	ldr	r3, [pc, #100]	; (80040a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004040:	4013      	ands	r3, r2
 8004042:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	2b06      	cmp	r3, #6
 8004048:	d015      	beq.n	8004076 <HAL_TIM_Base_Start_IT+0xbe>
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004050:	d011      	beq.n	8004076 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f042 0201 	orr.w	r2, r2, #1
 8004060:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004062:	e008      	b.n	8004076 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	681a      	ldr	r2, [r3, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f042 0201 	orr.w	r2, r2, #1
 8004072:	601a      	str	r2, [r3, #0]
 8004074:	e000      	b.n	8004078 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004076:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004078:	2300      	movs	r3, #0
}
 800407a:	4618      	mov	r0, r3
 800407c:	3714      	adds	r7, #20
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40013400 	.word	0x40013400
 800409c:	40014000 	.word	0x40014000
 80040a0:	40015000 	.word	0x40015000
 80040a4:	00010007 	.word	0x00010007

080040a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e049      	b.n	800414e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fc ff9c 	bl	800100c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 faf0 	bl	80046cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800414c:	2300      	movs	r3, #0
}
 800414e:	4618      	mov	r0, r3
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	691b      	ldr	r3, [r3, #16]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b02      	cmp	r3, #2
 800416a:	d122      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f003 0302 	and.w	r3, r3, #2
 8004176:	2b02      	cmp	r3, #2
 8004178:	d11b      	bne.n	80041b2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f06f 0202 	mvn.w	r2, #2
 8004182:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	f003 0303 	and.w	r3, r3, #3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d003      	beq.n	80041a0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004198:	6878      	ldr	r0, [r7, #4]
 800419a:	f000 fa79 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 800419e:	e005      	b.n	80041ac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f000 fa6b 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 fa7c 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	f003 0304 	and.w	r3, r3, #4
 80041bc:	2b04      	cmp	r3, #4
 80041be:	d122      	bne.n	8004206 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	f003 0304 	and.w	r3, r3, #4
 80041ca:	2b04      	cmp	r3, #4
 80041cc:	d11b      	bne.n	8004206 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f06f 0204 	mvn.w	r2, #4
 80041d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2202      	movs	r2, #2
 80041dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	699b      	ldr	r3, [r3, #24]
 80041e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d003      	beq.n	80041f4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f000 fa4f 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 80041f2:	e005      	b.n	8004200 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f000 fa41 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f000 fa52 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2200      	movs	r2, #0
 8004204:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	f003 0308 	and.w	r3, r3, #8
 8004210:	2b08      	cmp	r3, #8
 8004212:	d122      	bne.n	800425a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	2b08      	cmp	r3, #8
 8004220:	d11b      	bne.n	800425a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f06f 0208 	mvn.w	r2, #8
 800422a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2204      	movs	r2, #4
 8004230:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	2b00      	cmp	r3, #0
 800423e:	d003      	beq.n	8004248 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fa25 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 8004246:	e005      	b.n	8004254 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004248:	6878      	ldr	r0, [r7, #4]
 800424a:	f000 fa17 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f000 fa28 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2200      	movs	r2, #0
 8004258:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	691b      	ldr	r3, [r3, #16]
 8004260:	f003 0310 	and.w	r3, r3, #16
 8004264:	2b10      	cmp	r3, #16
 8004266:	d122      	bne.n	80042ae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	f003 0310 	and.w	r3, r3, #16
 8004272:	2b10      	cmp	r3, #16
 8004274:	d11b      	bne.n	80042ae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f06f 0210 	mvn.w	r2, #16
 800427e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2208      	movs	r2, #8
 8004284:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	69db      	ldr	r3, [r3, #28]
 800428c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004290:	2b00      	cmp	r3, #0
 8004292:	d003      	beq.n	800429c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	f000 f9fb 	bl	8004690 <HAL_TIM_IC_CaptureCallback>
 800429a:	e005      	b.n	80042a8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 f9ed 	bl	800467c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f000 f9fe 	bl	80046a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	2200      	movs	r2, #0
 80042ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	691b      	ldr	r3, [r3, #16]
 80042b4:	f003 0301 	and.w	r3, r3, #1
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d10e      	bne.n	80042da <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	f003 0301 	and.w	r3, r3, #1
 80042c6:	2b01      	cmp	r3, #1
 80042c8:	d107      	bne.n	80042da <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f06f 0201 	mvn.w	r2, #1
 80042d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc fc9f 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691b      	ldr	r3, [r3, #16]
 80042e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042e4:	2b80      	cmp	r3, #128	; 0x80
 80042e6:	d10e      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b80      	cmp	r3, #128	; 0x80
 80042f4:	d107      	bne.n	8004306 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80042fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f001 f82b 	bl	800535c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691b      	ldr	r3, [r3, #16]
 800430c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004314:	d10e      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68db      	ldr	r3, [r3, #12]
 800431c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004320:	2b80      	cmp	r3, #128	; 0x80
 8004322:	d107      	bne.n	8004334 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800432c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f001 f81e 	bl	8005370 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d10e      	bne.n	8004360 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434c:	2b40      	cmp	r3, #64	; 0x40
 800434e:	d107      	bne.n	8004360 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f000 f9ac 	bl	80046b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	691b      	ldr	r3, [r3, #16]
 8004366:	f003 0320 	and.w	r3, r3, #32
 800436a:	2b20      	cmp	r3, #32
 800436c:	d10e      	bne.n	800438c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	f003 0320 	and.w	r3, r3, #32
 8004378:	2b20      	cmp	r3, #32
 800437a:	d107      	bne.n	800438c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f06f 0220 	mvn.w	r2, #32
 8004384:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f000 ffde 	bl	8005348 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004396:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800439a:	d10f      	bne.n	80043bc <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043aa:	d107      	bne.n	80043bc <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80043b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f000 ffe4 	bl	8005384 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ca:	d10f      	bne.n	80043ec <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68db      	ldr	r3, [r3, #12]
 80043d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043d6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043da:	d107      	bne.n	80043ec <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80043e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	f000 ffd6 	bl	8005398 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	691b      	ldr	r3, [r3, #16]
 80043f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043fa:	d10f      	bne.n	800441c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004406:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800440a:	d107      	bne.n	800441c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 ffc8 	bl	80053ac <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800442a:	d10f      	bne.n	800444c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004436:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800443a:	d107      	bne.n	800444c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004444:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 ffba 	bl	80053c0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800444c:	bf00      	nop
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004460:	2300      	movs	r3, #0
 8004462:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800446a:	2b01      	cmp	r3, #1
 800446c:	d101      	bne.n	8004472 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800446e:	2302      	movs	r3, #2
 8004470:	e0ff      	b.n	8004672 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2201      	movs	r2, #1
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b14      	cmp	r3, #20
 800447e:	f200 80f0 	bhi.w	8004662 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004482:	a201      	add	r2, pc, #4	; (adr r2, 8004488 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004488:	080044dd 	.word	0x080044dd
 800448c:	08004663 	.word	0x08004663
 8004490:	08004663 	.word	0x08004663
 8004494:	08004663 	.word	0x08004663
 8004498:	0800451d 	.word	0x0800451d
 800449c:	08004663 	.word	0x08004663
 80044a0:	08004663 	.word	0x08004663
 80044a4:	08004663 	.word	0x08004663
 80044a8:	0800455f 	.word	0x0800455f
 80044ac:	08004663 	.word	0x08004663
 80044b0:	08004663 	.word	0x08004663
 80044b4:	08004663 	.word	0x08004663
 80044b8:	0800459f 	.word	0x0800459f
 80044bc:	08004663 	.word	0x08004663
 80044c0:	08004663 	.word	0x08004663
 80044c4:	08004663 	.word	0x08004663
 80044c8:	080045e1 	.word	0x080045e1
 80044cc:	08004663 	.word	0x08004663
 80044d0:	08004663 	.word	0x08004663
 80044d4:	08004663 	.word	0x08004663
 80044d8:	08004621 	.word	0x08004621
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68b9      	ldr	r1, [r7, #8]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 f99a 	bl	800481c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	699a      	ldr	r2, [r3, #24]
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f042 0208 	orr.w	r2, r2, #8
 80044f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	699a      	ldr	r2, [r3, #24]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f022 0204 	bic.w	r2, r2, #4
 8004506:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	6999      	ldr	r1, [r3, #24]
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	691a      	ldr	r2, [r3, #16]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	430a      	orrs	r2, r1
 8004518:	619a      	str	r2, [r3, #24]
      break;
 800451a:	e0a5      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	68b9      	ldr	r1, [r7, #8]
 8004522:	4618      	mov	r0, r3
 8004524:	f000 fa14 	bl	8004950 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	699a      	ldr	r2, [r3, #24]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004536:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699a      	ldr	r2, [r3, #24]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004546:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	6999      	ldr	r1, [r3, #24]
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	691b      	ldr	r3, [r3, #16]
 8004552:	021a      	lsls	r2, r3, #8
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	430a      	orrs	r2, r1
 800455a:	619a      	str	r2, [r3, #24]
      break;
 800455c:	e084      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68b9      	ldr	r1, [r7, #8]
 8004564:	4618      	mov	r0, r3
 8004566:	f000 fa87 	bl	8004a78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	69da      	ldr	r2, [r3, #28]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f042 0208 	orr.w	r2, r2, #8
 8004578:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	69da      	ldr	r2, [r3, #28]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0204 	bic.w	r2, r2, #4
 8004588:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69d9      	ldr	r1, [r3, #28]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	691a      	ldr	r2, [r3, #16]
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	430a      	orrs	r2, r1
 800459a:	61da      	str	r2, [r3, #28]
      break;
 800459c:	e064      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68b9      	ldr	r1, [r7, #8]
 80045a4:	4618      	mov	r0, r3
 80045a6:	f000 faf9 	bl	8004b9c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69da      	ldr	r2, [r3, #28]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	69da      	ldr	r2, [r3, #28]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	69d9      	ldr	r1, [r3, #28]
 80045d0:	68bb      	ldr	r3, [r7, #8]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	021a      	lsls	r2, r3, #8
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	430a      	orrs	r2, r1
 80045dc:	61da      	str	r2, [r3, #28]
      break;
 80045de:	e043      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68b9      	ldr	r1, [r7, #8]
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 fb6c 	bl	8004cc4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f042 0208 	orr.w	r2, r2, #8
 80045fa:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	f022 0204 	bic.w	r2, r2, #4
 800460a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	691a      	ldr	r2, [r3, #16]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	430a      	orrs	r2, r1
 800461c:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800461e:	e023      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68b9      	ldr	r1, [r7, #8]
 8004626:	4618      	mov	r0, r3
 8004628:	f000 fbb6 	bl	8004d98 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800463a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800464a:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	021a      	lsls	r2, r3, #8
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	430a      	orrs	r2, r1
 800465e:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004660:	e002      	b.n	8004668 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	75fb      	strb	r3, [r7, #23]
      break;
 8004666:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	2200      	movs	r2, #0
 800466c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004670:	7dfb      	ldrb	r3, [r7, #23]
}
 8004672:	4618      	mov	r0, r3
 8004674:	3718      	adds	r7, #24
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop

0800467c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800467c:	b480      	push	{r7}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004698:	bf00      	nop
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b083      	sub	sp, #12
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80046ac:	bf00      	nop
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr

080046b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80046b8:	b480      	push	{r7}
 80046ba:	b083      	sub	sp, #12
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80046c0:	bf00      	nop
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	4a46      	ldr	r2, [pc, #280]	; (80047f8 <TIM_Base_SetConfig+0x12c>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d017      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046ea:	d013      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	4a43      	ldr	r2, [pc, #268]	; (80047fc <TIM_Base_SetConfig+0x130>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d00f      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	4a42      	ldr	r2, [pc, #264]	; (8004800 <TIM_Base_SetConfig+0x134>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d00b      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	4a41      	ldr	r2, [pc, #260]	; (8004804 <TIM_Base_SetConfig+0x138>)
 8004700:	4293      	cmp	r3, r2
 8004702:	d007      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	4a40      	ldr	r2, [pc, #256]	; (8004808 <TIM_Base_SetConfig+0x13c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d003      	beq.n	8004714 <TIM_Base_SetConfig+0x48>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	4a3f      	ldr	r2, [pc, #252]	; (800480c <TIM_Base_SetConfig+0x140>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d108      	bne.n	8004726 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	68fa      	ldr	r2, [r7, #12]
 8004722:	4313      	orrs	r3, r2
 8004724:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a33      	ldr	r2, [pc, #204]	; (80047f8 <TIM_Base_SetConfig+0x12c>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d023      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004734:	d01f      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a30      	ldr	r2, [pc, #192]	; (80047fc <TIM_Base_SetConfig+0x130>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d01b      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a2f      	ldr	r2, [pc, #188]	; (8004800 <TIM_Base_SetConfig+0x134>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d017      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a2e      	ldr	r2, [pc, #184]	; (8004804 <TIM_Base_SetConfig+0x138>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d013      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a2d      	ldr	r2, [pc, #180]	; (8004808 <TIM_Base_SetConfig+0x13c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d00f      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a2d      	ldr	r2, [pc, #180]	; (8004810 <TIM_Base_SetConfig+0x144>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d00b      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	4a2c      	ldr	r2, [pc, #176]	; (8004814 <TIM_Base_SetConfig+0x148>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d007      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a2b      	ldr	r2, [pc, #172]	; (8004818 <TIM_Base_SetConfig+0x14c>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d003      	beq.n	8004776 <TIM_Base_SetConfig+0xaa>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a26      	ldr	r2, [pc, #152]	; (800480c <TIM_Base_SetConfig+0x140>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d108      	bne.n	8004788 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	4313      	orrs	r3, r2
 8004786:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	68fa      	ldr	r2, [r7, #12]
 800479a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a12      	ldr	r2, [pc, #72]	; (80047f8 <TIM_Base_SetConfig+0x12c>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d013      	beq.n	80047dc <TIM_Base_SetConfig+0x110>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a14      	ldr	r2, [pc, #80]	; (8004808 <TIM_Base_SetConfig+0x13c>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d00f      	beq.n	80047dc <TIM_Base_SetConfig+0x110>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a14      	ldr	r2, [pc, #80]	; (8004810 <TIM_Base_SetConfig+0x144>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d00b      	beq.n	80047dc <TIM_Base_SetConfig+0x110>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a13      	ldr	r2, [pc, #76]	; (8004814 <TIM_Base_SetConfig+0x148>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d007      	beq.n	80047dc <TIM_Base_SetConfig+0x110>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	4a12      	ldr	r2, [pc, #72]	; (8004818 <TIM_Base_SetConfig+0x14c>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d003      	beq.n	80047dc <TIM_Base_SetConfig+0x110>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a0d      	ldr	r2, [pc, #52]	; (800480c <TIM_Base_SetConfig+0x140>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d103      	bne.n	80047e4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691a      	ldr	r2, [r3, #16]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	615a      	str	r2, [r3, #20]
}
 80047ea:	bf00      	nop
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	40012c00 	.word	0x40012c00
 80047fc:	40000400 	.word	0x40000400
 8004800:	40000800 	.word	0x40000800
 8004804:	40000c00 	.word	0x40000c00
 8004808:	40013400 	.word	0x40013400
 800480c:	40015000 	.word	0x40015000
 8004810:	40014000 	.word	0x40014000
 8004814:	40014400 	.word	0x40014400
 8004818:	40014800 	.word	0x40014800

0800481c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6a1b      	ldr	r3, [r3, #32]
 800482a:	f023 0201 	bic.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	699b      	ldr	r3, [r3, #24]
 8004842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800484a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800484e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0303 	bic.w	r3, r3, #3
 8004856:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	4313      	orrs	r3, r2
 8004860:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004862:	697b      	ldr	r3, [r7, #20]
 8004864:	f023 0302 	bic.w	r3, r3, #2
 8004868:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	697a      	ldr	r2, [r7, #20]
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a30      	ldr	r2, [pc, #192]	; (8004938 <TIM_OC1_SetConfig+0x11c>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d013      	beq.n	80048a4 <TIM_OC1_SetConfig+0x88>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a2f      	ldr	r2, [pc, #188]	; (800493c <TIM_OC1_SetConfig+0x120>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d00f      	beq.n	80048a4 <TIM_OC1_SetConfig+0x88>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a2e      	ldr	r2, [pc, #184]	; (8004940 <TIM_OC1_SetConfig+0x124>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d00b      	beq.n	80048a4 <TIM_OC1_SetConfig+0x88>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	4a2d      	ldr	r2, [pc, #180]	; (8004944 <TIM_OC1_SetConfig+0x128>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d007      	beq.n	80048a4 <TIM_OC1_SetConfig+0x88>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a2c      	ldr	r2, [pc, #176]	; (8004948 <TIM_OC1_SetConfig+0x12c>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d003      	beq.n	80048a4 <TIM_OC1_SetConfig+0x88>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a2b      	ldr	r2, [pc, #172]	; (800494c <TIM_OC1_SetConfig+0x130>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d10c      	bne.n	80048be <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	f023 0308 	bic.w	r3, r3, #8
 80048aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	68db      	ldr	r3, [r3, #12]
 80048b0:	697a      	ldr	r2, [r7, #20]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f023 0304 	bic.w	r3, r3, #4
 80048bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <TIM_OC1_SetConfig+0x11c>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <TIM_OC1_SetConfig+0xd2>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	4a1c      	ldr	r2, [pc, #112]	; (800493c <TIM_OC1_SetConfig+0x120>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d00f      	beq.n	80048ee <TIM_OC1_SetConfig+0xd2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a1b      	ldr	r2, [pc, #108]	; (8004940 <TIM_OC1_SetConfig+0x124>)
 80048d2:	4293      	cmp	r3, r2
 80048d4:	d00b      	beq.n	80048ee <TIM_OC1_SetConfig+0xd2>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	4a1a      	ldr	r2, [pc, #104]	; (8004944 <TIM_OC1_SetConfig+0x128>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d007      	beq.n	80048ee <TIM_OC1_SetConfig+0xd2>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <TIM_OC1_SetConfig+0x12c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d003      	beq.n	80048ee <TIM_OC1_SetConfig+0xd2>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a18      	ldr	r2, [pc, #96]	; (800494c <TIM_OC1_SetConfig+0x130>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d111      	bne.n	8004912 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80048f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80048fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	699b      	ldr	r3, [r3, #24]
 800490c:	693a      	ldr	r2, [r7, #16]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	68fa      	ldr	r2, [r7, #12]
 800491c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	685a      	ldr	r2, [r3, #4]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr
 8004938:	40012c00 	.word	0x40012c00
 800493c:	40013400 	.word	0x40013400
 8004940:	40014000 	.word	0x40014000
 8004944:	40014400 	.word	0x40014400
 8004948:	40014800 	.word	0x40014800
 800494c:	40015000 	.word	0x40015000

08004950 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	f023 0210 	bic.w	r2, r3, #16
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6a1b      	ldr	r3, [r3, #32]
 800496a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800497e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004982:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	021b      	lsls	r3, r3, #8
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f023 0320 	bic.w	r3, r3, #32
 800499e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	011b      	lsls	r3, r3, #4
 80049a6:	697a      	ldr	r2, [r7, #20]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a2c      	ldr	r2, [pc, #176]	; (8004a60 <TIM_OC2_SetConfig+0x110>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d007      	beq.n	80049c4 <TIM_OC2_SetConfig+0x74>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a2b      	ldr	r2, [pc, #172]	; (8004a64 <TIM_OC2_SetConfig+0x114>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d003      	beq.n	80049c4 <TIM_OC2_SetConfig+0x74>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a2a      	ldr	r2, [pc, #168]	; (8004a68 <TIM_OC2_SetConfig+0x118>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d10d      	bne.n	80049e0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	4313      	orrs	r3, r2
 80049d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049de:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	4a1f      	ldr	r2, [pc, #124]	; (8004a60 <TIM_OC2_SetConfig+0x110>)
 80049e4:	4293      	cmp	r3, r2
 80049e6:	d013      	beq.n	8004a10 <TIM_OC2_SetConfig+0xc0>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	4a1e      	ldr	r2, [pc, #120]	; (8004a64 <TIM_OC2_SetConfig+0x114>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d00f      	beq.n	8004a10 <TIM_OC2_SetConfig+0xc0>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <TIM_OC2_SetConfig+0x11c>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d00b      	beq.n	8004a10 <TIM_OC2_SetConfig+0xc0>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <TIM_OC2_SetConfig+0x120>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d007      	beq.n	8004a10 <TIM_OC2_SetConfig+0xc0>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <TIM_OC2_SetConfig+0x124>)
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d003      	beq.n	8004a10 <TIM_OC2_SetConfig+0xc0>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	4a17      	ldr	r2, [pc, #92]	; (8004a68 <TIM_OC2_SetConfig+0x118>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d113      	bne.n	8004a38 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	695b      	ldr	r3, [r3, #20]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	699b      	ldr	r3, [r3, #24]
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	4313      	orrs	r3, r2
 8004a36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	685a      	ldr	r2, [r3, #4]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	621a      	str	r2, [r3, #32]
}
 8004a52:	bf00      	nop
 8004a54:	371c      	adds	r7, #28
 8004a56:	46bd      	mov	sp, r7
 8004a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5c:	4770      	bx	lr
 8004a5e:	bf00      	nop
 8004a60:	40012c00 	.word	0x40012c00
 8004a64:	40013400 	.word	0x40013400
 8004a68:	40015000 	.word	0x40015000
 8004a6c:	40014000 	.word	0x40014000
 8004a70:	40014400 	.word	0x40014400
 8004a74:	40014800 	.word	0x40014800

08004a78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b087      	sub	sp, #28
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
 8004a80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a1b      	ldr	r3, [r3, #32]
 8004a86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	69db      	ldr	r3, [r3, #28]
 8004a9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f023 0303 	bic.w	r3, r3, #3
 8004ab2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004ac4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	021b      	lsls	r3, r3, #8
 8004acc:	697a      	ldr	r2, [r7, #20]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	4a2b      	ldr	r2, [pc, #172]	; (8004b84 <TIM_OC3_SetConfig+0x10c>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d007      	beq.n	8004aea <TIM_OC3_SetConfig+0x72>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	4a2a      	ldr	r2, [pc, #168]	; (8004b88 <TIM_OC3_SetConfig+0x110>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d003      	beq.n	8004aea <TIM_OC3_SetConfig+0x72>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	4a29      	ldr	r2, [pc, #164]	; (8004b8c <TIM_OC3_SetConfig+0x114>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d10d      	bne.n	8004b06 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004af2:	683b      	ldr	r3, [r7, #0]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	021b      	lsls	r3, r3, #8
 8004af8:	697a      	ldr	r2, [r7, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004afe:	697b      	ldr	r3, [r7, #20]
 8004b00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	4a1e      	ldr	r2, [pc, #120]	; (8004b84 <TIM_OC3_SetConfig+0x10c>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	d013      	beq.n	8004b36 <TIM_OC3_SetConfig+0xbe>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	4a1d      	ldr	r2, [pc, #116]	; (8004b88 <TIM_OC3_SetConfig+0x110>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d00f      	beq.n	8004b36 <TIM_OC3_SetConfig+0xbe>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a1d      	ldr	r2, [pc, #116]	; (8004b90 <TIM_OC3_SetConfig+0x118>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d00b      	beq.n	8004b36 <TIM_OC3_SetConfig+0xbe>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <TIM_OC3_SetConfig+0x11c>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d007      	beq.n	8004b36 <TIM_OC3_SetConfig+0xbe>
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <TIM_OC3_SetConfig+0x120>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d003      	beq.n	8004b36 <TIM_OC3_SetConfig+0xbe>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a16      	ldr	r2, [pc, #88]	; (8004b8c <TIM_OC3_SetConfig+0x114>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d113      	bne.n	8004b5e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b36:	693b      	ldr	r3, [r7, #16]
 8004b38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	011b      	lsls	r3, r3, #4
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	011b      	lsls	r3, r3, #4
 8004b58:	693a      	ldr	r2, [r7, #16]
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	685a      	ldr	r2, [r3, #4]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	697a      	ldr	r2, [r7, #20]
 8004b76:	621a      	str	r2, [r3, #32]
}
 8004b78:	bf00      	nop
 8004b7a:	371c      	adds	r7, #28
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	40012c00 	.word	0x40012c00
 8004b88:	40013400 	.word	0x40013400
 8004b8c:	40015000 	.word	0x40015000
 8004b90:	40014000 	.word	0x40014000
 8004b94:	40014400 	.word	0x40014400
 8004b98:	40014800 	.word	0x40014800

08004b9c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	b087      	sub	sp, #28
 8004ba0:	af00      	add	r7, sp, #0
 8004ba2:	6078      	str	r0, [r7, #4]
 8004ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
 8004baa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a1b      	ldr	r3, [r3, #32]
 8004bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bd6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	021b      	lsls	r3, r3, #8
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004bea:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	031b      	lsls	r3, r3, #12
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	4a2c      	ldr	r2, [pc, #176]	; (8004cac <TIM_OC4_SetConfig+0x110>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d007      	beq.n	8004c10 <TIM_OC4_SetConfig+0x74>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a2b      	ldr	r2, [pc, #172]	; (8004cb0 <TIM_OC4_SetConfig+0x114>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC4_SetConfig+0x74>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a2a      	ldr	r2, [pc, #168]	; (8004cb4 <TIM_OC4_SetConfig+0x118>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d10d      	bne.n	8004c2c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	031b      	lsls	r3, r3, #12
 8004c1e:	697a      	ldr	r2, [r7, #20]
 8004c20:	4313      	orrs	r3, r2
 8004c22:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	4a1f      	ldr	r2, [pc, #124]	; (8004cac <TIM_OC4_SetConfig+0x110>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d013      	beq.n	8004c5c <TIM_OC4_SetConfig+0xc0>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	4a1e      	ldr	r2, [pc, #120]	; (8004cb0 <TIM_OC4_SetConfig+0x114>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00f      	beq.n	8004c5c <TIM_OC4_SetConfig+0xc0>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a1e      	ldr	r2, [pc, #120]	; (8004cb8 <TIM_OC4_SetConfig+0x11c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00b      	beq.n	8004c5c <TIM_OC4_SetConfig+0xc0>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	4a1d      	ldr	r2, [pc, #116]	; (8004cbc <TIM_OC4_SetConfig+0x120>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d007      	beq.n	8004c5c <TIM_OC4_SetConfig+0xc0>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a1c      	ldr	r2, [pc, #112]	; (8004cc0 <TIM_OC4_SetConfig+0x124>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d003      	beq.n	8004c5c <TIM_OC4_SetConfig+0xc0>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a17      	ldr	r2, [pc, #92]	; (8004cb4 <TIM_OC4_SetConfig+0x118>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d113      	bne.n	8004c84 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c62:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004c6a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	695b      	ldr	r3, [r3, #20]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	699b      	ldr	r3, [r3, #24]
 8004c7c:	019b      	lsls	r3, r3, #6
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	4313      	orrs	r3, r2
 8004c82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	693a      	ldr	r2, [r7, #16]
 8004c88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685a      	ldr	r2, [r3, #4]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	697a      	ldr	r2, [r7, #20]
 8004c9c:	621a      	str	r2, [r3, #32]
}
 8004c9e:	bf00      	nop
 8004ca0:	371c      	adds	r7, #28
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr
 8004caa:	bf00      	nop
 8004cac:	40012c00 	.word	0x40012c00
 8004cb0:	40013400 	.word	0x40013400
 8004cb4:	40015000 	.word	0x40015000
 8004cb8:	40014000 	.word	0x40014000
 8004cbc:	40014400 	.word	0x40014400
 8004cc0:	40014800 	.word	0x40014800

08004cc4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68fa      	ldr	r2, [r7, #12]
 8004cfe:	4313      	orrs	r3, r2
 8004d00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004d02:	693b      	ldr	r3, [r7, #16]
 8004d04:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004d08:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	041b      	lsls	r3, r3, #16
 8004d10:	693a      	ldr	r2, [r7, #16]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a19      	ldr	r2, [pc, #100]	; (8004d80 <TIM_OC5_SetConfig+0xbc>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d013      	beq.n	8004d46 <TIM_OC5_SetConfig+0x82>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a18      	ldr	r2, [pc, #96]	; (8004d84 <TIM_OC5_SetConfig+0xc0>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d00f      	beq.n	8004d46 <TIM_OC5_SetConfig+0x82>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	4a17      	ldr	r2, [pc, #92]	; (8004d88 <TIM_OC5_SetConfig+0xc4>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d00b      	beq.n	8004d46 <TIM_OC5_SetConfig+0x82>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	4a16      	ldr	r2, [pc, #88]	; (8004d8c <TIM_OC5_SetConfig+0xc8>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d007      	beq.n	8004d46 <TIM_OC5_SetConfig+0x82>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a15      	ldr	r2, [pc, #84]	; (8004d90 <TIM_OC5_SetConfig+0xcc>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d003      	beq.n	8004d46 <TIM_OC5_SetConfig+0x82>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	4a14      	ldr	r2, [pc, #80]	; (8004d94 <TIM_OC5_SetConfig+0xd0>)
 8004d42:	4293      	cmp	r3, r2
 8004d44:	d109      	bne.n	8004d5a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	695b      	ldr	r3, [r3, #20]
 8004d52:	021b      	lsls	r3, r3, #8
 8004d54:	697a      	ldr	r2, [r7, #20]
 8004d56:	4313      	orrs	r3, r2
 8004d58:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	697a      	ldr	r2, [r7, #20]
 8004d5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	68fa      	ldr	r2, [r7, #12]
 8004d64:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	693a      	ldr	r2, [r7, #16]
 8004d72:	621a      	str	r2, [r3, #32]
}
 8004d74:	bf00      	nop
 8004d76:	371c      	adds	r7, #28
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	40012c00 	.word	0x40012c00
 8004d84:	40013400 	.word	0x40013400
 8004d88:	40014000 	.word	0x40014000
 8004d8c:	40014400 	.word	0x40014400
 8004d90:	40014800 	.word	0x40014800
 8004d94:	40015000 	.word	0x40015000

08004d98 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b087      	sub	sp, #28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a1b      	ldr	r3, [r3, #32]
 8004db2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	021b      	lsls	r3, r3, #8
 8004dd2:	68fa      	ldr	r2, [r7, #12]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004dd8:	693b      	ldr	r3, [r7, #16]
 8004dda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004dde:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	051b      	lsls	r3, r3, #20
 8004de6:	693a      	ldr	r2, [r7, #16]
 8004de8:	4313      	orrs	r3, r2
 8004dea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <TIM_OC6_SetConfig+0xc0>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d013      	beq.n	8004e1c <TIM_OC6_SetConfig+0x84>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	4a19      	ldr	r2, [pc, #100]	; (8004e5c <TIM_OC6_SetConfig+0xc4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d00f      	beq.n	8004e1c <TIM_OC6_SetConfig+0x84>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	4a18      	ldr	r2, [pc, #96]	; (8004e60 <TIM_OC6_SetConfig+0xc8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d00b      	beq.n	8004e1c <TIM_OC6_SetConfig+0x84>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a17      	ldr	r2, [pc, #92]	; (8004e64 <TIM_OC6_SetConfig+0xcc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d007      	beq.n	8004e1c <TIM_OC6_SetConfig+0x84>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a16      	ldr	r2, [pc, #88]	; (8004e68 <TIM_OC6_SetConfig+0xd0>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d003      	beq.n	8004e1c <TIM_OC6_SetConfig+0x84>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a15      	ldr	r2, [pc, #84]	; (8004e6c <TIM_OC6_SetConfig+0xd4>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d109      	bne.n	8004e30 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e22:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	029b      	lsls	r3, r3, #10
 8004e2a:	697a      	ldr	r2, [r7, #20]
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	697a      	ldr	r2, [r7, #20]
 8004e34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	685a      	ldr	r2, [r3, #4]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	693a      	ldr	r2, [r7, #16]
 8004e48:	621a      	str	r2, [r3, #32]
}
 8004e4a:	bf00      	nop
 8004e4c:	371c      	adds	r7, #28
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
 8004e56:	bf00      	nop
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	40013400 	.word	0x40013400
 8004e60:	40014000 	.word	0x40014000
 8004e64:	40014400 	.word	0x40014400
 8004e68:	40014800 	.word	0x40014800
 8004e6c:	40015000 	.word	0x40015000

08004e70 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b087      	sub	sp, #28
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	60f8      	str	r0, [r7, #12]
 8004e78:	60b9      	str	r1, [r7, #8]
 8004e7a:	607a      	str	r2, [r7, #4]
 8004e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6a1b      	ldr	r3, [r3, #32]
 8004e94:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a28      	ldr	r2, [pc, #160]	; (8004f3c <TIM_TI1_SetConfig+0xcc>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d01b      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ea4:	d017      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	4a25      	ldr	r2, [pc, #148]	; (8004f40 <TIM_TI1_SetConfig+0xd0>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d013      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	4a24      	ldr	r2, [pc, #144]	; (8004f44 <TIM_TI1_SetConfig+0xd4>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d00f      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	4a23      	ldr	r2, [pc, #140]	; (8004f48 <TIM_TI1_SetConfig+0xd8>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00b      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4a22      	ldr	r2, [pc, #136]	; (8004f4c <TIM_TI1_SetConfig+0xdc>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d007      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	4a21      	ldr	r2, [pc, #132]	; (8004f50 <TIM_TI1_SetConfig+0xe0>)
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d003      	beq.n	8004ed6 <TIM_TI1_SetConfig+0x66>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4a20      	ldr	r2, [pc, #128]	; (8004f54 <TIM_TI1_SetConfig+0xe4>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d101      	bne.n	8004eda <TIM_TI1_SetConfig+0x6a>
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <TIM_TI1_SetConfig+0x6c>
 8004eda:	2300      	movs	r3, #0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d008      	beq.n	8004ef2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004ee0:	697b      	ldr	r3, [r7, #20]
 8004ee2:	f023 0303 	bic.w	r3, r3, #3
 8004ee6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004ee8:	697a      	ldr	r2, [r7, #20]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	617b      	str	r3, [r7, #20]
 8004ef0:	e003      	b.n	8004efa <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f043 0301 	orr.w	r3, r3, #1
 8004ef8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	011b      	lsls	r3, r3, #4
 8004f06:	b2db      	uxtb	r3, r3
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	f023 030a 	bic.w	r3, r3, #10
 8004f14:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	f003 030a 	and.w	r3, r3, #10
 8004f1c:	693a      	ldr	r2, [r7, #16]
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	697a      	ldr	r2, [r7, #20]
 8004f26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	693a      	ldr	r2, [r7, #16]
 8004f2c:	621a      	str	r2, [r3, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	371c      	adds	r7, #28
 8004f32:	46bd      	mov	sp, r7
 8004f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	40012c00 	.word	0x40012c00
 8004f40:	40000400 	.word	0x40000400
 8004f44:	40000800 	.word	0x40000800
 8004f48:	40000c00 	.word	0x40000c00
 8004f4c:	40013400 	.word	0x40013400
 8004f50:	40014000 	.word	0x40014000
 8004f54:	40015000 	.word	0x40015000

08004f58 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8004f58:	b580      	push	{r7, lr}
 8004f5a:	b08a      	sub	sp, #40	; 0x28
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
 8004f60:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d101      	bne.n	8004f6c <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e0a0      	b.n	80050ae <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f72:	b2db      	uxtb	r3, r3
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d106      	bne.n	8004f86 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f7fc f863 	bl	800104c <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2202      	movs	r2, #2
 8004f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	3304      	adds	r3, #4
 8004f96:	4619      	mov	r1, r3
 8004f98:	4610      	mov	r0, r2
 8004f9a:	f7ff fb97 	bl	80046cc <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6818      	ldr	r0, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	6819      	ldr	r1, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	2203      	movs	r2, #3
 8004fac:	f7ff ff60 	bl	8004e70 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	699a      	ldr	r2, [r3, #24]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 020c 	bic.w	r2, r2, #12
 8004fbe:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	6999      	ldr	r1, [r3, #24]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	430a      	orrs	r2, r1
 8004fd0:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	685a      	ldr	r2, [r3, #4]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004fe0:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004ff0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ff4:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005004:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6812      	ldr	r2, [r2, #0]
 8005010:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005014:	f023 0307 	bic.w	r3, r3, #7
 8005018:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	689a      	ldr	r2, [r3, #8]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0204 	orr.w	r2, r2, #4
 8005028:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 800502a:	2300      	movs	r3, #0
 800502c:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 800502e:	2300      	movs	r3, #0
 8005030:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005032:	2370      	movs	r3, #112	; 0x70
 8005034:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005036:	2300      	movs	r3, #0
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 800503e:	2300      	movs	r3, #0
 8005040:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f107 020c 	add.w	r2, r7, #12
 8005050:	4611      	mov	r1, r2
 8005052:	4618      	mov	r0, r3
 8005054:	f7ff fc7c 	bl	8004950 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	687a      	ldr	r2, [r7, #4]
 8005060:	6812      	ldr	r2, [r2, #0]
 8005062:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005066:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800506a:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 800507a:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2201      	movs	r2, #1
 8005088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ac:	2300      	movs	r3, #0
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	3728      	adds	r7, #40	; 0x28
 80050b2:	46bd      	mov	sp, r7
 80050b4:	bd80      	pop	{r7, pc}
	...

080050b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e074      	b.n	80051ba <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2202      	movs	r2, #2
 80050dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a34      	ldr	r2, [pc, #208]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d009      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a33      	ldr	r2, [pc, #204]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d004      	beq.n	800510e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a31      	ldr	r2, [pc, #196]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d108      	bne.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005114:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800512a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68fa      	ldr	r2, [r7, #12]
 8005132:	4313      	orrs	r3, r2
 8005134:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a21      	ldr	r2, [pc, #132]	; (80051c8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005144:	4293      	cmp	r3, r2
 8005146:	d022      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005150:	d01d      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d018      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a1d      	ldr	r2, [pc, #116]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005162:	4293      	cmp	r3, r2
 8005164:	d013      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a1c      	ldr	r2, [pc, #112]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800516c:	4293      	cmp	r3, r2
 800516e:	d00e      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	4a15      	ldr	r2, [pc, #84]	; (80051cc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d009      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4a18      	ldr	r2, [pc, #96]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d004      	beq.n	800518e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	4a11      	ldr	r2, [pc, #68]	; (80051d0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10c      	bne.n	80051a8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005194:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689b      	ldr	r3, [r3, #8]
 800519a:	68ba      	ldr	r2, [r7, #8]
 800519c:	4313      	orrs	r3, r2
 800519e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	68ba      	ldr	r2, [r7, #8]
 80051a6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2200      	movs	r2, #0
 80051b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3714      	adds	r7, #20
 80051be:	46bd      	mov	sp, r7
 80051c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c4:	4770      	bx	lr
 80051c6:	bf00      	nop
 80051c8:	40012c00 	.word	0x40012c00
 80051cc:	40013400 	.word	0x40013400
 80051d0:	40015000 	.word	0x40015000
 80051d4:	40000400 	.word	0x40000400
 80051d8:	40000800 	.word	0x40000800
 80051dc:	40000c00 	.word	0x40000c00
 80051e0:	40014000 	.word	0x40014000

080051e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b085      	sub	sp, #20
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80051ee:	2300      	movs	r3, #0
 80051f0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	d101      	bne.n	8005200 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80051fc:	2302      	movs	r3, #2
 80051fe:	e096      	b.n	800532e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2201      	movs	r2, #1
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4313      	orrs	r3, r2
 8005214:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	4313      	orrs	r3, r2
 8005222:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	4313      	orrs	r3, r2
 8005230:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4313      	orrs	r3, r2
 800523e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	691b      	ldr	r3, [r3, #16]
 800524a:	4313      	orrs	r3, r2
 800524c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	4313      	orrs	r3, r2
 800525a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005266:	4313      	orrs	r3, r2
 8005268:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	699b      	ldr	r3, [r3, #24]
 8005274:	041b      	lsls	r3, r3, #16
 8005276:	4313      	orrs	r3, r2
 8005278:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a2f      	ldr	r2, [pc, #188]	; (800533c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d009      	beq.n	8005298 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a2d      	ldr	r2, [pc, #180]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d004      	beq.n	8005298 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d106      	bne.n	80052a6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800529e:	683b      	ldr	r3, [r7, #0]
 80052a0:	69db      	ldr	r3, [r3, #28]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a24      	ldr	r2, [pc, #144]	; (800533c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d009      	beq.n	80052c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a22      	ldr	r2, [pc, #136]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d004      	beq.n	80052c4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a21      	ldr	r2, [pc, #132]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d12b      	bne.n	800531c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	051b      	lsls	r3, r3, #20
 80052d0:	4313      	orrs	r3, r2
 80052d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	6a1b      	ldr	r3, [r3, #32]
 80052de:	4313      	orrs	r3, r2
 80052e0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a11      	ldr	r2, [pc, #68]	; (800533c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d009      	beq.n	800530e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a10      	ldr	r2, [pc, #64]	; (8005340 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d004      	beq.n	800530e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a0e      	ldr	r2, [pc, #56]	; (8005344 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d106      	bne.n	800531c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68fa      	ldr	r2, [r7, #12]
 8005322:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40012c00 	.word	0x40012c00
 8005340:	40013400 	.word	0x40013400
 8005344:	40015000 	.word	0x40015000

08005348 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800535c:	b480      	push	{r7}
 800535e:	b083      	sub	sp, #12
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005364:	bf00      	nop
 8005366:	370c      	adds	r7, #12
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr

08005370 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005370:	b480      	push	{r7}
 8005372:	b083      	sub	sp, #12
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005378:	bf00      	nop
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005384:	b480      	push	{r7}
 8005386:	b083      	sub	sp, #12
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800538c:	bf00      	nop
 800538e:	370c      	adds	r7, #12
 8005390:	46bd      	mov	sp, r7
 8005392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005396:	4770      	bx	lr

08005398 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005398:	b480      	push	{r7}
 800539a:	b083      	sub	sp, #12
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80053ac:	b480      	push	{r7}
 80053ae:	b083      	sub	sp, #12
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80053b4:	bf00      	nop
 80053b6:	370c      	adds	r7, #12
 80053b8:	46bd      	mov	sp, r7
 80053ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053be:	4770      	bx	lr

080053c0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d101      	bne.n	80053e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e042      	b.n	800546c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d106      	bne.n	80053fe <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053f8:	6878      	ldr	r0, [r7, #4]
 80053fa:	f7fb ff89 	bl	8001310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2224      	movs	r2, #36	; 0x24
 8005402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 0201 	bic.w	r2, r2, #1
 8005414:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005416:	6878      	ldr	r0, [r7, #4]
 8005418:	f000 fc50 	bl	8005cbc <UART_SetConfig>
 800541c:	4603      	mov	r3, r0
 800541e:	2b01      	cmp	r3, #1
 8005420:	d101      	bne.n	8005426 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	e022      	b.n	800546c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f000 ff40 	bl	80062b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	685a      	ldr	r2, [r3, #4]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005442:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005452:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	681a      	ldr	r2, [r3, #0]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0201 	orr.w	r2, r2, #1
 8005462:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 ffc7 	bl	80063f8 <UART_CheckIdleState>
 800546a:	4603      	mov	r3, r0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3708      	adds	r7, #8
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b08a      	sub	sp, #40	; 0x28
 8005478:	af02      	add	r7, sp, #8
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	603b      	str	r3, [r7, #0]
 8005480:	4613      	mov	r3, r2
 8005482:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800548a:	2b20      	cmp	r3, #32
 800548c:	f040 8083 	bne.w	8005596 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d002      	beq.n	800549c <HAL_UART_Transmit+0x28>
 8005496:	88fb      	ldrh	r3, [r7, #6]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d101      	bne.n	80054a0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800549c:	2301      	movs	r3, #1
 800549e:	e07b      	b.n	8005598 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80054a6:	2b01      	cmp	r3, #1
 80054a8:	d101      	bne.n	80054ae <HAL_UART_Transmit+0x3a>
 80054aa:	2302      	movs	r3, #2
 80054ac:	e074      	b.n	8005598 <HAL_UART_Transmit+0x124>
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2221      	movs	r2, #33	; 0x21
 80054c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054c6:	f7fc f817 	bl	80014f8 <HAL_GetTick>
 80054ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	88fa      	ldrh	r2, [r7, #6]
 80054d0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	88fa      	ldrh	r2, [r7, #6]
 80054d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	689b      	ldr	r3, [r3, #8]
 80054e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e4:	d108      	bne.n	80054f8 <HAL_UART_Transmit+0x84>
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d104      	bne.n	80054f8 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	61bb      	str	r3, [r7, #24]
 80054f6:	e003      	b.n	8005500 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054fc:	2300      	movs	r3, #0
 80054fe:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005508:	e02c      	b.n	8005564 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	2200      	movs	r2, #0
 8005512:	2180      	movs	r1, #128	; 0x80
 8005514:	68f8      	ldr	r0, [r7, #12]
 8005516:	f000 ffba 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d001      	beq.n	8005524 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005520:	2303      	movs	r3, #3
 8005522:	e039      	b.n	8005598 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005524:	69fb      	ldr	r3, [r7, #28]
 8005526:	2b00      	cmp	r3, #0
 8005528:	d10b      	bne.n	8005542 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800552a:	69bb      	ldr	r3, [r7, #24]
 800552c:	881b      	ldrh	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005538:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	3302      	adds	r3, #2
 800553e:	61bb      	str	r3, [r7, #24]
 8005540:	e007      	b.n	8005552 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	781a      	ldrb	r2, [r3, #0]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	3301      	adds	r3, #1
 8005550:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005558:	b29b      	uxth	r3, r3
 800555a:	3b01      	subs	r3, #1
 800555c:	b29a      	uxth	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800556a:	b29b      	uxth	r3, r3
 800556c:	2b00      	cmp	r3, #0
 800556e:	d1cc      	bne.n	800550a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	2140      	movs	r1, #64	; 0x40
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 ff87 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005586:	2303      	movs	r3, #3
 8005588:	e006      	b.n	8005598 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2220      	movs	r2, #32
 800558e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	e000      	b.n	8005598 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005596:	2302      	movs	r3, #2
  }
}
 8005598:	4618      	mov	r0, r3
 800559a:	3720      	adds	r7, #32
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b08a      	sub	sp, #40	; 0x28
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	4613      	mov	r3, r2
 80055ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d142      	bne.n	800563e <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d002      	beq.n	80055c4 <HAL_UART_Receive_IT+0x24>
 80055be:	88fb      	ldrh	r3, [r7, #6]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e03b      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UART_Receive_IT+0x36>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e034      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2200      	movs	r2, #0
 80055e2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a17      	ldr	r2, [pc, #92]	; (8005648 <HAL_UART_Receive_IT+0xa8>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d01f      	beq.n	800562e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d018      	beq.n	800562e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	e853 3f00 	ldrex	r3, [r3]
 8005608:	613b      	str	r3, [r7, #16]
   return(result);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005610:	627b      	str	r3, [r7, #36]	; 0x24
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	461a      	mov	r2, r3
 8005618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800561a:	623b      	str	r3, [r7, #32]
 800561c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800561e:	69f9      	ldr	r1, [r7, #28]
 8005620:	6a3a      	ldr	r2, [r7, #32]
 8005622:	e841 2300 	strex	r3, r2, [r1]
 8005626:	61bb      	str	r3, [r7, #24]
   return(result);
 8005628:	69bb      	ldr	r3, [r7, #24]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d1e6      	bne.n	80055fc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800562e:	88fb      	ldrh	r3, [r7, #6]
 8005630:	461a      	mov	r2, r3
 8005632:	68b9      	ldr	r1, [r7, #8]
 8005634:	68f8      	ldr	r0, [r7, #12]
 8005636:	f000 fff3 	bl	8006620 <UART_Start_Receive_IT>
 800563a:	4603      	mov	r3, r0
 800563c:	e000      	b.n	8005640 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800563e:	2302      	movs	r3, #2
  }
}
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	; 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}
 8005648:	40008000 	.word	0x40008000

0800564c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b0ba      	sub	sp, #232	; 0xe8
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005672:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005676:	f640 030f 	movw	r3, #2063	; 0x80f
 800567a:	4013      	ands	r3, r2
 800567c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005684:	2b00      	cmp	r3, #0
 8005686:	d11b      	bne.n	80056c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568c:	f003 0320 	and.w	r3, r3, #32
 8005690:	2b00      	cmp	r3, #0
 8005692:	d015      	beq.n	80056c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005698:	f003 0320 	and.w	r3, r3, #32
 800569c:	2b00      	cmp	r3, #0
 800569e:	d105      	bne.n	80056ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d009      	beq.n	80056c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f000 82d6 	beq.w	8005c62 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      }
      return;
 80056be:	e2d0      	b.n	8005c62 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80056c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	f000 811f 	beq.w	8005908 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80056ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80056ce:	4b8b      	ldr	r3, [pc, #556]	; (80058fc <HAL_UART_IRQHandler+0x2b0>)
 80056d0:	4013      	ands	r3, r2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80056d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80056da:	4b89      	ldr	r3, [pc, #548]	; (8005900 <HAL_UART_IRQHandler+0x2b4>)
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	f000 8112 	beq.w	8005908 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d011      	beq.n	8005714 <HAL_UART_IRQHandler+0xc8>
 80056f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d00b      	beq.n	8005714 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2201      	movs	r2, #1
 8005702:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800570a:	f043 0201 	orr.w	r2, r3, #1
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005718:	f003 0302 	and.w	r3, r3, #2
 800571c:	2b00      	cmp	r3, #0
 800571e:	d011      	beq.n	8005744 <HAL_UART_IRQHandler+0xf8>
 8005720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00b      	beq.n	8005744 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	2202      	movs	r2, #2
 8005732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800573a:	f043 0204 	orr.w	r2, r3, #4
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b00      	cmp	r3, #0
 800574e:	d011      	beq.n	8005774 <HAL_UART_IRQHandler+0x128>
 8005750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b00      	cmp	r3, #0
 800575a:	d00b      	beq.n	8005774 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2204      	movs	r2, #4
 8005762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576a:	f043 0202 	orr.w	r2, r3, #2
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005778:	f003 0308 	and.w	r3, r3, #8
 800577c:	2b00      	cmp	r3, #0
 800577e:	d017      	beq.n	80057b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005784:	f003 0320 	and.w	r3, r3, #32
 8005788:	2b00      	cmp	r3, #0
 800578a:	d105      	bne.n	8005798 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800578c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005790:	4b5a      	ldr	r3, [pc, #360]	; (80058fc <HAL_UART_IRQHandler+0x2b0>)
 8005792:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2208      	movs	r2, #8
 800579e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057a6:	f043 0208 	orr.w	r2, r3, #8
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80057b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d012      	beq.n	80057e2 <HAL_UART_IRQHandler+0x196>
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d00c      	beq.n	80057e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057d8:	f043 0220 	orr.w	r2, r3, #32
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 823c 	beq.w	8005c66 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80057ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f2:	f003 0320 	and.w	r3, r3, #32
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d013      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80057fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057fe:	f003 0320 	and.w	r3, r3, #32
 8005802:	2b00      	cmp	r3, #0
 8005804:	d105      	bne.n	8005812 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800580a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005816:	2b00      	cmp	r3, #0
 8005818:	d003      	beq.n	8005822 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800581e:	6878      	ldr	r0, [r7, #4]
 8005820:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005828:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	689b      	ldr	r3, [r3, #8]
 8005832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005836:	2b40      	cmp	r3, #64	; 0x40
 8005838:	d005      	beq.n	8005846 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800583e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005842:	2b00      	cmp	r3, #0
 8005844:	d04f      	beq.n	80058e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f001 f814 	bl	8006874 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005856:	2b40      	cmp	r3, #64	; 0x40
 8005858:	d141      	bne.n	80058de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	3308      	adds	r3, #8
 8005860:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005868:	e853 3f00 	ldrex	r3, [r3]
 800586c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005870:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005878:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005886:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800588a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005892:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005896:	e841 2300 	strex	r3, r2, [r1]
 800589a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800589e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1d9      	bne.n	800585a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d013      	beq.n	80058d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058b2:	4a14      	ldr	r2, [pc, #80]	; (8005904 <HAL_UART_IRQHandler+0x2b8>)
 80058b4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fd f88d 	bl	80029da <HAL_DMA_Abort_IT>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d017      	beq.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80058d0:	4610      	mov	r0, r2
 80058d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d4:	e00f      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 f9da 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058dc:	e00b      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	f000 f9d6 	bl	8005c90 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e4:	e007      	b.n	80058f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f000 f9d2 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2200      	movs	r2, #0
 80058f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80058f4:	e1b7      	b.n	8005c66 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f6:	bf00      	nop
    return;
 80058f8:	e1b5      	b.n	8005c66 <HAL_UART_IRQHandler+0x61a>
 80058fa:	bf00      	nop
 80058fc:	10000001 	.word	0x10000001
 8005900:	04000120 	.word	0x04000120
 8005904:	08006941 	.word	0x08006941

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800590c:	2b01      	cmp	r3, #1
 800590e:	f040 814a 	bne.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0310 	and.w	r3, r3, #16
 800591a:	2b00      	cmp	r3, #0
 800591c:	f000 8143 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005924:	f003 0310 	and.w	r3, r3, #16
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 813c 	beq.w	8005ba6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	2210      	movs	r2, #16
 8005934:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005940:	2b40      	cmp	r3, #64	; 0x40
 8005942:	f040 80b5 	bne.w	8005ab0 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005952:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 8187 	beq.w	8005c6a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005962:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005966:	429a      	cmp	r2, r3
 8005968:	f080 817f 	bcs.w	8005c6a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005972:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0320 	and.w	r3, r3, #32
 8005982:	2b00      	cmp	r3, #0
 8005984:	f040 8086 	bne.w	8005a94 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005990:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005994:	e853 3f00 	ldrex	r3, [r3]
 8005998:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800599c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80059a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80059b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80059b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d1da      	bne.n	8005988 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	3308      	adds	r3, #8
 80059d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e4:	f023 0301 	bic.w	r3, r3, #1
 80059e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	3308      	adds	r3, #8
 80059f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a02:	e841 2300 	strex	r3, r2, [r1]
 8005a06:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1e1      	bne.n	80059d2 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3308      	adds	r3, #8
 8005a14:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a32:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a34:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a36:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a38:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a3a:	e841 2300 	strex	r3, r2, [r1]
 8005a3e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d1e3      	bne.n	8005a0e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a64:	f023 0310 	bic.w	r3, r3, #16
 8005a68:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	461a      	mov	r2, r3
 8005a72:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005a76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a78:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a7c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e4      	bne.n	8005a54 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f7fc ff4a 	bl	8002928 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	b29b      	uxth	r3, r3
 8005aa6:	4619      	mov	r1, r3
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f000 f8fb 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005aae:	e0dc      	b.n	8005c6a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005abc:	b29b      	uxth	r3, r3
 8005abe:	1ad3      	subs	r3, r2, r3
 8005ac0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 80ce 	beq.w	8005c6e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005ad2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	f000 80c9 	beq.w	8005c6e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aec:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005af0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	461a      	mov	r2, r3
 8005afa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005afe:	647b      	str	r3, [r7, #68]	; 0x44
 8005b00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e4      	bne.n	8005adc <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	3308      	adds	r3, #8
 8005b18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b1c:	e853 3f00 	ldrex	r3, [r3]
 8005b20:	623b      	str	r3, [r7, #32]
   return(result);
 8005b22:	6a3b      	ldr	r3, [r7, #32]
 8005b24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005b28:	f023 0301 	bic.w	r3, r3, #1
 8005b2c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	3308      	adds	r3, #8
 8005b36:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b3a:	633a      	str	r2, [r7, #48]	; 0x30
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b42:	e841 2300 	strex	r3, r2, [r1]
 8005b46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d1e1      	bne.n	8005b12 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2220      	movs	r2, #32
 8005b52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b68:	693b      	ldr	r3, [r7, #16]
 8005b6a:	e853 3f00 	ldrex	r3, [r3]
 8005b6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f023 0310 	bic.w	r3, r3, #16
 8005b76:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005b84:	61fb      	str	r3, [r7, #28]
 8005b86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	617b      	str	r3, [r7, #20]
   return(result);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e4      	bne.n	8005b62 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b98:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b9c:	4619      	mov	r1, r3
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f880 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005ba4:	e063      	b.n	8005c6e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005ba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005baa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x584>
 8005bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d008      	beq.n	8005bd0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005bc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f001 fb57 	bl	800727c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005bce:	e051      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d014      	beq.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d105      	bne.n	8005bf4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005bec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d008      	beq.n	8005c06 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d03a      	beq.n	8005c72 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	4798      	blx	r3
    }
    return;
 8005c04:	e035      	b.n	8005c72 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d009      	beq.n	8005c26 <HAL_UART_IRQHandler+0x5da>
 8005c12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d003      	beq.n	8005c26 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fea4 	bl	800696c <UART_EndTransmit_IT>
    return;
 8005c24:	e026      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d009      	beq.n	8005c46 <HAL_UART_IRQHandler+0x5fa>
 8005c32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c36:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f001 fb30 	bl	80072a4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c44:	e016      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d010      	beq.n	8005c74 <HAL_UART_IRQHandler+0x628>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	da0c      	bge.n	8005c74 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f001 fb18 	bl	8007290 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c60:	e008      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c62:	bf00      	nop
 8005c64:	e006      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
    return;
 8005c66:	bf00      	nop
 8005c68:	e004      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c6a:	bf00      	nop
 8005c6c:	e002      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
      return;
 8005c6e:	bf00      	nop
 8005c70:	e000      	b.n	8005c74 <HAL_UART_IRQHandler+0x628>
    return;
 8005c72:	bf00      	nop
  }
}
 8005c74:	37e8      	adds	r7, #232	; 0xe8
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}
 8005c7a:	bf00      	nop

08005c7c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005c84:	bf00      	nop
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr

08005c90 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005c98:	bf00      	nop
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b083      	sub	sp, #12
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	460b      	mov	r3, r1
 8005cae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005cb0:	bf00      	nop
 8005cb2:	370c      	adds	r7, #12
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cba:	4770      	bx	lr

08005cbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b08c      	sub	sp, #48	; 0x30
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	431a      	orrs	r2, r3
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	695b      	ldr	r3, [r3, #20]
 8005cda:	431a      	orrs	r2, r3
 8005cdc:	697b      	ldr	r3, [r7, #20]
 8005cde:	69db      	ldr	r3, [r3, #28]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	4baa      	ldr	r3, [pc, #680]	; (8005f94 <UART_SetConfig+0x2d8>)
 8005cec:	4013      	ands	r3, r2
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	6812      	ldr	r2, [r2, #0]
 8005cf2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005cf4:	430b      	orrs	r3, r1
 8005cf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d02:	697b      	ldr	r3, [r7, #20]
 8005d04:	68da      	ldr	r2, [r3, #12]
 8005d06:	697b      	ldr	r3, [r7, #20]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	430a      	orrs	r2, r1
 8005d0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	699b      	ldr	r3, [r3, #24]
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a9f      	ldr	r2, [pc, #636]	; (8005f98 <UART_SetConfig+0x2dc>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d004      	beq.n	8005d28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6a1b      	ldr	r3, [r3, #32]
 8005d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d24:	4313      	orrs	r3, r2
 8005d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005d28:	697b      	ldr	r3, [r7, #20]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005d32:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005d36:	697a      	ldr	r2, [r7, #20]
 8005d38:	6812      	ldr	r2, [r2, #0]
 8005d3a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d3c:	430b      	orrs	r3, r1
 8005d3e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d46:	f023 010f 	bic.w	r1, r3, #15
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	430a      	orrs	r2, r1
 8005d54:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a90      	ldr	r2, [pc, #576]	; (8005f9c <UART_SetConfig+0x2e0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d125      	bne.n	8005dac <UART_SetConfig+0xf0>
 8005d60:	4b8f      	ldr	r3, [pc, #572]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f003 0303 	and.w	r3, r3, #3
 8005d6a:	2b03      	cmp	r3, #3
 8005d6c:	d81a      	bhi.n	8005da4 <UART_SetConfig+0xe8>
 8005d6e:	a201      	add	r2, pc, #4	; (adr r2, 8005d74 <UART_SetConfig+0xb8>)
 8005d70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	08005d95 	.word	0x08005d95
 8005d7c:	08005d8d 	.word	0x08005d8d
 8005d80:	08005d9d 	.word	0x08005d9d
 8005d84:	2301      	movs	r3, #1
 8005d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d8a:	e116      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d92:	e112      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005d94:	2304      	movs	r3, #4
 8005d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d9a:	e10e      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005d9c:	2308      	movs	r3, #8
 8005d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005da2:	e10a      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005da4:	2310      	movs	r3, #16
 8005da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005daa:	e106      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a7c      	ldr	r2, [pc, #496]	; (8005fa4 <UART_SetConfig+0x2e8>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d138      	bne.n	8005e28 <UART_SetConfig+0x16c>
 8005db6:	4b7a      	ldr	r3, [pc, #488]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005dbc:	f003 030c 	and.w	r3, r3, #12
 8005dc0:	2b0c      	cmp	r3, #12
 8005dc2:	d82d      	bhi.n	8005e20 <UART_SetConfig+0x164>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x110>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005e01 	.word	0x08005e01
 8005dd0:	08005e21 	.word	0x08005e21
 8005dd4:	08005e21 	.word	0x08005e21
 8005dd8:	08005e21 	.word	0x08005e21
 8005ddc:	08005e11 	.word	0x08005e11
 8005de0:	08005e21 	.word	0x08005e21
 8005de4:	08005e21 	.word	0x08005e21
 8005de8:	08005e21 	.word	0x08005e21
 8005dec:	08005e09 	.word	0x08005e09
 8005df0:	08005e21 	.word	0x08005e21
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	08005e21 	.word	0x08005e21
 8005dfc:	08005e19 	.word	0x08005e19
 8005e00:	2300      	movs	r3, #0
 8005e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e06:	e0d8      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e08:	2302      	movs	r3, #2
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e0d4      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e10:	2304      	movs	r3, #4
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e0d0      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e18:	2308      	movs	r3, #8
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e0cc      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e20:	2310      	movs	r3, #16
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e0c8      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a5e      	ldr	r2, [pc, #376]	; (8005fa8 <UART_SetConfig+0x2ec>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d125      	bne.n	8005e7e <UART_SetConfig+0x1c2>
 8005e32:	4b5b      	ldr	r3, [pc, #364]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e3c:	2b30      	cmp	r3, #48	; 0x30
 8005e3e:	d016      	beq.n	8005e6e <UART_SetConfig+0x1b2>
 8005e40:	2b30      	cmp	r3, #48	; 0x30
 8005e42:	d818      	bhi.n	8005e76 <UART_SetConfig+0x1ba>
 8005e44:	2b20      	cmp	r3, #32
 8005e46:	d00a      	beq.n	8005e5e <UART_SetConfig+0x1a2>
 8005e48:	2b20      	cmp	r3, #32
 8005e4a:	d814      	bhi.n	8005e76 <UART_SetConfig+0x1ba>
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d002      	beq.n	8005e56 <UART_SetConfig+0x19a>
 8005e50:	2b10      	cmp	r3, #16
 8005e52:	d008      	beq.n	8005e66 <UART_SetConfig+0x1aa>
 8005e54:	e00f      	b.n	8005e76 <UART_SetConfig+0x1ba>
 8005e56:	2300      	movs	r3, #0
 8005e58:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e5c:	e0ad      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e5e:	2302      	movs	r3, #2
 8005e60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e64:	e0a9      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e66:	2304      	movs	r3, #4
 8005e68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e6c:	e0a5      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e6e:	2308      	movs	r3, #8
 8005e70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e74:	e0a1      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e76:	2310      	movs	r3, #16
 8005e78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e7c:	e09d      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a4a      	ldr	r2, [pc, #296]	; (8005fac <UART_SetConfig+0x2f0>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d125      	bne.n	8005ed4 <UART_SetConfig+0x218>
 8005e88:	4b45      	ldr	r3, [pc, #276]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005e92:	2bc0      	cmp	r3, #192	; 0xc0
 8005e94:	d016      	beq.n	8005ec4 <UART_SetConfig+0x208>
 8005e96:	2bc0      	cmp	r3, #192	; 0xc0
 8005e98:	d818      	bhi.n	8005ecc <UART_SetConfig+0x210>
 8005e9a:	2b80      	cmp	r3, #128	; 0x80
 8005e9c:	d00a      	beq.n	8005eb4 <UART_SetConfig+0x1f8>
 8005e9e:	2b80      	cmp	r3, #128	; 0x80
 8005ea0:	d814      	bhi.n	8005ecc <UART_SetConfig+0x210>
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <UART_SetConfig+0x1f0>
 8005ea6:	2b40      	cmp	r3, #64	; 0x40
 8005ea8:	d008      	beq.n	8005ebc <UART_SetConfig+0x200>
 8005eaa:	e00f      	b.n	8005ecc <UART_SetConfig+0x210>
 8005eac:	2300      	movs	r3, #0
 8005eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eb2:	e082      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005eb4:	2302      	movs	r3, #2
 8005eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eba:	e07e      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005ebc:	2304      	movs	r3, #4
 8005ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ec2:	e07a      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005ec4:	2308      	movs	r3, #8
 8005ec6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eca:	e076      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005ecc:	2310      	movs	r3, #16
 8005ece:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ed2:	e072      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a35      	ldr	r2, [pc, #212]	; (8005fb0 <UART_SetConfig+0x2f4>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d12a      	bne.n	8005f34 <UART_SetConfig+0x278>
 8005ede:	4b30      	ldr	r3, [pc, #192]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ee4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ee8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005eec:	d01a      	beq.n	8005f24 <UART_SetConfig+0x268>
 8005eee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005ef2:	d81b      	bhi.n	8005f2c <UART_SetConfig+0x270>
 8005ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ef8:	d00c      	beq.n	8005f14 <UART_SetConfig+0x258>
 8005efa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005efe:	d815      	bhi.n	8005f2c <UART_SetConfig+0x270>
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <UART_SetConfig+0x250>
 8005f04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f08:	d008      	beq.n	8005f1c <UART_SetConfig+0x260>
 8005f0a:	e00f      	b.n	8005f2c <UART_SetConfig+0x270>
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f12:	e052      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f14:	2302      	movs	r3, #2
 8005f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f1a:	e04e      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f1c:	2304      	movs	r3, #4
 8005f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f22:	e04a      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f24:	2308      	movs	r3, #8
 8005f26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f2a:	e046      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f2c:	2310      	movs	r3, #16
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f32:	e042      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <UART_SetConfig+0x2dc>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d13a      	bne.n	8005fb4 <UART_SetConfig+0x2f8>
 8005f3e:	4b18      	ldr	r3, [pc, #96]	; (8005fa0 <UART_SetConfig+0x2e4>)
 8005f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f4c:	d01a      	beq.n	8005f84 <UART_SetConfig+0x2c8>
 8005f4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f52:	d81b      	bhi.n	8005f8c <UART_SetConfig+0x2d0>
 8005f54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f58:	d00c      	beq.n	8005f74 <UART_SetConfig+0x2b8>
 8005f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f5e:	d815      	bhi.n	8005f8c <UART_SetConfig+0x2d0>
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d003      	beq.n	8005f6c <UART_SetConfig+0x2b0>
 8005f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005f68:	d008      	beq.n	8005f7c <UART_SetConfig+0x2c0>
 8005f6a:	e00f      	b.n	8005f8c <UART_SetConfig+0x2d0>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f72:	e022      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f74:	2302      	movs	r3, #2
 8005f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f7a:	e01e      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f7c:	2304      	movs	r3, #4
 8005f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f82:	e01a      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f84:	2308      	movs	r3, #8
 8005f86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f8a:	e016      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f8c:	2310      	movs	r3, #16
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f92:	e012      	b.n	8005fba <UART_SetConfig+0x2fe>
 8005f94:	cfff69f3 	.word	0xcfff69f3
 8005f98:	40008000 	.word	0x40008000
 8005f9c:	40013800 	.word	0x40013800
 8005fa0:	40021000 	.word	0x40021000
 8005fa4:	40004400 	.word	0x40004400
 8005fa8:	40004800 	.word	0x40004800
 8005fac:	40004c00 	.word	0x40004c00
 8005fb0:	40005000 	.word	0x40005000
 8005fb4:	2310      	movs	r3, #16
 8005fb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4aae      	ldr	r2, [pc, #696]	; (8006278 <UART_SetConfig+0x5bc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	f040 8097 	bne.w	80060f4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005fc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fca:	2b08      	cmp	r3, #8
 8005fcc:	d823      	bhi.n	8006016 <UART_SetConfig+0x35a>
 8005fce:	a201      	add	r2, pc, #4	; (adr r2, 8005fd4 <UART_SetConfig+0x318>)
 8005fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd4:	08005ff9 	.word	0x08005ff9
 8005fd8:	08006017 	.word	0x08006017
 8005fdc:	08006001 	.word	0x08006001
 8005fe0:	08006017 	.word	0x08006017
 8005fe4:	08006007 	.word	0x08006007
 8005fe8:	08006017 	.word	0x08006017
 8005fec:	08006017 	.word	0x08006017
 8005ff0:	08006017 	.word	0x08006017
 8005ff4:	0800600f 	.word	0x0800600f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ff8:	f7fd fc8a 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8005ffc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ffe:	e010      	b.n	8006022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006000:	4b9e      	ldr	r3, [pc, #632]	; (800627c <UART_SetConfig+0x5c0>)
 8006002:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006004:	e00d      	b.n	8006022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006006:	f7fd fc15 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800600c:	e009      	b.n	8006022 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800600e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006012:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006014:	e005      	b.n	8006022 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006016:	2300      	movs	r3, #0
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006020:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006024:	2b00      	cmp	r3, #0
 8006026:	f000 8130 	beq.w	800628a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800602a:	697b      	ldr	r3, [r7, #20]
 800602c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800602e:	4a94      	ldr	r2, [pc, #592]	; (8006280 <UART_SetConfig+0x5c4>)
 8006030:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006034:	461a      	mov	r2, r3
 8006036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006038:	fbb3 f3f2 	udiv	r3, r3, r2
 800603c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	4613      	mov	r3, r2
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	4413      	add	r3, r2
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	429a      	cmp	r2, r3
 800604c:	d305      	bcc.n	800605a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	429a      	cmp	r2, r3
 8006058:	d903      	bls.n	8006062 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006060:	e113      	b.n	800628a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006064:	2200      	movs	r2, #0
 8006066:	60bb      	str	r3, [r7, #8]
 8006068:	60fa      	str	r2, [r7, #12]
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800606e:	4a84      	ldr	r2, [pc, #528]	; (8006280 <UART_SetConfig+0x5c4>)
 8006070:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006074:	b29b      	uxth	r3, r3
 8006076:	2200      	movs	r2, #0
 8006078:	603b      	str	r3, [r7, #0]
 800607a:	607a      	str	r2, [r7, #4]
 800607c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006080:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006084:	f7fa f8d2 	bl	800022c <__aeabi_uldivmod>
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	4610      	mov	r0, r2
 800608e:	4619      	mov	r1, r3
 8006090:	f04f 0200 	mov.w	r2, #0
 8006094:	f04f 0300 	mov.w	r3, #0
 8006098:	020b      	lsls	r3, r1, #8
 800609a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800609e:	0202      	lsls	r2, r0, #8
 80060a0:	6979      	ldr	r1, [r7, #20]
 80060a2:	6849      	ldr	r1, [r1, #4]
 80060a4:	0849      	lsrs	r1, r1, #1
 80060a6:	2000      	movs	r0, #0
 80060a8:	460c      	mov	r4, r1
 80060aa:	4605      	mov	r5, r0
 80060ac:	eb12 0804 	adds.w	r8, r2, r4
 80060b0:	eb43 0905 	adc.w	r9, r3, r5
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	469a      	mov	sl, r3
 80060bc:	4693      	mov	fp, r2
 80060be:	4652      	mov	r2, sl
 80060c0:	465b      	mov	r3, fp
 80060c2:	4640      	mov	r0, r8
 80060c4:	4649      	mov	r1, r9
 80060c6:	f7fa f8b1 	bl	800022c <__aeabi_uldivmod>
 80060ca:	4602      	mov	r2, r0
 80060cc:	460b      	mov	r3, r1
 80060ce:	4613      	mov	r3, r2
 80060d0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80060d2:	6a3b      	ldr	r3, [r7, #32]
 80060d4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80060d8:	d308      	bcc.n	80060ec <UART_SetConfig+0x430>
 80060da:	6a3b      	ldr	r3, [r7, #32]
 80060dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060e0:	d204      	bcs.n	80060ec <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6a3a      	ldr	r2, [r7, #32]
 80060e8:	60da      	str	r2, [r3, #12]
 80060ea:	e0ce      	b.n	800628a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80060ec:	2301      	movs	r3, #1
 80060ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060f2:	e0ca      	b.n	800628a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060f4:	697b      	ldr	r3, [r7, #20]
 80060f6:	69db      	ldr	r3, [r3, #28]
 80060f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060fc:	d166      	bne.n	80061cc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80060fe:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006102:	2b08      	cmp	r3, #8
 8006104:	d827      	bhi.n	8006156 <UART_SetConfig+0x49a>
 8006106:	a201      	add	r2, pc, #4	; (adr r2, 800610c <UART_SetConfig+0x450>)
 8006108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800610c:	08006131 	.word	0x08006131
 8006110:	08006139 	.word	0x08006139
 8006114:	08006141 	.word	0x08006141
 8006118:	08006157 	.word	0x08006157
 800611c:	08006147 	.word	0x08006147
 8006120:	08006157 	.word	0x08006157
 8006124:	08006157 	.word	0x08006157
 8006128:	08006157 	.word	0x08006157
 800612c:	0800614f 	.word	0x0800614f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006130:	f7fd fbee 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8006134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006136:	e014      	b.n	8006162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006138:	f7fd fc00 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 800613c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800613e:	e010      	b.n	8006162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006140:	4b4e      	ldr	r3, [pc, #312]	; (800627c <UART_SetConfig+0x5c0>)
 8006142:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006144:	e00d      	b.n	8006162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006146:	f7fd fb75 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800614a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800614c:	e009      	b.n	8006162 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800614e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006152:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006154:	e005      	b.n	8006162 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006160:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 8090 	beq.w	800628a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800616a:	697b      	ldr	r3, [r7, #20]
 800616c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616e:	4a44      	ldr	r2, [pc, #272]	; (8006280 <UART_SetConfig+0x5c4>)
 8006170:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006174:	461a      	mov	r2, r3
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	fbb3 f3f2 	udiv	r3, r3, r2
 800617c:	005a      	lsls	r2, r3, #1
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	085b      	lsrs	r3, r3, #1
 8006184:	441a      	add	r2, r3
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	fbb2 f3f3 	udiv	r3, r2, r3
 800618e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006190:	6a3b      	ldr	r3, [r7, #32]
 8006192:	2b0f      	cmp	r3, #15
 8006194:	d916      	bls.n	80061c4 <UART_SetConfig+0x508>
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800619c:	d212      	bcs.n	80061c4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800619e:	6a3b      	ldr	r3, [r7, #32]
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	f023 030f 	bic.w	r3, r3, #15
 80061a6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061a8:	6a3b      	ldr	r3, [r7, #32]
 80061aa:	085b      	lsrs	r3, r3, #1
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	f003 0307 	and.w	r3, r3, #7
 80061b2:	b29a      	uxth	r2, r3
 80061b4:	8bfb      	ldrh	r3, [r7, #30]
 80061b6:	4313      	orrs	r3, r2
 80061b8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	8bfa      	ldrh	r2, [r7, #30]
 80061c0:	60da      	str	r2, [r3, #12]
 80061c2:	e062      	b.n	800628a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80061ca:	e05e      	b.n	800628a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061cc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80061d0:	2b08      	cmp	r3, #8
 80061d2:	d828      	bhi.n	8006226 <UART_SetConfig+0x56a>
 80061d4:	a201      	add	r2, pc, #4	; (adr r2, 80061dc <UART_SetConfig+0x520>)
 80061d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061da:	bf00      	nop
 80061dc:	08006201 	.word	0x08006201
 80061e0:	08006209 	.word	0x08006209
 80061e4:	08006211 	.word	0x08006211
 80061e8:	08006227 	.word	0x08006227
 80061ec:	08006217 	.word	0x08006217
 80061f0:	08006227 	.word	0x08006227
 80061f4:	08006227 	.word	0x08006227
 80061f8:	08006227 	.word	0x08006227
 80061fc:	0800621f 	.word	0x0800621f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006200:	f7fd fb86 	bl	8003910 <HAL_RCC_GetPCLK1Freq>
 8006204:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006206:	e014      	b.n	8006232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006208:	f7fd fb98 	bl	800393c <HAL_RCC_GetPCLK2Freq>
 800620c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800620e:	e010      	b.n	8006232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006210:	4b1a      	ldr	r3, [pc, #104]	; (800627c <UART_SetConfig+0x5c0>)
 8006212:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006214:	e00d      	b.n	8006232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006216:	f7fd fb0d 	bl	8003834 <HAL_RCC_GetSysClockFreq>
 800621a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800621c:	e009      	b.n	8006232 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800621e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006222:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006224:	e005      	b.n	8006232 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006226:	2300      	movs	r3, #0
 8006228:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006230:	bf00      	nop
    }

    if (pclk != 0U)
 8006232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006234:	2b00      	cmp	r3, #0
 8006236:	d028      	beq.n	800628a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800623c:	4a10      	ldr	r2, [pc, #64]	; (8006280 <UART_SetConfig+0x5c4>)
 800623e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006242:	461a      	mov	r2, r3
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	fbb3 f2f2 	udiv	r2, r3, r2
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	085b      	lsrs	r3, r3, #1
 8006250:	441a      	add	r2, r3
 8006252:	697b      	ldr	r3, [r7, #20]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	fbb2 f3f3 	udiv	r3, r2, r3
 800625a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	2b0f      	cmp	r3, #15
 8006260:	d910      	bls.n	8006284 <UART_SetConfig+0x5c8>
 8006262:	6a3b      	ldr	r3, [r7, #32]
 8006264:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006268:	d20c      	bcs.n	8006284 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	b29a      	uxth	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	60da      	str	r2, [r3, #12]
 8006274:	e009      	b.n	800628a <UART_SetConfig+0x5ce>
 8006276:	bf00      	nop
 8006278:	40008000 	.word	0x40008000
 800627c:	00f42400 	.word	0x00f42400
 8006280:	0800761c 	.word	0x0800761c
      }
      else
      {
        ret = HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2201      	movs	r2, #1
 800628e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006292:	697b      	ldr	r3, [r7, #20]
 8006294:	2201      	movs	r2, #1
 8006296:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80062a0:	697b      	ldr	r3, [r7, #20]
 80062a2:	2200      	movs	r2, #0
 80062a4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80062a6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80062aa:	4618      	mov	r0, r3
 80062ac:	3730      	adds	r7, #48	; 0x30
 80062ae:	46bd      	mov	sp, r7
 80062b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080062b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c0:	f003 0301 	and.w	r3, r3, #1
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00a      	beq.n	80062de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	430a      	orrs	r2, r1
 80062dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e2:	f003 0302 	and.w	r3, r3, #2
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d00a      	beq.n	8006300 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006304:	f003 0304 	and.w	r3, r3, #4
 8006308:	2b00      	cmp	r3, #0
 800630a:	d00a      	beq.n	8006322 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	430a      	orrs	r2, r1
 8006320:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006326:	f003 0308 	and.w	r3, r3, #8
 800632a:	2b00      	cmp	r3, #0
 800632c:	d00a      	beq.n	8006344 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	685b      	ldr	r3, [r3, #4]
 8006334:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	430a      	orrs	r2, r1
 8006342:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006348:	f003 0310 	and.w	r3, r3, #16
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00a      	beq.n	8006366 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	430a      	orrs	r2, r1
 8006364:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800636a:	f003 0320 	and.w	r3, r3, #32
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00a      	beq.n	8006388 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800638c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006390:	2b00      	cmp	r3, #0
 8006392:	d01a      	beq.n	80063ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	685b      	ldr	r3, [r3, #4]
 800639a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	430a      	orrs	r2, r1
 80063a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80063b2:	d10a      	bne.n	80063ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	430a      	orrs	r2, r1
 80063c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00a      	beq.n	80063ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	430a      	orrs	r2, r1
 80063ea:	605a      	str	r2, [r3, #4]
  }
}
 80063ec:	bf00      	nop
 80063ee:	370c      	adds	r7, #12
 80063f0:	46bd      	mov	sp, r7
 80063f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f6:	4770      	bx	lr

080063f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b086      	sub	sp, #24
 80063fc:	af02      	add	r7, sp, #8
 80063fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2200      	movs	r2, #0
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006408:	f7fb f876 	bl	80014f8 <HAL_GetTick>
 800640c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	f003 0308 	and.w	r3, r3, #8
 8006418:	2b08      	cmp	r3, #8
 800641a:	d10e      	bne.n	800643a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800641c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006420:	9300      	str	r3, [sp, #0]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2200      	movs	r2, #0
 8006426:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f82f 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d001      	beq.n	800643a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e025      	b.n	8006486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	f003 0304 	and.w	r3, r3, #4
 8006444:	2b04      	cmp	r3, #4
 8006446:	d10e      	bne.n	8006466 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006448:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800644c:	9300      	str	r3, [sp, #0]
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	2200      	movs	r2, #0
 8006452:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f819 	bl	800648e <UART_WaitOnFlagUntilTimeout>
 800645c:	4603      	mov	r3, r0
 800645e:	2b00      	cmp	r3, #0
 8006460:	d001      	beq.n	8006466 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006462:	2303      	movs	r3, #3
 8006464:	e00f      	b.n	8006486 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2220      	movs	r2, #32
 800646a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2200      	movs	r2, #0
 800647a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006484:	2300      	movs	r3, #0
}
 8006486:	4618      	mov	r0, r3
 8006488:	3710      	adds	r7, #16
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800648e:	b580      	push	{r7, lr}
 8006490:	b09c      	sub	sp, #112	; 0x70
 8006492:	af00      	add	r7, sp, #0
 8006494:	60f8      	str	r0, [r7, #12]
 8006496:	60b9      	str	r1, [r7, #8]
 8006498:	603b      	str	r3, [r7, #0]
 800649a:	4613      	mov	r3, r2
 800649c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649e:	e0a9      	b.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a6:	f000 80a5 	beq.w	80065f4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064aa:	f7fb f825 	bl	80014f8 <HAL_GetTick>
 80064ae:	4602      	mov	r2, r0
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	1ad3      	subs	r3, r2, r3
 80064b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d302      	bcc.n	80064c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80064ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d140      	bne.n	8006542 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80064c8:	e853 3f00 	ldrex	r3, [r3]
 80064cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80064ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80064d4:	667b      	str	r3, [r7, #100]	; 0x64
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	461a      	mov	r2, r3
 80064dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064e0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80064e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80064e6:	e841 2300 	strex	r3, r2, [r1]
 80064ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80064ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d1e6      	bne.n	80064c0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	3308      	adds	r3, #8
 80064f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064fc:	e853 3f00 	ldrex	r3, [r3]
 8006500:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006504:	f023 0301 	bic.w	r3, r3, #1
 8006508:	663b      	str	r3, [r7, #96]	; 0x60
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3308      	adds	r3, #8
 8006510:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006512:	64ba      	str	r2, [r7, #72]	; 0x48
 8006514:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006518:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800651a:	e841 2300 	strex	r3, r2, [r1]
 800651e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006522:	2b00      	cmp	r3, #0
 8006524:	d1e5      	bne.n	80064f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2220      	movs	r2, #32
 800652a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2220      	movs	r2, #32
 8006532:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	2200      	movs	r2, #0
 800653a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800653e:	2303      	movs	r3, #3
 8006540:	e069      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	f003 0304 	and.w	r3, r3, #4
 800654c:	2b00      	cmp	r3, #0
 800654e:	d051      	beq.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800655a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800655e:	d149      	bne.n	80065f4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006568:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006572:	e853 3f00 	ldrex	r3, [r3]
 8006576:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006578:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800657e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	461a      	mov	r2, r3
 8006586:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006588:	637b      	str	r3, [r7, #52]	; 0x34
 800658a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800658c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800658e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006590:	e841 2300 	strex	r3, r2, [r1]
 8006594:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006598:	2b00      	cmp	r3, #0
 800659a:	d1e6      	bne.n	800656a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	3308      	adds	r3, #8
 80065a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	e853 3f00 	ldrex	r3, [r3]
 80065aa:	613b      	str	r3, [r7, #16]
   return(result);
 80065ac:	693b      	ldr	r3, [r7, #16]
 80065ae:	f023 0301 	bic.w	r3, r3, #1
 80065b2:	66bb      	str	r3, [r7, #104]	; 0x68
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	3308      	adds	r3, #8
 80065ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80065bc:	623a      	str	r2, [r7, #32]
 80065be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065c0:	69f9      	ldr	r1, [r7, #28]
 80065c2:	6a3a      	ldr	r2, [r7, #32]
 80065c4:	e841 2300 	strex	r3, r2, [r1]
 80065c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1e5      	bne.n	800659c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2220      	movs	r2, #32
 80065d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2220      	movs	r2, #32
 80065dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2220      	movs	r2, #32
 80065e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	2200      	movs	r2, #0
 80065ec:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e010      	b.n	8006616 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	69da      	ldr	r2, [r3, #28]
 80065fa:	68bb      	ldr	r3, [r7, #8]
 80065fc:	4013      	ands	r3, r2
 80065fe:	68ba      	ldr	r2, [r7, #8]
 8006600:	429a      	cmp	r2, r3
 8006602:	bf0c      	ite	eq
 8006604:	2301      	moveq	r3, #1
 8006606:	2300      	movne	r3, #0
 8006608:	b2db      	uxtb	r3, r3
 800660a:	461a      	mov	r2, r3
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	429a      	cmp	r2, r3
 8006610:	f43f af46 	beq.w	80064a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006614:	2300      	movs	r3, #0
}
 8006616:	4618      	mov	r0, r3
 8006618:	3770      	adds	r7, #112	; 0x70
 800661a:	46bd      	mov	sp, r7
 800661c:	bd80      	pop	{r7, pc}
	...

08006620 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006620:	b480      	push	{r7}
 8006622:	b0a3      	sub	sp, #140	; 0x8c
 8006624:	af00      	add	r7, sp, #0
 8006626:	60f8      	str	r0, [r7, #12]
 8006628:	60b9      	str	r1, [r7, #8]
 800662a:	4613      	mov	r3, r2
 800662c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	88fa      	ldrh	r2, [r7, #6]
 8006638:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	88fa      	ldrh	r2, [r7, #6]
 8006640:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006652:	d10e      	bne.n	8006672 <UART_Start_Receive_IT+0x52>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d105      	bne.n	8006668 <UART_Start_Receive_IT+0x48>
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006662:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006666:	e02d      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	22ff      	movs	r2, #255	; 0xff
 800666c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006670:	e028      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <UART_Start_Receive_IT+0x76>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <UART_Start_Receive_IT+0x6c>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	22ff      	movs	r2, #255	; 0xff
 8006686:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800668a:	e01b      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	227f      	movs	r2, #127	; 0x7f
 8006690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006694:	e016      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800669e:	d10d      	bne.n	80066bc <UART_Start_Receive_IT+0x9c>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d104      	bne.n	80066b2 <UART_Start_Receive_IT+0x92>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	227f      	movs	r2, #127	; 0x7f
 80066ac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066b0:	e008      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	223f      	movs	r2, #63	; 0x3f
 80066b6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80066ba:	e003      	b.n	80066c4 <UART_Start_Receive_IT+0xa4>
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2222      	movs	r2, #34	; 0x22
 80066d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	3308      	adds	r3, #8
 80066da:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80066de:	e853 3f00 	ldrex	r3, [r3]
 80066e2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80066e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066e6:	f043 0301 	orr.w	r3, r3, #1
 80066ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	3308      	adds	r3, #8
 80066f4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80066f8:	673a      	str	r2, [r7, #112]	; 0x70
 80066fa:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066fc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80066fe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006700:	e841 2300 	strex	r3, r2, [r1]
 8006704:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006706:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006708:	2b00      	cmp	r3, #0
 800670a:	d1e3      	bne.n	80066d4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006710:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006714:	d153      	bne.n	80067be <UART_Start_Receive_IT+0x19e>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	429a      	cmp	r2, r3
 8006720:	d34d      	bcc.n	80067be <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800672a:	d107      	bne.n	800673c <UART_Start_Receive_IT+0x11c>
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	691b      	ldr	r3, [r3, #16]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d103      	bne.n	800673c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	4a4b      	ldr	r2, [pc, #300]	; (8006864 <UART_Start_Receive_IT+0x244>)
 8006738:	671a      	str	r2, [r3, #112]	; 0x70
 800673a:	e002      	b.n	8006742 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a4a      	ldr	r2, [pc, #296]	; (8006868 <UART_Start_Receive_IT+0x248>)
 8006740:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d01a      	beq.n	8006788 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800675a:	e853 3f00 	ldrex	r3, [r3]
 800675e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006762:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006766:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006774:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006776:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006778:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800677a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800677c:	e841 2300 	strex	r3, r2, [r1]
 8006780:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006782:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006784:	2b00      	cmp	r3, #0
 8006786:	d1e4      	bne.n	8006752 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3308      	adds	r3, #8
 800678e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006798:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800679a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800679e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3308      	adds	r3, #8
 80067a6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80067a8:	64ba      	str	r2, [r7, #72]	; 0x48
 80067aa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e5      	bne.n	8006788 <UART_Start_Receive_IT+0x168>
 80067bc:	e04a      	b.n	8006854 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80067c6:	d107      	bne.n	80067d8 <UART_Start_Receive_IT+0x1b8>
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	691b      	ldr	r3, [r3, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d103      	bne.n	80067d8 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a26      	ldr	r2, [pc, #152]	; (800686c <UART_Start_Receive_IT+0x24c>)
 80067d4:	671a      	str	r2, [r3, #112]	; 0x70
 80067d6:	e002      	b.n	80067de <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	4a25      	ldr	r2, [pc, #148]	; (8006870 <UART_Start_Receive_IT+0x250>)
 80067dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	691b      	ldr	r3, [r3, #16]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d019      	beq.n	8006822 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8006802:	677b      	str	r3, [r7, #116]	; 0x74
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	461a      	mov	r2, r3
 800680a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800680c:	637b      	str	r3, [r7, #52]	; 0x34
 800680e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006812:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800681a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e6      	bne.n	80067ee <UART_Start_Receive_IT+0x1ce>
 8006820:	e018      	b.n	8006854 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	e853 3f00 	ldrex	r3, [r3]
 800682e:	613b      	str	r3, [r7, #16]
   return(result);
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	f043 0320 	orr.w	r3, r3, #32
 8006836:	67bb      	str	r3, [r7, #120]	; 0x78
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	461a      	mov	r2, r3
 800683e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006840:	623b      	str	r3, [r7, #32]
 8006842:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006844:	69f9      	ldr	r1, [r7, #28]
 8006846:	6a3a      	ldr	r2, [r7, #32]
 8006848:	e841 2300 	strex	r3, r2, [r1]
 800684c:	61bb      	str	r3, [r7, #24]
   return(result);
 800684e:	69bb      	ldr	r3, [r7, #24]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d1e6      	bne.n	8006822 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8006854:	2300      	movs	r3, #0
}
 8006856:	4618      	mov	r0, r3
 8006858:	378c      	adds	r7, #140	; 0x8c
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
 8006862:	bf00      	nop
 8006864:	08006f7d 	.word	0x08006f7d
 8006868:	08006c85 	.word	0x08006c85
 800686c:	08006b23 	.word	0x08006b23
 8006870:	080069c3 	.word	0x080069c3

08006874 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006874:	b480      	push	{r7}
 8006876:	b095      	sub	sp, #84	; 0x54
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006884:	e853 3f00 	ldrex	r3, [r3]
 8006888:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800688a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006890:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	461a      	mov	r2, r3
 8006898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800689a:	643b      	str	r3, [r7, #64]	; 0x40
 800689c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800689e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80068a0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068a2:	e841 2300 	strex	r3, r2, [r1]
 80068a6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d1e6      	bne.n	800687c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3308      	adds	r3, #8
 80068b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	e853 3f00 	ldrex	r3, [r3]
 80068bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80068be:	69fb      	ldr	r3, [r7, #28]
 80068c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068c4:	f023 0301 	bic.w	r3, r3, #1
 80068c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3308      	adds	r3, #8
 80068d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068d2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068da:	e841 2300 	strex	r3, r2, [r1]
 80068de:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d1e3      	bne.n	80068ae <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068ea:	2b01      	cmp	r3, #1
 80068ec:	d118      	bne.n	8006920 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	e853 3f00 	ldrex	r3, [r3]
 80068fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f023 0310 	bic.w	r3, r3, #16
 8006902:	647b      	str	r3, [r7, #68]	; 0x44
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	461a      	mov	r2, r3
 800690a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800690c:	61bb      	str	r3, [r7, #24]
 800690e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006910:	6979      	ldr	r1, [r7, #20]
 8006912:	69ba      	ldr	r2, [r7, #24]
 8006914:	e841 2300 	strex	r3, r2, [r1]
 8006918:	613b      	str	r3, [r7, #16]
   return(result);
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d1e6      	bne.n	80068ee <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2200      	movs	r2, #0
 8006932:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006934:	bf00      	nop
 8006936:	3754      	adds	r7, #84	; 0x54
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr

08006940 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b084      	sub	sp, #16
 8006944:	af00      	add	r7, sp, #0
 8006946:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800694c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	2200      	movs	r2, #0
 8006952:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f7ff f996 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006964:	bf00      	nop
 8006966:	3710      	adds	r7, #16
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}

0800696c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b088      	sub	sp, #32
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	e853 3f00 	ldrex	r3, [r3]
 8006980:	60bb      	str	r3, [r7, #8]
   return(result);
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006988:	61fb      	str	r3, [r7, #28]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	461a      	mov	r2, r3
 8006990:	69fb      	ldr	r3, [r7, #28]
 8006992:	61bb      	str	r3, [r7, #24]
 8006994:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006996:	6979      	ldr	r1, [r7, #20]
 8006998:	69ba      	ldr	r2, [r7, #24]
 800699a:	e841 2300 	strex	r3, r2, [r1]
 800699e:	613b      	str	r3, [r7, #16]
   return(result);
 80069a0:	693b      	ldr	r3, [r7, #16]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d1e6      	bne.n	8006974 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	2220      	movs	r2, #32
 80069aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2200      	movs	r2, #0
 80069b2:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff f961 	bl	8005c7c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069ba:	bf00      	nop
 80069bc:	3720      	adds	r7, #32
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b096      	sub	sp, #88	; 0x58
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	2b22      	cmp	r3, #34	; 0x22
 80069dc:	f040 8095 	bne.w	8006b0a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80069ea:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80069ee:	b2d9      	uxtb	r1, r3
 80069f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069fa:	400a      	ands	r2, r1
 80069fc:	b2d2      	uxtb	r2, r2
 80069fe:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	1c5a      	adds	r2, r3, #1
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d178      	bne.n	8006b1a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a3c:	653b      	str	r3, [r7, #80]	; 0x50
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a46:	647b      	str	r3, [r7, #68]	; 0x44
 8006a48:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e6      	bne.n	8006a28 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	623b      	str	r3, [r7, #32]
   return(result);
 8006a6a:	6a3b      	ldr	r3, [r7, #32]
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006a7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d12e      	bne.n	8006b02 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	60fb      	str	r3, [r7, #12]
   return(result);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f023 0310 	bic.w	r3, r3, #16
 8006abe:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ac8:	61fb      	str	r3, [r7, #28]
 8006aca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	69b9      	ldr	r1, [r7, #24]
 8006ace:	69fa      	ldr	r2, [r7, #28]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	617b      	str	r3, [r7, #20]
   return(result);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d103      	bne.n	8006af2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff f8d2 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b00:	e00b      	b.n	8006b1a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f7f9 fffa 	bl	8000afc <HAL_UART_RxCpltCallback>
}
 8006b08:	e007      	b.n	8006b1a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0208 	orr.w	r2, r2, #8
 8006b18:	619a      	str	r2, [r3, #24]
}
 8006b1a:	bf00      	nop
 8006b1c:	3758      	adds	r7, #88	; 0x58
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b096      	sub	sp, #88	; 0x58
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b30:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3a:	2b22      	cmp	r3, #34	; 0x22
 8006b3c:	f040 8095 	bne.w	8006c6a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b4e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8006b50:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8006b54:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006b58:	4013      	ands	r3, r2
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b5e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b64:	1c9a      	adds	r2, r3, #2
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	b29a      	uxth	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d178      	bne.n	8006c7a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b90:	e853 3f00 	ldrex	r3, [r3]
 8006b94:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b98:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b9c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ba6:	643b      	str	r3, [r7, #64]	; 0x40
 8006ba8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006baa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006bac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006bae:	e841 2300 	strex	r3, r2, [r1]
 8006bb2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d1e6      	bne.n	8006b88 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	3308      	adds	r3, #8
 8006bc0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bc2:	6a3b      	ldr	r3, [r7, #32]
 8006bc4:	e853 3f00 	ldrex	r3, [r3]
 8006bc8:	61fb      	str	r3, [r7, #28]
   return(result);
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f023 0301 	bic.w	r3, r3, #1
 8006bd0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3308      	adds	r3, #8
 8006bd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006bda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006bdc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006be0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be2:	e841 2300 	strex	r3, r2, [r1]
 8006be6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1e5      	bne.n	8006bba <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2220      	movs	r2, #32
 8006bf2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d12e      	bne.n	8006c62 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	e853 3f00 	ldrex	r3, [r3]
 8006c16:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	f023 0310 	bic.w	r3, r3, #16
 8006c1e:	647b      	str	r3, [r7, #68]	; 0x44
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	461a      	mov	r2, r3
 8006c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c28:	61bb      	str	r3, [r7, #24]
 8006c2a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c2c:	6979      	ldr	r1, [r7, #20]
 8006c2e:	69ba      	ldr	r2, [r7, #24]
 8006c30:	e841 2300 	strex	r3, r2, [r1]
 8006c34:	613b      	str	r3, [r7, #16]
   return(result);
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d1e6      	bne.n	8006c0a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	69db      	ldr	r3, [r3, #28]
 8006c42:	f003 0310 	and.w	r3, r3, #16
 8006c46:	2b10      	cmp	r3, #16
 8006c48:	d103      	bne.n	8006c52 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	2210      	movs	r2, #16
 8006c50:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7ff f822 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006c60:	e00b      	b.n	8006c7a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7f9 ff4a 	bl	8000afc <HAL_UART_RxCpltCallback>
}
 8006c68:	e007      	b.n	8006c7a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	699a      	ldr	r2, [r3, #24]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0208 	orr.w	r2, r2, #8
 8006c78:	619a      	str	r2, [r3, #24]
}
 8006c7a:	bf00      	nop
 8006c7c:	3758      	adds	r7, #88	; 0x58
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
	...

08006c84 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b0a6      	sub	sp, #152	; 0x98
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006c92:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	69db      	ldr	r3, [r3, #28]
 8006c9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	689b      	ldr	r3, [r3, #8]
 8006cb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cba:	2b22      	cmp	r3, #34	; 0x22
 8006cbc:	f040 814f 	bne.w	8006f5e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006cc6:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006cca:	e0f6      	b.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006cd6:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006cda:	b2d9      	uxtb	r1, r3
 8006cdc:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ce6:	400a      	ands	r2, r1
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cf0:	1c5a      	adds	r2, r3, #1
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006cfc:	b29b      	uxth	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006d12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d16:	f003 0307 	and.w	r3, r3, #7
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d053      	beq.n	8006dc6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d22:	f003 0301 	and.w	r3, r3, #1
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d011      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0xca>
 8006d2a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d00b      	beq.n	8006d4e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d44:	f043 0201 	orr.w	r2, r3, #1
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d52:	f003 0302 	and.w	r3, r3, #2
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d011      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006d5a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00b      	beq.n	8006d7e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d74:	f043 0204 	orr.w	r2, r3, #4
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d7e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d82:	f003 0304 	and.w	r3, r3, #4
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d011      	beq.n	8006dae <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006d8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d00b      	beq.n	8006dae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	2204      	movs	r2, #4
 8006d9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006da4:	f043 0202 	orr.w	r2, r3, #2
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d006      	beq.n	8006dc6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006db8:	6878      	ldr	r0, [r7, #4]
 8006dba:	f7fe ff69 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dcc:	b29b      	uxth	r3, r3
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d173      	bne.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006de0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006de6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006df6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006dfa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006e02:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e4      	bne.n	8006dd2 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006e18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006e1e:	f023 0301 	bic.w	r3, r3, #1
 8006e22:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	3308      	adds	r3, #8
 8006e2a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006e2c:	657a      	str	r2, [r7, #84]	; 0x54
 8006e2e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006e32:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e3      	bne.n	8006e08 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2220      	movs	r2, #32
 8006e44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e52:	2b01      	cmp	r3, #1
 8006e54:	d12e      	bne.n	8006eb4 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e64:	e853 3f00 	ldrex	r3, [r3]
 8006e68:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e6c:	f023 0310 	bic.w	r3, r3, #16
 8006e70:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	461a      	mov	r2, r3
 8006e78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8006e7c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e7e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e80:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e82:	e841 2300 	strex	r3, r2, [r1]
 8006e86:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d1e6      	bne.n	8006e5c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69db      	ldr	r3, [r3, #28]
 8006e94:	f003 0310 	and.w	r3, r3, #16
 8006e98:	2b10      	cmp	r3, #16
 8006e9a:	d103      	bne.n	8006ea4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2210      	movs	r2, #16
 8006ea2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006eaa:	4619      	mov	r1, r3
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7fe fef9 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
 8006eb2:	e002      	b.n	8006eba <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f7f9 fe21 	bl	8000afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006eba:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d006      	beq.n	8006ed0 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006ec2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ec6:	f003 0320 	and.w	r3, r3, #32
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	f47f aefe 	bne.w	8006ccc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ed6:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006eda:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d045      	beq.n	8006f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006ee8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006eec:	429a      	cmp	r2, r3
 8006eee:	d23e      	bcs.n	8006f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	3308      	adds	r3, #8
 8006ef6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006f06:	673b      	str	r3, [r7, #112]	; 0x70
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f10:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f12:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006f16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	4a14      	ldr	r2, [pc, #80]	; (8006f78 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8006f28:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	e853 3f00 	ldrex	r3, [r3]
 8006f36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f043 0320 	orr.w	r3, r3, #32
 8006f3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	461a      	mov	r2, r3
 8006f46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f48:	61bb      	str	r3, [r7, #24]
 8006f4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f4c:	6979      	ldr	r1, [r7, #20]
 8006f4e:	69ba      	ldr	r2, [r7, #24]
 8006f50:	e841 2300 	strex	r3, r2, [r1]
 8006f54:	613b      	str	r3, [r7, #16]
   return(result);
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d1e6      	bne.n	8006f2a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f5c:	e007      	b.n	8006f6e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	699a      	ldr	r2, [r3, #24]
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	f042 0208 	orr.w	r2, r2, #8
 8006f6c:	619a      	str	r2, [r3, #24]
}
 8006f6e:	bf00      	nop
 8006f70:	3798      	adds	r7, #152	; 0x98
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	080069c3 	.word	0x080069c3

08006f7c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b0a8      	sub	sp, #160	; 0xa0
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f8a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69db      	ldr	r3, [r3, #28]
 8006f94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	689b      	ldr	r3, [r3, #8]
 8006fa8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fb2:	2b22      	cmp	r3, #34	; 0x22
 8006fb4:	f040 8153 	bne.w	800725e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006fbe:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006fc2:	e0fa      	b.n	80071ba <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006fd6:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006fda:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006fde:	4013      	ands	r3, r2
 8006fe0:	b29a      	uxth	r2, r3
 8006fe2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fe6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fec:	1c9a      	adds	r2, r3, #2
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	3b01      	subs	r3, #1
 8006ffc:	b29a      	uxth	r2, r3
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	69db      	ldr	r3, [r3, #28]
 800700a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800700e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007012:	f003 0307 	and.w	r3, r3, #7
 8007016:	2b00      	cmp	r3, #0
 8007018:	d053      	beq.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800701a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	2b00      	cmp	r3, #0
 8007024:	d011      	beq.n	800704a <UART_RxISR_16BIT_FIFOEN+0xce>
 8007026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800702a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00b      	beq.n	800704a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2201      	movs	r2, #1
 8007038:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007040:	f043 0201 	orr.w	r2, r3, #1
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800704a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800704e:	f003 0302 	and.w	r3, r3, #2
 8007052:	2b00      	cmp	r3, #0
 8007054:	d011      	beq.n	800707a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007056:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800705a:	f003 0301 	and.w	r3, r3, #1
 800705e:	2b00      	cmp	r3, #0
 8007060:	d00b      	beq.n	800707a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	2202      	movs	r2, #2
 8007068:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007070:	f043 0204 	orr.w	r2, r3, #4
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800707a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800707e:	f003 0304 	and.w	r3, r3, #4
 8007082:	2b00      	cmp	r3, #0
 8007084:	d011      	beq.n	80070aa <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800708a:	f003 0301 	and.w	r3, r3, #1
 800708e:	2b00      	cmp	r3, #0
 8007090:	d00b      	beq.n	80070aa <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2204      	movs	r2, #4
 8007098:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070a0:	f043 0202 	orr.w	r2, r3, #2
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d006      	beq.n	80070c2 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f7fe fdeb 	bl	8005c90 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070c8:	b29b      	uxth	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d175      	bne.n	80071ba <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80070d6:	e853 3f00 	ldrex	r3, [r3]
 80070da:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80070dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80070de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	461a      	mov	r2, r3
 80070ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070f0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80070f2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80070f6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80070fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e4      	bne.n	80070ce <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	3308      	adds	r3, #8
 800710a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800710c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800710e:	e853 3f00 	ldrex	r3, [r3]
 8007112:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007114:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800711a:	f023 0301 	bic.w	r3, r3, #1
 800711e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3308      	adds	r3, #8
 8007128:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800712c:	65ba      	str	r2, [r7, #88]	; 0x58
 800712e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007134:	e841 2300 	strex	r3, r2, [r1]
 8007138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800713a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800713c:	2b00      	cmp	r3, #0
 800713e:	d1e1      	bne.n	8007104 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2220      	movs	r2, #32
 8007144:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007152:	2b01      	cmp	r3, #1
 8007154:	d12e      	bne.n	80071b4 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007164:	e853 3f00 	ldrex	r3, [r3]
 8007168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800716a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800716c:	f023 0310 	bic.w	r3, r3, #16
 8007170:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	461a      	mov	r2, r3
 8007178:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800717a:	647b      	str	r3, [r7, #68]	; 0x44
 800717c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800717e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007182:	e841 2300 	strex	r3, r2, [r1]
 8007186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800718a:	2b00      	cmp	r3, #0
 800718c:	d1e6      	bne.n	800715c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	69db      	ldr	r3, [r3, #28]
 8007194:	f003 0310 	and.w	r3, r3, #16
 8007198:	2b10      	cmp	r3, #16
 800719a:	d103      	bne.n	80071a4 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2210      	movs	r2, #16
 80071a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7fe fd79 	bl	8005ca4 <HAL_UARTEx_RxEventCallback>
 80071b2:	e002      	b.n	80071ba <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7f9 fca1 	bl	8000afc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80071ba:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d006      	beq.n	80071d0 <UART_RxISR_16BIT_FIFOEN+0x254>
 80071c2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	f47f aefa 	bne.w	8006fc4 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80071d6:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80071da:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d045      	beq.n	800726e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80071e8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d23e      	bcs.n	800726e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	3308      	adds	r3, #8
 80071f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	e853 3f00 	ldrex	r3, [r3]
 80071fe:	623b      	str	r3, [r7, #32]
   return(result);
 8007200:	6a3b      	ldr	r3, [r7, #32]
 8007202:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007206:	677b      	str	r3, [r7, #116]	; 0x74
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	3308      	adds	r3, #8
 800720e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007210:	633a      	str	r2, [r7, #48]	; 0x30
 8007212:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007214:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007218:	e841 2300 	strex	r3, r2, [r1]
 800721c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800721e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007220:	2b00      	cmp	r3, #0
 8007222:	d1e5      	bne.n	80071f0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	4a14      	ldr	r2, [pc, #80]	; (8007278 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007228:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007230:	693b      	ldr	r3, [r7, #16]
 8007232:	e853 3f00 	ldrex	r3, [r3]
 8007236:	60fb      	str	r3, [r7, #12]
   return(result);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	f043 0320 	orr.w	r3, r3, #32
 800723e:	673b      	str	r3, [r7, #112]	; 0x70
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	461a      	mov	r2, r3
 8007246:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007248:	61fb      	str	r3, [r7, #28]
 800724a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800724c:	69b9      	ldr	r1, [r7, #24]
 800724e:	69fa      	ldr	r2, [r7, #28]
 8007250:	e841 2300 	strex	r3, r2, [r1]
 8007254:	617b      	str	r3, [r7, #20]
   return(result);
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d1e6      	bne.n	800722a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800725c:	e007      	b.n	800726e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	699a      	ldr	r2, [r3, #24]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0208 	orr.w	r2, r2, #8
 800726c:	619a      	str	r2, [r3, #24]
}
 800726e:	bf00      	nop
 8007270:	37a0      	adds	r7, #160	; 0xa0
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	08006b23 	.word	0x08006b23

0800727c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800727c:	b480      	push	{r7}
 800727e:	b083      	sub	sp, #12
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007284:	bf00      	nop
 8007286:	370c      	adds	r7, #12
 8007288:	46bd      	mov	sp, r7
 800728a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728e:	4770      	bx	lr

08007290 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007290:	b480      	push	{r7}
 8007292:	b083      	sub	sp, #12
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007298:	bf00      	nop
 800729a:	370c      	adds	r7, #12
 800729c:	46bd      	mov	sp, r7
 800729e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a2:	4770      	bx	lr

080072a4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80072a4:	b480      	push	{r7}
 80072a6:	b083      	sub	sp, #12
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80072ac:	bf00      	nop
 80072ae:	370c      	adds	r7, #12
 80072b0:	46bd      	mov	sp, r7
 80072b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b6:	4770      	bx	lr

080072b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b085      	sub	sp, #20
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d101      	bne.n	80072ce <HAL_UARTEx_DisableFifoMode+0x16>
 80072ca:	2302      	movs	r3, #2
 80072cc:	e027      	b.n	800731e <HAL_UARTEx_DisableFifoMode+0x66>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2224      	movs	r2, #36	; 0x24
 80072da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f022 0201 	bic.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80072fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2200      	movs	r2, #0
 8007302:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68fa      	ldr	r2, [r7, #12]
 800730a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800731c:	2300      	movs	r3, #0
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr

0800732a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800732a:	b580      	push	{r7, lr}
 800732c:	b084      	sub	sp, #16
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
 8007332:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800733a:	2b01      	cmp	r3, #1
 800733c:	d101      	bne.n	8007342 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800733e:	2302      	movs	r3, #2
 8007340:	e02d      	b.n	800739e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2201      	movs	r2, #1
 8007346:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	2224      	movs	r2, #36	; 0x24
 800734e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f022 0201 	bic.w	r2, r2, #1
 8007368:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	683a      	ldr	r2, [r7, #0]
 800737a:	430a      	orrs	r2, r1
 800737c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f850 	bl	8007424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68fa      	ldr	r2, [r7, #12]
 800738a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3710      	adds	r7, #16
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}

080073a6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073a6:	b580      	push	{r7, lr}
 80073a8:	b084      	sub	sp, #16
 80073aa:	af00      	add	r7, sp, #0
 80073ac:	6078      	str	r0, [r7, #4]
 80073ae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d101      	bne.n	80073be <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80073ba:	2302      	movs	r3, #2
 80073bc:	e02d      	b.n	800741a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2224      	movs	r2, #36	; 0x24
 80073ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f022 0201 	bic.w	r2, r2, #1
 80073e4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	689b      	ldr	r3, [r3, #8]
 80073ec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	683a      	ldr	r2, [r7, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f812 	bl	8007424 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2220      	movs	r2, #32
 800740c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007418:	2300      	movs	r3, #0
}
 800741a:	4618      	mov	r0, r3
 800741c:	3710      	adds	r7, #16
 800741e:	46bd      	mov	sp, r7
 8007420:	bd80      	pop	{r7, pc}
	...

08007424 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007424:	b480      	push	{r7}
 8007426:	b085      	sub	sp, #20
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007444:	e031      	b.n	80074aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007446:	2308      	movs	r3, #8
 8007448:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800744a:	2308      	movs	r3, #8
 800744c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	0e5b      	lsrs	r3, r3, #25
 8007456:	b2db      	uxtb	r3, r3
 8007458:	f003 0307 	and.w	r3, r3, #7
 800745c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	689b      	ldr	r3, [r3, #8]
 8007464:	0f5b      	lsrs	r3, r3, #29
 8007466:	b2db      	uxtb	r3, r3
 8007468:	f003 0307 	and.w	r3, r3, #7
 800746c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800746e:	7bbb      	ldrb	r3, [r7, #14]
 8007470:	7b3a      	ldrb	r2, [r7, #12]
 8007472:	4911      	ldr	r1, [pc, #68]	; (80074b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007474:	5c8a      	ldrb	r2, [r1, r2]
 8007476:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800747a:	7b3a      	ldrb	r2, [r7, #12]
 800747c:	490f      	ldr	r1, [pc, #60]	; (80074bc <UARTEx_SetNbDataToProcess+0x98>)
 800747e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007480:	fb93 f3f2 	sdiv	r3, r3, r2
 8007484:	b29a      	uxth	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	7b7a      	ldrb	r2, [r7, #13]
 8007490:	4909      	ldr	r1, [pc, #36]	; (80074b8 <UARTEx_SetNbDataToProcess+0x94>)
 8007492:	5c8a      	ldrb	r2, [r1, r2]
 8007494:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007498:	7b7a      	ldrb	r2, [r7, #13]
 800749a:	4908      	ldr	r1, [pc, #32]	; (80074bc <UARTEx_SetNbDataToProcess+0x98>)
 800749c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800749e:	fb93 f3f2 	sdiv	r3, r3, r2
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80074aa:	bf00      	nop
 80074ac:	3714      	adds	r7, #20
 80074ae:	46bd      	mov	sp, r7
 80074b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b4:	4770      	bx	lr
 80074b6:	bf00      	nop
 80074b8:	08007634 	.word	0x08007634
 80074bc:	0800763c 	.word	0x0800763c

080074c0 <memset>:
 80074c0:	4402      	add	r2, r0
 80074c2:	4603      	mov	r3, r0
 80074c4:	4293      	cmp	r3, r2
 80074c6:	d100      	bne.n	80074ca <memset+0xa>
 80074c8:	4770      	bx	lr
 80074ca:	f803 1b01 	strb.w	r1, [r3], #1
 80074ce:	e7f9      	b.n	80074c4 <memset+0x4>

080074d0 <__libc_init_array>:
 80074d0:	b570      	push	{r4, r5, r6, lr}
 80074d2:	4d0d      	ldr	r5, [pc, #52]	; (8007508 <__libc_init_array+0x38>)
 80074d4:	4c0d      	ldr	r4, [pc, #52]	; (800750c <__libc_init_array+0x3c>)
 80074d6:	1b64      	subs	r4, r4, r5
 80074d8:	10a4      	asrs	r4, r4, #2
 80074da:	2600      	movs	r6, #0
 80074dc:	42a6      	cmp	r6, r4
 80074de:	d109      	bne.n	80074f4 <__libc_init_array+0x24>
 80074e0:	4d0b      	ldr	r5, [pc, #44]	; (8007510 <__libc_init_array+0x40>)
 80074e2:	4c0c      	ldr	r4, [pc, #48]	; (8007514 <__libc_init_array+0x44>)
 80074e4:	f000 f818 	bl	8007518 <_init>
 80074e8:	1b64      	subs	r4, r4, r5
 80074ea:	10a4      	asrs	r4, r4, #2
 80074ec:	2600      	movs	r6, #0
 80074ee:	42a6      	cmp	r6, r4
 80074f0:	d105      	bne.n	80074fe <__libc_init_array+0x2e>
 80074f2:	bd70      	pop	{r4, r5, r6, pc}
 80074f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80074f8:	4798      	blx	r3
 80074fa:	3601      	adds	r6, #1
 80074fc:	e7ee      	b.n	80074dc <__libc_init_array+0xc>
 80074fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007502:	4798      	blx	r3
 8007504:	3601      	adds	r6, #1
 8007506:	e7f2      	b.n	80074ee <__libc_init_array+0x1e>
 8007508:	0800764c 	.word	0x0800764c
 800750c:	0800764c 	.word	0x0800764c
 8007510:	0800764c 	.word	0x0800764c
 8007514:	08007650 	.word	0x08007650

08007518 <_init>:
 8007518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800751a:	bf00      	nop
 800751c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800751e:	bc08      	pop	{r3}
 8007520:	469e      	mov	lr, r3
 8007522:	4770      	bx	lr

08007524 <_fini>:
 8007524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007526:	bf00      	nop
 8007528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800752a:	bc08      	pop	{r3}
 800752c:	469e      	mov	lr, r3
 800752e:	4770      	bx	lr
