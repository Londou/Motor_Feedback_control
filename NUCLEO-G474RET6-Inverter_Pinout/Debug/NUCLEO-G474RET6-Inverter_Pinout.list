
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096c4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a0  080098a4  080098a4  000198a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b44  08009b44  00020128  2**0
                  CONTENTS
  4 .ARM          00000008  08009b44  08009b44  00019b44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b4c  08009b4c  00020128  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b50  08009b50  00019b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000128  20000000  08009b54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000128  08009c7c  00020128  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000634  08009c7c  00020634  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020128  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020158  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ab49  00000000  00000000  0002019b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000389d  00000000  00000000  0003ace4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003e588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001129  00000000  00000000  0003fbc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a8db  00000000  00000000  00040cf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c33e  00000000  00000000  0006b5cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114e86  00000000  00000000  0008790a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000695c  00000000  00000000  0019c790  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001a30ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000128 	.word	0x20000128
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800988c 	.word	0x0800988c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000012c 	.word	0x2000012c
 800021c:	0800988c 	.word	0x0800988c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f008 f88c 	bl	8008722 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fbf5 	bl	8001e64 <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fa98 	bl	8000bb4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 fa10 	bl	8002ab4 <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 fa8b 	bl	8000bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fd94 	bl	80021e8 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fa75 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000144 	.word	0x20000144
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f008 f81a 	bl	8008722 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fb84 	bl	8001e64 <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa27 	bl	8000bb4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fd30 	bl	80021e8 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa11 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001b0 	.word	0x200001b0
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 ffaa 	bl	8008722 <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fbe3 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 f9de 	bl	8000bb4 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fbbf 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fbb0 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 fba2 	bl	8003004 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fb69 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f964 	bl	8000bb4 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fb51 	bl	8003004 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fb42 	bl	8003004 <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	2000021c 	.word	0x2000021c
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <mesure_Current_U>:
#include "usart.h"
#include "gpio.h"



void  mesure_Current_U(){
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
//	uint32_t valeur;
//	HAL_ADC_Start(&hadc1);
//	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
//	valeur = HAL_ADC_Get_Value(&hadc1);

}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b08a      	sub	sp, #40	; 0x28
 80009b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	f107 0314 	add.w	r3, r7, #20
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
 80009bc:	609a      	str	r2, [r3, #8]
 80009be:	60da      	str	r2, [r3, #12]
 80009c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009c2:	4b3f      	ldr	r3, [pc, #252]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c6:	4a3e      	ldr	r2, [pc, #248]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009c8:	f043 0304 	orr.w	r3, r3, #4
 80009cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ce:	4b3c      	ldr	r3, [pc, #240]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009d2:	f003 0304 	and.w	r3, r3, #4
 80009d6:	613b      	str	r3, [r7, #16]
 80009d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009da:	4b39      	ldr	r3, [pc, #228]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009de:	4a38      	ldr	r2, [pc, #224]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009e0:	f043 0320 	orr.w	r3, r3, #32
 80009e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009e6:	4b36      	ldr	r3, [pc, #216]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ea:	f003 0320 	and.w	r3, r3, #32
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f2:	4b33      	ldr	r3, [pc, #204]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f6:	4a32      	ldr	r2, [pc, #200]	; (8000ac0 <MX_GPIO_Init+0x114>)
 80009f8:	f043 0301 	orr.w	r3, r3, #1
 80009fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a02:	f003 0301 	and.w	r3, r3, #1
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0e:	4a2c      	ldr	r2, [pc, #176]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a10:	f043 0302 	orr.w	r3, r3, #2
 8000a14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a16:	4b2a      	ldr	r3, [pc, #168]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	607b      	str	r3, [r7, #4]
 8000a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a26:	4a26      	ldr	r2, [pc, #152]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a28:	f043 0308 	orr.w	r3, r3, #8
 8000a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a2e:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_GPIO_Init+0x114>)
 8000a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a32:	f003 0308 	and.w	r3, r3, #8
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2120      	movs	r1, #32
 8000a3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a42:	f002 fc61 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2104      	movs	r1, #4
 8000a4a:	481e      	ldr	r0, [pc, #120]	; (8000ac4 <MX_GPIO_Init+0x118>)
 8000a4c:	f002 fc5c 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a50:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a54:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a56:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a60:	f107 0314 	add.w	r3, r7, #20
 8000a64:	4619      	mov	r1, r3
 8000a66:	4818      	ldr	r0, [pc, #96]	; (8000ac8 <MX_GPIO_Init+0x11c>)
 8000a68:	f002 facc 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a6c:	2320      	movs	r3, #32
 8000a6e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a7c:	f107 0314 	add.w	r3, r7, #20
 8000a80:	4619      	mov	r1, r3
 8000a82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a86:	f002 fabd 	bl	8003004 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a8a:	2304      	movs	r3, #4
 8000a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a8e:	2301      	movs	r3, #1
 8000a90:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a92:	2300      	movs	r3, #0
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a96:	2300      	movs	r3, #0
 8000a98:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	4808      	ldr	r0, [pc, #32]	; (8000ac4 <MX_GPIO_Init+0x118>)
 8000aa2:	f002 faaf 	bl	8003004 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2028      	movs	r0, #40	; 0x28
 8000aac:	f002 f9c2 	bl	8002e34 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ab0:	2028      	movs	r0, #40	; 0x28
 8000ab2:	f002 f9d9 	bl	8002e68 <HAL_NVIC_EnableIRQ>

}
 8000ab6:	bf00      	nop
 8000ab8:	3728      	adds	r7, #40	; 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	48000c00 	.word	0x48000c00
 8000ac8:	48000800 	.word	0x48000800

08000acc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad0:	f000 ff95 	bl	80019fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ad4:	f000 f813 	bl	8000afe <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad8:	f7ff ff68 	bl	80009ac <MX_GPIO_Init>
  MX_ADC2_Init();
 8000adc:	f7ff fdfe 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ae0:	f7ff fd84 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ae4:	f000 fc2a 	bl	800133c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ae8:	f000 fcf2 	bl	80014d0 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000aec:	f000 fe26 	bl	800173c <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000af0:	f000 fe70 	bl	80017d4 <MX_USART3_UART_Init>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);


  Shell_Init();
 8000af4:	f000 f8f0 	bl	8000cd8 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Shell_Loop();
 8000af8:	f000 f92e 	bl	8000d58 <Shell_Loop>
  {
 8000afc:	e7fc      	b.n	8000af8 <main+0x2c>

08000afe <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000afe:	b580      	push	{r7, lr}
 8000b00:	b094      	sub	sp, #80	; 0x50
 8000b02:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	2238      	movs	r2, #56	; 0x38
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f007 fe08 	bl	8008722 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	601a      	str	r2, [r3, #0]
 8000b18:	605a      	str	r2, [r3, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
 8000b1c:	60da      	str	r2, [r3, #12]
 8000b1e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b20:	2000      	movs	r0, #0
 8000b22:	f002 fc2d 	bl	8003380 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b26:	2301      	movs	r3, #1
 8000b28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b2a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b30:	2302      	movs	r3, #2
 8000b32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b34:	2303      	movs	r3, #3
 8000b36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000b38:	2306      	movs	r3, #6
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b3c:	2355      	movs	r3, #85	; 0x55
 8000b3e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b40:	2302      	movs	r3, #2
 8000b42:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b44:	2302      	movs	r3, #2
 8000b46:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b4c:	f107 0318 	add.w	r3, r7, #24
 8000b50:	4618      	mov	r0, r3
 8000b52:	f002 fcc9 	bl	80034e8 <HAL_RCC_OscConfig>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000b5c:	f000 f82a 	bl	8000bb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b60:	230f      	movs	r3, #15
 8000b62:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b64:	2303      	movs	r3, #3
 8000b66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2104      	movs	r1, #4
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 ffcd 	bl	8003b18 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000b84:	f000 f816 	bl	8000bb4 <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3750      	adds	r7, #80	; 0x50
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}

08000b90 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000ba2:	f000 ff45 	bl	8001a30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40001000 	.word	0x40001000

08000bb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb8:	b672      	cpsid	i
}
 8000bba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bbc:	e7fe      	b.n	8000bbc <Error_Handler+0x8>
	...

08000bc0 <set_PWM>:

int         alpha = 512;
int         value;
#define Speed_Max 3000 //rpm

void set_PWM(void){
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	480d      	ldr	r0, [pc, #52]	; (8000bfc <set_PWM+0x3c>)
 8000bc8:	f003 fd74 	bl	80046b4 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bcc:	2104      	movs	r1, #4
 8000bce:	480b      	ldr	r0, [pc, #44]	; (8000bfc <set_PWM+0x3c>)
 8000bd0:	f003 fd70 	bl	80046b4 <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	4809      	ldr	r0, [pc, #36]	; (8000bfc <set_PWM+0x3c>)
 8000bd8:	f005 f8a2 	bl	8005d20 <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 8000bdc:	2104      	movs	r1, #4
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <set_PWM+0x3c>)
 8000be0:	f005 f89e 	bl	8005d20 <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 8000be4:	4b06      	ldr	r3, [pc, #24]	; (8000c00 <set_PWM+0x40>)
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <set_PWM+0x3c>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha);
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <set_PWM+0x40>)
 8000bf0:	681a      	ldr	r2, [r3, #0]
 8000bf2:	4b02      	ldr	r3, [pc, #8]	; (8000bfc <set_PWM+0x3c>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	639a      	str	r2, [r3, #56]	; 0x38

}
 8000bf8:	bf00      	nop
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	2000032c 	.word	0x2000032c
 8000c00:	20000000 	.word	0x20000000

08000c04 <set_motor_speed>:


void set_motor_speed(int speed){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b084      	sub	sp, #16
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
	if(speed > Speed_Max) speed = Speed_Max;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8000c12:	4293      	cmp	r3, r2
 8000c14:	dd02      	ble.n	8000c1c <set_motor_speed+0x18>
 8000c16:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000c1a:	607b      	str	r3, [r7, #4]
	if(speed < -Speed_Max) speed = -Speed_Max;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <set_motor_speed+0x98>)
 8000c20:	4293      	cmp	r3, r2
 8000c22:	da01      	bge.n	8000c28 <set_motor_speed+0x24>
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <set_motor_speed+0x98>)
 8000c26:	607b      	str	r3, [r7, #4]
	int alpha_target = (speed + Speed_Max)*512/Speed_Max;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 8000c2e:	025b      	lsls	r3, r3, #9
 8000c30:	4a1b      	ldr	r2, [pc, #108]	; (8000ca0 <set_motor_speed+0x9c>)
 8000c32:	fb82 1203 	smull	r1, r2, r2, r3
 8000c36:	1192      	asrs	r2, r2, #6
 8000c38:	17db      	asrs	r3, r3, #31
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	60fb      	str	r3, [r7, #12]

    while (alpha!=alpha_target){
 8000c3e:	e022      	b.n	8000c86 <set_motor_speed+0x82>
 	   if(alpha<alpha_target) alpha++;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	68fa      	ldr	r2, [r7, #12]
 8000c46:	429a      	cmp	r2, r3
 8000c48:	dd04      	ble.n	8000c54 <set_motor_speed+0x50>
 8000c4a:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	4a14      	ldr	r2, [pc, #80]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c52:	6013      	str	r3, [r2, #0]
	   if(alpha>alpha_target) alpha--;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	68fa      	ldr	r2, [r7, #12]
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	da04      	bge.n	8000c68 <set_motor_speed+0x64>
 8000c5e:	4b11      	ldr	r3, [pc, #68]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	3b01      	subs	r3, #1
 8000c64:	4a0f      	ldr	r2, [pc, #60]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c66:	6013      	str	r3, [r2, #0]
       __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 8000c68:	4b0e      	ldr	r3, [pc, #56]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b0e      	ldr	r3, [pc, #56]	; (8000ca8 <set_motor_speed+0xa4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
       __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (1024-alpha));
 8000c72:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8000c7a:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <set_motor_speed+0xa4>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	639a      	str	r2, [r3, #56]	; 0x38
       HAL_Delay(10);
 8000c80:	200a      	movs	r0, #10
 8000c82:	f000 fef3 	bl	8001a6c <HAL_Delay>
    while (alpha!=alpha_target){
 8000c86:	4b07      	ldr	r3, [pc, #28]	; (8000ca4 <set_motor_speed+0xa0>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	429a      	cmp	r2, r3
 8000c8e:	d1d7      	bne.n	8000c40 <set_motor_speed+0x3c>
  }

}
 8000c90:	bf00      	nop
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	fffff448 	.word	0xfffff448
 8000ca0:	057619f1 	.word	0x057619f1
 8000ca4:	20000000 	.word	0x20000000
 8000ca8:	2000032c 	.word	0x2000032c

08000cac <deactivate_PWM>:

void deactivate_PWM(void){
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <deactivate_PWM+0x28>)
 8000cb4:	f003 fe10 	bl	80048d8 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8000cb8:	2104      	movs	r1, #4
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <deactivate_PWM+0x28>)
 8000cbc:	f003 fe0c 	bl	80048d8 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4804      	ldr	r0, [pc, #16]	; (8000cd4 <deactivate_PWM+0x28>)
 8000cc4:	f005 f8ee 	bl	8005ea4 <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8000cc8:	2104      	movs	r1, #4
 8000cca:	4802      	ldr	r0, [pc, #8]	; (8000cd4 <deactivate_PWM+0x28>)
 8000ccc:	f005 f8ea 	bl	8005ea4 <HAL_TIMEx_PWMN_Stop>

}
 8000cd0:	bf00      	nop
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	2000032c 	.word	0x2000032c

08000cd8 <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;


void Shell_Init(void){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8000cdc:	2224      	movs	r2, #36	; 0x24
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4816      	ldr	r0, [pc, #88]	; (8000d3c <Shell_Init+0x64>)
 8000ce2:	f007 fd1e 	bl	8008722 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8000ce6:	2240      	movs	r2, #64	; 0x40
 8000ce8:	2100      	movs	r1, #0
 8000cea:	4815      	ldr	r0, [pc, #84]	; (8000d40 <Shell_Init+0x68>)
 8000cec:	f007 fd19 	bl	8008722 <memset>
 8000cf0:	4b14      	ldr	r3, [pc, #80]	; (8000d44 <Shell_Init+0x6c>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8000cf6:	2240      	movs	r2, #64	; 0x40
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	4813      	ldr	r0, [pc, #76]	; (8000d48 <Shell_Init+0x70>)
 8000cfc:	f007 fd11 	bl	8008722 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000d00:	2201      	movs	r2, #1
 8000d02:	4910      	ldr	r1, [pc, #64]	; (8000d44 <Shell_Init+0x6c>)
 8000d04:	4811      	ldr	r0, [pc, #68]	; (8000d4c <Shell_Init+0x74>)
 8000d06:	f005 fbc5 	bl	8006494 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8000d0a:	4811      	ldr	r0, [pc, #68]	; (8000d50 <Shell_Init+0x78>)
 8000d0c:	f7ff fa92 	bl	8000234 <strlen>
 8000d10:	4603      	mov	r3, r0
 8000d12:	b29a      	uxth	r2, r3
 8000d14:	f04f 33ff 	mov.w	r3, #4294967295
 8000d18:	490d      	ldr	r1, [pc, #52]	; (8000d50 <Shell_Init+0x78>)
 8000d1a:	480c      	ldr	r0, [pc, #48]	; (8000d4c <Shell_Init+0x74>)
 8000d1c:	f005 fb23 	bl	8006366 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 8000d20:	480c      	ldr	r0, [pc, #48]	; (8000d54 <Shell_Init+0x7c>)
 8000d22:	f7ff fa87 	bl	8000234 <strlen>
 8000d26:	4603      	mov	r3, r0
 8000d28:	b29a      	uxth	r2, r3
 8000d2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d2e:	4909      	ldr	r1, [pc, #36]	; (8000d54 <Shell_Init+0x7c>)
 8000d30:	4806      	ldr	r0, [pc, #24]	; (8000d4c <Shell_Init+0x74>)
 8000d32:	f005 fb18 	bl	8006366 <HAL_UART_Transmit>
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200002ac 	.word	0x200002ac
 8000d40:	20000268 	.word	0x20000268
 8000d44:	20000224 	.word	0x20000224
 8000d48:	20000228 	.word	0x20000228
 8000d4c:	200003c4 	.word	0x200003c4
 8000d50:	20000020 	.word	0x20000020
 8000d54:	20000004 	.word	0x20000004

08000d58 <Shell_Loop>:

void Shell_Loop(void){
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 8000d5e:	4b7b      	ldr	r3, [pc, #492]	; (8000f4c <Shell_Loop+0x1f4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d05b      	beq.n	8000e1e <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8000d66:	4b7a      	ldr	r3, [pc, #488]	; (8000f50 <Shell_Loop+0x1f8>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d034      	beq.n	8000dd8 <Shell_Loop+0x80>
 8000d6e:	2b0d      	cmp	r3, #13
 8000d70:	d142      	bne.n	8000df8 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 8000d72:	f04f 33ff 	mov.w	r3, #4294967295
 8000d76:	2203      	movs	r2, #3
 8000d78:	4976      	ldr	r1, [pc, #472]	; (8000f54 <Shell_Loop+0x1fc>)
 8000d7a:	4877      	ldr	r0, [pc, #476]	; (8000f58 <Shell_Loop+0x200>)
 8000d7c:	f005 faf3 	bl	8006366 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8000d80:	4b76      	ldr	r3, [pc, #472]	; (8000f5c <Shell_Loop+0x204>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a76      	ldr	r2, [pc, #472]	; (8000f60 <Shell_Loop+0x208>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8000d8a:	4b76      	ldr	r3, [pc, #472]	; (8000f64 <Shell_Loop+0x20c>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8000d90:	4975      	ldr	r1, [pc, #468]	; (8000f68 <Shell_Loop+0x210>)
 8000d92:	4873      	ldr	r0, [pc, #460]	; (8000f60 <Shell_Loop+0x208>)
 8000d94:	f007 fcce 	bl	8008734 <strtok>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	4a74      	ldr	r2, [pc, #464]	; (8000f6c <Shell_Loop+0x214>)
 8000d9c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8000d9e:	e010      	b.n	8000dc2 <Shell_Loop+0x6a>
				argv[argc++] = token;
 8000da0:	4b70      	ldr	r3, [pc, #448]	; (8000f64 <Shell_Loop+0x20c>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	496f      	ldr	r1, [pc, #444]	; (8000f64 <Shell_Loop+0x20c>)
 8000da8:	600a      	str	r2, [r1, #0]
 8000daa:	4a70      	ldr	r2, [pc, #448]	; (8000f6c <Shell_Loop+0x214>)
 8000dac:	6812      	ldr	r2, [r2, #0]
 8000dae:	4970      	ldr	r1, [pc, #448]	; (8000f70 <Shell_Loop+0x218>)
 8000db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8000db4:	496c      	ldr	r1, [pc, #432]	; (8000f68 <Shell_Loop+0x210>)
 8000db6:	2000      	movs	r0, #0
 8000db8:	f007 fcbc 	bl	8008734 <strtok>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	4a6b      	ldr	r2, [pc, #428]	; (8000f6c <Shell_Loop+0x214>)
 8000dc0:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8000dc2:	4b6a      	ldr	r3, [pc, #424]	; (8000f6c <Shell_Loop+0x214>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1ea      	bne.n	8000da0 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8000dca:	4b64      	ldr	r3, [pc, #400]	; (8000f5c <Shell_Loop+0x204>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8000dd0:	4b68      	ldr	r3, [pc, #416]	; (8000f74 <Shell_Loop+0x21c>)
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	601a      	str	r2, [r3, #0]
			break;
 8000dd6:	e01f      	b.n	8000e18 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8000dd8:	4b60      	ldr	r3, [pc, #384]	; (8000f5c <Shell_Loop+0x204>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	495f      	ldr	r1, [pc, #380]	; (8000f5c <Shell_Loop+0x204>)
 8000de0:	600a      	str	r2, [r1, #0]
 8000de2:	4a5f      	ldr	r2, [pc, #380]	; (8000f60 <Shell_Loop+0x208>)
 8000de4:	2100      	movs	r1, #0
 8000de6:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8000de8:	f04f 33ff 	mov.w	r3, #4294967295
 8000dec:	2204      	movs	r2, #4
 8000dee:	4962      	ldr	r1, [pc, #392]	; (8000f78 <Shell_Loop+0x220>)
 8000df0:	4859      	ldr	r0, [pc, #356]	; (8000f58 <Shell_Loop+0x200>)
 8000df2:	f005 fab8 	bl	8006366 <HAL_UART_Transmit>
			break;
 8000df6:	e00f      	b.n	8000e18 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000df8:	4b58      	ldr	r3, [pc, #352]	; (8000f5c <Shell_Loop+0x204>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	1c5a      	adds	r2, r3, #1
 8000dfe:	4957      	ldr	r1, [pc, #348]	; (8000f5c <Shell_Loop+0x204>)
 8000e00:	600a      	str	r2, [r1, #0]
 8000e02:	4a53      	ldr	r2, [pc, #332]	; (8000f50 <Shell_Loop+0x1f8>)
 8000e04:	7811      	ldrb	r1, [r2, #0]
 8000e06:	4a56      	ldr	r2, [pc, #344]	; (8000f60 <Shell_Loop+0x208>)
 8000e08:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000e0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0e:	2201      	movs	r2, #1
 8000e10:	494f      	ldr	r1, [pc, #316]	; (8000f50 <Shell_Loop+0x1f8>)
 8000e12:	4851      	ldr	r0, [pc, #324]	; (8000f58 <Shell_Loop+0x200>)
 8000e14:	f005 faa7 	bl	8006366 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8000e18:	4b4c      	ldr	r3, [pc, #304]	; (8000f4c <Shell_Loop+0x1f4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 8000e1e:	4b55      	ldr	r3, [pc, #340]	; (8000f74 <Shell_Loop+0x21c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f000 808d 	beq.w	8000f42 <Shell_Loop+0x1ea>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8000e28:	4b51      	ldr	r3, [pc, #324]	; (8000f70 <Shell_Loop+0x218>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4953      	ldr	r1, [pc, #332]	; (8000f7c <Shell_Loop+0x224>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f7ff f9f6 	bl	8000220 <strcmp>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d107      	bne.n	8000e4a <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8000e3a:	f04f 33ff 	mov.w	r3, #4294967295
 8000e3e:	221a      	movs	r2, #26
 8000e40:	494f      	ldr	r1, [pc, #316]	; (8000f80 <Shell_Loop+0x228>)
 8000e42:	4845      	ldr	r0, [pc, #276]	; (8000f58 <Shell_Loop+0x200>)
 8000e44:	f005 fa8f 	bl	8006366 <HAL_UART_Transmit>
 8000e48:	e071      	b.n	8000f2e <Shell_Loop+0x1d6>
		}
		else if(strcmp(argv[0],"help")==0){
 8000e4a:	4b49      	ldr	r3, [pc, #292]	; (8000f70 <Shell_Loop+0x218>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	494d      	ldr	r1, [pc, #308]	; (8000f84 <Shell_Loop+0x22c>)
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff f9e5 	bl	8000220 <strcmp>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d10e      	bne.n	8000e7a <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8000e5c:	4a4a      	ldr	r2, [pc, #296]	; (8000f88 <Shell_Loop+0x230>)
 8000e5e:	2140      	movs	r1, #64	; 0x40
 8000e60:	484a      	ldr	r0, [pc, #296]	; (8000f8c <Shell_Loop+0x234>)
 8000e62:	f007 fbe7 	bl	8008634 <sniprintf>
 8000e66:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	b29a      	uxth	r2, r3
 8000e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8000e70:	4946      	ldr	r1, [pc, #280]	; (8000f8c <Shell_Loop+0x234>)
 8000e72:	4839      	ldr	r0, [pc, #228]	; (8000f58 <Shell_Loop+0x200>)
 8000e74:	f005 fa77 	bl	8006366 <HAL_UART_Transmit>
 8000e78:	e059      	b.n	8000f2e <Shell_Loop+0x1d6>
		}
		else if(strcmp(argv[0],"start")==0){
 8000e7a:	4b3d      	ldr	r3, [pc, #244]	; (8000f70 <Shell_Loop+0x218>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4944      	ldr	r1, [pc, #272]	; (8000f90 <Shell_Loop+0x238>)
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f9cd 	bl	8000220 <strcmp>
 8000e86:	4603      	mov	r3, r0
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d110      	bne.n	8000eae <Shell_Loop+0x156>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "POWER ON\r\n");
 8000e8c:	4a41      	ldr	r2, [pc, #260]	; (8000f94 <Shell_Loop+0x23c>)
 8000e8e:	2140      	movs	r1, #64	; 0x40
 8000e90:	483e      	ldr	r0, [pc, #248]	; (8000f8c <Shell_Loop+0x234>)
 8000e92:	f007 fbcf 	bl	8008634 <sniprintf>
 8000e96:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	b29a      	uxth	r2, r3
 8000e9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000ea0:	493a      	ldr	r1, [pc, #232]	; (8000f8c <Shell_Loop+0x234>)
 8000ea2:	482d      	ldr	r0, [pc, #180]	; (8000f58 <Shell_Loop+0x200>)
 8000ea4:	f005 fa5f 	bl	8006366 <HAL_UART_Transmit>
			set_PWM();
 8000ea8:	f7ff fe8a 	bl	8000bc0 <set_PWM>
 8000eac:	e03f      	b.n	8000f2e <Shell_Loop+0x1d6>
				}
		else if(strcmp(argv[0],"stop")==0){
 8000eae:	4b30      	ldr	r3, [pc, #192]	; (8000f70 <Shell_Loop+0x218>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	4939      	ldr	r1, [pc, #228]	; (8000f98 <Shell_Loop+0x240>)
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff f9b3 	bl	8000220 <strcmp>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d110      	bne.n	8000ee2 <Shell_Loop+0x18a>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "POWER OFF\r\n");
 8000ec0:	4a36      	ldr	r2, [pc, #216]	; (8000f9c <Shell_Loop+0x244>)
 8000ec2:	2140      	movs	r1, #64	; 0x40
 8000ec4:	4831      	ldr	r0, [pc, #196]	; (8000f8c <Shell_Loop+0x234>)
 8000ec6:	f007 fbb5 	bl	8008634 <sniprintf>
 8000eca:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	b29a      	uxth	r2, r3
 8000ed0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed4:	492d      	ldr	r1, [pc, #180]	; (8000f8c <Shell_Loop+0x234>)
 8000ed6:	4820      	ldr	r0, [pc, #128]	; (8000f58 <Shell_Loop+0x200>)
 8000ed8:	f005 fa45 	bl	8006366 <HAL_UART_Transmit>
			deactivate_PWM();
 8000edc:	f7ff fee6 	bl	8000cac <deactivate_PWM>
 8000ee0:	e025      	b.n	8000f2e <Shell_Loop+0x1d6>
				}
		else if(strcmp(argv[0],"speed")==0){
 8000ee2:	4b23      	ldr	r3, [pc, #140]	; (8000f70 <Shell_Loop+0x218>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	492e      	ldr	r1, [pc, #184]	; (8000fa0 <Shell_Loop+0x248>)
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff f999 	bl	8000220 <strcmp>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d109      	bne.n	8000f08 <Shell_Loop+0x1b0>

		    set_motor_speed(atoi(argv[1]));
 8000ef4:	4b1e      	ldr	r3, [pc, #120]	; (8000f70 <Shell_Loop+0x218>)
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f007 fa5b 	bl	80083b4 <atoi>
 8000efe:	4603      	mov	r3, r0
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fe7f 	bl	8000c04 <set_motor_speed>
 8000f06:	e012      	b.n	8000f2e <Shell_Loop+0x1d6>
		}

		else if(strcmp(argv[0],"U_Imes")==0){
 8000f08:	4b19      	ldr	r3, [pc, #100]	; (8000f70 <Shell_Loop+0x218>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4925      	ldr	r1, [pc, #148]	; (8000fa4 <Shell_Loop+0x24c>)
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f986 	bl	8000220 <strcmp>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d102      	bne.n	8000f20 <Shell_Loop+0x1c8>
		    mesure_Current_U();
 8000f1a:	f7ff fd3f 	bl	800099c <mesure_Current_U>
 8000f1e:	e006      	b.n	8000f2e <Shell_Loop+0x1d6>

	    }
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000f20:	f04f 33ff 	mov.w	r3, #4294967295
 8000f24:	2214      	movs	r2, #20
 8000f26:	4920      	ldr	r1, [pc, #128]	; (8000fa8 <Shell_Loop+0x250>)
 8000f28:	480b      	ldr	r0, [pc, #44]	; (8000f58 <Shell_Loop+0x200>)
 8000f2a:	f005 fa1c 	bl	8006366 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f32:	221c      	movs	r2, #28
 8000f34:	491d      	ldr	r1, [pc, #116]	; (8000fac <Shell_Loop+0x254>)
 8000f36:	4808      	ldr	r0, [pc, #32]	; (8000f58 <Shell_Loop+0x200>)
 8000f38:	f005 fa15 	bl	8006366 <HAL_UART_Transmit>
		newCmdReady = 0;
 8000f3c:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <Shell_Loop+0x21c>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
	}
}
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000220 	.word	0x20000220
 8000f50:	20000224 	.word	0x20000224
 8000f54:	20000088 	.word	0x20000088
 8000f58:	200003c4 	.word	0x200003c4
 8000f5c:	200002a8 	.word	0x200002a8
 8000f60:	20000268 	.word	0x20000268
 8000f64:	200002d0 	.word	0x200002d0
 8000f68:	080098a4 	.word	0x080098a4
 8000f6c:	200002d4 	.word	0x200002d4
 8000f70:	200002ac 	.word	0x200002ac
 8000f74:	200002d8 	.word	0x200002d8
 8000f78:	2000008c 	.word	0x2000008c
 8000f7c:	080098a8 	.word	0x080098a8
 8000f80:	200000a4 	.word	0x200000a4
 8000f84:	080098b8 	.word	0x080098b8
 8000f88:	080098c0 	.word	0x080098c0
 8000f8c:	20000228 	.word	0x20000228
 8000f90:	080098e8 	.word	0x080098e8
 8000f94:	080098f0 	.word	0x080098f0
 8000f98:	080098fc 	.word	0x080098fc
 8000f9c:	08009904 	.word	0x08009904
 8000fa0:	08009910 	.word	0x08009910
 8000fa4:	08009918 	.word	0x08009918
 8000fa8:	20000090 	.word	0x20000090
 8000fac:	20000004 	.word	0x20000004

08000fb0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b082      	sub	sp, #8
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_UART_RxCpltCallback+0x20>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4904      	ldr	r1, [pc, #16]	; (8000fd4 <HAL_UART_RxCpltCallback+0x24>)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <HAL_UART_RxCpltCallback+0x28>)
 8000fc4:	f005 fa66 	bl	8006494 <HAL_UART_Receive_IT>
}
 8000fc8:	bf00      	nop
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000220 	.word	0x20000220
 8000fd4:	20000224 	.word	0x20000224
 8000fd8:	200003c4 	.word	0x200003c4

08000fdc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <HAL_MspInit+0x44>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	4a0e      	ldr	r2, [pc, #56]	; (8001020 <HAL_MspInit+0x44>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6613      	str	r3, [r2, #96]	; 0x60
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <HAL_MspInit+0x44>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f003 0301 	and.w	r3, r3, #1
 8000ff6:	607b      	str	r3, [r7, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <HAL_MspInit+0x44>)
 8000ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffe:	4a08      	ldr	r2, [pc, #32]	; (8001020 <HAL_MspInit+0x44>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001004:	6593      	str	r3, [r2, #88]	; 0x58
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <HAL_MspInit+0x44>)
 8001008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001012:	f002 fa59 	bl	80034c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40021000 	.word	0x40021000

08001024 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b08c      	sub	sp, #48	; 0x30
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <HAL_InitTick+0xc4>)
 8001036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001038:	4a2b      	ldr	r2, [pc, #172]	; (80010e8 <HAL_InitTick+0xc4>)
 800103a:	f043 0310 	orr.w	r3, r3, #16
 800103e:	6593      	str	r3, [r2, #88]	; 0x58
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <HAL_InitTick+0xc4>)
 8001042:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001044:	f003 0310 	and.w	r3, r3, #16
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	f107 0310 	add.w	r3, r7, #16
 8001054:	4611      	mov	r1, r2
 8001056:	4618      	mov	r0, r3
 8001058:	f002 ff34 	bl	8003ec4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 800105c:	f002 ff06 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8001060:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001062:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001064:	4a21      	ldr	r2, [pc, #132]	; (80010ec <HAL_InitTick+0xc8>)
 8001066:	fba2 2303 	umull	r2, r3, r2, r3
 800106a:	0c9b      	lsrs	r3, r3, #18
 800106c:	3b01      	subs	r3, #1
 800106e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <HAL_InitTick+0xcc>)
 8001072:	4a20      	ldr	r2, [pc, #128]	; (80010f4 <HAL_InitTick+0xd0>)
 8001074:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <HAL_InitTick+0xcc>)
 8001078:	f240 32e7 	movw	r2, #999	; 0x3e7
 800107c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <HAL_InitTick+0xcc>)
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001084:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <HAL_InitTick+0xcc>)
 8001086:	2200      	movs	r2, #0
 8001088:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800108a:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <HAL_InitTick+0xcc>)
 800108c:	2200      	movs	r2, #0
 800108e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001090:	4817      	ldr	r0, [pc, #92]	; (80010f0 <HAL_InitTick+0xcc>)
 8001092:	f003 f9dd 	bl	8004450 <HAL_TIM_Base_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 800109c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d11b      	bne.n	80010dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80010a4:	4812      	ldr	r0, [pc, #72]	; (80010f0 <HAL_InitTick+0xcc>)
 80010a6:	f003 fa2b 	bl	8004500 <HAL_TIM_Base_Start_IT>
 80010aa:	4603      	mov	r3, r0
 80010ac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80010b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d111      	bne.n	80010dc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010b8:	2036      	movs	r0, #54	; 0x36
 80010ba:	f001 fed5 	bl	8002e68 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2b0f      	cmp	r3, #15
 80010c2:	d808      	bhi.n	80010d6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80010c4:	2200      	movs	r2, #0
 80010c6:	6879      	ldr	r1, [r7, #4]
 80010c8:	2036      	movs	r0, #54	; 0x36
 80010ca:	f001 feb3 	bl	8002e34 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ce:	4a0a      	ldr	r2, [pc, #40]	; (80010f8 <HAL_InitTick+0xd4>)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	e002      	b.n	80010dc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80010d6:	2301      	movs	r3, #1
 80010d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80010dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3730      	adds	r7, #48	; 0x30
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	40021000 	.word	0x40021000
 80010ec:	431bde83 	.word	0x431bde83
 80010f0:	200002dc 	.word	0x200002dc
 80010f4:	40001000 	.word	0x40001000
 80010f8:	200000c4 	.word	0x200000c4

080010fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001100:	e7fe      	b.n	8001100 <NMI_Handler+0x4>

08001102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001106:	e7fe      	b.n	8001106 <HardFault_Handler+0x4>

08001108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800110c:	e7fe      	b.n	800110c <MemManage_Handler+0x4>

0800110e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110e:	b480      	push	{r7}
 8001110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001112:	e7fe      	b.n	8001112 <BusFault_Handler+0x4>

08001114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001118:	e7fe      	b.n	8001118 <UsageFault_Handler+0x4>

0800111a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111a:	b480      	push	{r7}
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001128:	b480      	push	{r7}
 800112a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr

08001136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113a:	bf00      	nop
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001158:	4802      	ldr	r0, [pc, #8]	; (8001164 <USART2_IRQHandler+0x10>)
 800115a:	f005 f9f1 	bl	8006540 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800115e:	bf00      	nop
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	200003c4 	.word	0x200003c4

08001168 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 800116c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001170:	f002 f8e2 	bl	8003338 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}

08001178 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800117c:	4802      	ldr	r0, [pc, #8]	; (8001188 <TIM6_DAC_IRQHandler+0x10>)
 800117e:	f003 fc47 	bl	8004a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200002dc 	.word	0x200002dc

0800118c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0
  return 1;
 8001190:	2301      	movs	r3, #1
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr

0800119c <_kill>:

int _kill(int pid, int sig)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80011a6:	f007 fb67 	bl	8008878 <__errno>
 80011aa:	4603      	mov	r3, r0
 80011ac:	2216      	movs	r2, #22
 80011ae:	601a      	str	r2, [r3, #0]
  return -1;
 80011b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_exit>:

void _exit (int status)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ffe7 	bl	800119c <_kill>
  while (1) {}    /* Make sure we hang here */
 80011ce:	e7fe      	b.n	80011ce <_exit+0x12>

080011d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b086      	sub	sp, #24
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	60f8      	str	r0, [r7, #12]
 80011d8:	60b9      	str	r1, [r7, #8]
 80011da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
 80011e0:	e00a      	b.n	80011f8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011e2:	f3af 8000 	nop.w
 80011e6:	4601      	mov	r1, r0
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	1c5a      	adds	r2, r3, #1
 80011ec:	60ba      	str	r2, [r7, #8]
 80011ee:	b2ca      	uxtb	r2, r1
 80011f0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
 80011f8:	697a      	ldr	r2, [r7, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	dbf0      	blt.n	80011e2 <_read+0x12>
  }

  return len;
 8001200:	687b      	ldr	r3, [r7, #4]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3718      	adds	r7, #24
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b086      	sub	sp, #24
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001216:	2300      	movs	r3, #0
 8001218:	617b      	str	r3, [r7, #20]
 800121a:	e009      	b.n	8001230 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	1c5a      	adds	r2, r3, #1
 8001220:	60ba      	str	r2, [r7, #8]
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	4618      	mov	r0, r3
 8001226:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	3301      	adds	r3, #1
 800122e:	617b      	str	r3, [r7, #20]
 8001230:	697a      	ldr	r2, [r7, #20]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	429a      	cmp	r2, r3
 8001236:	dbf1      	blt.n	800121c <_write+0x12>
  }
  return len;
 8001238:	687b      	ldr	r3, [r7, #4]
}
 800123a:	4618      	mov	r0, r3
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <_close>:

int _close(int file)
{
 8001242:	b480      	push	{r7}
 8001244:	b083      	sub	sp, #12
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800124a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800125a:	b480      	push	{r7}
 800125c:	b083      	sub	sp, #12
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
 8001262:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800126a:	605a      	str	r2, [r3, #4]
  return 0;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr

0800127a <_isatty>:

int _isatty(int file)
{
 800127a:	b480      	push	{r7}
 800127c:	b083      	sub	sp, #12
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001282:	2301      	movs	r3, #1
}
 8001284:	4618      	mov	r0, r3
 8001286:	370c      	adds	r7, #12
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	60f8      	str	r0, [r7, #12]
 8001298:	60b9      	str	r1, [r7, #8]
 800129a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3714      	adds	r7, #20
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
	...

080012ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012b4:	4a14      	ldr	r2, [pc, #80]	; (8001308 <_sbrk+0x5c>)
 80012b6:	4b15      	ldr	r3, [pc, #84]	; (800130c <_sbrk+0x60>)
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c0:	4b13      	ldr	r3, [pc, #76]	; (8001310 <_sbrk+0x64>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d102      	bne.n	80012ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012c8:	4b11      	ldr	r3, [pc, #68]	; (8001310 <_sbrk+0x64>)
 80012ca:	4a12      	ldr	r2, [pc, #72]	; (8001314 <_sbrk+0x68>)
 80012cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ce:	4b10      	ldr	r3, [pc, #64]	; (8001310 <_sbrk+0x64>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4413      	add	r3, r2
 80012d6:	693a      	ldr	r2, [r7, #16]
 80012d8:	429a      	cmp	r2, r3
 80012da:	d207      	bcs.n	80012ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012dc:	f007 facc 	bl	8008878 <__errno>
 80012e0:	4603      	mov	r3, r0
 80012e2:	220c      	movs	r2, #12
 80012e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012e6:	f04f 33ff 	mov.w	r3, #4294967295
 80012ea:	e009      	b.n	8001300 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ec:	4b08      	ldr	r3, [pc, #32]	; (8001310 <_sbrk+0x64>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012f2:	4b07      	ldr	r3, [pc, #28]	; (8001310 <_sbrk+0x64>)
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4413      	add	r3, r2
 80012fa:	4a05      	ldr	r2, [pc, #20]	; (8001310 <_sbrk+0x64>)
 80012fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20020000 	.word	0x20020000
 800130c:	00000400 	.word	0x00000400
 8001310:	20000328 	.word	0x20000328
 8001314:	20000638 	.word	0x20000638

08001318 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <SystemInit+0x20>)
 800131e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <SystemInit+0x20>)
 8001324:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001328:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800132c:	bf00      	nop
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	e000ed00 	.word	0xe000ed00

0800133c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b09c      	sub	sp, #112	; 0x70
 8001340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001342:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
 800134c:	609a      	str	r2, [r3, #8]
 800134e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001350:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001354:	2200      	movs	r2, #0
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	605a      	str	r2, [r3, #4]
 800135a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800135c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001370:	1d3b      	adds	r3, r7, #4
 8001372:	2234      	movs	r2, #52	; 0x34
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f007 f9d3 	bl	8008722 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800137c:	4b52      	ldr	r3, [pc, #328]	; (80014c8 <MX_TIM1_Init+0x18c>)
 800137e:	4a53      	ldr	r2, [pc, #332]	; (80014cc <MX_TIM1_Init+0x190>)
 8001380:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001382:	4b51      	ldr	r3, [pc, #324]	; (80014c8 <MX_TIM1_Init+0x18c>)
 8001384:	2207      	movs	r2, #7
 8001386:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001388:	4b4f      	ldr	r3, [pc, #316]	; (80014c8 <MX_TIM1_Init+0x18c>)
 800138a:	2220      	movs	r2, #32
 800138c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800138e:	4b4e      	ldr	r3, [pc, #312]	; (80014c8 <MX_TIM1_Init+0x18c>)
 8001390:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001394:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001396:	4b4c      	ldr	r3, [pc, #304]	; (80014c8 <MX_TIM1_Init+0x18c>)
 8001398:	2200      	movs	r2, #0
 800139a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800139c:	4b4a      	ldr	r3, [pc, #296]	; (80014c8 <MX_TIM1_Init+0x18c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a2:	4b49      	ldr	r3, [pc, #292]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013a8:	4847      	ldr	r0, [pc, #284]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80013aa:	f003 f851 	bl	8004450 <HAL_TIM_Base_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80013b4:	f7ff fbfe 	bl	8000bb4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013bc:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013be:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80013c2:	4619      	mov	r1, r3
 80013c4:	4840      	ldr	r0, [pc, #256]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80013c6:	f003 fdb7 	bl	8004f38 <HAL_TIM_ConfigClockSource>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013d0:	f7ff fbf0 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013d4:	483c      	ldr	r0, [pc, #240]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80013d6:	f003 f90b 	bl	80045f0 <HAL_TIM_PWM_Init>
 80013da:	4603      	mov	r3, r0
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013e0:	f7ff fbe8 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e4:	2300      	movs	r3, #0
 80013e6:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013e8:	2300      	movs	r3, #0
 80013ea:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ec:	2300      	movs	r3, #0
 80013ee:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f4:	4619      	mov	r1, r3
 80013f6:	4834      	ldr	r0, [pc, #208]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80013f8:	f004 fdb2 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001402:	f7ff fbd7 	bl	8000bb4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001406:	2360      	movs	r3, #96	; 0x60
 8001408:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 800140a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001410:	2300      	movs	r3, #0
 8001412:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001424:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	4826      	ldr	r0, [pc, #152]	; (80014c8 <MX_TIM1_Init+0x18c>)
 800142e:	f003 fc6f 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001438:	f7ff fbbc 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800143c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001440:	2204      	movs	r2, #4
 8001442:	4619      	mov	r1, r3
 8001444:	4820      	ldr	r0, [pc, #128]	; (80014c8 <MX_TIM1_Init+0x18c>)
 8001446:	f003 fc63 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d001      	beq.n	8001454 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001450:	f7ff fbb0 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001454:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001458:	2208      	movs	r2, #8
 800145a:	4619      	mov	r1, r3
 800145c:	481a      	ldr	r0, [pc, #104]	; (80014c8 <MX_TIM1_Init+0x18c>)
 800145e:	f003 fc57 	bl	8004d10 <HAL_TIM_PWM_ConfigChannel>
 8001462:	4603      	mov	r3, r0
 8001464:	2b00      	cmp	r3, #0
 8001466:	d001      	beq.n	800146c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001468:	f7ff fba4 	bl	8000bb4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001470:	2300      	movs	r3, #0
 8001472:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001474:	2300      	movs	r3, #0
 8001476:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 25;
 8001478:	2319      	movs	r3, #25
 800147a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001480:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001484:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800148a:	2300      	movs	r3, #0
 800148c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800148e:	2300      	movs	r3, #0
 8001490:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001492:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001496:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001498:	2300      	movs	r3, #0
 800149a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800149c:	2300      	movs	r3, #0
 800149e:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	4619      	mov	r1, r3
 80014a8:	4807      	ldr	r0, [pc, #28]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80014aa:	f004 fdef 	bl	800608c <HAL_TIMEx_ConfigBreakDeadTime>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 80014b4:	f7ff fb7e 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014b8:	4803      	ldr	r0, [pc, #12]	; (80014c8 <MX_TIM1_Init+0x18c>)
 80014ba:	f000 f8d7 	bl	800166c <HAL_TIM_MspPostInit>

}
 80014be:	bf00      	nop
 80014c0:	3770      	adds	r7, #112	; 0x70
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	2000032c 	.word	0x2000032c
 80014cc:	40012c00 	.word	0x40012c00

080014d0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014ee:	4b1c      	ldr	r3, [pc, #112]	; (8001560 <MX_TIM3_Init+0x90>)
 80014f0:	4a1c      	ldr	r2, [pc, #112]	; (8001564 <MX_TIM3_Init+0x94>)
 80014f2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014f4:	4b1a      	ldr	r3, [pc, #104]	; (8001560 <MX_TIM3_Init+0x90>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fa:	4b19      	ldr	r3, [pc, #100]	; (8001560 <MX_TIM3_Init+0x90>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001500:	4b17      	ldr	r3, [pc, #92]	; (8001560 <MX_TIM3_Init+0x90>)
 8001502:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001506:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001508:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_TIM3_Init+0x90>)
 800150a:	2200      	movs	r2, #0
 800150c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800150e:	4b14      	ldr	r3, [pc, #80]	; (8001560 <MX_TIM3_Init+0x90>)
 8001510:	2200      	movs	r2, #0
 8001512:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001514:	2300      	movs	r3, #0
 8001516:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001518:	2300      	movs	r3, #0
 800151a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_TIM3_Init+0x90>)
 800152c:	f004 fb49 	bl	8005bc2 <HAL_TIMEx_HallSensor_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001536:	f7ff fb3d 	bl	8000bb4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 800153a:	2350      	movs	r3, #80	; 0x50
 800153c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001542:	1d3b      	adds	r3, r7, #4
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_TIM3_Init+0x90>)
 8001548:	f004 fd0a 	bl	8005f60 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001552:	f7ff fb2f 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3720      	adds	r7, #32
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20000378 	.word	0x20000378
 8001564:	40000400 	.word	0x40000400

08001568 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001568:	b480      	push	{r7}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a0a      	ldr	r2, [pc, #40]	; (80015a0 <HAL_TIM_Base_MspInit+0x38>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d10b      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800157a:	4b0a      	ldr	r3, [pc, #40]	; (80015a4 <HAL_TIM_Base_MspInit+0x3c>)
 800157c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800157e:	4a09      	ldr	r2, [pc, #36]	; (80015a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001580:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001584:	6613      	str	r3, [r2, #96]	; 0x60
 8001586:	4b07      	ldr	r3, [pc, #28]	; (80015a4 <HAL_TIM_Base_MspInit+0x3c>)
 8001588:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800158e:	60fb      	str	r3, [r7, #12]
 8001590:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001592:	bf00      	nop
 8001594:	3714      	adds	r7, #20
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40012c00 	.word	0x40012c00
 80015a4:	40021000 	.word	0x40021000

080015a8 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a26      	ldr	r2, [pc, #152]	; (8001660 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d145      	bne.n	8001656 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ca:	4b26      	ldr	r3, [pc, #152]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a25      	ldr	r2, [pc, #148]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	4b20      	ldr	r3, [pc, #128]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e6:	4a1f      	ldr	r2, [pc, #124]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015e8:	f043 0301 	orr.w	r3, r3, #1
 80015ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ee:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015f2:	f003 0301 	and.w	r3, r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fa:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001600:	f043 0304 	orr.w	r3, r3, #4
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0304 	and.w	r3, r3, #4
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001612:	2350      	movs	r3, #80	; 0x50
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001622:	2302      	movs	r3, #2
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001630:	f001 fce8 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001634:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163e:	2300      	movs	r3, #0
 8001640:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001642:	2300      	movs	r3, #0
 8001644:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001646:	2302      	movs	r3, #2
 8001648:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800164a:	f107 0314 	add.w	r3, r7, #20
 800164e:	4619      	mov	r1, r3
 8001650:	4805      	ldr	r0, [pc, #20]	; (8001668 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001652:	f001 fcd7 	bl	8003004 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001656:	bf00      	nop
 8001658:	3728      	adds	r7, #40	; 0x28
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	40000400 	.word	0x40000400
 8001664:	40021000 	.word	0x40021000
 8001668:	48000800 	.word	0x48000800

0800166c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a29      	ldr	r2, [pc, #164]	; (8001730 <HAL_TIM_MspPostInit+0xc4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d14b      	bne.n	8001726 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800168e:	4b29      	ldr	r3, [pc, #164]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 8001690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001692:	4a28      	ldr	r2, [pc, #160]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800169a:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 800169c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800169e:	f003 0302 	and.w	r3, r3, #2
 80016a2:	613b      	str	r3, [r7, #16]
 80016a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a6:	4b23      	ldr	r3, [pc, #140]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 80016a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016aa:	4a22      	ldr	r2, [pc, #136]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 80016ac:	f043 0301 	orr.w	r3, r3, #1
 80016b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b2:	4b20      	ldr	r3, [pc, #128]	; (8001734 <HAL_TIM_MspPostInit+0xc8>)
 80016b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	60fb      	str	r3, [r7, #12]
 80016bc:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 80016be:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80016c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c4:	2302      	movs	r3, #2
 80016c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80016d0:	2306      	movs	r3, #6
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d4:	f107 0314 	add.w	r3, r7, #20
 80016d8:	4619      	mov	r1, r3
 80016da:	4817      	ldr	r0, [pc, #92]	; (8001738 <HAL_TIM_MspPostInit+0xcc>)
 80016dc:	f001 fc92 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80016e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80016e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e6:	2302      	movs	r3, #2
 80016e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2300      	movs	r3, #0
 80016ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ee:	2300      	movs	r3, #0
 80016f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80016f2:	2304      	movs	r3, #4
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80016f6:	f107 0314 	add.w	r3, r7, #20
 80016fa:	4619      	mov	r1, r3
 80016fc:	480e      	ldr	r0, [pc, #56]	; (8001738 <HAL_TIM_MspPostInit+0xcc>)
 80016fe:	f001 fc81 	bl	8003004 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001702:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	2300      	movs	r3, #0
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001714:	2306      	movs	r3, #6
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001722:	f001 fc6f 	bl	8003004 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	; 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40012c00 	.word	0x40012c00
 8001734:	40021000 	.word	0x40021000
 8001738:	48000400 	.word	0x48000400

0800173c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001740:	4b22      	ldr	r3, [pc, #136]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001742:	4a23      	ldr	r2, [pc, #140]	; (80017d0 <MX_USART2_UART_Init+0x94>)
 8001744:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001746:	4b21      	ldr	r3, [pc, #132]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001748:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800174c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174e:	4b1f      	ldr	r3, [pc, #124]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001754:	4b1d      	ldr	r3, [pc, #116]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001756:	2200      	movs	r2, #0
 8001758:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800175a:	4b1c      	ldr	r3, [pc, #112]	; (80017cc <MX_USART2_UART_Init+0x90>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001760:	4b1a      	ldr	r3, [pc, #104]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001762:	220c      	movs	r2, #12
 8001764:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001766:	4b19      	ldr	r3, [pc, #100]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800176c:	4b17      	ldr	r3, [pc, #92]	; (80017cc <MX_USART2_UART_Init+0x90>)
 800176e:	2200      	movs	r2, #0
 8001770:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001772:	4b16      	ldr	r3, [pc, #88]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001774:	2200      	movs	r2, #0
 8001776:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART2_UART_Init+0x90>)
 800177a:	2200      	movs	r2, #0
 800177c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001780:	2200      	movs	r2, #0
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001784:	4811      	ldr	r0, [pc, #68]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001786:	f004 fd9e 	bl	80062c6 <HAL_UART_Init>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d001      	beq.n	8001794 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001790:	f7ff fa10 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001794:	2100      	movs	r1, #0
 8001796:	480d      	ldr	r0, [pc, #52]	; (80017cc <MX_USART2_UART_Init+0x90>)
 8001798:	f006 fd41 	bl	800821e <HAL_UARTEx_SetTxFifoThreshold>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80017a2:	f7ff fa07 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80017a6:	2100      	movs	r1, #0
 80017a8:	4808      	ldr	r0, [pc, #32]	; (80017cc <MX_USART2_UART_Init+0x90>)
 80017aa:	f006 fd76 	bl	800829a <HAL_UARTEx_SetRxFifoThreshold>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80017b4:	f7ff f9fe 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80017b8:	4804      	ldr	r0, [pc, #16]	; (80017cc <MX_USART2_UART_Init+0x90>)
 80017ba:	f006 fcf7 	bl	80081ac <HAL_UARTEx_DisableFifoMode>
 80017be:	4603      	mov	r3, r0
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d001      	beq.n	80017c8 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80017c4:	f7ff f9f6 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c8:	bf00      	nop
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	200003c4 	.word	0x200003c4
 80017d0:	40004400 	.word	0x40004400

080017d4 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017da:	4a23      	ldr	r2, [pc, #140]	; (8001868 <MX_USART3_UART_Init+0x94>)
 80017dc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80017de:	4b21      	ldr	r3, [pc, #132]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017e4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80017ec:	4b1d      	ldr	r3, [pc, #116]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	; (8001864 <MX_USART3_UART_Init+0x90>)
 80017fa:	220c      	movs	r2, #12
 80017fc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001806:	2200      	movs	r2, #0
 8001808:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800180a:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800180c:	2200      	movs	r2, #0
 800180e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001810:	4b14      	ldr	r3, [pc, #80]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001812:	2200      	movs	r2, #0
 8001814:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001818:	2200      	movs	r2, #0
 800181a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800181c:	4811      	ldr	r0, [pc, #68]	; (8001864 <MX_USART3_UART_Init+0x90>)
 800181e:	f004 fd52 	bl	80062c6 <HAL_UART_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001828:	f7ff f9c4 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800182c:	2100      	movs	r1, #0
 800182e:	480d      	ldr	r0, [pc, #52]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001830:	f006 fcf5 	bl	800821e <HAL_UARTEx_SetTxFifoThreshold>
 8001834:	4603      	mov	r3, r0
 8001836:	2b00      	cmp	r3, #0
 8001838:	d001      	beq.n	800183e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800183a:	f7ff f9bb 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800183e:	2100      	movs	r1, #0
 8001840:	4808      	ldr	r0, [pc, #32]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001842:	f006 fd2a 	bl	800829a <HAL_UARTEx_SetRxFifoThreshold>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800184c:	f7ff f9b2 	bl	8000bb4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001850:	4804      	ldr	r0, [pc, #16]	; (8001864 <MX_USART3_UART_Init+0x90>)
 8001852:	f006 fcab 	bl	80081ac <HAL_UARTEx_DisableFifoMode>
 8001856:	4603      	mov	r3, r0
 8001858:	2b00      	cmp	r3, #0
 800185a:	d001      	beq.n	8001860 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800185c:	f7ff f9aa 	bl	8000bb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001860:	bf00      	nop
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000454 	.word	0x20000454
 8001868:	40004800 	.word	0x40004800

0800186c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b0a0      	sub	sp, #128	; 0x80
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001874:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	605a      	str	r2, [r3, #4]
 800187e:	609a      	str	r2, [r3, #8]
 8001880:	60da      	str	r2, [r3, #12]
 8001882:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001884:	f107 0318 	add.w	r3, r7, #24
 8001888:	2254      	movs	r2, #84	; 0x54
 800188a:	2100      	movs	r1, #0
 800188c:	4618      	mov	r0, r3
 800188e:	f006 ff48 	bl	8008722 <memset>
  if(uartHandle->Instance==USART2)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a41      	ldr	r2, [pc, #260]	; (800199c <HAL_UART_MspInit+0x130>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d13f      	bne.n	800191c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800189c:	2302      	movs	r3, #2
 800189e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80018a0:	2300      	movs	r3, #0
 80018a2:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80018a4:	f107 0318 	add.w	r3, r7, #24
 80018a8:	4618      	mov	r0, r3
 80018aa:	f002 fb83 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80018b4:	f7ff f97e 	bl	8000bb4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018b8:	4b39      	ldr	r3, [pc, #228]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018bc:	4a38      	ldr	r2, [pc, #224]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018c2:	6593      	str	r3, [r2, #88]	; 0x58
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018cc:	617b      	str	r3, [r7, #20]
 80018ce:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d0:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018d4:	4a32      	ldr	r2, [pc, #200]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018d6:	f043 0301 	orr.w	r3, r3, #1
 80018da:	64d3      	str	r3, [r2, #76]	; 0x4c
 80018dc:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_UART_MspInit+0x134>)
 80018de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018e0:	f003 0301 	and.w	r3, r3, #1
 80018e4:	613b      	str	r3, [r7, #16]
 80018e6:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018e8:	230c      	movs	r3, #12
 80018ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ec:	2302      	movs	r3, #2
 80018ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f4:	2300      	movs	r3, #0
 80018f6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80018f8:	2307      	movs	r3, #7
 80018fa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001900:	4619      	mov	r1, r3
 8001902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001906:	f001 fb7d 	bl	8003004 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800190a:	2200      	movs	r2, #0
 800190c:	2100      	movs	r1, #0
 800190e:	2026      	movs	r0, #38	; 0x26
 8001910:	f001 fa90 	bl	8002e34 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001914:	2026      	movs	r0, #38	; 0x26
 8001916:	f001 faa7 	bl	8002e68 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800191a:	e03b      	b.n	8001994 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a20      	ldr	r2, [pc, #128]	; (80019a4 <HAL_UART_MspInit+0x138>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d136      	bne.n	8001994 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001926:	2304      	movs	r3, #4
 8001928:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800192e:	f107 0318 	add.w	r3, r7, #24
 8001932:	4618      	mov	r0, r3
 8001934:	f002 fb3e 	bl	8003fb4 <HAL_RCCEx_PeriphCLKConfig>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800193e:	f7ff f939 	bl	8000bb4 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_UART_MspInit+0x134>)
 8001944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001946:	4a16      	ldr	r2, [pc, #88]	; (80019a0 <HAL_UART_MspInit+0x134>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800194c:	6593      	str	r3, [r2, #88]	; 0x58
 800194e:	4b14      	ldr	r3, [pc, #80]	; (80019a0 <HAL_UART_MspInit+0x134>)
 8001950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001952:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b11      	ldr	r3, [pc, #68]	; (80019a0 <HAL_UART_MspInit+0x134>)
 800195c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_UART_MspInit+0x134>)
 8001960:	f043 0304 	orr.w	r3, r3, #4
 8001964:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001966:	4b0e      	ldr	r3, [pc, #56]	; (80019a0 <HAL_UART_MspInit+0x134>)
 8001968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800196a:	f003 0304 	and.w	r3, r3, #4
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001972:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001976:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001980:	2300      	movs	r3, #0
 8001982:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001984:	2307      	movs	r3, #7
 8001986:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001988:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800198c:	4619      	mov	r1, r3
 800198e:	4806      	ldr	r0, [pc, #24]	; (80019a8 <HAL_UART_MspInit+0x13c>)
 8001990:	f001 fb38 	bl	8003004 <HAL_GPIO_Init>
}
 8001994:	bf00      	nop
 8001996:	3780      	adds	r7, #128	; 0x80
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40004400 	.word	0x40004400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40004800 	.word	0x40004800
 80019a8:	48000800 	.word	0x48000800

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019ac:	480d      	ldr	r0, [pc, #52]	; (80019e4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019ae:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480d      	ldr	r0, [pc, #52]	; (80019e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490e      	ldr	r1, [pc, #56]	; (80019ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0e      	ldr	r2, [pc, #56]	; (80019f0 <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0b      	ldr	r2, [pc, #44]	; (80019f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0b      	ldr	r4, [pc, #44]	; (80019f8 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80019d6:	f7ff fc9f 	bl	8001318 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80019da:	f006 ff53 	bl	8008884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff f875 	bl	8000acc <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   r0, =_estack
 80019e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019ec:	20000128 	.word	0x20000128
  ldr r2, =_sidata
 80019f0:	08009b54 	.word	0x08009b54
  ldr r2, =_sbss
 80019f4:	20000128 	.word	0x20000128
  ldr r4, =_ebss
 80019f8:	20000634 	.word	0x20000634

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>

080019fe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	b082      	sub	sp, #8
 8001a02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a04:	2300      	movs	r3, #0
 8001a06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a08:	2003      	movs	r0, #3
 8001a0a:	f001 fa08 	bl	8002e1e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0e:	200f      	movs	r0, #15
 8001a10:	f7ff fb08 	bl	8001024 <HAL_InitTick>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d002      	beq.n	8001a20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	71fb      	strb	r3, [r7, #7]
 8001a1e:	e001      	b.n	8001a24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a20:	f7ff fadc 	bl	8000fdc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a24:	79fb      	ldrb	r3, [r7, #7]

}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3708      	adds	r7, #8
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
	...

08001a30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a34:	4b05      	ldr	r3, [pc, #20]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4b05      	ldr	r3, [pc, #20]	; (8001a50 <HAL_IncTick+0x20>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a03      	ldr	r2, [pc, #12]	; (8001a4c <HAL_IncTick+0x1c>)
 8001a40:	6013      	str	r3, [r2, #0]
}
 8001a42:	bf00      	nop
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr
 8001a4c:	200004e4 	.word	0x200004e4
 8001a50:	200000c8 	.word	0x200000c8

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	200004e4 	.word	0x200004e4

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d004      	beq.n	8001a90 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b09      	ldr	r3, [pc, #36]	; (8001aac <HAL_Delay+0x40>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68fa      	ldr	r2, [r7, #12]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001a90:	bf00      	nop
 8001a92:	f7ff ffdf 	bl	8001a54 <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	68fa      	ldr	r2, [r7, #12]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d8f7      	bhi.n	8001a92 <HAL_Delay+0x26>
  {
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	200000c8 	.word	0x200000c8

08001ab0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	689b      	ldr	r3, [r3, #8]
 8001abe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	431a      	orrs	r2, r3
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	609a      	str	r2, [r3, #8]
}
 8001aca:	bf00      	nop
 8001acc:	370c      	adds	r7, #12
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr

08001ad6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001ad6:	b480      	push	{r7}
 8001ad8:	b083      	sub	sp, #12
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
 8001ade:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	609a      	str	r2, [r3, #8]
}
 8001af0:	bf00      	nop
 8001af2:	370c      	adds	r7, #12
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	370c      	adds	r7, #12
 8001b10:	46bd      	mov	sp, r7
 8001b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b16:	4770      	bx	lr

08001b18 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	b087      	sub	sp, #28
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	; 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <LL_ADC_SetOffset+0x44>)
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001b42:	683a      	ldr	r2, [r7, #0]
 8001b44:	430a      	orrs	r2, r1
 8001b46:	4313      	orrs	r3, r2
 8001b48:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001b50:	bf00      	nop
 8001b52:	371c      	adds	r7, #28
 8001b54:	46bd      	mov	sp, r7
 8001b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5a:	4770      	bx	lr
 8001b5c:	03fff000 	.word	0x03fff000

08001b60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b085      	sub	sp, #20
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	3360      	adds	r3, #96	; 0x60
 8001b6e:	461a      	mov	r2, r3
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3714      	adds	r7, #20
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b087      	sub	sp, #28
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	60f8      	str	r0, [r7, #12]
 8001b94:	60b9      	str	r1, [r7, #8]
 8001b96:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3360      	adds	r3, #96	; 0x60
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	68bb      	ldr	r3, [r7, #8]
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	4413      	add	r3, r2
 8001ba4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	431a      	orrs	r2, r3
 8001bb2:	697b      	ldr	r3, [r7, #20]
 8001bb4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001bb6:	bf00      	nop
 8001bb8:	371c      	adds	r7, #28
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr

08001bc2 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001bc2:	b480      	push	{r7}
 8001bc4:	b087      	sub	sp, #28
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	60f8      	str	r0, [r7, #12]
 8001bca:	60b9      	str	r1, [r7, #8]
 8001bcc:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	3360      	adds	r3, #96	; 0x60
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	4413      	add	r3, r2
 8001bda:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	431a      	orrs	r2, r3
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001bec:	bf00      	nop
 8001bee:	371c      	adds	r7, #28
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b087      	sub	sp, #28
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	3360      	adds	r3, #96	; 0x60
 8001c08:	461a      	mov	r2, r3
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	009b      	lsls	r3, r3, #2
 8001c0e:	4413      	add	r3, r2
 8001c10:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
 8001c36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	695b      	ldr	r3, [r3, #20]
 8001c3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	431a      	orrs	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	615a      	str	r2, [r3, #20]
}
 8001c48:	bf00      	nop
 8001c4a:	370c      	adds	r7, #12
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c52:	4770      	bx	lr

08001c54 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b087      	sub	sp, #28
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	60b9      	str	r1, [r7, #8]
 8001c5e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	3330      	adds	r3, #48	; 0x30
 8001c64:	461a      	mov	r2, r3
 8001c66:	68bb      	ldr	r3, [r7, #8]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	f003 030c 	and.w	r3, r3, #12
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	f003 031f 	and.w	r3, r3, #31
 8001c7e:	211f      	movs	r1, #31
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	43db      	mvns	r3, r3
 8001c86:	401a      	ands	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	0e9b      	lsrs	r3, r3, #26
 8001c8c:	f003 011f 	and.w	r1, r3, #31
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	f003 031f 	and.w	r3, r3, #31
 8001c96:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9a:	431a      	orrs	r2, r3
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001ca0:	bf00      	nop
 8001ca2:	371c      	adds	r7, #28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr

08001cac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	60f8      	str	r0, [r7, #12]
 8001cb4:	60b9      	str	r1, [r7, #8]
 8001cb6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	3314      	adds	r3, #20
 8001cbc:	461a      	mov	r2, r3
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	0e5b      	lsrs	r3, r3, #25
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	4413      	add	r3, r2
 8001cca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	0d1b      	lsrs	r3, r3, #20
 8001cd4:	f003 031f 	and.w	r3, r3, #31
 8001cd8:	2107      	movs	r1, #7
 8001cda:	fa01 f303 	lsl.w	r3, r1, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	401a      	ands	r2, r3
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	0d1b      	lsrs	r3, r3, #20
 8001ce6:	f003 031f 	and.w	r3, r3, #31
 8001cea:	6879      	ldr	r1, [r7, #4]
 8001cec:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf0:	431a      	orrs	r2, r3
 8001cf2:	697b      	ldr	r3, [r7, #20]
 8001cf4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001cf6:	bf00      	nop
 8001cf8:	371c      	adds	r7, #28
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	4a0f      	ldr	r2, [pc, #60]	; (8001d50 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d10a      	bne.n	8001d2e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d1e:	68bb      	ldr	r3, [r7, #8]
 8001d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d24:	431a      	orrs	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001d2c:	e00a      	b.n	8001d44 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	401a      	ands	r2, r3
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4e:	4770      	bx	lr
 8001d50:	407f0000 	.word	0x407f0000

08001d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001d68:	687a      	ldr	r2, [r7, #4]
 8001d6a:	6093      	str	r3, [r2, #8]
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d8c:	d101      	bne.n	8001d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e000      	b.n	8001d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	370c      	adds	r7, #12
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9e:	4770      	bx	lr

08001da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	689b      	ldr	r3, [r3, #8]
 8001dac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001ddc:	d101      	bne.n	8001de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001dde:	2301      	movs	r3, #1
 8001de0:	e000      	b.n	8001de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001de2:	2300      	movs	r3, #0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d101      	bne.n	8001e08 <LL_ADC_IsEnabled+0x18>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e000      	b.n	8001e0a <LL_ADC_IsEnabled+0x1a>
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	370c      	adds	r7, #12
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr

08001e16 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e16:	b480      	push	{r7}
 8001e18:	b083      	sub	sp, #12
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f003 0304 	and.w	r3, r3, #4
 8001e26:	2b04      	cmp	r3, #4
 8001e28:	d101      	bne.n	8001e2e <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e000      	b.n	8001e30 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	370c      	adds	r7, #12
 8001e34:	46bd      	mov	sp, r7
 8001e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3a:	4770      	bx	lr

08001e3c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f003 0308 	and.w	r3, r3, #8
 8001e4c:	2b08      	cmp	r3, #8
 8001e4e:	d101      	bne.n	8001e54 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e50:	2301      	movs	r3, #1
 8001e52:	e000      	b.n	8001e56 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr
	...

08001e64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001e70:	2300      	movs	r3, #0
 8001e72:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d101      	bne.n	8001e7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e1af      	b.n	80021de <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d109      	bne.n	8001ea0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f7fe fc8b 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff67 	bl	8001d78 <LL_ADC_IsDeepPowerDownEnabled>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d004      	beq.n	8001eba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff ff4d 	bl	8001d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff ff82 	bl	8001dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d115      	bne.n	8001ef6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff ff66 	bl	8001da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ed4:	4b9f      	ldr	r3, [pc, #636]	; (8002154 <HAL_ADC_Init+0x2f0>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	099b      	lsrs	r3, r3, #6
 8001eda:	4a9f      	ldr	r2, [pc, #636]	; (8002158 <HAL_ADC_Init+0x2f4>)
 8001edc:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee0:	099b      	lsrs	r3, r3, #6
 8001ee2:	3301      	adds	r3, #1
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff ff64 	bl	8001dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10d      	bne.n	8001f22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0a:	f043 0210 	orr.w	r2, r3, #16
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f16:	f043 0201 	orr.w	r2, r3, #1
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7ff ff75 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8001f2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f040 8148 	bne.w	80021cc <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	f040 8144 	bne.w	80021cc <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f48:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f4c:	f043 0202 	orr.w	r2, r3, #2
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4618      	mov	r0, r3
 8001f5a:	f7ff ff49 	bl	8001df0 <LL_ADC_IsEnabled>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d141      	bne.n	8001fe8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f6c:	d004      	beq.n	8001f78 <HAL_ADC_Init+0x114>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a7a      	ldr	r2, [pc, #488]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d10f      	bne.n	8001f98 <HAL_ADC_Init+0x134>
 8001f78:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001f7c:	f7ff ff38 	bl	8001df0 <LL_ADC_IsEnabled>
 8001f80:	4604      	mov	r4, r0
 8001f82:	4876      	ldr	r0, [pc, #472]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001f84:	f7ff ff34 	bl	8001df0 <LL_ADC_IsEnabled>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	4323      	orrs	r3, r4
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	bf0c      	ite	eq
 8001f90:	2301      	moveq	r3, #1
 8001f92:	2300      	movne	r3, #0
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	e012      	b.n	8001fbe <HAL_ADC_Init+0x15a>
 8001f98:	4871      	ldr	r0, [pc, #452]	; (8002160 <HAL_ADC_Init+0x2fc>)
 8001f9a:	f7ff ff29 	bl	8001df0 <LL_ADC_IsEnabled>
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	4870      	ldr	r0, [pc, #448]	; (8002164 <HAL_ADC_Init+0x300>)
 8001fa2:	f7ff ff25 	bl	8001df0 <LL_ADC_IsEnabled>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	431c      	orrs	r4, r3
 8001faa:	486f      	ldr	r0, [pc, #444]	; (8002168 <HAL_ADC_Init+0x304>)
 8001fac:	f7ff ff20 	bl	8001df0 <LL_ADC_IsEnabled>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	4323      	orrs	r3, r4
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	bf0c      	ite	eq
 8001fb8:	2301      	moveq	r3, #1
 8001fba:	2300      	movne	r3, #0
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d012      	beq.n	8001fe8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fca:	d004      	beq.n	8001fd6 <HAL_ADC_Init+0x172>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a62      	ldr	r2, [pc, #392]	; (800215c <HAL_ADC_Init+0x2f8>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d101      	bne.n	8001fda <HAL_ADC_Init+0x176>
 8001fd6:	4a65      	ldr	r2, [pc, #404]	; (800216c <HAL_ADC_Init+0x308>)
 8001fd8:	e000      	b.n	8001fdc <HAL_ADC_Init+0x178>
 8001fda:	4a65      	ldr	r2, [pc, #404]	; (8002170 <HAL_ADC_Init+0x30c>)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	f7ff fd64 	bl	8001ab0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	7f5b      	ldrb	r3, [r3, #29]
 8001fec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ff2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001ff8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001ffe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002006:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002012:	2b01      	cmp	r3, #1
 8002014:	d106      	bne.n	8002024 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800201a:	3b01      	subs	r3, #1
 800201c:	045b      	lsls	r3, r3, #17
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4313      	orrs	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	2b00      	cmp	r3, #0
 800202a:	d009      	beq.n	8002040 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002030:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	4b4b      	ldr	r3, [pc, #300]	; (8002174 <HAL_ADC_Init+0x310>)
 8002048:	4013      	ands	r3, r2
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	69b9      	ldr	r1, [r7, #24]
 8002050:	430b      	orrs	r3, r1
 8002052:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	691b      	ldr	r3, [r3, #16]
 800205a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4618      	mov	r0, r3
 8002070:	f7ff fed1 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8002074:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	4618      	mov	r0, r3
 800207c:	f7ff fede 	bl	8001e3c <LL_ADC_INJ_IsConversionOngoing>
 8002080:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002082:	693b      	ldr	r3, [r7, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d17f      	bne.n	8002188 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d17c      	bne.n	8002188 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002092:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800209a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800209c:	4313      	orrs	r3, r2
 800209e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020aa:	f023 0302 	bic.w	r3, r3, #2
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	69b9      	ldr	r1, [r7, #24]
 80020b4:	430b      	orrs	r3, r1
 80020b6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d017      	beq.n	80020f0 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	691a      	ldr	r2, [r3, #16]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80020ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80020d8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80020dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80020e0:	687a      	ldr	r2, [r7, #4]
 80020e2:	6911      	ldr	r1, [r2, #16]
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80020ee:	e013      	b.n	8002118 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80020fe:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002108:	687a      	ldr	r2, [r7, #4]
 800210a:	6812      	ldr	r2, [r2, #0]
 800210c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002110:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002114:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800211e:	2b01      	cmp	r3, #1
 8002120:	d12a      	bne.n	8002178 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	691b      	ldr	r3, [r3, #16]
 8002128:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800212c:	f023 0304 	bic.w	r3, r3, #4
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002134:	687a      	ldr	r2, [r7, #4]
 8002136:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002138:	4311      	orrs	r1, r2
 800213a:	687a      	ldr	r2, [r7, #4]
 800213c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800213e:	4311      	orrs	r1, r2
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002144:	430a      	orrs	r2, r1
 8002146:	431a      	orrs	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f042 0201 	orr.w	r2, r2, #1
 8002150:	611a      	str	r2, [r3, #16]
 8002152:	e019      	b.n	8002188 <HAL_ADC_Init+0x324>
 8002154:	200000c0 	.word	0x200000c0
 8002158:	053e2d63 	.word	0x053e2d63
 800215c:	50000100 	.word	0x50000100
 8002160:	50000400 	.word	0x50000400
 8002164:	50000500 	.word	0x50000500
 8002168:	50000600 	.word	0x50000600
 800216c:	50000300 	.word	0x50000300
 8002170:	50000700 	.word	0x50000700
 8002174:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	691a      	ldr	r2, [r3, #16]
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f022 0201 	bic.w	r2, r2, #1
 8002186:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	695b      	ldr	r3, [r3, #20]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d10c      	bne.n	80021aa <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002196:	f023 010f 	bic.w	r1, r3, #15
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a1b      	ldr	r3, [r3, #32]
 800219e:	1e5a      	subs	r2, r3, #1
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
 80021a8:	e007      	b.n	80021ba <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f022 020f 	bic.w	r2, r2, #15
 80021b8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	f043 0201 	orr.w	r2, r3, #1
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ca:	e007      	b.n	80021dc <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021d0:	f043 0210 	orr.w	r2, r3, #16
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80021dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3724      	adds	r7, #36	; 0x24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd90      	pop	{r4, r7, pc}
 80021e6:	bf00      	nop

080021e8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0b6      	sub	sp, #216	; 0xd8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
 80021f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80021f2:	2300      	movs	r3, #0
 80021f4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80021f8:	2300      	movs	r3, #0
 80021fa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002202:	2b01      	cmp	r3, #1
 8002204:	d102      	bne.n	800220c <HAL_ADC_ConfigChannel+0x24>
 8002206:	2302      	movs	r3, #2
 8002208:	f000 bc13 	b.w	8002a32 <HAL_ADC_ConfigChannel+0x84a>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2201      	movs	r2, #1
 8002210:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4618      	mov	r0, r3
 800221a:	f7ff fdfc 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	f040 83f3 	bne.w	8002a0c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	6859      	ldr	r1, [r3, #4]
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	461a      	mov	r2, r3
 8002234:	f7ff fd0e 	bl	8001c54 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7ff fdea 	bl	8001e16 <LL_ADC_REG_IsConversionOngoing>
 8002242:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4618      	mov	r0, r3
 800224c:	f7ff fdf6 	bl	8001e3c <LL_ADC_INJ_IsConversionOngoing>
 8002250:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002254:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002258:	2b00      	cmp	r3, #0
 800225a:	f040 81d9 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800225e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002262:	2b00      	cmp	r3, #0
 8002264:	f040 81d4 	bne.w	8002610 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002270:	d10f      	bne.n	8002292 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6818      	ldr	r0, [r3, #0]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2200      	movs	r2, #0
 800227c:	4619      	mov	r1, r3
 800227e:	f7ff fd15 	bl	8001cac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff fccf 	bl	8001c2e <LL_ADC_SetSamplingTimeCommonConfig>
 8002290:	e00e      	b.n	80022b0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6818      	ldr	r0, [r3, #0]
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	6819      	ldr	r1, [r3, #0]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	461a      	mov	r2, r3
 80022a0:	f7ff fd04 	bl	8001cac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7ff fcbf 	bl	8001c2e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	08db      	lsrs	r3, r3, #3
 80022bc:	f003 0303 	and.w	r3, r3, #3
 80022c0:	005b      	lsls	r3, r3, #1
 80022c2:	fa02 f303 	lsl.w	r3, r2, r3
 80022c6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d022      	beq.n	8002318 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	6818      	ldr	r0, [r3, #0]
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	6919      	ldr	r1, [r3, #16]
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80022e2:	f7ff fc19 	bl	8001b18 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6818      	ldr	r0, [r3, #0]
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	6919      	ldr	r1, [r3, #16]
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	461a      	mov	r2, r3
 80022f4:	f7ff fc65 	bl	8001bc2 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	6919      	ldr	r1, [r3, #16]
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	7f1b      	ldrb	r3, [r3, #28]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d102      	bne.n	800230e <HAL_ADC_ConfigChannel+0x126>
 8002308:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800230c:	e000      	b.n	8002310 <HAL_ADC_ConfigChannel+0x128>
 800230e:	2300      	movs	r3, #0
 8002310:	461a      	mov	r2, r3
 8002312:	f7ff fc71 	bl	8001bf8 <LL_ADC_SetOffsetSaturation>
 8002316:	e17b      	b.n	8002610 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f7ff fc1e 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002324:	4603      	mov	r3, r0
 8002326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800232a:	2b00      	cmp	r3, #0
 800232c:	d10a      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x15c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2100      	movs	r1, #0
 8002334:	4618      	mov	r0, r3
 8002336:	f7ff fc13 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 800233a:	4603      	mov	r3, r0
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	f003 021f 	and.w	r2, r3, #31
 8002342:	e01e      	b.n	8002382 <HAL_ADC_ConfigChannel+0x19a>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2100      	movs	r1, #0
 800234a:	4618      	mov	r0, r3
 800234c:	f7ff fc08 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002350:	4603      	mov	r3, r0
 8002352:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002356:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002362:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002366:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800236a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8002372:	2320      	movs	r3, #32
 8002374:	e004      	b.n	8002380 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8002376:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800237a:	fab3 f383 	clz	r3, r3
 800237e:	b2db      	uxtb	r3, r3
 8002380:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800238a:	2b00      	cmp	r3, #0
 800238c:	d105      	bne.n	800239a <HAL_ADC_ConfigChannel+0x1b2>
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	0e9b      	lsrs	r3, r3, #26
 8002394:	f003 031f 	and.w	r3, r3, #31
 8002398:	e018      	b.n	80023cc <HAL_ADC_ConfigChannel+0x1e4>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80023ae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80023b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80023b6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d101      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80023be:	2320      	movs	r3, #32
 80023c0:	e004      	b.n	80023cc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80023c2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80023c6:	fab3 f383 	clz	r3, r3
 80023ca:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d106      	bne.n	80023de <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2200      	movs	r2, #0
 80023d6:	2100      	movs	r1, #0
 80023d8:	4618      	mov	r0, r3
 80023da:	f7ff fbd7 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	2101      	movs	r1, #1
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff fbbb 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80023ea:	4603      	mov	r3, r0
 80023ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10a      	bne.n	800240a <HAL_ADC_ConfigChannel+0x222>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2101      	movs	r1, #1
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7ff fbb0 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002400:	4603      	mov	r3, r0
 8002402:	0e9b      	lsrs	r3, r3, #26
 8002404:	f003 021f 	and.w	r2, r3, #31
 8002408:	e01e      	b.n	8002448 <HAL_ADC_ConfigChannel+0x260>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2101      	movs	r1, #1
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff fba5 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002416:	4603      	mov	r3, r0
 8002418:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800241c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002420:	fa93 f3a3 	rbit	r3, r3
 8002424:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002428:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800242c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002430:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8002438:	2320      	movs	r3, #32
 800243a:	e004      	b.n	8002446 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800243c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	b2db      	uxtb	r3, r3
 8002446:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002450:	2b00      	cmp	r3, #0
 8002452:	d105      	bne.n	8002460 <HAL_ADC_ConfigChannel+0x278>
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	0e9b      	lsrs	r3, r3, #26
 800245a:	f003 031f 	and.w	r3, r3, #31
 800245e:	e018      	b.n	8002492 <HAL_ADC_ConfigChannel+0x2aa>
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800246c:	fa93 f3a3 	rbit	r3, r3
 8002470:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002474:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002478:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800247c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002480:	2b00      	cmp	r3, #0
 8002482:	d101      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8002484:	2320      	movs	r3, #32
 8002486:	e004      	b.n	8002492 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002488:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800248c:	fab3 f383 	clz	r3, r3
 8002490:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002492:	429a      	cmp	r2, r3
 8002494:	d106      	bne.n	80024a4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	2200      	movs	r2, #0
 800249c:	2101      	movs	r1, #1
 800249e:	4618      	mov	r0, r3
 80024a0:	f7ff fb74 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2102      	movs	r1, #2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff fb58 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10a      	bne.n	80024d0 <HAL_ADC_ConfigChannel+0x2e8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2102      	movs	r1, #2
 80024c0:	4618      	mov	r0, r3
 80024c2:	f7ff fb4d 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024c6:	4603      	mov	r3, r0
 80024c8:	0e9b      	lsrs	r3, r3, #26
 80024ca:	f003 021f 	and.w	r2, r3, #31
 80024ce:	e01e      	b.n	800250e <HAL_ADC_ConfigChannel+0x326>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2102      	movs	r1, #2
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7ff fb42 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 80024dc:	4603      	mov	r3, r0
 80024de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80024e6:	fa93 f3a3 	rbit	r3, r3
 80024ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80024ee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80024f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80024f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d101      	bne.n	8002502 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80024fe:	2320      	movs	r3, #32
 8002500:	e004      	b.n	800250c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8002502:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002506:	fab3 f383 	clz	r3, r3
 800250a:	b2db      	uxtb	r3, r3
 800250c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002516:	2b00      	cmp	r3, #0
 8002518:	d105      	bne.n	8002526 <HAL_ADC_ConfigChannel+0x33e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	0e9b      	lsrs	r3, r3, #26
 8002520:	f003 031f 	and.w	r3, r3, #31
 8002524:	e016      	b.n	8002554 <HAL_ADC_ConfigChannel+0x36c>
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800252e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002532:	fa93 f3a3 	rbit	r3, r3
 8002536:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002538:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800253a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800253e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002542:	2b00      	cmp	r3, #0
 8002544:	d101      	bne.n	800254a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8002546:	2320      	movs	r3, #32
 8002548:	e004      	b.n	8002554 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800254a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800254e:	fab3 f383 	clz	r3, r3
 8002552:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002554:	429a      	cmp	r2, r3
 8002556:	d106      	bne.n	8002566 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	2102      	movs	r1, #2
 8002560:	4618      	mov	r0, r3
 8002562:	f7ff fb13 	bl	8001b8c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2103      	movs	r1, #3
 800256c:	4618      	mov	r0, r3
 800256e:	f7ff faf7 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002572:	4603      	mov	r3, r0
 8002574:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002578:	2b00      	cmp	r3, #0
 800257a:	d10a      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x3aa>
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2103      	movs	r1, #3
 8002582:	4618      	mov	r0, r3
 8002584:	f7ff faec 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 8002588:	4603      	mov	r3, r0
 800258a:	0e9b      	lsrs	r3, r3, #26
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	e017      	b.n	80025c2 <HAL_ADC_ConfigChannel+0x3da>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2103      	movs	r1, #3
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fae1 	bl	8001b60 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025a4:	fa93 f3a3 	rbit	r3, r3
 80025a8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80025aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80025ac:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80025ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80025b4:	2320      	movs	r3, #32
 80025b6:	e003      	b.n	80025c0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80025b8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025ba:	fab3 f383 	clz	r3, r3
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d105      	bne.n	80025da <HAL_ADC_ConfigChannel+0x3f2>
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	0e9b      	lsrs	r3, r3, #26
 80025d4:	f003 031f 	and.w	r3, r3, #31
 80025d8:	e011      	b.n	80025fe <HAL_ADC_ConfigChannel+0x416>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80025e2:	fa93 f3a3 	rbit	r3, r3
 80025e6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80025e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ea:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80025ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80025f2:	2320      	movs	r3, #32
 80025f4:	e003      	b.n	80025fe <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80025f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025f8:	fab3 f383 	clz	r3, r3
 80025fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80025fe:	429a      	cmp	r2, r3
 8002600:	d106      	bne.n	8002610 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2200      	movs	r2, #0
 8002608:	2103      	movs	r1, #3
 800260a:	4618      	mov	r0, r3
 800260c:	f7ff fabe 	bl	8001b8c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7ff fbeb 	bl	8001df0 <LL_ADC_IsEnabled>
 800261a:	4603      	mov	r3, r0
 800261c:	2b00      	cmp	r3, #0
 800261e:	f040 813d 	bne.w	800289c <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6818      	ldr	r0, [r3, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	6819      	ldr	r1, [r3, #0]
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	461a      	mov	r2, r3
 8002630:	f7ff fb68 	bl	8001d04 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4aa2      	ldr	r2, [pc, #648]	; (80028c4 <HAL_ADC_ConfigChannel+0x6dc>)
 800263a:	4293      	cmp	r3, r2
 800263c:	f040 812e 	bne.w	800289c <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800264c:	2b00      	cmp	r3, #0
 800264e:	d10b      	bne.n	8002668 <HAL_ADC_ConfigChannel+0x480>
 8002650:	683b      	ldr	r3, [r7, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	0e9b      	lsrs	r3, r3, #26
 8002656:	3301      	adds	r3, #1
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	2b09      	cmp	r3, #9
 800265e:	bf94      	ite	ls
 8002660:	2301      	movls	r3, #1
 8002662:	2300      	movhi	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	e019      	b.n	800269c <HAL_ADC_ConfigChannel+0x4b4>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800266e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002670:	fa93 f3a3 	rbit	r3, r3
 8002674:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002676:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002678:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800267a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002680:	2320      	movs	r3, #32
 8002682:	e003      	b.n	800268c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8002684:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002686:	fab3 f383 	clz	r3, r3
 800268a:	b2db      	uxtb	r3, r3
 800268c:	3301      	adds	r3, #1
 800268e:	f003 031f 	and.w	r3, r3, #31
 8002692:	2b09      	cmp	r3, #9
 8002694:	bf94      	ite	ls
 8002696:	2301      	movls	r3, #1
 8002698:	2300      	movhi	r3, #0
 800269a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800269c:	2b00      	cmp	r3, #0
 800269e:	d079      	beq.n	8002794 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d107      	bne.n	80026bc <HAL_ADC_ConfigChannel+0x4d4>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	0e9b      	lsrs	r3, r3, #26
 80026b2:	3301      	adds	r3, #1
 80026b4:	069b      	lsls	r3, r3, #26
 80026b6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ba:	e015      	b.n	80026e8 <HAL_ADC_ConfigChannel+0x500>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026c4:	fa93 f3a3 	rbit	r3, r3
 80026c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80026ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026cc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80026ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80026d4:	2320      	movs	r3, #32
 80026d6:	e003      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80026d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026da:	fab3 f383 	clz	r3, r3
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	3301      	adds	r3, #1
 80026e2:	069b      	lsls	r3, r3, #26
 80026e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_ADC_ConfigChannel+0x520>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	0e9b      	lsrs	r3, r3, #26
 80026fa:	3301      	adds	r3, #1
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	2101      	movs	r1, #1
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	e017      	b.n	8002738 <HAL_ADC_ConfigChannel+0x550>
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800270e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002710:	fa93 f3a3 	rbit	r3, r3
 8002714:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002716:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002718:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800271a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800271c:	2b00      	cmp	r3, #0
 800271e:	d101      	bne.n	8002724 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8002720:	2320      	movs	r3, #32
 8002722:	e003      	b.n	800272c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002724:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002726:	fab3 f383 	clz	r3, r3
 800272a:	b2db      	uxtb	r3, r3
 800272c:	3301      	adds	r3, #1
 800272e:	f003 031f 	and.w	r3, r3, #31
 8002732:	2101      	movs	r1, #1
 8002734:	fa01 f303 	lsl.w	r3, r1, r3
 8002738:	ea42 0103 	orr.w	r1, r2, r3
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002744:	2b00      	cmp	r3, #0
 8002746:	d10a      	bne.n	800275e <HAL_ADC_ConfigChannel+0x576>
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	0e9b      	lsrs	r3, r3, #26
 800274e:	3301      	adds	r3, #1
 8002750:	f003 021f 	and.w	r2, r3, #31
 8002754:	4613      	mov	r3, r2
 8002756:	005b      	lsls	r3, r3, #1
 8002758:	4413      	add	r3, r2
 800275a:	051b      	lsls	r3, r3, #20
 800275c:	e018      	b.n	8002790 <HAL_ADC_ConfigChannel+0x5a8>
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	fa93 f3a3 	rbit	r3, r3
 800276a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800276c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800276e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002770:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002772:	2b00      	cmp	r3, #0
 8002774:	d101      	bne.n	800277a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8002776:	2320      	movs	r3, #32
 8002778:	e003      	b.n	8002782 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800277a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800277c:	fab3 f383 	clz	r3, r3
 8002780:	b2db      	uxtb	r3, r3
 8002782:	3301      	adds	r3, #1
 8002784:	f003 021f 	and.w	r2, r3, #31
 8002788:	4613      	mov	r3, r2
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4413      	add	r3, r2
 800278e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002790:	430b      	orrs	r3, r1
 8002792:	e07e      	b.n	8002892 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800279c:	2b00      	cmp	r3, #0
 800279e:	d107      	bne.n	80027b0 <HAL_ADC_ConfigChannel+0x5c8>
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	0e9b      	lsrs	r3, r3, #26
 80027a6:	3301      	adds	r3, #1
 80027a8:	069b      	lsls	r3, r3, #26
 80027aa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027ae:	e015      	b.n	80027dc <HAL_ADC_ConfigChannel+0x5f4>
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b8:	fa93 f3a3 	rbit	r3, r3
 80027bc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80027be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027c0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80027c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d101      	bne.n	80027cc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80027c8:	2320      	movs	r3, #32
 80027ca:	e003      	b.n	80027d4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80027cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ce:	fab3 f383 	clz	r3, r3
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	3301      	adds	r3, #1
 80027d6:	069b      	lsls	r3, r3, #26
 80027d8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d109      	bne.n	80027fc <HAL_ADC_ConfigChannel+0x614>
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	0e9b      	lsrs	r3, r3, #26
 80027ee:	3301      	adds	r3, #1
 80027f0:	f003 031f 	and.w	r3, r3, #31
 80027f4:	2101      	movs	r1, #1
 80027f6:	fa01 f303 	lsl.w	r3, r1, r3
 80027fa:	e017      	b.n	800282c <HAL_ADC_ConfigChannel+0x644>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002802:	6a3b      	ldr	r3, [r7, #32]
 8002804:	fa93 f3a3 	rbit	r3, r3
 8002808:	61fb      	str	r3, [r7, #28]
  return result;
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800280e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002814:	2320      	movs	r3, #32
 8002816:	e003      	b.n	8002820 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800281a:	fab3 f383 	clz	r3, r3
 800281e:	b2db      	uxtb	r3, r3
 8002820:	3301      	adds	r3, #1
 8002822:	f003 031f 	and.w	r3, r3, #31
 8002826:	2101      	movs	r1, #1
 8002828:	fa01 f303 	lsl.w	r3, r1, r3
 800282c:	ea42 0103 	orr.w	r1, r2, r3
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10d      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x670>
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	0e9b      	lsrs	r3, r3, #26
 8002842:	3301      	adds	r3, #1
 8002844:	f003 021f 	and.w	r2, r3, #31
 8002848:	4613      	mov	r3, r2
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	4413      	add	r3, r2
 800284e:	3b1e      	subs	r3, #30
 8002850:	051b      	lsls	r3, r3, #20
 8002852:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002856:	e01b      	b.n	8002890 <HAL_ADC_ConfigChannel+0x6a8>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	fa93 f3a3 	rbit	r3, r3
 8002864:	613b      	str	r3, [r7, #16]
  return result;
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800286a:	69bb      	ldr	r3, [r7, #24]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d101      	bne.n	8002874 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002870:	2320      	movs	r3, #32
 8002872:	e003      	b.n	800287c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	fab3 f383 	clz	r3, r3
 800287a:	b2db      	uxtb	r3, r3
 800287c:	3301      	adds	r3, #1
 800287e:	f003 021f 	and.w	r2, r3, #31
 8002882:	4613      	mov	r3, r2
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	4413      	add	r3, r2
 8002888:	3b1e      	subs	r3, #30
 800288a:	051b      	lsls	r3, r3, #20
 800288c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002890:	430b      	orrs	r3, r1
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	6892      	ldr	r2, [r2, #8]
 8002896:	4619      	mov	r1, r3
 8002898:	f7ff fa08 	bl	8001cac <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <HAL_ADC_ConfigChannel+0x6e0>)
 80028a2:	4013      	ands	r3, r2
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 80be 	beq.w	8002a26 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028b2:	d004      	beq.n	80028be <HAL_ADC_ConfigChannel+0x6d6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a04      	ldr	r2, [pc, #16]	; (80028cc <HAL_ADC_ConfigChannel+0x6e4>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d10a      	bne.n	80028d4 <HAL_ADC_ConfigChannel+0x6ec>
 80028be:	4b04      	ldr	r3, [pc, #16]	; (80028d0 <HAL_ADC_ConfigChannel+0x6e8>)
 80028c0:	e009      	b.n	80028d6 <HAL_ADC_ConfigChannel+0x6ee>
 80028c2:	bf00      	nop
 80028c4:	407f0000 	.word	0x407f0000
 80028c8:	80080000 	.word	0x80080000
 80028cc:	50000100 	.word	0x50000100
 80028d0:	50000300 	.word	0x50000300
 80028d4:	4b59      	ldr	r3, [pc, #356]	; (8002a3c <HAL_ADC_ConfigChannel+0x854>)
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7ff f910 	bl	8001afc <LL_ADC_GetCommonPathInternalCh>
 80028dc:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4a56      	ldr	r2, [pc, #344]	; (8002a40 <HAL_ADC_ConfigChannel+0x858>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d004      	beq.n	80028f4 <HAL_ADC_ConfigChannel+0x70c>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a55      	ldr	r2, [pc, #340]	; (8002a44 <HAL_ADC_ConfigChannel+0x85c>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d13a      	bne.n	800296a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80028f4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d134      	bne.n	800296a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002908:	d005      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x72e>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a4e      	ldr	r2, [pc, #312]	; (8002a48 <HAL_ADC_ConfigChannel+0x860>)
 8002910:	4293      	cmp	r3, r2
 8002912:	f040 8085 	bne.w	8002a20 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800291e:	d004      	beq.n	800292a <HAL_ADC_ConfigChannel+0x742>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a49      	ldr	r2, [pc, #292]	; (8002a4c <HAL_ADC_ConfigChannel+0x864>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d101      	bne.n	800292e <HAL_ADC_ConfigChannel+0x746>
 800292a:	4a49      	ldr	r2, [pc, #292]	; (8002a50 <HAL_ADC_ConfigChannel+0x868>)
 800292c:	e000      	b.n	8002930 <HAL_ADC_ConfigChannel+0x748>
 800292e:	4a43      	ldr	r2, [pc, #268]	; (8002a3c <HAL_ADC_ConfigChannel+0x854>)
 8002930:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002934:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002938:	4619      	mov	r1, r3
 800293a:	4610      	mov	r0, r2
 800293c:	f7ff f8cb 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002940:	4b44      	ldr	r3, [pc, #272]	; (8002a54 <HAL_ADC_ConfigChannel+0x86c>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	099b      	lsrs	r3, r3, #6
 8002946:	4a44      	ldr	r2, [pc, #272]	; (8002a58 <HAL_ADC_ConfigChannel+0x870>)
 8002948:	fba2 2303 	umull	r2, r3, r2, r3
 800294c:	099b      	lsrs	r3, r3, #6
 800294e:	1c5a      	adds	r2, r3, #1
 8002950:	4613      	mov	r3, r2
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	4413      	add	r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800295a:	e002      	b.n	8002962 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	3b01      	subs	r3, #1
 8002960:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d1f9      	bne.n	800295c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002968:	e05a      	b.n	8002a20 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a3b      	ldr	r2, [pc, #236]	; (8002a5c <HAL_ADC_ConfigChannel+0x874>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d125      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x7d8>
 8002974:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002978:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800297c:	2b00      	cmp	r3, #0
 800297e:	d11f      	bne.n	80029c0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a31      	ldr	r2, [pc, #196]	; (8002a4c <HAL_ADC_ConfigChannel+0x864>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d104      	bne.n	8002994 <HAL_ADC_ConfigChannel+0x7ac>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a34      	ldr	r2, [pc, #208]	; (8002a60 <HAL_ADC_ConfigChannel+0x878>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d047      	beq.n	8002a24 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800299c:	d004      	beq.n	80029a8 <HAL_ADC_ConfigChannel+0x7c0>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a2a      	ldr	r2, [pc, #168]	; (8002a4c <HAL_ADC_ConfigChannel+0x864>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d101      	bne.n	80029ac <HAL_ADC_ConfigChannel+0x7c4>
 80029a8:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_ADC_ConfigChannel+0x868>)
 80029aa:	e000      	b.n	80029ae <HAL_ADC_ConfigChannel+0x7c6>
 80029ac:	4a23      	ldr	r2, [pc, #140]	; (8002a3c <HAL_ADC_ConfigChannel+0x854>)
 80029ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	4619      	mov	r1, r3
 80029b8:	4610      	mov	r0, r2
 80029ba:	f7ff f88c 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80029be:	e031      	b.n	8002a24 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a27      	ldr	r2, [pc, #156]	; (8002a64 <HAL_ADC_ConfigChannel+0x87c>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12d      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80029ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d127      	bne.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a1c      	ldr	r2, [pc, #112]	; (8002a4c <HAL_ADC_ConfigChannel+0x864>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d022      	beq.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADC_ConfigChannel+0x80c>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a17      	ldr	r2, [pc, #92]	; (8002a4c <HAL_ADC_ConfigChannel+0x864>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADC_ConfigChannel+0x810>
 80029f4:	4a16      	ldr	r2, [pc, #88]	; (8002a50 <HAL_ADC_ConfigChannel+0x868>)
 80029f6:	e000      	b.n	80029fa <HAL_ADC_ConfigChannel+0x812>
 80029f8:	4a10      	ldr	r2, [pc, #64]	; (8002a3c <HAL_ADC_ConfigChannel+0x854>)
 80029fa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029fe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f7ff f866 	bl	8001ad6 <LL_ADC_SetCommonPathInternalCh>
 8002a0a:	e00c      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8002a1e:	e002      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a20:	bf00      	nop
 8002a22:	e000      	b.n	8002a26 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a24:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a2e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a32:	4618      	mov	r0, r3
 8002a34:	37d8      	adds	r7, #216	; 0xd8
 8002a36:	46bd      	mov	sp, r7
 8002a38:	bd80      	pop	{r7, pc}
 8002a3a:	bf00      	nop
 8002a3c:	50000700 	.word	0x50000700
 8002a40:	c3210000 	.word	0xc3210000
 8002a44:	90c00010 	.word	0x90c00010
 8002a48:	50000600 	.word	0x50000600
 8002a4c:	50000100 	.word	0x50000100
 8002a50:	50000300 	.word	0x50000300
 8002a54:	200000c0 	.word	0x200000c0
 8002a58:	053e2d63 	.word	0x053e2d63
 8002a5c:	c7520000 	.word	0xc7520000
 8002a60:	50000500 	.word	0x50000500
 8002a64:	cb840000 	.word	0xcb840000

08002a68 <LL_ADC_IsEnabled>:
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d101      	bne.n	8002a80 <LL_ADC_IsEnabled+0x18>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <LL_ADC_IsEnabled+0x1a>
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	370c      	adds	r7, #12
 8002a86:	46bd      	mov	sp, r7
 8002a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8c:	4770      	bx	lr

08002a8e <LL_ADC_REG_IsConversionOngoing>:
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b083      	sub	sp, #12
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f003 0304 	and.w	r3, r3, #4
 8002a9e:	2b04      	cmp	r3, #4
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	370c      	adds	r7, #12
 8002aac:	46bd      	mov	sp, r7
 8002aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab2:	4770      	bx	lr

08002ab4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b0a1      	sub	sp, #132	; 0x84
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0e7      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002ada:	2300      	movs	r3, #0
 8002adc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002aea:	d102      	bne.n	8002af2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002aec:	4b6f      	ldr	r3, [pc, #444]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002aee:	60bb      	str	r3, [r7, #8]
 8002af0:	e009      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a6e      	ldr	r2, [pc, #440]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d102      	bne.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002afc:	4b6d      	ldr	r3, [pc, #436]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	e001      	b.n	8002b06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002b02:	2300      	movs	r3, #0
 8002b04:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10b      	bne.n	8002b24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002b20:	2301      	movs	r3, #1
 8002b22:	e0be      	b.n	8002ca2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	4618      	mov	r0, r3
 8002b28:	f7ff ffb1 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002b2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7ff ffab 	bl	8002a8e <LL_ADC_REG_IsConversionOngoing>
 8002b38:	4603      	mov	r3, r0
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	f040 80a0 	bne.w	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002b40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 809c 	bne.w	8002c80 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b50:	d004      	beq.n	8002b5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a55      	ldr	r2, [pc, #340]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d101      	bne.n	8002b60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002b5c:	4b56      	ldr	r3, [pc, #344]	; (8002cb8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002b5e:	e000      	b.n	8002b62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002b60:	4b56      	ldr	r3, [pc, #344]	; (8002cbc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002b62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d04b      	beq.n	8002c04 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002b6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6e:	689b      	ldr	r3, [r3, #8]
 8002b70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	6859      	ldr	r1, [r3, #4]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b7e:	035b      	lsls	r3, r3, #13
 8002b80:	430b      	orrs	r3, r1
 8002b82:	431a      	orrs	r2, r3
 8002b84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002b90:	d004      	beq.n	8002b9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d10f      	bne.n	8002bbc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002b9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ba0:	f7ff ff62 	bl	8002a68 <LL_ADC_IsEnabled>
 8002ba4:	4604      	mov	r4, r0
 8002ba6:	4841      	ldr	r0, [pc, #260]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ba8:	f7ff ff5e 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bac:	4603      	mov	r3, r0
 8002bae:	4323      	orrs	r3, r4
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	bf0c      	ite	eq
 8002bb4:	2301      	moveq	r3, #1
 8002bb6:	2300      	movne	r3, #0
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	e012      	b.n	8002be2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002bbc:	483c      	ldr	r0, [pc, #240]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002bbe:	f7ff ff53 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bc2:	4604      	mov	r4, r0
 8002bc4:	483b      	ldr	r0, [pc, #236]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002bc6:	f7ff ff4f 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	431c      	orrs	r4, r3
 8002bce:	483c      	ldr	r0, [pc, #240]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002bd0:	f7ff ff4a 	bl	8002a68 <LL_ADC_IsEnabled>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	4323      	orrs	r3, r4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	bf0c      	ite	eq
 8002bdc:	2301      	moveq	r3, #1
 8002bde:	2300      	movne	r3, #0
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d056      	beq.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002be6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002bee:	f023 030f 	bic.w	r3, r3, #15
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6811      	ldr	r1, [r2, #0]
 8002bf6:	683a      	ldr	r2, [r7, #0]
 8002bf8:	6892      	ldr	r2, [r2, #8]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c00:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c02:	e047      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002c04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c0e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002c18:	d004      	beq.n	8002c24 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a23      	ldr	r2, [pc, #140]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d10f      	bne.n	8002c44 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002c24:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002c28:	f7ff ff1e 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c2c:	4604      	mov	r4, r0
 8002c2e:	481f      	ldr	r0, [pc, #124]	; (8002cac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002c30:	f7ff ff1a 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c34:	4603      	mov	r3, r0
 8002c36:	4323      	orrs	r3, r4
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf0c      	ite	eq
 8002c3c:	2301      	moveq	r3, #1
 8002c3e:	2300      	movne	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	e012      	b.n	8002c6a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002c44:	481a      	ldr	r0, [pc, #104]	; (8002cb0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002c46:	f7ff ff0f 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	4819      	ldr	r0, [pc, #100]	; (8002cb4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002c4e:	f7ff ff0b 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c52:	4603      	mov	r3, r0
 8002c54:	431c      	orrs	r4, r3
 8002c56:	481a      	ldr	r0, [pc, #104]	; (8002cc0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002c58:	f7ff ff06 	bl	8002a68 <LL_ADC_IsEnabled>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	4323      	orrs	r3, r4
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	bf0c      	ite	eq
 8002c64:	2301      	moveq	r3, #1
 8002c66:	2300      	movne	r3, #0
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d012      	beq.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002c76:	f023 030f 	bic.w	r3, r3, #15
 8002c7a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002c7c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c7e:	e009      	b.n	8002c94 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c84:	f043 0220 	orr.w	r2, r3, #32
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002c92:	e000      	b.n	8002c96 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002c94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002c9e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3784      	adds	r7, #132	; 0x84
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	50000100 	.word	0x50000100
 8002cb0:	50000400 	.word	0x50000400
 8002cb4:	50000500 	.word	0x50000500
 8002cb8:	50000300 	.word	0x50000300
 8002cbc:	50000700 	.word	0x50000700
 8002cc0:	50000600 	.word	0x50000600

08002cc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cf6:	4a04      	ldr	r2, [pc, #16]	; (8002d08 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	60d3      	str	r3, [r2, #12]
}
 8002cfc:	bf00      	nop
 8002cfe:	3714      	adds	r7, #20
 8002d00:	46bd      	mov	sp, r7
 8002d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d06:	4770      	bx	lr
 8002d08:	e000ed00 	.word	0xe000ed00

08002d0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d10:	4b04      	ldr	r3, [pc, #16]	; (8002d24 <__NVIC_GetPriorityGrouping+0x18>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	0a1b      	lsrs	r3, r3, #8
 8002d16:	f003 0307 	and.w	r3, r3, #7
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	4603      	mov	r3, r0
 8002d30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	db0b      	blt.n	8002d52 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d3a:	79fb      	ldrb	r3, [r7, #7]
 8002d3c:	f003 021f 	and.w	r2, r3, #31
 8002d40:	4907      	ldr	r1, [pc, #28]	; (8002d60 <__NVIC_EnableIRQ+0x38>)
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	095b      	lsrs	r3, r3, #5
 8002d48:	2001      	movs	r0, #1
 8002d4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002d4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	e000e100 	.word	0xe000e100

08002d64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b083      	sub	sp, #12
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	6039      	str	r1, [r7, #0]
 8002d6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db0a      	blt.n	8002d8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	490c      	ldr	r1, [pc, #48]	; (8002db0 <__NVIC_SetPriority+0x4c>)
 8002d7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d82:	0112      	lsls	r2, r2, #4
 8002d84:	b2d2      	uxtb	r2, r2
 8002d86:	440b      	add	r3, r1
 8002d88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d8c:	e00a      	b.n	8002da4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	b2da      	uxtb	r2, r3
 8002d92:	4908      	ldr	r1, [pc, #32]	; (8002db4 <__NVIC_SetPriority+0x50>)
 8002d94:	79fb      	ldrb	r3, [r7, #7]
 8002d96:	f003 030f 	and.w	r3, r3, #15
 8002d9a:	3b04      	subs	r3, #4
 8002d9c:	0112      	lsls	r2, r2, #4
 8002d9e:	b2d2      	uxtb	r2, r2
 8002da0:	440b      	add	r3, r1
 8002da2:	761a      	strb	r2, [r3, #24]
}
 8002da4:	bf00      	nop
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr
 8002db0:	e000e100 	.word	0xe000e100
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002db8:	b480      	push	{r7}
 8002dba:	b089      	sub	sp, #36	; 0x24
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	60f8      	str	r0, [r7, #12]
 8002dc0:	60b9      	str	r1, [r7, #8]
 8002dc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	f003 0307 	and.w	r3, r3, #7
 8002dca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002dcc:	69fb      	ldr	r3, [r7, #28]
 8002dce:	f1c3 0307 	rsb	r3, r3, #7
 8002dd2:	2b04      	cmp	r3, #4
 8002dd4:	bf28      	it	cs
 8002dd6:	2304      	movcs	r3, #4
 8002dd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	3304      	adds	r3, #4
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d902      	bls.n	8002de8 <NVIC_EncodePriority+0x30>
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3b03      	subs	r3, #3
 8002de6:	e000      	b.n	8002dea <NVIC_EncodePriority+0x32>
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dec:	f04f 32ff 	mov.w	r2, #4294967295
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	43da      	mvns	r2, r3
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e00:	f04f 31ff 	mov.w	r1, #4294967295
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	fa01 f303 	lsl.w	r3, r1, r3
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e10:	4313      	orrs	r3, r2
         );
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3724      	adds	r7, #36	; 0x24
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr

08002e1e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e1e:	b580      	push	{r7, lr}
 8002e20:	b082      	sub	sp, #8
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f7ff ff4c 	bl	8002cc4 <__NVIC_SetPriorityGrouping>
}
 8002e2c:	bf00      	nop
 8002e2e:	3708      	adds	r7, #8
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}

08002e34 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b086      	sub	sp, #24
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	607a      	str	r2, [r7, #4]
 8002e40:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e42:	f7ff ff63 	bl	8002d0c <__NVIC_GetPriorityGrouping>
 8002e46:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	68b9      	ldr	r1, [r7, #8]
 8002e4c:	6978      	ldr	r0, [r7, #20]
 8002e4e:	f7ff ffb3 	bl	8002db8 <NVIC_EncodePriority>
 8002e52:	4602      	mov	r2, r0
 8002e54:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e58:	4611      	mov	r1, r2
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7ff ff82 	bl	8002d64 <__NVIC_SetPriority>
}
 8002e60:	bf00      	nop
 8002e62:	3718      	adds	r7, #24
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}

08002e68 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b082      	sub	sp, #8
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	4603      	mov	r3, r0
 8002e70:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f7ff ff56 	bl	8002d28 <__NVIC_EnableIRQ>
}
 8002e7c:	bf00      	nop
 8002e7e:	3708      	adds	r7, #8
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}

08002e84 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b085      	sub	sp, #20
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002e96:	b2db      	uxtb	r3, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d005      	beq.n	8002ea8 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2204      	movs	r2, #4
 8002ea0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
 8002ea6:	e037      	b.n	8002f18 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f022 020e 	bic.w	r2, r2, #14
 8002eb6:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ec2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ec6:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	681a      	ldr	r2, [r3, #0]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0201 	bic.w	r2, r2, #1
 8002ed6:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002edc:	f003 021f 	and.w	r2, r3, #31
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	2101      	movs	r1, #1
 8002ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8002eea:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ef4:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00c      	beq.n	8002f18 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f08:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f0c:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002f16:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3714      	adds	r7, #20
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2204      	movs	r2, #4
 8002f52:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e047      	b.n	8002ffa <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 020e 	bic.w	r2, r2, #14
 8002f78:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0201 	bic.w	r2, r2, #1
 8002f88:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f98:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f9e:	f003 021f 	and.w	r2, r3, #31
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa6:	2101      	movs	r1, #1
 8002fa8:	fa01 f202 	lsl.w	r2, r1, r2
 8002fac:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002fb6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00c      	beq.n	8002fda <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002fce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002fd8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	4798      	blx	r3
    }
  }
  return status;
 8002ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
 800300c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003012:	e15a      	b.n	80032ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	fa01 f303 	lsl.w	r3, r1, r3
 8003020:	4013      	ands	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f000 814c 	beq.w	80032c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0303 	and.w	r3, r3, #3
 8003034:	2b01      	cmp	r3, #1
 8003036:	d005      	beq.n	8003044 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003040:	2b02      	cmp	r3, #2
 8003042:	d130      	bne.n	80030a6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	2203      	movs	r2, #3
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	43db      	mvns	r3, r3
 8003056:	693a      	ldr	r2, [r7, #16]
 8003058:	4013      	ands	r3, r2
 800305a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	005b      	lsls	r3, r3, #1
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800307a:	2201      	movs	r2, #1
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa02 f303 	lsl.w	r3, r2, r3
 8003082:	43db      	mvns	r3, r3
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4013      	ands	r3, r2
 8003088:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	091b      	lsrs	r3, r3, #4
 8003090:	f003 0201 	and.w	r2, r3, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa02 f303 	lsl.w	r3, r2, r3
 800309a:	693a      	ldr	r2, [r7, #16]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f003 0303 	and.w	r3, r3, #3
 80030ae:	2b03      	cmp	r3, #3
 80030b0:	d017      	beq.n	80030e2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80030b8:	697b      	ldr	r3, [r7, #20]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	2203      	movs	r2, #3
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43db      	mvns	r3, r3
 80030c4:	693a      	ldr	r2, [r7, #16]
 80030c6:	4013      	ands	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	fa02 f303 	lsl.w	r3, r2, r3
 80030d6:	693a      	ldr	r2, [r7, #16]
 80030d8:	4313      	orrs	r3, r2
 80030da:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f003 0303 	and.w	r3, r3, #3
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d123      	bne.n	8003136 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	08da      	lsrs	r2, r3, #3
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	3208      	adds	r2, #8
 80030f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	4013      	ands	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f003 0307 	and.w	r3, r3, #7
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	fa02 f303 	lsl.w	r3, r2, r3
 8003122:	693a      	ldr	r2, [r7, #16]
 8003124:	4313      	orrs	r3, r2
 8003126:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	08da      	lsrs	r2, r3, #3
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	3208      	adds	r2, #8
 8003130:	6939      	ldr	r1, [r7, #16]
 8003132:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	2203      	movs	r2, #3
 8003142:	fa02 f303 	lsl.w	r3, r2, r3
 8003146:	43db      	mvns	r3, r3
 8003148:	693a      	ldr	r2, [r7, #16]
 800314a:	4013      	ands	r3, r2
 800314c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f003 0203 	and.w	r2, r3, #3
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	4313      	orrs	r3, r2
 8003162:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003172:	2b00      	cmp	r3, #0
 8003174:	f000 80a6 	beq.w	80032c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003178:	4b5b      	ldr	r3, [pc, #364]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 800317a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800317c:	4a5a      	ldr	r2, [pc, #360]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 800317e:	f043 0301 	orr.w	r3, r3, #1
 8003182:	6613      	str	r3, [r2, #96]	; 0x60
 8003184:	4b58      	ldr	r3, [pc, #352]	; (80032e8 <HAL_GPIO_Init+0x2e4>)
 8003186:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	60bb      	str	r3, [r7, #8]
 800318e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003190:	4a56      	ldr	r2, [pc, #344]	; (80032ec <HAL_GPIO_Init+0x2e8>)
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	089b      	lsrs	r3, r3, #2
 8003196:	3302      	adds	r3, #2
 8003198:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800319c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800319e:	697b      	ldr	r3, [r7, #20]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	220f      	movs	r2, #15
 80031a8:	fa02 f303 	lsl.w	r3, r2, r3
 80031ac:	43db      	mvns	r3, r3
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	4013      	ands	r3, r2
 80031b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80031ba:	d01f      	beq.n	80031fc <HAL_GPIO_Init+0x1f8>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a4c      	ldr	r2, [pc, #304]	; (80032f0 <HAL_GPIO_Init+0x2ec>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d019      	beq.n	80031f8 <HAL_GPIO_Init+0x1f4>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a4b      	ldr	r2, [pc, #300]	; (80032f4 <HAL_GPIO_Init+0x2f0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d013      	beq.n	80031f4 <HAL_GPIO_Init+0x1f0>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	4a4a      	ldr	r2, [pc, #296]	; (80032f8 <HAL_GPIO_Init+0x2f4>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d00d      	beq.n	80031f0 <HAL_GPIO_Init+0x1ec>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	4a49      	ldr	r2, [pc, #292]	; (80032fc <HAL_GPIO_Init+0x2f8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d007      	beq.n	80031ec <HAL_GPIO_Init+0x1e8>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	4a48      	ldr	r2, [pc, #288]	; (8003300 <HAL_GPIO_Init+0x2fc>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d101      	bne.n	80031e8 <HAL_GPIO_Init+0x1e4>
 80031e4:	2305      	movs	r3, #5
 80031e6:	e00a      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031e8:	2306      	movs	r3, #6
 80031ea:	e008      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031ec:	2304      	movs	r3, #4
 80031ee:	e006      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f0:	2303      	movs	r3, #3
 80031f2:	e004      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e002      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031f8:	2301      	movs	r3, #1
 80031fa:	e000      	b.n	80031fe <HAL_GPIO_Init+0x1fa>
 80031fc:	2300      	movs	r3, #0
 80031fe:	697a      	ldr	r2, [r7, #20]
 8003200:	f002 0203 	and.w	r2, r2, #3
 8003204:	0092      	lsls	r2, r2, #2
 8003206:	4093      	lsls	r3, r2
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	4313      	orrs	r3, r2
 800320c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800320e:	4937      	ldr	r1, [pc, #220]	; (80032ec <HAL_GPIO_Init+0x2e8>)
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	089b      	lsrs	r3, r3, #2
 8003214:	3302      	adds	r3, #2
 8003216:	693a      	ldr	r2, [r7, #16]
 8003218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800321c:	4b39      	ldr	r3, [pc, #228]	; (8003304 <HAL_GPIO_Init+0x300>)
 800321e:	689b      	ldr	r3, [r3, #8]
 8003220:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	43db      	mvns	r3, r3
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	4013      	ands	r3, r2
 800322a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003234:	2b00      	cmp	r3, #0
 8003236:	d003      	beq.n	8003240 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003238:	693a      	ldr	r2, [r7, #16]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	4313      	orrs	r3, r2
 800323e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003240:	4a30      	ldr	r2, [pc, #192]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003246:	4b2f      	ldr	r3, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003248:	68db      	ldr	r3, [r3, #12]
 800324a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	43db      	mvns	r3, r3
 8003250:	693a      	ldr	r2, [r7, #16]
 8003252:	4013      	ands	r3, r2
 8003254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d003      	beq.n	800326a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003262:	693a      	ldr	r2, [r7, #16]
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	4313      	orrs	r3, r2
 8003268:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800326a:	4a26      	ldr	r2, [pc, #152]	; (8003304 <HAL_GPIO_Init+0x300>)
 800326c:	693b      	ldr	r3, [r7, #16]
 800326e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003270:	4b24      	ldr	r3, [pc, #144]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	43db      	mvns	r3, r3
 800327a:	693a      	ldr	r2, [r7, #16]
 800327c:	4013      	ands	r3, r2
 800327e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003294:	4a1b      	ldr	r2, [pc, #108]	; (8003304 <HAL_GPIO_Init+0x300>)
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800329a:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_GPIO_Init+0x300>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	4013      	ands	r3, r2
 80032a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d003      	beq.n	80032be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80032b6:	693a      	ldr	r2, [r7, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	4313      	orrs	r3, r2
 80032bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80032be:	4a11      	ldr	r2, [pc, #68]	; (8003304 <HAL_GPIO_Init+0x300>)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	3301      	adds	r3, #1
 80032c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	fa22 f303 	lsr.w	r3, r2, r3
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f47f ae9d 	bne.w	8003014 <HAL_GPIO_Init+0x10>
  }
}
 80032da:	bf00      	nop
 80032dc:	bf00      	nop
 80032de:	371c      	adds	r7, #28
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	40021000 	.word	0x40021000
 80032ec:	40010000 	.word	0x40010000
 80032f0:	48000400 	.word	0x48000400
 80032f4:	48000800 	.word	0x48000800
 80032f8:	48000c00 	.word	0x48000c00
 80032fc:	48001000 	.word	0x48001000
 8003300:	48001400 	.word	0x48001400
 8003304:	40010400 	.word	0x40010400

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003324:	e002      	b.n	800332c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003326:	887a      	ldrh	r2, [r7, #2]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003342:	4b08      	ldr	r3, [pc, #32]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003344:	695a      	ldr	r2, [r3, #20]
 8003346:	88fb      	ldrh	r3, [r7, #6]
 8003348:	4013      	ands	r3, r2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d006      	beq.n	800335c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800334e:	4a05      	ldr	r2, [pc, #20]	; (8003364 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003350:	88fb      	ldrh	r3, [r7, #6]
 8003352:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 f806 	bl	8003368 <HAL_GPIO_EXTI_Callback>
  }
}
 800335c:	bf00      	nop
 800335e:	3708      	adds	r7, #8
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40010400 	.word	0x40010400

08003368 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	4603      	mov	r3, r0
 8003370:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
	...

08003380 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d141      	bne.n	8003412 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800338e:	4b4b      	ldr	r3, [pc, #300]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003396:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339a:	d131      	bne.n	8003400 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800339c:	4b47      	ldr	r3, [pc, #284]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	4a46      	ldr	r2, [pc, #280]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033ac:	4b43      	ldr	r3, [pc, #268]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033b4:	4a41      	ldr	r2, [pc, #260]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80033bc:	4b40      	ldr	r3, [pc, #256]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	2232      	movs	r2, #50	; 0x32
 80033c2:	fb02 f303 	mul.w	r3, r2, r3
 80033c6:	4a3f      	ldr	r2, [pc, #252]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80033c8:	fba2 2303 	umull	r2, r3, r2, r3
 80033cc:	0c9b      	lsrs	r3, r3, #18
 80033ce:	3301      	adds	r3, #1
 80033d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033d2:	e002      	b.n	80033da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80033da:	4b38      	ldr	r3, [pc, #224]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033dc:	695b      	ldr	r3, [r3, #20]
 80033de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033e6:	d102      	bne.n	80033ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f2      	bne.n	80033d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80033ee:	4b33      	ldr	r3, [pc, #204]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f0:	695b      	ldr	r3, [r3, #20]
 80033f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033fa:	d158      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80033fc:	2303      	movs	r3, #3
 80033fe:	e057      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003400:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003402:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003406:	4a2d      	ldr	r2, [pc, #180]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003408:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800340c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003410:	e04d      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003418:	d141      	bne.n	800349e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800341a:	4b28      	ldr	r3, [pc, #160]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003422:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003426:	d131      	bne.n	800348c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003428:	4b24      	ldr	r3, [pc, #144]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800342a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800342e:	4a23      	ldr	r2, [pc, #140]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003430:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003434:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003438:	4b20      	ldr	r3, [pc, #128]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003440:	4a1e      	ldr	r2, [pc, #120]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003442:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003446:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003448:	4b1d      	ldr	r3, [pc, #116]	; (80034c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2232      	movs	r2, #50	; 0x32
 800344e:	fb02 f303 	mul.w	r3, r2, r3
 8003452:	4a1c      	ldr	r2, [pc, #112]	; (80034c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003454:	fba2 2303 	umull	r2, r3, r2, r3
 8003458:	0c9b      	lsrs	r3, r3, #18
 800345a:	3301      	adds	r3, #1
 800345c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800345e:	e002      	b.n	8003466 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	3b01      	subs	r3, #1
 8003464:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003466:	4b15      	ldr	r3, [pc, #84]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800346e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003472:	d102      	bne.n	800347a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f2      	bne.n	8003460 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800347a:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003486:	d112      	bne.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	e011      	b.n	80034b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800348c:	4b0b      	ldr	r3, [pc, #44]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800348e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003492:	4a0a      	ldr	r2, [pc, #40]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800349c:	e007      	b.n	80034ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800349e:	4b07      	ldr	r3, [pc, #28]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034a6:	4a05      	ldr	r2, [pc, #20]	; (80034bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	3714      	adds	r7, #20
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	40007000 	.word	0x40007000
 80034c0:	200000c0 	.word	0x200000c0
 80034c4:	431bde83 	.word	0x431bde83

080034c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	4a04      	ldr	r2, [pc, #16]	; (80034e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80034d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80034d6:	6093      	str	r3, [r2, #8]
}
 80034d8:	bf00      	nop
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	40007000 	.word	0x40007000

080034e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b088      	sub	sp, #32
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d101      	bne.n	80034fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	e306      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	2b00      	cmp	r3, #0
 8003504:	d075      	beq.n	80035f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003506:	4b97      	ldr	r3, [pc, #604]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 030c 	and.w	r3, r3, #12
 800350e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003510:	4b94      	ldr	r3, [pc, #592]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	f003 0303 	and.w	r3, r3, #3
 8003518:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d102      	bne.n	8003526 <HAL_RCC_OscConfig+0x3e>
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	2b03      	cmp	r3, #3
 8003524:	d002      	beq.n	800352c <HAL_RCC_OscConfig+0x44>
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d10b      	bne.n	8003544 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800352c:	4b8d      	ldr	r3, [pc, #564]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d05b      	beq.n	80035f0 <HAL_RCC_OscConfig+0x108>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d157      	bne.n	80035f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003540:	2301      	movs	r3, #1
 8003542:	e2e1      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800354c:	d106      	bne.n	800355c <HAL_RCC_OscConfig+0x74>
 800354e:	4b85      	ldr	r3, [pc, #532]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a84      	ldr	r2, [pc, #528]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003558:	6013      	str	r3, [r2, #0]
 800355a:	e01d      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x98>
 8003566:	4b7f      	ldr	r3, [pc, #508]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	4a7e      	ldr	r2, [pc, #504]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800356c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003570:	6013      	str	r3, [r2, #0]
 8003572:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a7b      	ldr	r2, [pc, #492]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003578:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800357c:	6013      	str	r3, [r2, #0]
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0xb0>
 8003580:	4b78      	ldr	r3, [pc, #480]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a77      	ldr	r2, [pc, #476]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800358a:	6013      	str	r3, [r2, #0]
 800358c:	4b75      	ldr	r3, [pc, #468]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a74      	ldr	r2, [pc, #464]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003592:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003596:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d013      	beq.n	80035c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe fa58 	bl	8001a54 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fe fa54 	bl	8001a54 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	; 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e2a6      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d0f0      	beq.n	80035a8 <HAL_RCC_OscConfig+0xc0>
 80035c6:	e014      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c8:	f7fe fa44 	bl	8001a54 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035d0:	f7fe fa40 	bl	8001a54 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b64      	cmp	r3, #100	; 0x64
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e292      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80035e2:	4b60      	ldr	r3, [pc, #384]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d1f0      	bne.n	80035d0 <HAL_RCC_OscConfig+0xe8>
 80035ee:	e000      	b.n	80035f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0302 	and.w	r3, r3, #2
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035fe:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003608:	4b56      	ldr	r3, [pc, #344]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	f003 0303 	and.w	r3, r3, #3
 8003610:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003612:	69bb      	ldr	r3, [r7, #24]
 8003614:	2b0c      	cmp	r3, #12
 8003616:	d102      	bne.n	800361e <HAL_RCC_OscConfig+0x136>
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2b02      	cmp	r3, #2
 800361c:	d002      	beq.n	8003624 <HAL_RCC_OscConfig+0x13c>
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	2b04      	cmp	r3, #4
 8003622:	d11f      	bne.n	8003664 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800362c:	2b00      	cmp	r3, #0
 800362e:	d005      	beq.n	800363c <HAL_RCC_OscConfig+0x154>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	68db      	ldr	r3, [r3, #12]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e265      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800363c:	4b49      	ldr	r3, [pc, #292]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	691b      	ldr	r3, [r3, #16]
 8003648:	061b      	lsls	r3, r3, #24
 800364a:	4946      	ldr	r1, [pc, #280]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800364c:	4313      	orrs	r3, r2
 800364e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003650:	4b45      	ldr	r3, [pc, #276]	; (8003768 <HAL_RCC_OscConfig+0x280>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4618      	mov	r0, r3
 8003656:	f7fd fce5 	bl	8001024 <HAL_InitTick>
 800365a:	4603      	mov	r3, r0
 800365c:	2b00      	cmp	r3, #0
 800365e:	d043      	beq.n	80036e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003660:	2301      	movs	r3, #1
 8003662:	e251      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d023      	beq.n	80036b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b3d      	ldr	r3, [pc, #244]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a3c      	ldr	r2, [pc, #240]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003672:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003676:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fe f9ec 	bl	8001a54 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fe f9e8 	bl	8001a54 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e23a      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003692:	4b34      	ldr	r3, [pc, #208]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0f0      	beq.n	8003680 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800369e:	4b31      	ldr	r3, [pc, #196]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	061b      	lsls	r3, r3, #24
 80036ac:	492d      	ldr	r1, [pc, #180]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ae:	4313      	orrs	r3, r2
 80036b0:	604b      	str	r3, [r1, #4]
 80036b2:	e01a      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036b4:	4b2b      	ldr	r3, [pc, #172]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036c0:	f7fe f9c8 	bl	8001a54 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036c8:	f7fe f9c4 	bl	8001a54 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e216      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80036da:	4b22      	ldr	r3, [pc, #136]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x1e0>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d041      	beq.n	800377a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01c      	beq.n	8003738 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036fe:	4b19      	ldr	r3, [pc, #100]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003700:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003706:	f043 0301 	orr.w	r3, r3, #1
 800370a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800370e:	f7fe f9a1 	bl	8001a54 <HAL_GetTick>
 8003712:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003714:	e008      	b.n	8003728 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003716:	f7fe f99d 	bl	8001a54 <HAL_GetTick>
 800371a:	4602      	mov	r2, r0
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	1ad3      	subs	r3, r2, r3
 8003720:	2b02      	cmp	r3, #2
 8003722:	d901      	bls.n	8003728 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003724:	2303      	movs	r3, #3
 8003726:	e1ef      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003728:	4b0e      	ldr	r3, [pc, #56]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800372a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800372e:	f003 0302 	and.w	r3, r3, #2
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0ef      	beq.n	8003716 <HAL_RCC_OscConfig+0x22e>
 8003736:	e020      	b.n	800377a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003738:	4b0a      	ldr	r3, [pc, #40]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 800373a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800373e:	4a09      	ldr	r2, [pc, #36]	; (8003764 <HAL_RCC_OscConfig+0x27c>)
 8003740:	f023 0301 	bic.w	r3, r3, #1
 8003744:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003748:	f7fe f984 	bl	8001a54 <HAL_GetTick>
 800374c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800374e:	e00d      	b.n	800376c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003750:	f7fe f980 	bl	8001a54 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	2b02      	cmp	r3, #2
 800375c:	d906      	bls.n	800376c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800375e:	2303      	movs	r3, #3
 8003760:	e1d2      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 8003762:	bf00      	nop
 8003764:	40021000 	.word	0x40021000
 8003768:	200000c4 	.word	0x200000c4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800376c:	4b8c      	ldr	r3, [pc, #560]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800376e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003772:	f003 0302 	and.w	r3, r3, #2
 8003776:	2b00      	cmp	r3, #0
 8003778:	d1ea      	bne.n	8003750 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0304 	and.w	r3, r3, #4
 8003782:	2b00      	cmp	r3, #0
 8003784:	f000 80a6 	beq.w	80038d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003788:	2300      	movs	r3, #0
 800378a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800378c:	4b84      	ldr	r3, [pc, #528]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800378e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003794:	2b00      	cmp	r3, #0
 8003796:	d101      	bne.n	800379c <HAL_RCC_OscConfig+0x2b4>
 8003798:	2301      	movs	r3, #1
 800379a:	e000      	b.n	800379e <HAL_RCC_OscConfig+0x2b6>
 800379c:	2300      	movs	r3, #0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00d      	beq.n	80037be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	4b7f      	ldr	r3, [pc, #508]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037a6:	4a7e      	ldr	r2, [pc, #504]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037ac:	6593      	str	r3, [r2, #88]	; 0x58
 80037ae:	4b7c      	ldr	r3, [pc, #496]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b6:	60fb      	str	r3, [r7, #12]
 80037b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80037ba:	2301      	movs	r3, #1
 80037bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037be:	4b79      	ldr	r3, [pc, #484]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d118      	bne.n	80037fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80037ca:	4b76      	ldr	r3, [pc, #472]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a75      	ldr	r2, [pc, #468]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037d6:	f7fe f93d 	bl	8001a54 <HAL_GetTick>
 80037da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037dc:	e008      	b.n	80037f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037de:	f7fe f939 	bl	8001a54 <HAL_GetTick>
 80037e2:	4602      	mov	r2, r0
 80037e4:	693b      	ldr	r3, [r7, #16]
 80037e6:	1ad3      	subs	r3, r2, r3
 80037e8:	2b02      	cmp	r3, #2
 80037ea:	d901      	bls.n	80037f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80037ec:	2303      	movs	r3, #3
 80037ee:	e18b      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80037f0:	4b6c      	ldr	r3, [pc, #432]	; (80039a4 <HAL_RCC_OscConfig+0x4bc>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d0f0      	beq.n	80037de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b01      	cmp	r3, #1
 8003802:	d108      	bne.n	8003816 <HAL_RCC_OscConfig+0x32e>
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003806:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800380a:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003814:	e024      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d110      	bne.n	8003840 <HAL_RCC_OscConfig+0x358>
 800381e:	4b60      	ldr	r3, [pc, #384]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	4a5e      	ldr	r2, [pc, #376]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003826:	f043 0304 	orr.w	r3, r3, #4
 800382a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800382e:	4b5c      	ldr	r3, [pc, #368]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003830:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003836:	f043 0301 	orr.w	r3, r3, #1
 800383a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800383e:	e00f      	b.n	8003860 <HAL_RCC_OscConfig+0x378>
 8003840:	4b57      	ldr	r3, [pc, #348]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	4a56      	ldr	r2, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003848:	f023 0301 	bic.w	r3, r3, #1
 800384c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003850:	4b53      	ldr	r3, [pc, #332]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	4a52      	ldr	r2, [pc, #328]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003858:	f023 0304 	bic.w	r3, r3, #4
 800385c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d016      	beq.n	8003896 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003868:	f7fe f8f4 	bl	8001a54 <HAL_GetTick>
 800386c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800386e:	e00a      	b.n	8003886 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fe f8f0 	bl	8001a54 <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	693b      	ldr	r3, [r7, #16]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e140      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003886:	4b46      	ldr	r3, [pc, #280]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d0ed      	beq.n	8003870 <HAL_RCC_OscConfig+0x388>
 8003894:	e015      	b.n	80038c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003896:	f7fe f8dd 	bl	8001a54 <HAL_GetTick>
 800389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800389c:	e00a      	b.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800389e:	f7fe f8d9 	bl	8001a54 <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d901      	bls.n	80038b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80038b0:	2303      	movs	r3, #3
 80038b2:	e129      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80038b4:	4b3a      	ldr	r3, [pc, #232]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ba:	f003 0302 	and.w	r3, r3, #2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d1ed      	bne.n	800389e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038c2:	7ffb      	ldrb	r3, [r7, #31]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d105      	bne.n	80038d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c8:	4b35      	ldr	r3, [pc, #212]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038cc:	4a34      	ldr	r2, [pc, #208]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0320 	and.w	r3, r3, #32
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d03c      	beq.n	800395a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d01c      	beq.n	8003922 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80038e8:	4b2d      	ldr	r3, [pc, #180]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80038ee:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 80038f0:	f043 0301 	orr.w	r3, r3, #1
 80038f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f8:	f7fe f8ac 	bl	8001a54 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003900:	f7fe f8a8 	bl	8001a54 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e0fa      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003912:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003914:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d0ef      	beq.n	8003900 <HAL_RCC_OscConfig+0x418>
 8003920:	e01b      	b.n	800395a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003922:	4b1f      	ldr	r3, [pc, #124]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003924:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003928:	4a1d      	ldr	r2, [pc, #116]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800392a:	f023 0301 	bic.w	r3, r3, #1
 800392e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003932:	f7fe f88f 	bl	8001a54 <HAL_GetTick>
 8003936:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003938:	e008      	b.n	800394c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800393a:	f7fe f88b 	bl	8001a54 <HAL_GetTick>
 800393e:	4602      	mov	r2, r0
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	2b02      	cmp	r3, #2
 8003946:	d901      	bls.n	800394c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e0dd      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800394c:	4b14      	ldr	r3, [pc, #80]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800394e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1ef      	bne.n	800393a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69db      	ldr	r3, [r3, #28]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 80d1 	beq.w	8003b06 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 030c 	and.w	r3, r3, #12
 800396c:	2b0c      	cmp	r3, #12
 800396e:	f000 808b 	beq.w	8003a88 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	2b02      	cmp	r3, #2
 8003978:	d15e      	bne.n	8003a38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800397a:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4a08      	ldr	r2, [pc, #32]	; (80039a0 <HAL_RCC_OscConfig+0x4b8>)
 8003980:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003984:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003986:	f7fe f865 	bl	8001a54 <HAL_GetTick>
 800398a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800398c:	e00c      	b.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800398e:	f7fe f861 	bl	8001a54 <HAL_GetTick>
 8003992:	4602      	mov	r2, r0
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	1ad3      	subs	r3, r2, r3
 8003998:	2b02      	cmp	r3, #2
 800399a:	d905      	bls.n	80039a8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800399c:	2303      	movs	r3, #3
 800399e:	e0b3      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
 80039a0:	40021000 	.word	0x40021000
 80039a4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039a8:	4b59      	ldr	r3, [pc, #356]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d1ec      	bne.n	800398e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80039b4:	4b56      	ldr	r3, [pc, #344]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039b6:	68da      	ldr	r2, [r3, #12]
 80039b8:	4b56      	ldr	r3, [pc, #344]	; (8003b14 <HAL_RCC_OscConfig+0x62c>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	687a      	ldr	r2, [r7, #4]
 80039be:	6a11      	ldr	r1, [r2, #32]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039c4:	3a01      	subs	r2, #1
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	4311      	orrs	r1, r2
 80039ca:	687a      	ldr	r2, [r7, #4]
 80039cc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80039ce:	0212      	lsls	r2, r2, #8
 80039d0:	4311      	orrs	r1, r2
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80039d6:	0852      	lsrs	r2, r2, #1
 80039d8:	3a01      	subs	r2, #1
 80039da:	0552      	lsls	r2, r2, #21
 80039dc:	4311      	orrs	r1, r2
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80039e2:	0852      	lsrs	r2, r2, #1
 80039e4:	3a01      	subs	r2, #1
 80039e6:	0652      	lsls	r2, r2, #25
 80039e8:	4311      	orrs	r1, r2
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80039ee:	06d2      	lsls	r2, r2, #27
 80039f0:	430a      	orrs	r2, r1
 80039f2:	4947      	ldr	r1, [pc, #284]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039f4:	4313      	orrs	r3, r2
 80039f6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039f8:	4b45      	ldr	r3, [pc, #276]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a44      	ldr	r2, [pc, #272]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 80039fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003a04:	4b42      	ldr	r3, [pc, #264]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	4a41      	ldr	r2, [pc, #260]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003a0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe f820 	bl	8001a54 <HAL_GetTick>
 8003a14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a16:	e008      	b.n	8003a2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a18:	f7fe f81c 	bl	8001a54 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	2b02      	cmp	r3, #2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e06e      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a2a:	4b39      	ldr	r3, [pc, #228]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d0f0      	beq.n	8003a18 <HAL_RCC_OscConfig+0x530>
 8003a36:	e066      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a38:	4b35      	ldr	r3, [pc, #212]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a34      	ldr	r2, [pc, #208]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a42:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8003a44:	4b32      	ldr	r3, [pc, #200]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	4a31      	ldr	r2, [pc, #196]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a4a:	f023 0303 	bic.w	r3, r3, #3
 8003a4e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003a50:	4b2f      	ldr	r3, [pc, #188]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a52:	68db      	ldr	r3, [r3, #12]
 8003a54:	4a2e      	ldr	r2, [pc, #184]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a56:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8003a5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a5e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fff8 	bl	8001a54 <HAL_GetTick>
 8003a64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a66:	e008      	b.n	8003a7a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003a68:	f7fd fff4 	bl	8001a54 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	1ad3      	subs	r3, r2, r3
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d901      	bls.n	8003a7a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003a76:	2303      	movs	r3, #3
 8003a78:	e046      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a7a:	4b25      	ldr	r3, [pc, #148]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d1f0      	bne.n	8003a68 <HAL_RCC_OscConfig+0x580>
 8003a86:	e03e      	b.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	69db      	ldr	r3, [r3, #28]
 8003a8c:	2b01      	cmp	r3, #1
 8003a8e:	d101      	bne.n	8003a94 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003a90:	2301      	movs	r3, #1
 8003a92:	e039      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003a94:	4b1e      	ldr	r3, [pc, #120]	; (8003b10 <HAL_RCC_OscConfig+0x628>)
 8003a96:	68db      	ldr	r3, [r3, #12]
 8003a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f003 0203 	and.w	r2, r3, #3
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d12c      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d123      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d11b      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ad4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	d113      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae4:	085b      	lsrs	r3, r3, #1
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003aea:	429a      	cmp	r2, r3
 8003aec:	d109      	bne.n	8003b02 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af8:	085b      	lsrs	r3, r3, #1
 8003afa:	3b01      	subs	r3, #1
 8003afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d001      	beq.n	8003b06 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e000      	b.n	8003b08 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3720      	adds	r7, #32
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}
 8003b10:	40021000 	.word	0x40021000
 8003b14:	019f800c 	.word	0x019f800c

08003b18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b086      	sub	sp, #24
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003b22:	2300      	movs	r3, #0
 8003b24:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	e11e      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003b30:	4b91      	ldr	r3, [pc, #580]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 030f 	and.w	r3, r3, #15
 8003b38:	683a      	ldr	r2, [r7, #0]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d910      	bls.n	8003b60 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b3e:	4b8e      	ldr	r3, [pc, #568]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f023 020f 	bic.w	r2, r3, #15
 8003b46:	498c      	ldr	r1, [pc, #560]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b4e:	4b8a      	ldr	r3, [pc, #552]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 030f 	and.w	r3, r3, #15
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d001      	beq.n	8003b60 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e106      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0301 	and.w	r3, r3, #1
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d073      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d129      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b74:	4b81      	ldr	r3, [pc, #516]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d101      	bne.n	8003b84 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e0f4      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003b84:	f000 f9d0 	bl	8003f28 <RCC_GetSysClockFreqFromPLLSource>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	4a7c      	ldr	r2, [pc, #496]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d93f      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003b92:	4b7a      	ldr	r3, [pc, #488]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003b94:	689b      	ldr	r3, [r3, #8]
 8003b96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d009      	beq.n	8003bb2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d033      	beq.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d12f      	bne.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bb2:	4b72      	ldr	r3, [pc, #456]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bba:	4a70      	ldr	r2, [pc, #448]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bc0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003bc2:	2380      	movs	r3, #128	; 0x80
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	e024      	b.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d107      	bne.n	8003be0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003bd0:	4b6a      	ldr	r3, [pc, #424]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d109      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	e0c6      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003be0:	4b66      	ldr	r3, [pc, #408]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d101      	bne.n	8003bf0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003bec:	2301      	movs	r3, #1
 8003bee:	e0be      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003bf0:	f000 f8ce 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003bf4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4a61      	ldr	r2, [pc, #388]	; (8003d80 <HAL_RCC_ClockConfig+0x268>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d909      	bls.n	8003c12 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003bfe:	4b5f      	ldr	r3, [pc, #380]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c00:	689b      	ldr	r3, [r3, #8]
 8003c02:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c06:	4a5d      	ldr	r2, [pc, #372]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c0c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003c0e:	2380      	movs	r3, #128	; 0x80
 8003c10:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f023 0203 	bic.w	r2, r3, #3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	4957      	ldr	r1, [pc, #348]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c20:	4313      	orrs	r3, r2
 8003c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c24:	f7fd ff16 	bl	8001a54 <HAL_GetTick>
 8003c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	e00a      	b.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c2c:	f7fd ff12 	bl	8001a54 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d901      	bls.n	8003c42 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003c3e:	2303      	movs	r3, #3
 8003c40:	e095      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c42:	4b4e      	ldr	r3, [pc, #312]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 020c 	and.w	r2, r3, #12
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d1eb      	bne.n	8003c2c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f003 0302 	and.w	r3, r3, #2
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d023      	beq.n	8003ca8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0304 	and.w	r3, r3, #4
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d005      	beq.n	8003c78 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003c6c:	4b43      	ldr	r3, [pc, #268]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	4a42      	ldr	r2, [pc, #264]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c72:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c76:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f003 0308 	and.w	r3, r3, #8
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d007      	beq.n	8003c94 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003c84:	4b3d      	ldr	r3, [pc, #244]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c86:	689b      	ldr	r3, [r3, #8]
 8003c88:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c8c:	4a3b      	ldr	r2, [pc, #236]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c8e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003c92:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c94:	4b39      	ldr	r3, [pc, #228]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003c96:	689b      	ldr	r3, [r3, #8]
 8003c98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	689b      	ldr	r3, [r3, #8]
 8003ca0:	4936      	ldr	r1, [pc, #216]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	608b      	str	r3, [r1, #8]
 8003ca6:	e008      	b.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	2b80      	cmp	r3, #128	; 0x80
 8003cac:	d105      	bne.n	8003cba <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003cae:	4b33      	ldr	r3, [pc, #204]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a32      	ldr	r2, [pc, #200]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003cb4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cb8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cba:	4b2f      	ldr	r3, [pc, #188]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 030f 	and.w	r3, r3, #15
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d21d      	bcs.n	8003d04 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f023 020f 	bic.w	r2, r3, #15
 8003cd0:	4929      	ldr	r1, [pc, #164]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003cd8:	f7fd febc 	bl	8001a54 <HAL_GetTick>
 8003cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	e00a      	b.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ce0:	f7fd feb8 	bl	8001a54 <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e03b      	b.n	8003d6e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cf6:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <HAL_RCC_ClockConfig+0x260>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	683a      	ldr	r2, [r7, #0]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d1ed      	bne.n	8003ce0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0304 	and.w	r3, r3, #4
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d008      	beq.n	8003d22 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	68db      	ldr	r3, [r3, #12]
 8003d1c:	4917      	ldr	r1, [pc, #92]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d009      	beq.n	8003d42 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003d2e:	4b13      	ldr	r3, [pc, #76]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	691b      	ldr	r3, [r3, #16]
 8003d3a:	00db      	lsls	r3, r3, #3
 8003d3c:	490f      	ldr	r1, [pc, #60]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d42:	f000 f825 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8003d46:	4602      	mov	r2, r0
 8003d48:	4b0c      	ldr	r3, [pc, #48]	; (8003d7c <HAL_RCC_ClockConfig+0x264>)
 8003d4a:	689b      	ldr	r3, [r3, #8]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 030f 	and.w	r3, r3, #15
 8003d52:	490c      	ldr	r1, [pc, #48]	; (8003d84 <HAL_RCC_ClockConfig+0x26c>)
 8003d54:	5ccb      	ldrb	r3, [r1, r3]
 8003d56:	f003 031f 	and.w	r3, r3, #31
 8003d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003d5e:	4a0a      	ldr	r2, [pc, #40]	; (8003d88 <HAL_RCC_ClockConfig+0x270>)
 8003d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003d62:	4b0a      	ldr	r3, [pc, #40]	; (8003d8c <HAL_RCC_ClockConfig+0x274>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f7fd f95c 	bl	8001024 <HAL_InitTick>
 8003d6c:	4603      	mov	r3, r0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3718      	adds	r7, #24
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	40022000 	.word	0x40022000
 8003d7c:	40021000 	.word	0x40021000
 8003d80:	04c4b400 	.word	0x04c4b400
 8003d84:	08009920 	.word	0x08009920
 8003d88:	200000c0 	.word	0x200000c0
 8003d8c:	200000c4 	.word	0x200000c4

08003d90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003d96:	4b2c      	ldr	r3, [pc, #176]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f003 030c 	and.w	r3, r3, #12
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d102      	bne.n	8003da8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003da2:	4b2a      	ldr	r3, [pc, #168]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e047      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003da8:	4b27      	ldr	r3, [pc, #156]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	f003 030c 	and.w	r3, r3, #12
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d102      	bne.n	8003dba <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003db4:	4b26      	ldr	r3, [pc, #152]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e03e      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003dba:	4b23      	ldr	r3, [pc, #140]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 030c 	and.w	r3, r3, #12
 8003dc2:	2b0c      	cmp	r3, #12
 8003dc4:	d136      	bne.n	8003e34 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc6:	4b20      	ldr	r3, [pc, #128]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd0:	4b1d      	ldr	r3, [pc, #116]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d10c      	bne.n	8003dfe <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de4:	4a1a      	ldr	r2, [pc, #104]	; (8003e50 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a16      	ldr	r2, [pc, #88]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003dee:	68d2      	ldr	r2, [r2, #12]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	617b      	str	r3, [r7, #20]
      break;
 8003dfc:	e00c      	b.n	8003e18 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfe:	4a13      	ldr	r2, [pc, #76]	; (8003e4c <HAL_RCC_GetSysClockFreq+0xbc>)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4a10      	ldr	r2, [pc, #64]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	0a12      	lsrs	r2, r2, #8
 8003e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
      break;
 8003e16:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	613b      	str	r3, [r7, #16]
 8003e32:	e001      	b.n	8003e38 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003e38:	693b      	ldr	r3, [r7, #16]
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr
 8003e46:	bf00      	nop
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	00f42400 	.word	0x00f42400
 8003e50:	016e3600 	.word	0x016e3600

08003e54 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e58:	4b03      	ldr	r3, [pc, #12]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr
 8003e66:	bf00      	nop
 8003e68:	200000c0 	.word	0x200000c0

08003e6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003e70:	f7ff fff0 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003e74:	4602      	mov	r2, r0
 8003e76:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	0a1b      	lsrs	r3, r3, #8
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	4904      	ldr	r1, [pc, #16]	; (8003e94 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e82:	5ccb      	ldrb	r3, [r1, r3]
 8003e84:	f003 031f 	and.w	r3, r3, #31
 8003e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	bd80      	pop	{r7, pc}
 8003e90:	40021000 	.word	0x40021000
 8003e94:	08009930 	.word	0x08009930

08003e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e9c:	f7ff ffda 	bl	8003e54 <HAL_RCC_GetHCLKFreq>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	4b06      	ldr	r3, [pc, #24]	; (8003ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ea4:	689b      	ldr	r3, [r3, #8]
 8003ea6:	0adb      	lsrs	r3, r3, #11
 8003ea8:	f003 0307 	and.w	r3, r3, #7
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eae:	5ccb      	ldrb	r3, [r1, r3]
 8003eb0:	f003 031f 	and.w	r3, r3, #31
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40021000 	.word	0x40021000
 8003ec0:	08009930 	.word	0x08009930

08003ec4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	220f      	movs	r2, #15
 8003ed2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003ed4:	4b12      	ldr	r3, [pc, #72]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f003 0203 	and.w	r2, r3, #3
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003ee0:	4b0f      	ldr	r3, [pc, #60]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003ef8:	4b09      	ldr	r3, [pc, #36]	; (8003f20 <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	08db      	lsrs	r3, r3, #3
 8003efe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003f06:	4b07      	ldr	r3, [pc, #28]	; (8003f24 <HAL_RCC_GetClockConfig+0x60>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	601a      	str	r2, [r3, #0]
}
 8003f12:	bf00      	nop
 8003f14:	370c      	adds	r7, #12
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr
 8003f1e:	bf00      	nop
 8003f20:	40021000 	.word	0x40021000
 8003f24:	40022000 	.word	0x40022000

08003f28 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	b087      	sub	sp, #28
 8003f2c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2e:	4b1e      	ldr	r3, [pc, #120]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	f003 0303 	and.w	r3, r3, #3
 8003f36:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f38:	4b1b      	ldr	r3, [pc, #108]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	091b      	lsrs	r3, r3, #4
 8003f3e:	f003 030f 	and.w	r3, r3, #15
 8003f42:	3301      	adds	r3, #1
 8003f44:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	2b03      	cmp	r3, #3
 8003f4a:	d10c      	bne.n	8003f66 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f4c:	4a17      	ldr	r2, [pc, #92]	; (8003fac <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f54:	4a14      	ldr	r2, [pc, #80]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f56:	68d2      	ldr	r2, [r2, #12]
 8003f58:	0a12      	lsrs	r2, r2, #8
 8003f5a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f5e:	fb02 f303 	mul.w	r3, r2, r3
 8003f62:	617b      	str	r3, [r7, #20]
    break;
 8003f64:	e00c      	b.n	8003f80 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f66:	4a12      	ldr	r2, [pc, #72]	; (8003fb0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6e:	4a0e      	ldr	r2, [pc, #56]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f70:	68d2      	ldr	r2, [r2, #12]
 8003f72:	0a12      	lsrs	r2, r2, #8
 8003f74:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003f78:	fb02 f303 	mul.w	r3, r2, r3
 8003f7c:	617b      	str	r3, [r7, #20]
    break;
 8003f7e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f80:	4b09      	ldr	r3, [pc, #36]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	0e5b      	lsrs	r3, r3, #25
 8003f86:	f003 0303 	and.w	r3, r3, #3
 8003f8a:	3301      	adds	r3, #1
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003f90:	697a      	ldr	r2, [r7, #20]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f98:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003f9a:	687b      	ldr	r3, [r7, #4]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40021000 	.word	0x40021000
 8003fac:	016e3600 	.word	0x016e3600
 8003fb0:	00f42400 	.word	0x00f42400

08003fb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	b086      	sub	sp, #24
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 8098 	beq.w	8004102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003fd6:	4b43      	ldr	r3, [pc, #268]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10d      	bne.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	4b40      	ldr	r3, [pc, #256]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe6:	4a3f      	ldr	r2, [pc, #252]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
 8003fee:	4b3d      	ldr	r3, [pc, #244]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ff6:	60bb      	str	r3, [r7, #8]
 8003ff8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ffe:	4b3a      	ldr	r3, [pc, #232]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a39      	ldr	r2, [pc, #228]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004008:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800400a:	f7fd fd23 	bl	8001a54 <HAL_GetTick>
 800400e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004010:	e009      	b.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004012:	f7fd fd1f 	bl	8001a54 <HAL_GetTick>
 8004016:	4602      	mov	r2, r0
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	1ad3      	subs	r3, r2, r3
 800401c:	2b02      	cmp	r3, #2
 800401e:	d902      	bls.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004020:	2303      	movs	r3, #3
 8004022:	74fb      	strb	r3, [r7, #19]
        break;
 8004024:	e005      	b.n	8004032 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004026:	4b30      	ldr	r3, [pc, #192]	; (80040e8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800402e:	2b00      	cmp	r3, #0
 8004030:	d0ef      	beq.n	8004012 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004032:	7cfb      	ldrb	r3, [r7, #19]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d159      	bne.n	80040ec <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004038:	4b2a      	ldr	r3, [pc, #168]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800403a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004042:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d01e      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	429a      	cmp	r2, r3
 8004052:	d019      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004054:	4b23      	ldr	r3, [pc, #140]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800405e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004060:	4b20      	ldr	r3, [pc, #128]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004066:	4a1f      	ldr	r2, [pc, #124]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004068:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800406c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004070:	4b1c      	ldr	r3, [pc, #112]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004078:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004080:	4a18      	ldr	r2, [pc, #96]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d016      	beq.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004092:	f7fd fcdf 	bl	8001a54 <HAL_GetTick>
 8004096:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004098:	e00b      	b.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800409a:	f7fd fcdb 	bl	8001a54 <HAL_GetTick>
 800409e:	4602      	mov	r2, r0
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d902      	bls.n	80040b2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	74fb      	strb	r3, [r7, #19]
            break;
 80040b0:	e006      	b.n	80040c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040b2:	4b0c      	ldr	r3, [pc, #48]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040b8:	f003 0302 	and.w	r3, r3, #2
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d0ec      	beq.n	800409a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80040c0:	7cfb      	ldrb	r3, [r7, #19]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d10b      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80040c6:	4b07      	ldr	r3, [pc, #28]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040d4:	4903      	ldr	r1, [pc, #12]	; (80040e4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80040dc:	e008      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80040de:	7cfb      	ldrb	r3, [r7, #19]
 80040e0:	74bb      	strb	r3, [r7, #18]
 80040e2:	e005      	b.n	80040f0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80040e4:	40021000 	.word	0x40021000
 80040e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040ec:	7cfb      	ldrb	r3, [r7, #19]
 80040ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040f0:	7c7b      	ldrb	r3, [r7, #17]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d105      	bne.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040f6:	4ba7      	ldr	r3, [pc, #668]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fa:	4aa6      	ldr	r2, [pc, #664]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004100:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00a      	beq.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800410e:	4ba1      	ldr	r3, [pc, #644]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004114:	f023 0203 	bic.w	r2, r3, #3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	499d      	ldr	r1, [pc, #628]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 0302 	and.w	r3, r3, #2
 800412c:	2b00      	cmp	r3, #0
 800412e:	d00a      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004130:	4b98      	ldr	r3, [pc, #608]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004136:	f023 020c 	bic.w	r2, r3, #12
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	4995      	ldr	r1, [pc, #596]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004140:	4313      	orrs	r3, r2
 8004142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0304 	and.w	r3, r3, #4
 800414e:	2b00      	cmp	r3, #0
 8004150:	d00a      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004152:	4b90      	ldr	r3, [pc, #576]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	498c      	ldr	r1, [pc, #560]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004162:	4313      	orrs	r3, r2
 8004164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f003 0308 	and.w	r3, r3, #8
 8004170:	2b00      	cmp	r3, #0
 8004172:	d00a      	beq.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004174:	4b87      	ldr	r3, [pc, #540]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	4984      	ldr	r1, [pc, #528]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004184:	4313      	orrs	r3, r2
 8004186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0310 	and.w	r3, r3, #16
 8004192:	2b00      	cmp	r3, #0
 8004194:	d00a      	beq.n	80041ac <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004196:	4b7f      	ldr	r3, [pc, #508]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800419c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	497b      	ldr	r1, [pc, #492]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041a6:	4313      	orrs	r3, r2
 80041a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	f003 0320 	and.w	r3, r3, #32
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d00a      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041b8:	4b76      	ldr	r3, [pc, #472]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	699b      	ldr	r3, [r3, #24]
 80041c6:	4973      	ldr	r1, [pc, #460]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c8:	4313      	orrs	r3, r2
 80041ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d00a      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80041da:	4b6e      	ldr	r3, [pc, #440]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	69db      	ldr	r3, [r3, #28]
 80041e8:	496a      	ldr	r1, [pc, #424]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	4313      	orrs	r3, r2
 80041ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d00a      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80041fc:	4b65      	ldr	r3, [pc, #404]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	4962      	ldr	r1, [pc, #392]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800421e:	4b5d      	ldr	r3, [pc, #372]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004220:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004224:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422c:	4959      	ldr	r1, [pc, #356]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800422e:	4313      	orrs	r3, r2
 8004230:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d00a      	beq.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004240:	4b54      	ldr	r3, [pc, #336]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004242:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424e:	4951      	ldr	r1, [pc, #324]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004250:	4313      	orrs	r3, r2
 8004252:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425e:	2b00      	cmp	r3, #0
 8004260:	d00a      	beq.n	8004278 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004262:	4b4c      	ldr	r3, [pc, #304]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004264:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004268:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	4948      	ldr	r1, [pc, #288]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004272:	4313      	orrs	r3, r2
 8004274:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004280:	2b00      	cmp	r3, #0
 8004282:	d015      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004284:	4b43      	ldr	r3, [pc, #268]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004286:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004292:	4940      	ldr	r1, [pc, #256]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004294:	4313      	orrs	r3, r2
 8004296:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042a2:	d105      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042a4:	4b3b      	ldr	r3, [pc, #236]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	4a3a      	ldr	r2, [pc, #232]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d015      	beq.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80042bc:	4b35      	ldr	r3, [pc, #212]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042c2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ca:	4932      	ldr	r1, [pc, #200]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80042da:	d105      	bne.n	80042e8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042dc:	4b2d      	ldr	r3, [pc, #180]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a2c      	ldr	r2, [pc, #176]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042e6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d015      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80042f4:	4b27      	ldr	r3, [pc, #156]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004302:	4924      	ldr	r1, [pc, #144]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004304:	4313      	orrs	r3, r2
 8004306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800430e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004312:	d105      	bne.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004314:	4b1f      	ldr	r3, [pc, #124]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800431e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004328:	2b00      	cmp	r3, #0
 800432a:	d015      	beq.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800432c:	4b19      	ldr	r3, [pc, #100]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800433a:	4916      	ldr	r1, [pc, #88]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800434a:	d105      	bne.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800434c:	4b11      	ldr	r3, [pc, #68]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	68db      	ldr	r3, [r3, #12]
 8004350:	4a10      	ldr	r2, [pc, #64]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004352:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004356:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004360:	2b00      	cmp	r3, #0
 8004362:	d019      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004364:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800436a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004372:	4908      	ldr	r1, [pc, #32]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004374:	4313      	orrs	r3, r2
 8004376:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800437e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004382:	d109      	bne.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004384:	4b03      	ldr	r3, [pc, #12]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4a02      	ldr	r2, [pc, #8]	; (8004394 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800438a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800438e:	60d3      	str	r3, [r2, #12]
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004392:	bf00      	nop
 8004394:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d015      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80043a4:	4b29      	ldr	r3, [pc, #164]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043b2:	4926      	ldr	r1, [pc, #152]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c2:	d105      	bne.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043c4:	4b21      	ldr	r3, [pc, #132]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4a20      	ldr	r2, [pc, #128]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ce:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d015      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80043dc:	4b1b      	ldr	r3, [pc, #108]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043e2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ea:	4918      	ldr	r1, [pc, #96]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043ec:	4313      	orrs	r3, r2
 80043ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043fa:	d105      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80043fc:	4b13      	ldr	r3, [pc, #76]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	4a12      	ldr	r2, [pc, #72]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004406:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d015      	beq.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004416:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800441a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004422:	490a      	ldr	r1, [pc, #40]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004424:	4313      	orrs	r3, r2
 8004426:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800442e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004432:	d105      	bne.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004434:	4b05      	ldr	r3, [pc, #20]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004436:	68db      	ldr	r3, [r3, #12]
 8004438:	4a04      	ldr	r2, [pc, #16]	; (800444c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800443a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800443e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004440:	7cbb      	ldrb	r3, [r7, #18]
}
 8004442:	4618      	mov	r0, r3
 8004444:	3718      	adds	r7, #24
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	40021000 	.word	0x40021000

08004450 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e049      	b.n	80044f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd f876 	bl	8001568 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2202      	movs	r2, #2
 8004480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	3304      	adds	r3, #4
 800448c:	4619      	mov	r1, r3
 800448e:	4610      	mov	r0, r2
 8004490:	f000 fe90 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2201      	movs	r2, #1
 80044c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2201      	movs	r2, #1
 80044d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2201      	movs	r2, #1
 80044f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3708      	adds	r7, #8
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
	...

08004500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800450e:	b2db      	uxtb	r3, r3
 8004510:	2b01      	cmp	r3, #1
 8004512:	d001      	beq.n	8004518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e054      	b.n	80045c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68da      	ldr	r2, [r3, #12]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a26      	ldr	r2, [pc, #152]	; (80045d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d022      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004542:	d01d      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a22      	ldr	r2, [pc, #136]	; (80045d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d018      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a21      	ldr	r2, [pc, #132]	; (80045d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d013      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a1f      	ldr	r2, [pc, #124]	; (80045dc <HAL_TIM_Base_Start_IT+0xdc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d00e      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d009      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1c      	ldr	r2, [pc, #112]	; (80045e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d004      	beq.n	8004580 <HAL_TIM_Base_Start_IT+0x80>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a1b      	ldr	r2, [pc, #108]	; (80045e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d115      	bne.n	80045ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	689a      	ldr	r2, [r3, #8]
 8004586:	4b19      	ldr	r3, [pc, #100]	; (80045ec <HAL_TIM_Base_Start_IT+0xec>)
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2b06      	cmp	r3, #6
 8004590:	d015      	beq.n	80045be <HAL_TIM_Base_Start_IT+0xbe>
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004598:	d011      	beq.n	80045be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f042 0201 	orr.w	r2, r2, #1
 80045a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045aa:	e008      	b.n	80045be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f042 0201 	orr.w	r2, r2, #1
 80045ba:	601a      	str	r2, [r3, #0]
 80045bc:	e000      	b.n	80045c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3714      	adds	r7, #20
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40012c00 	.word	0x40012c00
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40013400 	.word	0x40013400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40015000 	.word	0x40015000
 80045ec:	00010007 	.word	0x00010007

080045f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e049      	b.n	8004696 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d106      	bne.n	800461c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f841 	bl	800469e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681a      	ldr	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	3304      	adds	r3, #4
 800462c:	4619      	mov	r1, r3
 800462e:	4610      	mov	r0, r2
 8004630:	f000 fdc0 	bl	80051b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2201      	movs	r2, #1
 8004640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2201      	movs	r2, #1
 8004648:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2201      	movs	r2, #1
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2201      	movs	r2, #1
 8004658:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2201      	movs	r2, #1
 8004670:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2201      	movs	r2, #1
 8004688:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2201      	movs	r2, #1
 8004690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004694:	2300      	movs	r3, #0
}
 8004696:	4618      	mov	r0, r3
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800469e:	b480      	push	{r7}
 80046a0:	b083      	sub	sp, #12
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a6:	bf00      	nop
 80046a8:	370c      	adds	r7, #12
 80046aa:	46bd      	mov	sp, r7
 80046ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b0:	4770      	bx	lr
	...

080046b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x24>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e03c      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d109      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e02f      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d109      	bne.n	800470c <HAL_TIM_PWM_Start+0x58>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e022      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b0c      	cmp	r3, #12
 8004710:	d109      	bne.n	8004726 <HAL_TIM_PWM_Start+0x72>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b01      	cmp	r3, #1
 800471c:	bf14      	ite	ne
 800471e:	2301      	movne	r3, #1
 8004720:	2300      	moveq	r3, #0
 8004722:	b2db      	uxtb	r3, r3
 8004724:	e015      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b10      	cmp	r3, #16
 800472a:	d109      	bne.n	8004740 <HAL_TIM_PWM_Start+0x8c>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	bf14      	ite	ne
 8004738:	2301      	movne	r3, #1
 800473a:	2300      	moveq	r3, #0
 800473c:	b2db      	uxtb	r3, r3
 800473e:	e008      	b.n	8004752 <HAL_TIM_PWM_Start+0x9e>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004746:	b2db      	uxtb	r3, r3
 8004748:	2b01      	cmp	r3, #1
 800474a:	bf14      	ite	ne
 800474c:	2301      	movne	r3, #1
 800474e:	2300      	moveq	r3, #0
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d001      	beq.n	800475a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0a6      	b.n	80048a8 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d104      	bne.n	800476a <HAL_TIM_PWM_Start+0xb6>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2202      	movs	r2, #2
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004768:	e023      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b04      	cmp	r3, #4
 800476e:	d104      	bne.n	800477a <HAL_TIM_PWM_Start+0xc6>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004778:	e01b      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	2b08      	cmp	r3, #8
 800477e:	d104      	bne.n	800478a <HAL_TIM_PWM_Start+0xd6>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004788:	e013      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	2b0c      	cmp	r3, #12
 800478e:	d104      	bne.n	800479a <HAL_TIM_PWM_Start+0xe6>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2202      	movs	r2, #2
 8004794:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004798:	e00b      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d104      	bne.n	80047aa <HAL_TIM_PWM_Start+0xf6>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80047a8:	e003      	b.n	80047b2 <HAL_TIM_PWM_Start+0xfe>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	2201      	movs	r2, #1
 80047b8:	6839      	ldr	r1, [r7, #0]
 80047ba:	4618      	mov	r0, r3
 80047bc:	f001 f9dc 	bl	8005b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a3a      	ldr	r2, [pc, #232]	; (80048b0 <HAL_TIM_PWM_Start+0x1fc>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d018      	beq.n	80047fc <HAL_TIM_PWM_Start+0x148>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a39      	ldr	r2, [pc, #228]	; (80048b4 <HAL_TIM_PWM_Start+0x200>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d013      	beq.n	80047fc <HAL_TIM_PWM_Start+0x148>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	4a37      	ldr	r2, [pc, #220]	; (80048b8 <HAL_TIM_PWM_Start+0x204>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <HAL_TIM_PWM_Start+0x148>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a36      	ldr	r2, [pc, #216]	; (80048bc <HAL_TIM_PWM_Start+0x208>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d009      	beq.n	80047fc <HAL_TIM_PWM_Start+0x148>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a34      	ldr	r2, [pc, #208]	; (80048c0 <HAL_TIM_PWM_Start+0x20c>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d004      	beq.n	80047fc <HAL_TIM_PWM_Start+0x148>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a33      	ldr	r2, [pc, #204]	; (80048c4 <HAL_TIM_PWM_Start+0x210>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d101      	bne.n	8004800 <HAL_TIM_PWM_Start+0x14c>
 80047fc:	2301      	movs	r3, #1
 80047fe:	e000      	b.n	8004802 <HAL_TIM_PWM_Start+0x14e>
 8004800:	2300      	movs	r3, #0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d007      	beq.n	8004816 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004814:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a25      	ldr	r2, [pc, #148]	; (80048b0 <HAL_TIM_PWM_Start+0x1fc>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d022      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004828:	d01d      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	4a26      	ldr	r2, [pc, #152]	; (80048c8 <HAL_TIM_PWM_Start+0x214>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d018      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a24      	ldr	r2, [pc, #144]	; (80048cc <HAL_TIM_PWM_Start+0x218>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a23      	ldr	r2, [pc, #140]	; (80048d0 <HAL_TIM_PWM_Start+0x21c>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d00e      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a19      	ldr	r2, [pc, #100]	; (80048b4 <HAL_TIM_PWM_Start+0x200>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d009      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a18      	ldr	r2, [pc, #96]	; (80048b8 <HAL_TIM_PWM_Start+0x204>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d004      	beq.n	8004866 <HAL_TIM_PWM_Start+0x1b2>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a18      	ldr	r2, [pc, #96]	; (80048c4 <HAL_TIM_PWM_Start+0x210>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d115      	bne.n	8004892 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b19      	ldr	r3, [pc, #100]	; (80048d4 <HAL_TIM_PWM_Start+0x220>)
 800486e:	4013      	ands	r3, r2
 8004870:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2b06      	cmp	r3, #6
 8004876:	d015      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x1f0>
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800487e:	d011      	beq.n	80048a4 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f042 0201 	orr.w	r2, r2, #1
 800488e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004890:	e008      	b.n	80048a4 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f042 0201 	orr.w	r2, r2, #1
 80048a0:	601a      	str	r2, [r3, #0]
 80048a2:	e000      	b.n	80048a6 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bd80      	pop	{r7, pc}
 80048b0:	40012c00 	.word	0x40012c00
 80048b4:	40013400 	.word	0x40013400
 80048b8:	40014000 	.word	0x40014000
 80048bc:	40014400 	.word	0x40014400
 80048c0:	40014800 	.word	0x40014800
 80048c4:	40015000 	.word	0x40015000
 80048c8:	40000400 	.word	0x40000400
 80048cc:	40000800 	.word	0x40000800
 80048d0:	40000c00 	.word	0x40000c00
 80048d4:	00010007 	.word	0x00010007

080048d8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b082      	sub	sp, #8
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
 80048e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	6839      	ldr	r1, [r7, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f001 f944 	bl	8005b78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a40      	ldr	r2, [pc, #256]	; (80049f8 <HAL_TIM_PWM_Stop+0x120>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d018      	beq.n	800492c <HAL_TIM_PWM_Stop+0x54>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a3f      	ldr	r2, [pc, #252]	; (80049fc <HAL_TIM_PWM_Stop+0x124>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d013      	beq.n	800492c <HAL_TIM_PWM_Stop+0x54>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3d      	ldr	r2, [pc, #244]	; (8004a00 <HAL_TIM_PWM_Stop+0x128>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d00e      	beq.n	800492c <HAL_TIM_PWM_Stop+0x54>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3c      	ldr	r2, [pc, #240]	; (8004a04 <HAL_TIM_PWM_Stop+0x12c>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d009      	beq.n	800492c <HAL_TIM_PWM_Stop+0x54>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3a      	ldr	r2, [pc, #232]	; (8004a08 <HAL_TIM_PWM_Stop+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_PWM_Stop+0x54>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a39      	ldr	r2, [pc, #228]	; (8004a0c <HAL_TIM_PWM_Stop+0x134>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d101      	bne.n	8004930 <HAL_TIM_PWM_Stop+0x58>
 800492c:	2301      	movs	r3, #1
 800492e:	e000      	b.n	8004932 <HAL_TIM_PWM_Stop+0x5a>
 8004930:	2300      	movs	r3, #0
 8004932:	2b00      	cmp	r3, #0
 8004934:	d017      	beq.n	8004966 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a1a      	ldr	r2, [r3, #32]
 800493c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004940:	4013      	ands	r3, r2
 8004942:	2b00      	cmp	r3, #0
 8004944:	d10f      	bne.n	8004966 <HAL_TIM_PWM_Stop+0x8e>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a1a      	ldr	r2, [r3, #32]
 800494c:	f244 4344 	movw	r3, #17476	; 0x4444
 8004950:	4013      	ands	r3, r2
 8004952:	2b00      	cmp	r3, #0
 8004954:	d107      	bne.n	8004966 <HAL_TIM_PWM_Stop+0x8e>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d10f      	bne.n	8004996 <HAL_TIM_PWM_Stop+0xbe>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	6a1a      	ldr	r2, [r3, #32]
 800497c:	f244 4344 	movw	r3, #17476	; 0x4444
 8004980:	4013      	ands	r3, r2
 8004982:	2b00      	cmp	r3, #0
 8004984:	d107      	bne.n	8004996 <HAL_TIM_PWM_Stop+0xbe>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b00      	cmp	r3, #0
 800499a:	d104      	bne.n	80049a6 <HAL_TIM_PWM_Stop+0xce>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2201      	movs	r2, #1
 80049a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a4:	e023      	b.n	80049ee <HAL_TIM_PWM_Stop+0x116>
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d104      	bne.n	80049b6 <HAL_TIM_PWM_Stop+0xde>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2201      	movs	r2, #1
 80049b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b4:	e01b      	b.n	80049ee <HAL_TIM_PWM_Stop+0x116>
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	2b08      	cmp	r3, #8
 80049ba:	d104      	bne.n	80049c6 <HAL_TIM_PWM_Stop+0xee>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c4:	e013      	b.n	80049ee <HAL_TIM_PWM_Stop+0x116>
 80049c6:	683b      	ldr	r3, [r7, #0]
 80049c8:	2b0c      	cmp	r3, #12
 80049ca:	d104      	bne.n	80049d6 <HAL_TIM_PWM_Stop+0xfe>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d4:	e00b      	b.n	80049ee <HAL_TIM_PWM_Stop+0x116>
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	2b10      	cmp	r3, #16
 80049da:	d104      	bne.n	80049e6 <HAL_TIM_PWM_Stop+0x10e>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	e003      	b.n	80049ee <HAL_TIM_PWM_Stop+0x116>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2201      	movs	r2, #1
 80049ea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3708      	adds	r7, #8
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	40013400 	.word	0x40013400
 8004a00:	40014000 	.word	0x40014000
 8004a04:	40014400 	.word	0x40014400
 8004a08:	40014800 	.word	0x40014800
 8004a0c:	40015000 	.word	0x40015000

08004a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b082      	sub	sp, #8
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b02      	cmp	r3, #2
 8004a24:	d122      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	f003 0302 	and.w	r3, r3, #2
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d11b      	bne.n	8004a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f06f 0202 	mvn.w	r2, #2
 8004a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	699b      	ldr	r3, [r3, #24]
 8004a4a:	f003 0303 	and.w	r3, r3, #3
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 fb90 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004a58:	e005      	b.n	8004a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 fb82 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f000 fb93 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	691b      	ldr	r3, [r3, #16]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d122      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	f003 0304 	and.w	r3, r3, #4
 8004a84:	2b04      	cmp	r3, #4
 8004a86:	d11b      	bne.n	8004ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f06f 0204 	mvn.w	r2, #4
 8004a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2202      	movs	r2, #2
 8004a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f000 fb66 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004aac:	e005      	b.n	8004aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 fb58 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 fb69 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	691b      	ldr	r3, [r3, #16]
 8004ac6:	f003 0308 	and.w	r3, r3, #8
 8004aca:	2b08      	cmp	r3, #8
 8004acc:	d122      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	f003 0308 	and.w	r3, r3, #8
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d11b      	bne.n	8004b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f06f 0208 	mvn.w	r2, #8
 8004ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2204      	movs	r2, #4
 8004aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	69db      	ldr	r3, [r3, #28]
 8004af2:	f003 0303 	and.w	r3, r3, #3
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f000 fb3c 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004b00:	e005      	b.n	8004b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 fb2e 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b08:	6878      	ldr	r0, [r7, #4]
 8004b0a:	f000 fb3f 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	f003 0310 	and.w	r3, r3, #16
 8004b1e:	2b10      	cmp	r3, #16
 8004b20:	d122      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f003 0310 	and.w	r3, r3, #16
 8004b2c:	2b10      	cmp	r3, #16
 8004b2e:	d11b      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f06f 0210 	mvn.w	r2, #16
 8004b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2208      	movs	r2, #8
 8004b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	69db      	ldr	r3, [r3, #28]
 8004b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb12 	bl	8005178 <HAL_TIM_IC_CaptureCallback>
 8004b54:	e005      	b.n	8004b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b56:	6878      	ldr	r0, [r7, #4]
 8004b58:	f000 fb04 	bl	8005164 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b5c:	6878      	ldr	r0, [r7, #4]
 8004b5e:	f000 fb15 	bl	800518c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	f003 0301 	and.w	r3, r3, #1
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d10e      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	68db      	ldr	r3, [r3, #12]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d107      	bne.n	8004b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f06f 0201 	mvn.w	r2, #1
 8004b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fb fffe 	bl	8000b90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b9e:	2b80      	cmp	r3, #128	; 0x80
 8004ba0:	d10e      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68db      	ldr	r3, [r3, #12]
 8004ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bac:	2b80      	cmp	r3, #128	; 0x80
 8004bae:	d107      	bne.n	8004bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f001 fb22 	bl	8006204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	691b      	ldr	r3, [r3, #16]
 8004bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bce:	d10e      	bne.n	8004bee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bda:	2b80      	cmp	r3, #128	; 0x80
 8004bdc:	d107      	bne.n	8004bee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f001 fb15 	bl	8006218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d10e      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c06:	2b40      	cmp	r3, #64	; 0x40
 8004c08:	d107      	bne.n	8004c1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f000 fac3 	bl	80051a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	691b      	ldr	r3, [r3, #16]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d10e      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	68db      	ldr	r3, [r3, #12]
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f06f 0220 	mvn.w	r2, #32
 8004c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f001 fad5 	bl	80061f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	691b      	ldr	r3, [r3, #16]
 8004c4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c54:	d10f      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c64:	d107      	bne.n	8004c76 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004c6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004c70:	6878      	ldr	r0, [r7, #4]
 8004c72:	f001 fadb 	bl	800622c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c84:	d10f      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004c94:	d107      	bne.n	8004ca6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004c9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004ca0:	6878      	ldr	r0, [r7, #4]
 8004ca2:	f001 facd 	bl	8006240 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cb4:	d10f      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cc4:	d107      	bne.n	8004cd6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004cce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004cd0:	6878      	ldr	r0, [r7, #4]
 8004cd2:	f001 fabf 	bl	8006254 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ce0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004ce4:	d10f      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cf0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004cf4:	d107      	bne.n	8004d06 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f001 fab1 	bl	8006268 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004d06:	bf00      	nop
 8004d08:	3708      	adds	r7, #8
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
	...

08004d10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d101      	bne.n	8004d2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e0ff      	b.n	8004f2e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2b14      	cmp	r3, #20
 8004d3a:	f200 80f0 	bhi.w	8004f1e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d3e:	a201      	add	r2, pc, #4	; (adr r2, 8004d44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d44:	08004d99 	.word	0x08004d99
 8004d48:	08004f1f 	.word	0x08004f1f
 8004d4c:	08004f1f 	.word	0x08004f1f
 8004d50:	08004f1f 	.word	0x08004f1f
 8004d54:	08004dd9 	.word	0x08004dd9
 8004d58:	08004f1f 	.word	0x08004f1f
 8004d5c:	08004f1f 	.word	0x08004f1f
 8004d60:	08004f1f 	.word	0x08004f1f
 8004d64:	08004e1b 	.word	0x08004e1b
 8004d68:	08004f1f 	.word	0x08004f1f
 8004d6c:	08004f1f 	.word	0x08004f1f
 8004d70:	08004f1f 	.word	0x08004f1f
 8004d74:	08004e5b 	.word	0x08004e5b
 8004d78:	08004f1f 	.word	0x08004f1f
 8004d7c:	08004f1f 	.word	0x08004f1f
 8004d80:	08004f1f 	.word	0x08004f1f
 8004d84:	08004e9d 	.word	0x08004e9d
 8004d88:	08004f1f 	.word	0x08004f1f
 8004d8c:	08004f1f 	.word	0x08004f1f
 8004d90:	08004f1f 	.word	0x08004f1f
 8004d94:	08004edd 	.word	0x08004edd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	68b9      	ldr	r1, [r7, #8]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f000 fab0 	bl	8005304 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	699a      	ldr	r2, [r3, #24]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f042 0208 	orr.w	r2, r2, #8
 8004db2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	699a      	ldr	r2, [r3, #24]
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f022 0204 	bic.w	r2, r2, #4
 8004dc2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	6999      	ldr	r1, [r3, #24]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	619a      	str	r2, [r3, #24]
      break;
 8004dd6:	e0a5      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	68b9      	ldr	r1, [r7, #8]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f000 fb2a 	bl	8005438 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	699a      	ldr	r2, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004df2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	699a      	ldr	r2, [r3, #24]
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e02:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6999      	ldr	r1, [r3, #24]
 8004e0a:	68bb      	ldr	r3, [r7, #8]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	021a      	lsls	r2, r3, #8
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	619a      	str	r2, [r3, #24]
      break;
 8004e18:	e084      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68b9      	ldr	r1, [r7, #8]
 8004e20:	4618      	mov	r0, r3
 8004e22:	f000 fb9d 	bl	8005560 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	69da      	ldr	r2, [r3, #28]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f042 0208 	orr.w	r2, r2, #8
 8004e34:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f022 0204 	bic.w	r2, r2, #4
 8004e44:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	69d9      	ldr	r1, [r3, #28]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	430a      	orrs	r2, r1
 8004e56:	61da      	str	r2, [r3, #28]
      break;
 8004e58:	e064      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	68b9      	ldr	r1, [r7, #8]
 8004e60:	4618      	mov	r0, r3
 8004e62:	f000 fc0f 	bl	8005684 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	69da      	ldr	r2, [r3, #28]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e74:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	69da      	ldr	r2, [r3, #28]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e84:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	69d9      	ldr	r1, [r3, #28]
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	691b      	ldr	r3, [r3, #16]
 8004e90:	021a      	lsls	r2, r3, #8
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	61da      	str	r2, [r3, #28]
      break;
 8004e9a:	e043      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	68b9      	ldr	r1, [r7, #8]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f000 fc82 	bl	80057ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f042 0208 	orr.w	r2, r2, #8
 8004eb6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0204 	bic.w	r2, r2, #4
 8004ec6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	691a      	ldr	r2, [r3, #16]
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004eda:	e023      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	68b9      	ldr	r1, [r7, #8]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f000 fccc 	bl	8005880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	021a      	lsls	r2, r3, #8
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	430a      	orrs	r2, r1
 8004f1a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004f1c:	e002      	b.n	8004f24 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	75fb      	strb	r3, [r7, #23]
      break;
 8004f22:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2200      	movs	r2, #0
 8004f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f2e:	4618      	mov	r0, r3
 8004f30:	3718      	adds	r7, #24
 8004f32:	46bd      	mov	sp, r7
 8004f34:	bd80      	pop	{r7, pc}
 8004f36:	bf00      	nop

08004f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f38:	b580      	push	{r7, lr}
 8004f3a:	b084      	sub	sp, #16
 8004f3c:	af00      	add	r7, sp, #0
 8004f3e:	6078      	str	r0, [r7, #4]
 8004f40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f42:	2300      	movs	r3, #0
 8004f44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f4c:	2b01      	cmp	r3, #1
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_ConfigClockSource+0x1c>
 8004f50:	2302      	movs	r3, #2
 8004f52:	e0f6      	b.n	8005142 <HAL_TIM_ConfigClockSource+0x20a>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2202      	movs	r2, #2
 8004f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004f72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a6f      	ldr	r2, [pc, #444]	; (800514c <HAL_TIM_ConfigClockSource+0x214>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	f000 80c1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004f94:	4a6d      	ldr	r2, [pc, #436]	; (800514c <HAL_TIM_ConfigClockSource+0x214>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	f200 80c6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004f9c:	4a6c      	ldr	r2, [pc, #432]	; (8005150 <HAL_TIM_ConfigClockSource+0x218>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	f000 80b9 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fa4:	4a6a      	ldr	r2, [pc, #424]	; (8005150 <HAL_TIM_ConfigClockSource+0x218>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	f200 80be 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fac:	4a69      	ldr	r2, [pc, #420]	; (8005154 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	f000 80b1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fb4:	4a67      	ldr	r2, [pc, #412]	; (8005154 <HAL_TIM_ConfigClockSource+0x21c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	f200 80b6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fbc:	4a66      	ldr	r2, [pc, #408]	; (8005158 <HAL_TIM_ConfigClockSource+0x220>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	f000 80a9 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fc4:	4a64      	ldr	r2, [pc, #400]	; (8005158 <HAL_TIM_ConfigClockSource+0x220>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f200 80ae 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fcc:	4a63      	ldr	r2, [pc, #396]	; (800515c <HAL_TIM_ConfigClockSource+0x224>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	f000 80a1 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fd4:	4a61      	ldr	r2, [pc, #388]	; (800515c <HAL_TIM_ConfigClockSource+0x224>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	f200 80a6 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fdc:	4a60      	ldr	r2, [pc, #384]	; (8005160 <HAL_TIM_ConfigClockSource+0x228>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	f000 8099 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004fe4:	4a5e      	ldr	r2, [pc, #376]	; (8005160 <HAL_TIM_ConfigClockSource+0x228>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	f200 809e 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004fec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ff0:	f000 8091 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8004ff4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004ff8:	f200 8096 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8004ffc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005000:	f000 8089 	beq.w	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005004:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005008:	f200 808e 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 800500c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005010:	d03e      	beq.n	8005090 <HAL_TIM_ConfigClockSource+0x158>
 8005012:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005016:	f200 8087 	bhi.w	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 800501a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501e:	f000 8086 	beq.w	800512e <HAL_TIM_ConfigClockSource+0x1f6>
 8005022:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005026:	d87f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005028:	2b70      	cmp	r3, #112	; 0x70
 800502a:	d01a      	beq.n	8005062 <HAL_TIM_ConfigClockSource+0x12a>
 800502c:	2b70      	cmp	r3, #112	; 0x70
 800502e:	d87b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005030:	2b60      	cmp	r3, #96	; 0x60
 8005032:	d050      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x19e>
 8005034:	2b60      	cmp	r3, #96	; 0x60
 8005036:	d877      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005038:	2b50      	cmp	r3, #80	; 0x50
 800503a:	d03c      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x17e>
 800503c:	2b50      	cmp	r3, #80	; 0x50
 800503e:	d873      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005040:	2b40      	cmp	r3, #64	; 0x40
 8005042:	d058      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x1be>
 8005044:	2b40      	cmp	r3, #64	; 0x40
 8005046:	d86f      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005048:	2b30      	cmp	r3, #48	; 0x30
 800504a:	d064      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 800504c:	2b30      	cmp	r3, #48	; 0x30
 800504e:	d86b      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005050:	2b20      	cmp	r3, #32
 8005052:	d060      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005054:	2b20      	cmp	r3, #32
 8005056:	d867      	bhi.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
 8005058:	2b00      	cmp	r3, #0
 800505a:	d05c      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 800505c:	2b10      	cmp	r3, #16
 800505e:	d05a      	beq.n	8005116 <HAL_TIM_ConfigClockSource+0x1de>
 8005060:	e062      	b.n	8005128 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6818      	ldr	r0, [r3, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	6899      	ldr	r1, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f000 fd61 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800507e:	68bb      	ldr	r3, [r7, #8]
 8005080:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005084:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	609a      	str	r2, [r3, #8]
      break;
 800508e:	e04f      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6818      	ldr	r0, [r3, #0]
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	6899      	ldr	r1, [r3, #8]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	68db      	ldr	r3, [r3, #12]
 80050a0:	f000 fd4a 	bl	8005b38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689a      	ldr	r2, [r3, #8]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050b2:	609a      	str	r2, [r3, #8]
      break;
 80050b4:	e03c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 fcbc 	bl	8005a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2150      	movs	r1, #80	; 0x50
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 fd15 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80050d4:	e02c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 fcdb 	bl	8005a9e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2160      	movs	r1, #96	; 0x60
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 fd05 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 80050f4:	e01c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6818      	ldr	r0, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	6859      	ldr	r1, [r3, #4]
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	461a      	mov	r2, r3
 8005104:	f000 fc9c 	bl	8005a40 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	4618      	mov	r0, r3
 8005110:	f000 fcf5 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 8005114:	e00c      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 fcec 	bl	8005afe <TIM_ITRx_SetConfig>
      break;
 8005126:	e003      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	73fb      	strb	r3, [r7, #15]
      break;
 800512c:	e000      	b.n	8005130 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800512e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005140:	7bfb      	ldrb	r3, [r7, #15]
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	00100070 	.word	0x00100070
 8005150:	00100060 	.word	0x00100060
 8005154:	00100050 	.word	0x00100050
 8005158:	00100040 	.word	0x00100040
 800515c:	00100030 	.word	0x00100030
 8005160:	00100020 	.word	0x00100020

08005164 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800516c:	bf00      	nop
 800516e:	370c      	adds	r7, #12
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
 80051bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a46      	ldr	r2, [pc, #280]	; (80052e0 <TIM_Base_SetConfig+0x12c>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d017      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051d2:	d013      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a43      	ldr	r2, [pc, #268]	; (80052e4 <TIM_Base_SetConfig+0x130>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d00f      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	4a42      	ldr	r2, [pc, #264]	; (80052e8 <TIM_Base_SetConfig+0x134>)
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d00b      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	4a41      	ldr	r2, [pc, #260]	; (80052ec <TIM_Base_SetConfig+0x138>)
 80051e8:	4293      	cmp	r3, r2
 80051ea:	d007      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	4a40      	ldr	r2, [pc, #256]	; (80052f0 <TIM_Base_SetConfig+0x13c>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d003      	beq.n	80051fc <TIM_Base_SetConfig+0x48>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	4a3f      	ldr	r2, [pc, #252]	; (80052f4 <TIM_Base_SetConfig+0x140>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d108      	bne.n	800520e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005202:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	68fa      	ldr	r2, [r7, #12]
 800520a:	4313      	orrs	r3, r2
 800520c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	4a33      	ldr	r2, [pc, #204]	; (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d023      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800521c:	d01f      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a30      	ldr	r2, [pc, #192]	; (80052e4 <TIM_Base_SetConfig+0x130>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01b      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	4a2f      	ldr	r2, [pc, #188]	; (80052e8 <TIM_Base_SetConfig+0x134>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d017      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	4a2e      	ldr	r2, [pc, #184]	; (80052ec <TIM_Base_SetConfig+0x138>)
 8005232:	4293      	cmp	r3, r2
 8005234:	d013      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <TIM_Base_SetConfig+0x13c>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d00f      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	4a2d      	ldr	r2, [pc, #180]	; (80052f8 <TIM_Base_SetConfig+0x144>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d00b      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	4a2c      	ldr	r2, [pc, #176]	; (80052fc <TIM_Base_SetConfig+0x148>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d007      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	4a2b      	ldr	r2, [pc, #172]	; (8005300 <TIM_Base_SetConfig+0x14c>)
 8005252:	4293      	cmp	r3, r2
 8005254:	d003      	beq.n	800525e <TIM_Base_SetConfig+0xaa>
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	4a26      	ldr	r2, [pc, #152]	; (80052f4 <TIM_Base_SetConfig+0x140>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d108      	bne.n	8005270 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	68fa      	ldr	r2, [r7, #12]
 800526c:	4313      	orrs	r3, r2
 800526e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	68fa      	ldr	r2, [r7, #12]
 8005282:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a12      	ldr	r2, [pc, #72]	; (80052e0 <TIM_Base_SetConfig+0x12c>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d013      	beq.n	80052c4 <TIM_Base_SetConfig+0x110>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <TIM_Base_SetConfig+0x13c>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d00f      	beq.n	80052c4 <TIM_Base_SetConfig+0x110>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a14      	ldr	r2, [pc, #80]	; (80052f8 <TIM_Base_SetConfig+0x144>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d00b      	beq.n	80052c4 <TIM_Base_SetConfig+0x110>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	4a13      	ldr	r2, [pc, #76]	; (80052fc <TIM_Base_SetConfig+0x148>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d007      	beq.n	80052c4 <TIM_Base_SetConfig+0x110>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a12      	ldr	r2, [pc, #72]	; (8005300 <TIM_Base_SetConfig+0x14c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d003      	beq.n	80052c4 <TIM_Base_SetConfig+0x110>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <TIM_Base_SetConfig+0x140>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d103      	bne.n	80052cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	691a      	ldr	r2, [r3, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2201      	movs	r2, #1
 80052d0:	615a      	str	r2, [r3, #20]
}
 80052d2:	bf00      	nop
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	40012c00 	.word	0x40012c00
 80052e4:	40000400 	.word	0x40000400
 80052e8:	40000800 	.word	0x40000800
 80052ec:	40000c00 	.word	0x40000c00
 80052f0:	40013400 	.word	0x40013400
 80052f4:	40015000 	.word	0x40015000
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40014400 	.word	0x40014400
 8005300:	40014800 	.word	0x40014800

08005304 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6a1b      	ldr	r3, [r3, #32]
 8005312:	f023 0201 	bic.w	r2, r3, #1
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a1b      	ldr	r3, [r3, #32]
 800531e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f023 0303 	bic.w	r3, r3, #3
 800533e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	68fa      	ldr	r2, [r7, #12]
 8005346:	4313      	orrs	r3, r2
 8005348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f023 0302 	bic.w	r3, r3, #2
 8005350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	697a      	ldr	r2, [r7, #20]
 8005358:	4313      	orrs	r3, r2
 800535a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a30      	ldr	r2, [pc, #192]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d013      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	4a2f      	ldr	r2, [pc, #188]	; (8005424 <TIM_OC1_SetConfig+0x120>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d00f      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a2e      	ldr	r2, [pc, #184]	; (8005428 <TIM_OC1_SetConfig+0x124>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d00b      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	4a2d      	ldr	r2, [pc, #180]	; (800542c <TIM_OC1_SetConfig+0x128>)
 8005378:	4293      	cmp	r3, r2
 800537a:	d007      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a2c      	ldr	r2, [pc, #176]	; (8005430 <TIM_OC1_SetConfig+0x12c>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d003      	beq.n	800538c <TIM_OC1_SetConfig+0x88>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a2b      	ldr	r2, [pc, #172]	; (8005434 <TIM_OC1_SetConfig+0x130>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d10c      	bne.n	80053a6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	f023 0308 	bic.w	r3, r3, #8
 8005392:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	4313      	orrs	r3, r2
 800539c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800539e:	697b      	ldr	r3, [r7, #20]
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <TIM_OC1_SetConfig+0x11c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d013      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a1c      	ldr	r2, [pc, #112]	; (8005424 <TIM_OC1_SetConfig+0x120>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d00f      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a1b      	ldr	r2, [pc, #108]	; (8005428 <TIM_OC1_SetConfig+0x124>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d00b      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a1a      	ldr	r2, [pc, #104]	; (800542c <TIM_OC1_SetConfig+0x128>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d007      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a19      	ldr	r2, [pc, #100]	; (8005430 <TIM_OC1_SetConfig+0x12c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d003      	beq.n	80053d6 <TIM_OC1_SetConfig+0xd2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a18      	ldr	r2, [pc, #96]	; (8005434 <TIM_OC1_SetConfig+0x130>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d111      	bne.n	80053fa <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	695b      	ldr	r3, [r3, #20]
 80053ea:	693a      	ldr	r2, [r7, #16]
 80053ec:	4313      	orrs	r3, r2
 80053ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	697a      	ldr	r2, [r7, #20]
 8005412:	621a      	str	r2, [r3, #32]
}
 8005414:	bf00      	nop
 8005416:	371c      	adds	r7, #28
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr
 8005420:	40012c00 	.word	0x40012c00
 8005424:	40013400 	.word	0x40013400
 8005428:	40014000 	.word	0x40014000
 800542c:	40014400 	.word	0x40014400
 8005430:	40014800 	.word	0x40014800
 8005434:	40015000 	.word	0x40015000

08005438 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005438:	b480      	push	{r7}
 800543a:	b087      	sub	sp, #28
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6a1b      	ldr	r3, [r3, #32]
 8005446:	f023 0210 	bic.w	r2, r3, #16
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005466:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800546a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005472:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	021b      	lsls	r3, r3, #8
 800547a:	68fa      	ldr	r2, [r7, #12]
 800547c:	4313      	orrs	r3, r2
 800547e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	f023 0320 	bic.w	r3, r3, #32
 8005486:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005488:	683b      	ldr	r3, [r7, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	011b      	lsls	r3, r3, #4
 800548e:	697a      	ldr	r2, [r7, #20]
 8005490:	4313      	orrs	r3, r2
 8005492:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2c      	ldr	r2, [pc, #176]	; (8005548 <TIM_OC2_SetConfig+0x110>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_OC2_SetConfig+0x74>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a2b      	ldr	r2, [pc, #172]	; (800554c <TIM_OC2_SetConfig+0x114>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_OC2_SetConfig+0x74>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a2a      	ldr	r2, [pc, #168]	; (8005550 <TIM_OC2_SetConfig+0x118>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d10d      	bne.n	80054c8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	011b      	lsls	r3, r3, #4
 80054ba:	697a      	ldr	r2, [r7, #20]
 80054bc:	4313      	orrs	r3, r2
 80054be:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4a1f      	ldr	r2, [pc, #124]	; (8005548 <TIM_OC2_SetConfig+0x110>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d013      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a1e      	ldr	r2, [pc, #120]	; (800554c <TIM_OC2_SetConfig+0x114>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d00f      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a1e      	ldr	r2, [pc, #120]	; (8005554 <TIM_OC2_SetConfig+0x11c>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d00b      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	4a1d      	ldr	r2, [pc, #116]	; (8005558 <TIM_OC2_SetConfig+0x120>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d007      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	4a1c      	ldr	r2, [pc, #112]	; (800555c <TIM_OC2_SetConfig+0x124>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d003      	beq.n	80054f8 <TIM_OC2_SetConfig+0xc0>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4a17      	ldr	r2, [pc, #92]	; (8005550 <TIM_OC2_SetConfig+0x118>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d113      	bne.n	8005520 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005506:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	695b      	ldr	r3, [r3, #20]
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	693a      	ldr	r2, [r7, #16]
 8005510:	4313      	orrs	r3, r2
 8005512:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	009b      	lsls	r3, r3, #2
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	4313      	orrs	r3, r2
 800551e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	68fa      	ldr	r2, [r7, #12]
 800552a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	697a      	ldr	r2, [r7, #20]
 8005538:	621a      	str	r2, [r3, #32]
}
 800553a:	bf00      	nop
 800553c:	371c      	adds	r7, #28
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40013400 	.word	0x40013400
 8005550:	40015000 	.word	0x40015000
 8005554:	40014000 	.word	0x40014000
 8005558:	40014400 	.word	0x40014400
 800555c:	40014800 	.word	0x40014800

08005560 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005560:	b480      	push	{r7}
 8005562:	b087      	sub	sp, #28
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	6a1b      	ldr	r3, [r3, #32]
 800556e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800558e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f023 0303 	bic.w	r3, r3, #3
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80055ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a2b      	ldr	r2, [pc, #172]	; (800566c <TIM_OC3_SetConfig+0x10c>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d007      	beq.n	80055d2 <TIM_OC3_SetConfig+0x72>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a2a      	ldr	r2, [pc, #168]	; (8005670 <TIM_OC3_SetConfig+0x110>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d003      	beq.n	80055d2 <TIM_OC3_SetConfig+0x72>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a29      	ldr	r2, [pc, #164]	; (8005674 <TIM_OC3_SetConfig+0x114>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d10d      	bne.n	80055ee <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	021b      	lsls	r3, r3, #8
 80055e0:	697a      	ldr	r2, [r7, #20]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	4a1e      	ldr	r2, [pc, #120]	; (800566c <TIM_OC3_SetConfig+0x10c>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d013      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	4a1d      	ldr	r2, [pc, #116]	; (8005670 <TIM_OC3_SetConfig+0x110>)
 80055fa:	4293      	cmp	r3, r2
 80055fc:	d00f      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <TIM_OC3_SetConfig+0x118>)
 8005602:	4293      	cmp	r3, r2
 8005604:	d00b      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a1c      	ldr	r2, [pc, #112]	; (800567c <TIM_OC3_SetConfig+0x11c>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d007      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a1b      	ldr	r2, [pc, #108]	; (8005680 <TIM_OC3_SetConfig+0x120>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d003      	beq.n	800561e <TIM_OC3_SetConfig+0xbe>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a16      	ldr	r2, [pc, #88]	; (8005674 <TIM_OC3_SetConfig+0x114>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d113      	bne.n	8005646 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005624:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800562c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	695b      	ldr	r3, [r3, #20]
 8005632:	011b      	lsls	r3, r3, #4
 8005634:	693a      	ldr	r2, [r7, #16]
 8005636:	4313      	orrs	r3, r2
 8005638:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	699b      	ldr	r3, [r3, #24]
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	693a      	ldr	r2, [r7, #16]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	693a      	ldr	r2, [r7, #16]
 800564a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	68fa      	ldr	r2, [r7, #12]
 8005650:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	697a      	ldr	r2, [r7, #20]
 800565e:	621a      	str	r2, [r3, #32]
}
 8005660:	bf00      	nop
 8005662:	371c      	adds	r7, #28
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr
 800566c:	40012c00 	.word	0x40012c00
 8005670:	40013400 	.word	0x40013400
 8005674:	40015000 	.word	0x40015000
 8005678:	40014000 	.word	0x40014000
 800567c:	40014400 	.word	0x40014400
 8005680:	40014800 	.word	0x40014800

08005684 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005684:	b480      	push	{r7}
 8005686:	b087      	sub	sp, #28
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a1b      	ldr	r3, [r3, #32]
 8005692:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a1b      	ldr	r3, [r3, #32]
 800569e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	69db      	ldr	r3, [r3, #28]
 80056aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80056b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	021b      	lsls	r3, r3, #8
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	4313      	orrs	r3, r2
 80056ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80056d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	031b      	lsls	r3, r3, #12
 80056da:	697a      	ldr	r2, [r7, #20]
 80056dc:	4313      	orrs	r3, r2
 80056de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	4a2c      	ldr	r2, [pc, #176]	; (8005794 <TIM_OC4_SetConfig+0x110>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d007      	beq.n	80056f8 <TIM_OC4_SetConfig+0x74>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	4a2b      	ldr	r2, [pc, #172]	; (8005798 <TIM_OC4_SetConfig+0x114>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d003      	beq.n	80056f8 <TIM_OC4_SetConfig+0x74>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	4a2a      	ldr	r2, [pc, #168]	; (800579c <TIM_OC4_SetConfig+0x118>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d10d      	bne.n	8005714 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80056fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	031b      	lsls	r3, r3, #12
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	4313      	orrs	r3, r2
 800570a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005712:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a1f      	ldr	r2, [pc, #124]	; (8005794 <TIM_OC4_SetConfig+0x110>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d013      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a1e      	ldr	r2, [pc, #120]	; (8005798 <TIM_OC4_SetConfig+0x114>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d00f      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a1e      	ldr	r2, [pc, #120]	; (80057a0 <TIM_OC4_SetConfig+0x11c>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d00b      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a1d      	ldr	r2, [pc, #116]	; (80057a4 <TIM_OC4_SetConfig+0x120>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d007      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a1c      	ldr	r2, [pc, #112]	; (80057a8 <TIM_OC4_SetConfig+0x124>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d003      	beq.n	8005744 <TIM_OC4_SetConfig+0xc0>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	4a17      	ldr	r2, [pc, #92]	; (800579c <TIM_OC4_SetConfig+0x118>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d113      	bne.n	800576c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800574a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800574c:	693b      	ldr	r3, [r7, #16]
 800574e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005752:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	019b      	lsls	r3, r3, #6
 800575a:	693a      	ldr	r2, [r7, #16]
 800575c:	4313      	orrs	r3, r2
 800575e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	019b      	lsls	r3, r3, #6
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	4313      	orrs	r3, r2
 800576a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	68fa      	ldr	r2, [r7, #12]
 8005776:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	685a      	ldr	r2, [r3, #4]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	697a      	ldr	r2, [r7, #20]
 8005784:	621a      	str	r2, [r3, #32]
}
 8005786:	bf00      	nop
 8005788:	371c      	adds	r7, #28
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40012c00 	.word	0x40012c00
 8005798:	40013400 	.word	0x40013400
 800579c:	40015000 	.word	0x40015000
 80057a0:	40014000 	.word	0x40014000
 80057a4:	40014400 	.word	0x40014400
 80057a8:	40014800 	.word	0x40014800

080057ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b087      	sub	sp, #28
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	6a1b      	ldr	r3, [r3, #32]
 80057ba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6a1b      	ldr	r3, [r3, #32]
 80057c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80057d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80057f0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	689b      	ldr	r3, [r3, #8]
 80057f6:	041b      	lsls	r3, r3, #16
 80057f8:	693a      	ldr	r2, [r7, #16]
 80057fa:	4313      	orrs	r3, r2
 80057fc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a19      	ldr	r2, [pc, #100]	; (8005868 <TIM_OC5_SetConfig+0xbc>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d013      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a18      	ldr	r2, [pc, #96]	; (800586c <TIM_OC5_SetConfig+0xc0>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d00f      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a17      	ldr	r2, [pc, #92]	; (8005870 <TIM_OC5_SetConfig+0xc4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00b      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a16      	ldr	r2, [pc, #88]	; (8005874 <TIM_OC5_SetConfig+0xc8>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d007      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	4a15      	ldr	r2, [pc, #84]	; (8005878 <TIM_OC5_SetConfig+0xcc>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d003      	beq.n	800582e <TIM_OC5_SetConfig+0x82>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	4a14      	ldr	r2, [pc, #80]	; (800587c <TIM_OC5_SetConfig+0xd0>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d109      	bne.n	8005842 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	021b      	lsls	r3, r3, #8
 800583c:	697a      	ldr	r2, [r7, #20]
 800583e:	4313      	orrs	r3, r2
 8005840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	697a      	ldr	r2, [r7, #20]
 8005846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	693a      	ldr	r2, [r7, #16]
 800585a:	621a      	str	r2, [r3, #32]
}
 800585c:	bf00      	nop
 800585e:	371c      	adds	r7, #28
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr
 8005868:	40012c00 	.word	0x40012c00
 800586c:	40013400 	.word	0x40013400
 8005870:	40014000 	.word	0x40014000
 8005874:	40014400 	.word	0x40014400
 8005878:	40014800 	.word	0x40014800
 800587c:	40015000 	.word	0x40015000

08005880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a1b      	ldr	r3, [r3, #32]
 800589a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	685b      	ldr	r3, [r3, #4]
 80058a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	021b      	lsls	r3, r3, #8
 80058ba:	68fa      	ldr	r2, [r7, #12]
 80058bc:	4313      	orrs	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058c6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	051b      	lsls	r3, r3, #20
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	4a1a      	ldr	r2, [pc, #104]	; (8005940 <TIM_OC6_SetConfig+0xc0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d013      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	4a19      	ldr	r2, [pc, #100]	; (8005944 <TIM_OC6_SetConfig+0xc4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d00f      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <TIM_OC6_SetConfig+0xc8>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d00b      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4a17      	ldr	r2, [pc, #92]	; (800594c <TIM_OC6_SetConfig+0xcc>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d007      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	4a16      	ldr	r2, [pc, #88]	; (8005950 <TIM_OC6_SetConfig+0xd0>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d003      	beq.n	8005904 <TIM_OC6_SetConfig+0x84>
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	4a15      	ldr	r2, [pc, #84]	; (8005954 <TIM_OC6_SetConfig+0xd4>)
 8005900:	4293      	cmp	r3, r2
 8005902:	d109      	bne.n	8005918 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800590a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	695b      	ldr	r3, [r3, #20]
 8005910:	029b      	lsls	r3, r3, #10
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	697a      	ldr	r2, [r7, #20]
 800591c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	685a      	ldr	r2, [r3, #4]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	621a      	str	r2, [r3, #32]
}
 8005932:	bf00      	nop
 8005934:	371c      	adds	r7, #28
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	40012c00 	.word	0x40012c00
 8005944:	40013400 	.word	0x40013400
 8005948:	40014000 	.word	0x40014000
 800594c:	40014400 	.word	0x40014400
 8005950:	40014800 	.word	0x40014800
 8005954:	40015000 	.word	0x40015000

08005958 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005958:	b480      	push	{r7}
 800595a:	b087      	sub	sp, #28
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	6a1b      	ldr	r3, [r3, #32]
 800596a:	f023 0201 	bic.w	r2, r3, #1
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	699b      	ldr	r3, [r3, #24]
 8005976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6a1b      	ldr	r3, [r3, #32]
 800597c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	4a28      	ldr	r2, [pc, #160]	; (8005a24 <TIM_TI1_SetConfig+0xcc>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d01b      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d017      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	4a25      	ldr	r2, [pc, #148]	; (8005a28 <TIM_TI1_SetConfig+0xd0>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d013      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	4a24      	ldr	r2, [pc, #144]	; (8005a2c <TIM_TI1_SetConfig+0xd4>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d00f      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	4a23      	ldr	r2, [pc, #140]	; (8005a30 <TIM_TI1_SetConfig+0xd8>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d00b      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4a22      	ldr	r2, [pc, #136]	; (8005a34 <TIM_TI1_SetConfig+0xdc>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d007      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4a21      	ldr	r2, [pc, #132]	; (8005a38 <TIM_TI1_SetConfig+0xe0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d003      	beq.n	80059be <TIM_TI1_SetConfig+0x66>
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4a20      	ldr	r2, [pc, #128]	; (8005a3c <TIM_TI1_SetConfig+0xe4>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d101      	bne.n	80059c2 <TIM_TI1_SetConfig+0x6a>
 80059be:	2301      	movs	r3, #1
 80059c0:	e000      	b.n	80059c4 <TIM_TI1_SetConfig+0x6c>
 80059c2:	2300      	movs	r3, #0
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d008      	beq.n	80059da <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0303 	bic.w	r3, r3, #3
 80059ce:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
 80059d8:	e003      	b.n	80059e2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80059da:	697b      	ldr	r3, [r7, #20]
 80059dc:	f043 0301 	orr.w	r3, r3, #1
 80059e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	011b      	lsls	r3, r3, #4
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	f023 030a 	bic.w	r3, r3, #10
 80059fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80059fe:	68bb      	ldr	r3, [r7, #8]
 8005a00:	f003 030a 	and.w	r3, r3, #10
 8005a04:	693a      	ldr	r2, [r7, #16]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	621a      	str	r2, [r3, #32]
}
 8005a16:	bf00      	nop
 8005a18:	371c      	adds	r7, #28
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	40012c00 	.word	0x40012c00
 8005a28:	40000400 	.word	0x40000400
 8005a2c:	40000800 	.word	0x40000800
 8005a30:	40000c00 	.word	0x40000c00
 8005a34:	40013400 	.word	0x40013400
 8005a38:	40014000 	.word	0x40014000
 8005a3c:	40015000 	.word	0x40015000

08005a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	6a1b      	ldr	r3, [r3, #32]
 8005a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	6a1b      	ldr	r3, [r3, #32]
 8005a56:	f023 0201 	bic.w	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a76:	697b      	ldr	r3, [r7, #20]
 8005a78:	f023 030a 	bic.w	r3, r3, #10
 8005a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005a7e:	697a      	ldr	r2, [r7, #20]
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4313      	orrs	r3, r2
 8005a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	697a      	ldr	r2, [r7, #20]
 8005a90:	621a      	str	r2, [r3, #32]
}
 8005a92:	bf00      	nop
 8005a94:	371c      	adds	r7, #28
 8005a96:	46bd      	mov	sp, r7
 8005a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9c:	4770      	bx	lr

08005a9e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a9e:	b480      	push	{r7}
 8005aa0:	b087      	sub	sp, #28
 8005aa2:	af00      	add	r7, sp, #0
 8005aa4:	60f8      	str	r0, [r7, #12]
 8005aa6:	60b9      	str	r1, [r7, #8]
 8005aa8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	f023 0210 	bic.w	r2, r3, #16
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	699b      	ldr	r3, [r3, #24]
 8005aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6a1b      	ldr	r3, [r3, #32]
 8005ac0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005ac2:	697b      	ldr	r3, [r7, #20]
 8005ac4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	031b      	lsls	r3, r3, #12
 8005ace:	697a      	ldr	r2, [r7, #20]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ada:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	011b      	lsls	r3, r3, #4
 8005ae0:	693a      	ldr	r2, [r7, #16]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	693a      	ldr	r2, [r7, #16]
 8005af0:	621a      	str	r2, [r3, #32]
}
 8005af2:	bf00      	nop
 8005af4:	371c      	adds	r7, #28
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr

08005afe <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b085      	sub	sp, #20
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
 8005b06:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	689b      	ldr	r3, [r3, #8]
 8005b0c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005b14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f043 0307 	orr.w	r3, r3, #7
 8005b24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68fa      	ldr	r2, [r7, #12]
 8005b2a:	609a      	str	r2, [r3, #8]
}
 8005b2c:	bf00      	nop
 8005b2e:	3714      	adds	r7, #20
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	021a      	lsls	r2, r3, #8
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	697a      	ldr	r2, [r7, #20]
 8005b62:	4313      	orrs	r3, r2
 8005b64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	697a      	ldr	r2, [r7, #20]
 8005b6a:	609a      	str	r2, [r3, #8]
}
 8005b6c:	bf00      	nop
 8005b6e:	371c      	adds	r7, #28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	b087      	sub	sp, #28
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	f003 031f 	and.w	r3, r3, #31
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6a1a      	ldr	r2, [r3, #32]
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	43db      	mvns	r3, r3
 8005b9a:	401a      	ands	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f003 031f 	and.w	r3, r3, #31
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb0:	431a      	orrs	r2, r3
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	621a      	str	r2, [r3, #32]
}
 8005bb6:	bf00      	nop
 8005bb8:	371c      	adds	r7, #28
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr

08005bc2 <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8005bc2:	b580      	push	{r7, lr}
 8005bc4:	b08a      	sub	sp, #40	; 0x28
 8005bc6:	af00      	add	r7, sp, #0
 8005bc8:	6078      	str	r0, [r7, #4]
 8005bca:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d101      	bne.n	8005bd6 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e0a0      	b.n	8005d18 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d106      	bne.n	8005bf0 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	2200      	movs	r2, #0
 8005be6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f7fb fcdc 	bl	80015a8 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2202      	movs	r2, #2
 8005bf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681a      	ldr	r2, [r3, #0]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	3304      	adds	r3, #4
 8005c00:	4619      	mov	r1, r3
 8005c02:	4610      	mov	r0, r2
 8005c04:	f7ff fad6 	bl	80051b4 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	6819      	ldr	r1, [r3, #0]
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	2203      	movs	r2, #3
 8005c16:	f7ff fe9f 	bl	8005958 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	699a      	ldr	r2, [r3, #24]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 020c 	bic.w	r2, r2, #12
 8005c28:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	6999      	ldr	r1, [r3, #24]
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	685a      	ldr	r2, [r3, #4]
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	430a      	orrs	r2, r1
 8005c3a:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685a      	ldr	r2, [r3, #4]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005c4a:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6812      	ldr	r2, [r2, #0]
 8005c56:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c5e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c6e:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	6812      	ldr	r2, [r2, #0]
 8005c7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c7e:	f023 0307 	bic.w	r3, r3, #7
 8005c82:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	689a      	ldr	r2, [r3, #8]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f042 0204 	orr.w	r2, r2, #4
 8005c92:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005c9c:	2370      	movs	r3, #112	; 0x70
 8005c9e:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8005ca0:	2300      	movs	r3, #0
 8005ca2:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8005ca4:	2300      	movs	r3, #0
 8005ca6:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8005ca8:	2300      	movs	r3, #0
 8005caa:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f107 020c 	add.w	r2, r7, #12
 8005cba:	4611      	mov	r1, r2
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7ff fbbb 	bl	8005438 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	687a      	ldr	r2, [r7, #4]
 8005cca:	6812      	ldr	r2, [r2, #0]
 8005ccc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005cd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cd4:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	2201      	movs	r2, #1
 8005d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2201      	movs	r2, #1
 8005d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	3728      	adds	r7, #40	; 0x28
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	bd80      	pop	{r7, pc}

08005d20 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005d2a:	683b      	ldr	r3, [r7, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d109      	bne.n	8005d44 <HAL_TIMEx_PWMN_Start+0x24>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	2b01      	cmp	r3, #1
 8005d3a:	bf14      	ite	ne
 8005d3c:	2301      	movne	r3, #1
 8005d3e:	2300      	moveq	r3, #0
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	e022      	b.n	8005d8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	2b04      	cmp	r3, #4
 8005d48:	d109      	bne.n	8005d5e <HAL_TIMEx_PWMN_Start+0x3e>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	bf14      	ite	ne
 8005d56:	2301      	movne	r3, #1
 8005d58:	2300      	moveq	r3, #0
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	e015      	b.n	8005d8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	2b08      	cmp	r3, #8
 8005d62:	d109      	bne.n	8005d78 <HAL_TIMEx_PWMN_Start+0x58>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005d6a:	b2db      	uxtb	r3, r3
 8005d6c:	2b01      	cmp	r3, #1
 8005d6e:	bf14      	ite	ne
 8005d70:	2301      	movne	r3, #1
 8005d72:	2300      	moveq	r3, #0
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	e008      	b.n	8005d8a <HAL_TIMEx_PWMN_Start+0x6a>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b01      	cmp	r3, #1
 8005d82:	bf14      	ite	ne
 8005d84:	2301      	movne	r3, #1
 8005d86:	2300      	moveq	r3, #0
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d001      	beq.n	8005d92 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	e073      	b.n	8005e7a <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d104      	bne.n	8005da2 <HAL_TIMEx_PWMN_Start+0x82>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005da0:	e013      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0xaa>
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	2b04      	cmp	r3, #4
 8005da6:	d104      	bne.n	8005db2 <HAL_TIMEx_PWMN_Start+0x92>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2202      	movs	r2, #2
 8005dac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005db0:	e00b      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0xaa>
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	2b08      	cmp	r3, #8
 8005db6:	d104      	bne.n	8005dc2 <HAL_TIMEx_PWMN_Start+0xa2>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dc0:	e003      	b.n	8005dca <HAL_TIMEx_PWMN_Start+0xaa>
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2204      	movs	r2, #4
 8005dd0:	6839      	ldr	r1, [r7, #0]
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f000 fa52 	bl	800627c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4a25      	ldr	r2, [pc, #148]	; (8005e84 <HAL_TIMEx_PWMN_Start+0x164>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d022      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dfa:	d01d      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a21      	ldr	r2, [pc, #132]	; (8005e88 <HAL_TIMEx_PWMN_Start+0x168>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d018      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <HAL_TIMEx_PWMN_Start+0x16c>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d013      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a1e      	ldr	r2, [pc, #120]	; (8005e90 <HAL_TIMEx_PWMN_Start+0x170>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d00e      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a1d      	ldr	r2, [pc, #116]	; (8005e94 <HAL_TIMEx_PWMN_Start+0x174>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d009      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a1b      	ldr	r2, [pc, #108]	; (8005e98 <HAL_TIMEx_PWMN_Start+0x178>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d004      	beq.n	8005e38 <HAL_TIMEx_PWMN_Start+0x118>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a1a      	ldr	r2, [pc, #104]	; (8005e9c <HAL_TIMEx_PWMN_Start+0x17c>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d115      	bne.n	8005e64 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	4b18      	ldr	r3, [pc, #96]	; (8005ea0 <HAL_TIMEx_PWMN_Start+0x180>)
 8005e40:	4013      	ands	r3, r2
 8005e42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b06      	cmp	r3, #6
 8005e48:	d015      	beq.n	8005e76 <HAL_TIMEx_PWMN_Start+0x156>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e50:	d011      	beq.n	8005e76 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	681a      	ldr	r2, [r3, #0]
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f042 0201 	orr.w	r2, r2, #1
 8005e60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e62:	e008      	b.n	8005e76 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f042 0201 	orr.w	r2, r2, #1
 8005e72:	601a      	str	r2, [r3, #0]
 8005e74:	e000      	b.n	8005e78 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	3710      	adds	r7, #16
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	bd80      	pop	{r7, pc}
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40000400 	.word	0x40000400
 8005e8c:	40000800 	.word	0x40000800
 8005e90:	40000c00 	.word	0x40000c00
 8005e94:	40013400 	.word	0x40013400
 8005e98:	40014000 	.word	0x40014000
 8005e9c:	40015000 	.word	0x40015000
 8005ea0:	00010007 	.word	0x00010007

08005ea4 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b082      	sub	sp, #8
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	6839      	ldr	r1, [r7, #0]
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f000 f9e0 	bl	800627c <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	6a1a      	ldr	r2, [r3, #32]
 8005ec2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ec6:	4013      	ands	r3, r2
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d10f      	bne.n	8005eec <HAL_TIMEx_PWMN_Stop+0x48>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	6a1a      	ldr	r2, [r3, #32]
 8005ed2:	f244 4344 	movw	r3, #17476	; 0x4444
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d107      	bne.n	8005eec <HAL_TIMEx_PWMN_Stop+0x48>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005eea:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	6a1a      	ldr	r2, [r3, #32]
 8005ef2:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ef6:	4013      	ands	r3, r2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d10f      	bne.n	8005f1c <HAL_TIMEx_PWMN_Stop+0x78>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6a1a      	ldr	r2, [r3, #32]
 8005f02:	f244 4344 	movw	r3, #17476	; 0x4444
 8005f06:	4013      	ands	r3, r2
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIMEx_PWMN_Stop+0x78>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d104      	bne.n	8005f2c <HAL_TIMEx_PWMN_Stop+0x88>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2201      	movs	r2, #1
 8005f26:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f2a:	e013      	b.n	8005f54 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	2b04      	cmp	r3, #4
 8005f30:	d104      	bne.n	8005f3c <HAL_TIMEx_PWMN_Stop+0x98>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2201      	movs	r2, #1
 8005f36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f3a:	e00b      	b.n	8005f54 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d104      	bne.n	8005f4c <HAL_TIMEx_PWMN_Stop+0xa8>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f4a:	e003      	b.n	8005f54 <HAL_TIMEx_PWMN_Stop+0xb0>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3708      	adds	r7, #8
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
	...

08005f60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d101      	bne.n	8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f74:	2302      	movs	r3, #2
 8005f76:	e074      	b.n	8006062 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	4a34      	ldr	r2, [pc, #208]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d009      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	4a33      	ldr	r2, [pc, #204]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d004      	beq.n	8005fb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a31      	ldr	r2, [pc, #196]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d108      	bne.n	8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005fbc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	68fa      	ldr	r2, [r7, #12]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005fce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4313      	orrs	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68fa      	ldr	r2, [r7, #12]
 8005fe4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a21      	ldr	r2, [pc, #132]	; (8006070 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d022      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff8:	d01d      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	4a1f      	ldr	r2, [pc, #124]	; (800607c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006000:	4293      	cmp	r3, r2
 8006002:	d018      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	4a1d      	ldr	r2, [pc, #116]	; (8006080 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d013      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	4a1c      	ldr	r2, [pc, #112]	; (8006084 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006014:	4293      	cmp	r3, r2
 8006016:	d00e      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4a15      	ldr	r2, [pc, #84]	; (8006074 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d009      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a18      	ldr	r2, [pc, #96]	; (8006088 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d004      	beq.n	8006036 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a11      	ldr	r2, [pc, #68]	; (8006078 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d10c      	bne.n	8006050 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800603c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	689b      	ldr	r3, [r3, #8]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	4313      	orrs	r3, r2
 8006046:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	68ba      	ldr	r2, [r7, #8]
 800604e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006060:	2300      	movs	r3, #0
}
 8006062:	4618      	mov	r0, r3
 8006064:	3714      	adds	r7, #20
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop
 8006070:	40012c00 	.word	0x40012c00
 8006074:	40013400 	.word	0x40013400
 8006078:	40015000 	.word	0x40015000
 800607c:	40000400 	.word	0x40000400
 8006080:	40000800 	.word	0x40000800
 8006084:	40000c00 	.word	0x40000c00
 8006088:	40014000 	.word	0x40014000

0800608c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800608c:	b480      	push	{r7}
 800608e:	b085      	sub	sp, #20
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d101      	bne.n	80060a8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80060a4:	2302      	movs	r3, #2
 80060a6:	e096      	b.n	80061d6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2201      	movs	r2, #1
 80060ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	68db      	ldr	r3, [r3, #12]
 80060ba:	4313      	orrs	r3, r2
 80060bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4313      	orrs	r3, r2
 80060e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	4313      	orrs	r3, r2
 80060f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	695b      	ldr	r3, [r3, #20]
 8006100:	4313      	orrs	r3, r2
 8006102:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	699b      	ldr	r3, [r3, #24]
 800611c:	041b      	lsls	r3, r3, #16
 800611e:	4313      	orrs	r3, r2
 8006120:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006128:	4293      	cmp	r3, r2
 800612a:	d009      	beq.n	8006140 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a2d      	ldr	r2, [pc, #180]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d004      	beq.n	8006140 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a2c      	ldr	r2, [pc, #176]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800613c:	4293      	cmp	r3, r2
 800613e:	d106      	bne.n	800614e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	69db      	ldr	r3, [r3, #28]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a24      	ldr	r2, [pc, #144]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d009      	beq.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a22      	ldr	r2, [pc, #136]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d004      	beq.n	800616c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a21      	ldr	r2, [pc, #132]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d12b      	bne.n	80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006172:	683b      	ldr	r3, [r7, #0]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	051b      	lsls	r3, r3, #20
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	6a1b      	ldr	r3, [r3, #32]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a11      	ldr	r2, [pc, #68]	; (80061e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d009      	beq.n	80061b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	4a10      	ldr	r2, [pc, #64]	; (80061e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d004      	beq.n	80061b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0e      	ldr	r2, [pc, #56]	; (80061ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d106      	bne.n	80061c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68fa      	ldr	r2, [r7, #12]
 80061ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3714      	adds	r7, #20
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	40012c00 	.word	0x40012c00
 80061e8:	40013400 	.word	0x40013400
 80061ec:	40015000 	.word	0x40015000

080061f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006204:	b480      	push	{r7}
 8006206:	b083      	sub	sp, #12
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800620c:	bf00      	nop
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006220:	bf00      	nop
 8006222:	370c      	adds	r7, #12
 8006224:	46bd      	mov	sp, r7
 8006226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622a:	4770      	bx	lr

0800622c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800622c:	b480      	push	{r7}
 800622e:	b083      	sub	sp, #12
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006234:	bf00      	nop
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623e:	4770      	bx	lr

08006240 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006270:	bf00      	nop
 8006272:	370c      	adds	r7, #12
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 800627c:	b480      	push	{r7}
 800627e:	b087      	sub	sp, #28
 8006280:	af00      	add	r7, sp, #0
 8006282:	60f8      	str	r0, [r7, #12]
 8006284:	60b9      	str	r1, [r7, #8]
 8006286:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	f003 031f 	and.w	r3, r3, #31
 800628e:	2204      	movs	r2, #4
 8006290:	fa02 f303 	lsl.w	r3, r2, r3
 8006294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6a1a      	ldr	r2, [r3, #32]
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	43db      	mvns	r3, r3
 800629e:	401a      	ands	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6a1a      	ldr	r2, [r3, #32]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	f003 031f 	and.w	r3, r3, #31
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	fa01 f303 	lsl.w	r3, r1, r3
 80062b4:	431a      	orrs	r2, r3
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d101      	bne.n	80062d8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	e042      	b.n	800635e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d106      	bne.n	80062f0 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2200      	movs	r2, #0
 80062e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f7fb fabe 	bl	800186c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2224      	movs	r2, #36	; 0x24
 80062f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681a      	ldr	r2, [r3, #0]
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f022 0201 	bic.w	r2, r2, #1
 8006306:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fc51 	bl	8006bb0 <UART_SetConfig>
 800630e:	4603      	mov	r3, r0
 8006310:	2b01      	cmp	r3, #1
 8006312:	d101      	bne.n	8006318 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006314:	2301      	movs	r3, #1
 8006316:	e022      	b.n	800635e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 ff41 	bl	80071a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	685a      	ldr	r2, [r3, #4]
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006334:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	689a      	ldr	r2, [r3, #8]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006344:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	f042 0201 	orr.w	r2, r2, #1
 8006354:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 ffc8 	bl	80072ec <UART_CheckIdleState>
 800635c:	4603      	mov	r3, r0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006366:	b580      	push	{r7, lr}
 8006368:	b08a      	sub	sp, #40	; 0x28
 800636a:	af02      	add	r7, sp, #8
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	603b      	str	r3, [r7, #0]
 8006372:	4613      	mov	r3, r2
 8006374:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800637c:	2b20      	cmp	r3, #32
 800637e:	f040 8083 	bne.w	8006488 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d002      	beq.n	800638e <HAL_UART_Transmit+0x28>
 8006388:	88fb      	ldrh	r3, [r7, #6]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d101      	bne.n	8006392 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e07b      	b.n	800648a <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006398:	2b01      	cmp	r3, #1
 800639a:	d101      	bne.n	80063a0 <HAL_UART_Transmit+0x3a>
 800639c:	2302      	movs	r3, #2
 800639e:	e074      	b.n	800648a <HAL_UART_Transmit+0x124>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2221      	movs	r2, #33	; 0x21
 80063b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063b8:	f7fb fb4c 	bl	8001a54 <HAL_GetTick>
 80063bc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	88fa      	ldrh	r2, [r7, #6]
 80063c2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	88fa      	ldrh	r2, [r7, #6]
 80063ca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d108      	bne.n	80063ea <HAL_UART_Transmit+0x84>
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	691b      	ldr	r3, [r3, #16]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d104      	bne.n	80063ea <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e003      	b.n	80063f2 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80063ea:	68bb      	ldr	r3, [r7, #8]
 80063ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ee:	2300      	movs	r3, #0
 80063f0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80063fa:	e02c      	b.n	8006456 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063fc:	683b      	ldr	r3, [r7, #0]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2200      	movs	r2, #0
 8006404:	2180      	movs	r1, #128	; 0x80
 8006406:	68f8      	ldr	r0, [r7, #12]
 8006408:	f000 ffbb 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8006412:	2303      	movs	r3, #3
 8006414:	e039      	b.n	800648a <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d10b      	bne.n	8006434 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800641c:	69bb      	ldr	r3, [r7, #24]
 800641e:	881b      	ldrh	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800642a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	3302      	adds	r3, #2
 8006430:	61bb      	str	r3, [r7, #24]
 8006432:	e007      	b.n	8006444 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006434:	69fb      	ldr	r3, [r7, #28]
 8006436:	781a      	ldrb	r2, [r3, #0]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	3301      	adds	r3, #1
 8006442:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800644a:	b29b      	uxth	r3, r3
 800644c:	3b01      	subs	r3, #1
 800644e:	b29a      	uxth	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800645c:	b29b      	uxth	r3, r3
 800645e:	2b00      	cmp	r3, #0
 8006460:	d1cc      	bne.n	80063fc <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006462:	683b      	ldr	r3, [r7, #0]
 8006464:	9300      	str	r3, [sp, #0]
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2200      	movs	r2, #0
 800646a:	2140      	movs	r1, #64	; 0x40
 800646c:	68f8      	ldr	r0, [r7, #12]
 800646e:	f000 ff88 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8006478:	2303      	movs	r3, #3
 800647a:	e006      	b.n	800648a <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006484:	2300      	movs	r3, #0
 8006486:	e000      	b.n	800648a <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8006488:	2302      	movs	r3, #2
  }
}
 800648a:	4618      	mov	r0, r3
 800648c:	3720      	adds	r7, #32
 800648e:	46bd      	mov	sp, r7
 8006490:	bd80      	pop	{r7, pc}
	...

08006494 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b08a      	sub	sp, #40	; 0x28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	4613      	mov	r3, r2
 80064a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064a8:	2b20      	cmp	r3, #32
 80064aa:	d142      	bne.n	8006532 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d002      	beq.n	80064b8 <HAL_UART_Receive_IT+0x24>
 80064b2:	88fb      	ldrh	r3, [r7, #6]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d101      	bne.n	80064bc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e03b      	b.n	8006534 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d101      	bne.n	80064ca <HAL_UART_Receive_IT+0x36>
 80064c6:	2302      	movs	r3, #2
 80064c8:	e034      	b.n	8006534 <HAL_UART_Receive_IT+0xa0>
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a17      	ldr	r2, [pc, #92]	; (800653c <HAL_UART_Receive_IT+0xa8>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d01f      	beq.n	8006522 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	685b      	ldr	r3, [r3, #4]
 80064e8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d018      	beq.n	8006522 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	e853 3f00 	ldrex	r3, [r3]
 80064fc:	613b      	str	r3, [r7, #16]
   return(result);
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	461a      	mov	r2, r3
 800650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006512:	69f9      	ldr	r1, [r7, #28]
 8006514:	6a3a      	ldr	r2, [r7, #32]
 8006516:	e841 2300 	strex	r3, r2, [r1]
 800651a:	61bb      	str	r3, [r7, #24]
   return(result);
 800651c:	69bb      	ldr	r3, [r7, #24]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d1e6      	bne.n	80064f0 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	461a      	mov	r2, r3
 8006526:	68b9      	ldr	r1, [r7, #8]
 8006528:	68f8      	ldr	r0, [r7, #12]
 800652a:	f000 fff3 	bl	8007514 <UART_Start_Receive_IT>
 800652e:	4603      	mov	r3, r0
 8006530:	e000      	b.n	8006534 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006532:	2302      	movs	r3, #2
  }
}
 8006534:	4618      	mov	r0, r3
 8006536:	3728      	adds	r7, #40	; 0x28
 8006538:	46bd      	mov	sp, r7
 800653a:	bd80      	pop	{r7, pc}
 800653c:	40008000 	.word	0x40008000

08006540 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b0ba      	sub	sp, #232	; 0xe8
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69db      	ldr	r3, [r3, #28]
 800654e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006566:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800656a:	f640 030f 	movw	r3, #2063	; 0x80f
 800656e:	4013      	ands	r3, r2
 8006570:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006574:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006578:	2b00      	cmp	r3, #0
 800657a:	d11b      	bne.n	80065b4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800657c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d015      	beq.n	80065b4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800658c:	f003 0320 	and.w	r3, r3, #32
 8006590:	2b00      	cmp	r3, #0
 8006592:	d105      	bne.n	80065a0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006594:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800659c:	2b00      	cmp	r3, #0
 800659e:	d009      	beq.n	80065b4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 82d6 	beq.w	8006b56 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	4798      	blx	r3
      }
      return;
 80065b2:	e2d0      	b.n	8006b56 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80065b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	f000 811f 	beq.w	80067fc <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80065be:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80065c2:	4b8b      	ldr	r3, [pc, #556]	; (80067f0 <HAL_UART_IRQHandler+0x2b0>)
 80065c4:	4013      	ands	r3, r2
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d106      	bne.n	80065d8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80065ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065ce:	4b89      	ldr	r3, [pc, #548]	; (80067f4 <HAL_UART_IRQHandler+0x2b4>)
 80065d0:	4013      	ands	r3, r2
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	f000 8112 	beq.w	80067fc <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d011      	beq.n	8006608 <HAL_UART_IRQHandler+0xc8>
 80065e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d00b      	beq.n	8006608 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	2201      	movs	r2, #1
 80065f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80065fe:	f043 0201 	orr.w	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800660c:	f003 0302 	and.w	r3, r3, #2
 8006610:	2b00      	cmp	r3, #0
 8006612:	d011      	beq.n	8006638 <HAL_UART_IRQHandler+0xf8>
 8006614:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00b      	beq.n	8006638 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2202      	movs	r2, #2
 8006626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800662e:	f043 0204 	orr.w	r2, r3, #4
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800663c:	f003 0304 	and.w	r3, r3, #4
 8006640:	2b00      	cmp	r3, #0
 8006642:	d011      	beq.n	8006668 <HAL_UART_IRQHandler+0x128>
 8006644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006648:	f003 0301 	and.w	r3, r3, #1
 800664c:	2b00      	cmp	r3, #0
 800664e:	d00b      	beq.n	8006668 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2204      	movs	r2, #4
 8006656:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800665e:	f043 0202 	orr.w	r2, r3, #2
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666c:	f003 0308 	and.w	r3, r3, #8
 8006670:	2b00      	cmp	r3, #0
 8006672:	d017      	beq.n	80066a4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006678:	f003 0320 	and.w	r3, r3, #32
 800667c:	2b00      	cmp	r3, #0
 800667e:	d105      	bne.n	800668c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006680:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006684:	4b5a      	ldr	r3, [pc, #360]	; (80067f0 <HAL_UART_IRQHandler+0x2b0>)
 8006686:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2208      	movs	r2, #8
 8006692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800669a:	f043 0208 	orr.w	r2, r3, #8
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d012      	beq.n	80066d6 <HAL_UART_IRQHandler+0x196>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00c      	beq.n	80066d6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066dc:	2b00      	cmp	r3, #0
 80066de:	f000 823c 	beq.w	8006b5a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e6:	f003 0320 	and.w	r3, r3, #32
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d013      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066f2:	f003 0320 	and.w	r3, r3, #32
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d105      	bne.n	8006706 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d007      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800671c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672a:	2b40      	cmp	r3, #64	; 0x40
 800672c:	d005      	beq.n	800673a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800672e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006732:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006736:	2b00      	cmp	r3, #0
 8006738:	d04f      	beq.n	80067da <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	f001 f814 	bl	8007768 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	689b      	ldr	r3, [r3, #8]
 8006746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674a:	2b40      	cmp	r3, #64	; 0x40
 800674c:	d141      	bne.n	80067d2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3308      	adds	r3, #8
 8006754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006758:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800675c:	e853 3f00 	ldrex	r3, [r3]
 8006760:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006764:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006768:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800676c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	3308      	adds	r3, #8
 8006776:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800677a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800677e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006782:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006786:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800678a:	e841 2300 	strex	r3, r2, [r1]
 800678e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006792:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1d9      	bne.n	800674e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d013      	beq.n	80067ca <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067a6:	4a14      	ldr	r2, [pc, #80]	; (80067f8 <HAL_UART_IRQHandler+0x2b8>)
 80067a8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fc fbc1 	bl	8002f36 <HAL_DMA_Abort_IT>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d017      	beq.n	80067ea <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80067be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80067c4:	4610      	mov	r0, r2
 80067c6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067c8:	e00f      	b.n	80067ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f9da 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d0:	e00b      	b.n	80067ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 f9d6 	bl	8006b84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067d8:	e007      	b.n	80067ea <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f9d2 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80067e8:	e1b7      	b.n	8006b5a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ea:	bf00      	nop
    return;
 80067ec:	e1b5      	b.n	8006b5a <HAL_UART_IRQHandler+0x61a>
 80067ee:	bf00      	nop
 80067f0:	10000001 	.word	0x10000001
 80067f4:	04000120 	.word	0x04000120
 80067f8:	08007835 	.word	0x08007835

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006800:	2b01      	cmp	r3, #1
 8006802:	f040 814a 	bne.w	8006a9a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006806:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800680a:	f003 0310 	and.w	r3, r3, #16
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 8143 	beq.w	8006a9a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006814:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006818:	f003 0310 	and.w	r3, r3, #16
 800681c:	2b00      	cmp	r3, #0
 800681e:	f000 813c 	beq.w	8006a9a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	2210      	movs	r2, #16
 8006828:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006834:	2b40      	cmp	r3, #64	; 0x40
 8006836:	f040 80b5 	bne.w	80069a4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006846:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 8187 	beq.w	8006b5e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006856:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800685a:	429a      	cmp	r2, r3
 800685c:	f080 817f 	bcs.w	8006b5e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006866:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0320 	and.w	r3, r3, #32
 8006876:	2b00      	cmp	r3, #0
 8006878:	f040 8086 	bne.w	8006988 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006884:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006898:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	461a      	mov	r2, r3
 80068a2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80068a6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80068aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80068b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80068be:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1da      	bne.n	800687c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	3308      	adds	r3, #8
 80068cc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	e853 3f00 	ldrex	r3, [r3]
 80068d4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80068d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80068d8:	f023 0301 	bic.w	r3, r3, #1
 80068dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	3308      	adds	r3, #8
 80068e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068ea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e1      	bne.n	80068c6 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	3308      	adds	r3, #8
 8006908:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800690c:	e853 3f00 	ldrex	r3, [r3]
 8006910:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006912:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006918:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	3308      	adds	r3, #8
 8006922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006926:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006928:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800692c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006934:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e3      	bne.n	8006902 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2220      	movs	r2, #32
 800693e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006958:	f023 0310 	bic.w	r3, r3, #16
 800695c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800696a:	65bb      	str	r3, [r7, #88]	; 0x58
 800696c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006972:	e841 2300 	strex	r3, r2, [r1]
 8006976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e4      	bne.n	8006948 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006982:	4618      	mov	r0, r3
 8006984:	f7fc fa7e 	bl	8002e84 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006994:	b29b      	uxth	r3, r3
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	b29b      	uxth	r3, r3
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f8fb 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069a2:	e0dc      	b.n	8006b5e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069b0:	b29b      	uxth	r3, r3
 80069b2:	1ad3      	subs	r3, r2, r3
 80069b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80069be:	b29b      	uxth	r3, r3
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	f000 80ce 	beq.w	8006b62 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 80069c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 80c9 	beq.w	8006b62 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80069de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	461a      	mov	r2, r3
 80069ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069f2:	647b      	str	r3, [r7, #68]	; 0x44
 80069f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069fa:	e841 2300 	strex	r3, r2, [r1]
 80069fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d1e4      	bne.n	80069d0 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3308      	adds	r3, #8
 8006a0c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	e853 3f00 	ldrex	r3, [r3]
 8006a14:	623b      	str	r3, [r7, #32]
   return(result);
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	3308      	adds	r3, #8
 8006a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8006a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a36:	e841 2300 	strex	r3, r2, [r1]
 8006a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d1e1      	bne.n	8006a06 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	2220      	movs	r2, #32
 8006a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5c:	693b      	ldr	r3, [r7, #16]
 8006a5e:	e853 3f00 	ldrex	r3, [r3]
 8006a62:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f023 0310 	bic.w	r3, r3, #16
 8006a6a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	461a      	mov	r2, r3
 8006a74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a78:	61fb      	str	r3, [r7, #28]
 8006a7a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7c:	69b9      	ldr	r1, [r7, #24]
 8006a7e:	69fa      	ldr	r2, [r7, #28]
 8006a80:	e841 2300 	strex	r3, r2, [r1]
 8006a84:	617b      	str	r3, [r7, #20]
   return(result);
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e4      	bne.n	8006a56 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a8c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f880 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a98:	e063      	b.n	8006b62 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x584>
 8006aa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d008      	beq.n	8006ac4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006aba:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 fb57 	bl	8008170 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ac2:	e051      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006ac4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ac8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d014      	beq.n	8006afa <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006ad0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d105      	bne.n	8006ae8 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006adc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d008      	beq.n	8006afa <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d03a      	beq.n	8006b66 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af4:	6878      	ldr	r0, [r7, #4]
 8006af6:	4798      	blx	r3
    }
    return;
 8006af8:	e035      	b.n	8006b66 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_UART_IRQHandler+0x5da>
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f000 fea4 	bl	8007860 <UART_EndTransmit_IT>
    return;
 8006b18:	e026      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b1e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d009      	beq.n	8006b3a <HAL_UART_IRQHandler+0x5fa>
 8006b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b2a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d003      	beq.n	8006b3a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f001 fb30 	bl	8008198 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b38:	e016      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006b3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d010      	beq.n	8006b68 <HAL_UART_IRQHandler+0x628>
 8006b46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	da0c      	bge.n	8006b68 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f001 fb18 	bl	8008184 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b54:	e008      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
      return;
 8006b56:	bf00      	nop
 8006b58:	e006      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
    return;
 8006b5a:	bf00      	nop
 8006b5c:	e004      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
      return;
 8006b5e:	bf00      	nop
 8006b60:	e002      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
      return;
 8006b62:	bf00      	nop
 8006b64:	e000      	b.n	8006b68 <HAL_UART_IRQHandler+0x628>
    return;
 8006b66:	bf00      	nop
  }
}
 8006b68:	37e8      	adds	r7, #232	; 0xe8
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}
 8006b6e:	bf00      	nop

08006b70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006b78:	bf00      	nop
 8006b7a:	370c      	adds	r7, #12
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b82:	4770      	bx	lr

08006b84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006b8c:	bf00      	nop
 8006b8e:	370c      	adds	r7, #12
 8006b90:	46bd      	mov	sp, r7
 8006b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b96:	4770      	bx	lr

08006b98 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b98:	b480      	push	{r7}
 8006b9a:	b083      	sub	sp, #12
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	460b      	mov	r3, r1
 8006ba2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006ba4:	bf00      	nop
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bb4:	b08c      	sub	sp, #48	; 0x30
 8006bb6:	af00      	add	r7, sp, #0
 8006bb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006bc0:	697b      	ldr	r3, [r7, #20]
 8006bc2:	689a      	ldr	r2, [r3, #8]
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	691b      	ldr	r3, [r3, #16]
 8006bc8:	431a      	orrs	r2, r3
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	695b      	ldr	r3, [r3, #20]
 8006bce:	431a      	orrs	r2, r3
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	69db      	ldr	r3, [r3, #28]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	681a      	ldr	r2, [r3, #0]
 8006bde:	4baa      	ldr	r3, [pc, #680]	; (8006e88 <UART_SetConfig+0x2d8>)
 8006be0:	4013      	ands	r3, r2
 8006be2:	697a      	ldr	r2, [r7, #20]
 8006be4:	6812      	ldr	r2, [r2, #0]
 8006be6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006be8:	430b      	orrs	r3, r1
 8006bea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bec:	697b      	ldr	r3, [r7, #20]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	68da      	ldr	r2, [r3, #12]
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	699b      	ldr	r3, [r3, #24]
 8006c06:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	4a9f      	ldr	r2, [pc, #636]	; (8006e8c <UART_SetConfig+0x2dc>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d004      	beq.n	8006c1c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006c26:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c30:	430b      	orrs	r3, r1
 8006c32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c3a:	f023 010f 	bic.w	r1, r3, #15
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	430a      	orrs	r2, r1
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	4a90      	ldr	r2, [pc, #576]	; (8006e90 <UART_SetConfig+0x2e0>)
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d125      	bne.n	8006ca0 <UART_SetConfig+0xf0>
 8006c54:	4b8f      	ldr	r3, [pc, #572]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d81a      	bhi.n	8006c98 <UART_SetConfig+0xe8>
 8006c62:	a201      	add	r2, pc, #4	; (adr r2, 8006c68 <UART_SetConfig+0xb8>)
 8006c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c68:	08006c79 	.word	0x08006c79
 8006c6c:	08006c89 	.word	0x08006c89
 8006c70:	08006c81 	.word	0x08006c81
 8006c74:	08006c91 	.word	0x08006c91
 8006c78:	2301      	movs	r3, #1
 8006c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c7e:	e116      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006c80:	2302      	movs	r3, #2
 8006c82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c86:	e112      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006c88:	2304      	movs	r3, #4
 8006c8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c8e:	e10e      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006c90:	2308      	movs	r3, #8
 8006c92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c96:	e10a      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006c98:	2310      	movs	r3, #16
 8006c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006c9e:	e106      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a7c      	ldr	r2, [pc, #496]	; (8006e98 <UART_SetConfig+0x2e8>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d138      	bne.n	8006d1c <UART_SetConfig+0x16c>
 8006caa:	4b7a      	ldr	r3, [pc, #488]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006cac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cb0:	f003 030c 	and.w	r3, r3, #12
 8006cb4:	2b0c      	cmp	r3, #12
 8006cb6:	d82d      	bhi.n	8006d14 <UART_SetConfig+0x164>
 8006cb8:	a201      	add	r2, pc, #4	; (adr r2, 8006cc0 <UART_SetConfig+0x110>)
 8006cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbe:	bf00      	nop
 8006cc0:	08006cf5 	.word	0x08006cf5
 8006cc4:	08006d15 	.word	0x08006d15
 8006cc8:	08006d15 	.word	0x08006d15
 8006ccc:	08006d15 	.word	0x08006d15
 8006cd0:	08006d05 	.word	0x08006d05
 8006cd4:	08006d15 	.word	0x08006d15
 8006cd8:	08006d15 	.word	0x08006d15
 8006cdc:	08006d15 	.word	0x08006d15
 8006ce0:	08006cfd 	.word	0x08006cfd
 8006ce4:	08006d15 	.word	0x08006d15
 8006ce8:	08006d15 	.word	0x08006d15
 8006cec:	08006d15 	.word	0x08006d15
 8006cf0:	08006d0d 	.word	0x08006d0d
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006cfa:	e0d8      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006cfc:	2302      	movs	r3, #2
 8006cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d02:	e0d4      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d04:	2304      	movs	r3, #4
 8006d06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d0a:	e0d0      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d0c:	2308      	movs	r3, #8
 8006d0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d12:	e0cc      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d14:	2310      	movs	r3, #16
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d1a:	e0c8      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a5e      	ldr	r2, [pc, #376]	; (8006e9c <UART_SetConfig+0x2ec>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d125      	bne.n	8006d72 <UART_SetConfig+0x1c2>
 8006d26:	4b5b      	ldr	r3, [pc, #364]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d2c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006d30:	2b30      	cmp	r3, #48	; 0x30
 8006d32:	d016      	beq.n	8006d62 <UART_SetConfig+0x1b2>
 8006d34:	2b30      	cmp	r3, #48	; 0x30
 8006d36:	d818      	bhi.n	8006d6a <UART_SetConfig+0x1ba>
 8006d38:	2b20      	cmp	r3, #32
 8006d3a:	d00a      	beq.n	8006d52 <UART_SetConfig+0x1a2>
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d814      	bhi.n	8006d6a <UART_SetConfig+0x1ba>
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d002      	beq.n	8006d4a <UART_SetConfig+0x19a>
 8006d44:	2b10      	cmp	r3, #16
 8006d46:	d008      	beq.n	8006d5a <UART_SetConfig+0x1aa>
 8006d48:	e00f      	b.n	8006d6a <UART_SetConfig+0x1ba>
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d50:	e0ad      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d52:	2302      	movs	r3, #2
 8006d54:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d58:	e0a9      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d5a:	2304      	movs	r3, #4
 8006d5c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d60:	e0a5      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d62:	2308      	movs	r3, #8
 8006d64:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d68:	e0a1      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d6a:	2310      	movs	r3, #16
 8006d6c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d70:	e09d      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	4a4a      	ldr	r2, [pc, #296]	; (8006ea0 <UART_SetConfig+0x2f0>)
 8006d78:	4293      	cmp	r3, r2
 8006d7a:	d125      	bne.n	8006dc8 <UART_SetConfig+0x218>
 8006d7c:	4b45      	ldr	r3, [pc, #276]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006d7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006d86:	2bc0      	cmp	r3, #192	; 0xc0
 8006d88:	d016      	beq.n	8006db8 <UART_SetConfig+0x208>
 8006d8a:	2bc0      	cmp	r3, #192	; 0xc0
 8006d8c:	d818      	bhi.n	8006dc0 <UART_SetConfig+0x210>
 8006d8e:	2b80      	cmp	r3, #128	; 0x80
 8006d90:	d00a      	beq.n	8006da8 <UART_SetConfig+0x1f8>
 8006d92:	2b80      	cmp	r3, #128	; 0x80
 8006d94:	d814      	bhi.n	8006dc0 <UART_SetConfig+0x210>
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d002      	beq.n	8006da0 <UART_SetConfig+0x1f0>
 8006d9a:	2b40      	cmp	r3, #64	; 0x40
 8006d9c:	d008      	beq.n	8006db0 <UART_SetConfig+0x200>
 8006d9e:	e00f      	b.n	8006dc0 <UART_SetConfig+0x210>
 8006da0:	2300      	movs	r3, #0
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da6:	e082      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006da8:	2302      	movs	r3, #2
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e07e      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006db0:	2304      	movs	r3, #4
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e07a      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006db8:	2308      	movs	r3, #8
 8006dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dbe:	e076      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006dc0:	2310      	movs	r3, #16
 8006dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dc6:	e072      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a35      	ldr	r2, [pc, #212]	; (8006ea4 <UART_SetConfig+0x2f4>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d12a      	bne.n	8006e28 <UART_SetConfig+0x278>
 8006dd2:	4b30      	ldr	r3, [pc, #192]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006dd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dd8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ddc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de0:	d01a      	beq.n	8006e18 <UART_SetConfig+0x268>
 8006de2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006de6:	d81b      	bhi.n	8006e20 <UART_SetConfig+0x270>
 8006de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006dec:	d00c      	beq.n	8006e08 <UART_SetConfig+0x258>
 8006dee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006df2:	d815      	bhi.n	8006e20 <UART_SetConfig+0x270>
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d003      	beq.n	8006e00 <UART_SetConfig+0x250>
 8006df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfc:	d008      	beq.n	8006e10 <UART_SetConfig+0x260>
 8006dfe:	e00f      	b.n	8006e20 <UART_SetConfig+0x270>
 8006e00:	2300      	movs	r3, #0
 8006e02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e06:	e052      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0e:	e04e      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e10:	2304      	movs	r3, #4
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e16:	e04a      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e18:	2308      	movs	r3, #8
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e1e:	e046      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e20:	2310      	movs	r3, #16
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e26:	e042      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a17      	ldr	r2, [pc, #92]	; (8006e8c <UART_SetConfig+0x2dc>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d13a      	bne.n	8006ea8 <UART_SetConfig+0x2f8>
 8006e32:	4b18      	ldr	r3, [pc, #96]	; (8006e94 <UART_SetConfig+0x2e4>)
 8006e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006e3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e40:	d01a      	beq.n	8006e78 <UART_SetConfig+0x2c8>
 8006e42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006e46:	d81b      	bhi.n	8006e80 <UART_SetConfig+0x2d0>
 8006e48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e4c:	d00c      	beq.n	8006e68 <UART_SetConfig+0x2b8>
 8006e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e52:	d815      	bhi.n	8006e80 <UART_SetConfig+0x2d0>
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d003      	beq.n	8006e60 <UART_SetConfig+0x2b0>
 8006e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e5c:	d008      	beq.n	8006e70 <UART_SetConfig+0x2c0>
 8006e5e:	e00f      	b.n	8006e80 <UART_SetConfig+0x2d0>
 8006e60:	2300      	movs	r3, #0
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e66:	e022      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e68:	2302      	movs	r3, #2
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e6e:	e01e      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e70:	2304      	movs	r3, #4
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e76:	e01a      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e78:	2308      	movs	r3, #8
 8006e7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e7e:	e016      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e80:	2310      	movs	r3, #16
 8006e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e86:	e012      	b.n	8006eae <UART_SetConfig+0x2fe>
 8006e88:	cfff69f3 	.word	0xcfff69f3
 8006e8c:	40008000 	.word	0x40008000
 8006e90:	40013800 	.word	0x40013800
 8006e94:	40021000 	.word	0x40021000
 8006e98:	40004400 	.word	0x40004400
 8006e9c:	40004800 	.word	0x40004800
 8006ea0:	40004c00 	.word	0x40004c00
 8006ea4:	40005000 	.word	0x40005000
 8006ea8:	2310      	movs	r3, #16
 8006eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4aae      	ldr	r2, [pc, #696]	; (800716c <UART_SetConfig+0x5bc>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	f040 8097 	bne.w	8006fe8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006eba:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ebe:	2b08      	cmp	r3, #8
 8006ec0:	d823      	bhi.n	8006f0a <UART_SetConfig+0x35a>
 8006ec2:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <UART_SetConfig+0x318>)
 8006ec4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec8:	08006eed 	.word	0x08006eed
 8006ecc:	08006f0b 	.word	0x08006f0b
 8006ed0:	08006ef5 	.word	0x08006ef5
 8006ed4:	08006f0b 	.word	0x08006f0b
 8006ed8:	08006efb 	.word	0x08006efb
 8006edc:	08006f0b 	.word	0x08006f0b
 8006ee0:	08006f0b 	.word	0x08006f0b
 8006ee4:	08006f0b 	.word	0x08006f0b
 8006ee8:	08006f03 	.word	0x08006f03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eec:	f7fc ffbe 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8006ef0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006ef2:	e010      	b.n	8006f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ef4:	4b9e      	ldr	r3, [pc, #632]	; (8007170 <UART_SetConfig+0x5c0>)
 8006ef6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006ef8:	e00d      	b.n	8006f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006efa:	f7fc ff49 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 8006efe:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f00:	e009      	b.n	8006f16 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f08:	e005      	b.n	8006f16 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006f14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f000 8130 	beq.w	800717e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f22:	4a94      	ldr	r2, [pc, #592]	; (8007174 <UART_SetConfig+0x5c4>)
 8006f24:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f28:	461a      	mov	r2, r3
 8006f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f30:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	4613      	mov	r3, r2
 8006f38:	005b      	lsls	r3, r3, #1
 8006f3a:	4413      	add	r3, r2
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d305      	bcc.n	8006f4e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	685b      	ldr	r3, [r3, #4]
 8006f46:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006f48:	69ba      	ldr	r2, [r7, #24]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d903      	bls.n	8006f56 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006f54:	e113      	b.n	800717e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	2200      	movs	r2, #0
 8006f5a:	60bb      	str	r3, [r7, #8]
 8006f5c:	60fa      	str	r2, [r7, #12]
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f62:	4a84      	ldr	r2, [pc, #528]	; (8007174 <UART_SetConfig+0x5c4>)
 8006f64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	607a      	str	r2, [r7, #4]
 8006f70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f74:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006f78:	f7f9 f9ba 	bl	80002f0 <__aeabi_uldivmod>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	460b      	mov	r3, r1
 8006f80:	4610      	mov	r0, r2
 8006f82:	4619      	mov	r1, r3
 8006f84:	f04f 0200 	mov.w	r2, #0
 8006f88:	f04f 0300 	mov.w	r3, #0
 8006f8c:	020b      	lsls	r3, r1, #8
 8006f8e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006f92:	0202      	lsls	r2, r0, #8
 8006f94:	6979      	ldr	r1, [r7, #20]
 8006f96:	6849      	ldr	r1, [r1, #4]
 8006f98:	0849      	lsrs	r1, r1, #1
 8006f9a:	2000      	movs	r0, #0
 8006f9c:	460c      	mov	r4, r1
 8006f9e:	4605      	mov	r5, r0
 8006fa0:	eb12 0804 	adds.w	r8, r2, r4
 8006fa4:	eb43 0905 	adc.w	r9, r3, r5
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	2200      	movs	r2, #0
 8006fae:	469a      	mov	sl, r3
 8006fb0:	4693      	mov	fp, r2
 8006fb2:	4652      	mov	r2, sl
 8006fb4:	465b      	mov	r3, fp
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	4649      	mov	r1, r9
 8006fba:	f7f9 f999 	bl	80002f0 <__aeabi_uldivmod>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	460b      	mov	r3, r1
 8006fc2:	4613      	mov	r3, r2
 8006fc4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fcc:	d308      	bcc.n	8006fe0 <UART_SetConfig+0x430>
 8006fce:	6a3b      	ldr	r3, [r7, #32]
 8006fd0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fd4:	d204      	bcs.n	8006fe0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	6a3a      	ldr	r2, [r7, #32]
 8006fdc:	60da      	str	r2, [r3, #12]
 8006fde:	e0ce      	b.n	800717e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006fe6:	e0ca      	b.n	800717e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	69db      	ldr	r3, [r3, #28]
 8006fec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ff0:	d166      	bne.n	80070c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006ff2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006ff6:	2b08      	cmp	r3, #8
 8006ff8:	d827      	bhi.n	800704a <UART_SetConfig+0x49a>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <UART_SetConfig+0x450>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	0800704b 	.word	0x0800704b
 8007010:	0800703b 	.word	0x0800703b
 8007014:	0800704b 	.word	0x0800704b
 8007018:	0800704b 	.word	0x0800704b
 800701c:	0800704b 	.word	0x0800704b
 8007020:	08007043 	.word	0x08007043
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007024:	f7fc ff22 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 8007028:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800702a:	e014      	b.n	8007056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800702c:	f7fc ff34 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8007030:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007032:	e010      	b.n	8007056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007034:	4b4e      	ldr	r3, [pc, #312]	; (8007170 <UART_SetConfig+0x5c0>)
 8007036:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007038:	e00d      	b.n	8007056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800703a:	f7fc fea9 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 800703e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007040:	e009      	b.n	8007056 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007042:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007046:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007048:	e005      	b.n	8007056 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007054:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007058:	2b00      	cmp	r3, #0
 800705a:	f000 8090 	beq.w	800717e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007062:	4a44      	ldr	r2, [pc, #272]	; (8007174 <UART_SetConfig+0x5c4>)
 8007064:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007068:	461a      	mov	r2, r3
 800706a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800706c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007070:	005a      	lsls	r2, r3, #1
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	085b      	lsrs	r3, r3, #1
 8007078:	441a      	add	r2, r3
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007082:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007084:	6a3b      	ldr	r3, [r7, #32]
 8007086:	2b0f      	cmp	r3, #15
 8007088:	d916      	bls.n	80070b8 <UART_SetConfig+0x508>
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007090:	d212      	bcs.n	80070b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007092:	6a3b      	ldr	r3, [r7, #32]
 8007094:	b29b      	uxth	r3, r3
 8007096:	f023 030f 	bic.w	r3, r3, #15
 800709a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800709c:	6a3b      	ldr	r3, [r7, #32]
 800709e:	085b      	lsrs	r3, r3, #1
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	f003 0307 	and.w	r3, r3, #7
 80070a6:	b29a      	uxth	r2, r3
 80070a8:	8bfb      	ldrh	r3, [r7, #30]
 80070aa:	4313      	orrs	r3, r2
 80070ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	8bfa      	ldrh	r2, [r7, #30]
 80070b4:	60da      	str	r2, [r3, #12]
 80070b6:	e062      	b.n	800717e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80070b8:	2301      	movs	r3, #1
 80070ba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80070be:	e05e      	b.n	800717e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80070c0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80070c4:	2b08      	cmp	r3, #8
 80070c6:	d828      	bhi.n	800711a <UART_SetConfig+0x56a>
 80070c8:	a201      	add	r2, pc, #4	; (adr r2, 80070d0 <UART_SetConfig+0x520>)
 80070ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ce:	bf00      	nop
 80070d0:	080070f5 	.word	0x080070f5
 80070d4:	080070fd 	.word	0x080070fd
 80070d8:	08007105 	.word	0x08007105
 80070dc:	0800711b 	.word	0x0800711b
 80070e0:	0800710b 	.word	0x0800710b
 80070e4:	0800711b 	.word	0x0800711b
 80070e8:	0800711b 	.word	0x0800711b
 80070ec:	0800711b 	.word	0x0800711b
 80070f0:	08007113 	.word	0x08007113
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070f4:	f7fc feba 	bl	8003e6c <HAL_RCC_GetPCLK1Freq>
 80070f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070fa:	e014      	b.n	8007126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070fc:	f7fc fecc 	bl	8003e98 <HAL_RCC_GetPCLK2Freq>
 8007100:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007102:	e010      	b.n	8007126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007104:	4b1a      	ldr	r3, [pc, #104]	; (8007170 <UART_SetConfig+0x5c0>)
 8007106:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007108:	e00d      	b.n	8007126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800710a:	f7fc fe41 	bl	8003d90 <HAL_RCC_GetSysClockFreq>
 800710e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007110:	e009      	b.n	8007126 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007112:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8007118:	e005      	b.n	8007126 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800711a:	2300      	movs	r3, #0
 800711c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8007124:	bf00      	nop
    }

    if (pclk != 0U)
 8007126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007128:	2b00      	cmp	r3, #0
 800712a:	d028      	beq.n	800717e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007130:	4a10      	ldr	r2, [pc, #64]	; (8007174 <UART_SetConfig+0x5c4>)
 8007132:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007136:	461a      	mov	r2, r3
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	fbb3 f2f2 	udiv	r2, r3, r2
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	085b      	lsrs	r3, r3, #1
 8007144:	441a      	add	r2, r3
 8007146:	697b      	ldr	r3, [r7, #20]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	fbb2 f3f3 	udiv	r3, r2, r3
 800714e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007150:	6a3b      	ldr	r3, [r7, #32]
 8007152:	2b0f      	cmp	r3, #15
 8007154:	d910      	bls.n	8007178 <UART_SetConfig+0x5c8>
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800715c:	d20c      	bcs.n	8007178 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	b29a      	uxth	r2, r3
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	60da      	str	r2, [r3, #12]
 8007168:	e009      	b.n	800717e <UART_SetConfig+0x5ce>
 800716a:	bf00      	nop
 800716c:	40008000 	.word	0x40008000
 8007170:	00f42400 	.word	0x00f42400
 8007174:	08009938 	.word	0x08009938
      }
      else
      {
        ret = HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2201      	movs	r2, #1
 8007182:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	2201      	movs	r2, #1
 800718a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	2200      	movs	r2, #0
 8007192:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007194:	697b      	ldr	r3, [r7, #20]
 8007196:	2200      	movs	r2, #0
 8007198:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800719a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800719e:	4618      	mov	r0, r3
 80071a0:	3730      	adds	r7, #48	; 0x30
 80071a2:	46bd      	mov	sp, r7
 80071a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080071a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b083      	sub	sp, #12
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d00a      	beq.n	80071d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	685b      	ldr	r3, [r3, #4]
 80071c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	430a      	orrs	r2, r1
 80071d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071d6:	f003 0302 	and.w	r3, r3, #2
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d00a      	beq.n	80071f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	685b      	ldr	r3, [r3, #4]
 80071e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	430a      	orrs	r2, r1
 80071f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071f8:	f003 0304 	and.w	r3, r3, #4
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d00a      	beq.n	8007216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	430a      	orrs	r2, r1
 8007214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721a:	f003 0308 	and.w	r3, r3, #8
 800721e:	2b00      	cmp	r3, #0
 8007220:	d00a      	beq.n	8007238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	430a      	orrs	r2, r1
 8007236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723c:	f003 0310 	and.w	r3, r3, #16
 8007240:	2b00      	cmp	r3, #0
 8007242:	d00a      	beq.n	800725a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	689b      	ldr	r3, [r3, #8]
 800724a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	430a      	orrs	r2, r1
 8007258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800725e:	f003 0320 	and.w	r3, r3, #32
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	689b      	ldr	r3, [r3, #8]
 800726c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	430a      	orrs	r2, r1
 800727a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007284:	2b00      	cmp	r3, #0
 8007286:	d01a      	beq.n	80072be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	430a      	orrs	r2, r1
 800729c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80072a6:	d10a      	bne.n	80072be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d00a      	beq.n	80072e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	430a      	orrs	r2, r1
 80072de:	605a      	str	r2, [r3, #4]
  }
}
 80072e0:	bf00      	nop
 80072e2:	370c      	adds	r7, #12
 80072e4:	46bd      	mov	sp, r7
 80072e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ea:	4770      	bx	lr

080072ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80072ec:	b580      	push	{r7, lr}
 80072ee:	b086      	sub	sp, #24
 80072f0:	af02      	add	r7, sp, #8
 80072f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	2200      	movs	r2, #0
 80072f8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80072fc:	f7fa fbaa 	bl	8001a54 <HAL_GetTick>
 8007300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f003 0308 	and.w	r3, r3, #8
 800730c:	2b08      	cmp	r3, #8
 800730e:	d10e      	bne.n	800732e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007314:	9300      	str	r3, [sp, #0]
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 f82f 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 8007324:	4603      	mov	r3, r0
 8007326:	2b00      	cmp	r3, #0
 8007328:	d001      	beq.n	800732e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800732a:	2303      	movs	r3, #3
 800732c:	e025      	b.n	800737a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b04      	cmp	r3, #4
 800733a:	d10e      	bne.n	800735a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800733c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007340:	9300      	str	r3, [sp, #0]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	2200      	movs	r2, #0
 8007346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800734a:	6878      	ldr	r0, [r7, #4]
 800734c:	f000 f819 	bl	8007382 <UART_WaitOnFlagUntilTimeout>
 8007350:	4603      	mov	r3, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	d001      	beq.n	800735a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e00f      	b.n	800737a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007378:	2300      	movs	r3, #0
}
 800737a:	4618      	mov	r0, r3
 800737c:	3710      	adds	r7, #16
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b09c      	sub	sp, #112	; 0x70
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	603b      	str	r3, [r7, #0]
 800738e:	4613      	mov	r3, r2
 8007390:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007392:	e0a9      	b.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007394:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800739a:	f000 80a5 	beq.w	80074e8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800739e:	f7fa fb59 	bl	8001a54 <HAL_GetTick>
 80073a2:	4602      	mov	r2, r0
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	1ad3      	subs	r3, r2, r3
 80073a8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d302      	bcc.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x32>
 80073ae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d140      	bne.n	8007436 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80073bc:	e853 3f00 	ldrex	r3, [r3]
 80073c0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80073c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073c4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80073c8:	667b      	str	r3, [r7, #100]	; 0x64
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	461a      	mov	r2, r3
 80073d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80073d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073d4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80073d8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80073e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1e6      	bne.n	80073b4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	3308      	adds	r3, #8
 80073ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073f0:	e853 3f00 	ldrex	r3, [r3]
 80073f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073f8:	f023 0301 	bic.w	r3, r3, #1
 80073fc:	663b      	str	r3, [r7, #96]	; 0x60
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	3308      	adds	r3, #8
 8007404:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007406:	64ba      	str	r2, [r7, #72]	; 0x48
 8007408:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800740a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800740c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740e:	e841 2300 	strex	r3, r2, [r1]
 8007412:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007416:	2b00      	cmp	r3, #0
 8007418:	d1e5      	bne.n	80073e6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007432:	2303      	movs	r3, #3
 8007434:	e069      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f003 0304 	and.w	r3, r3, #4
 8007440:	2b00      	cmp	r3, #0
 8007442:	d051      	beq.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	69db      	ldr	r3, [r3, #28]
 800744a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800744e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007452:	d149      	bne.n	80074e8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800745c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007464:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007466:	e853 3f00 	ldrex	r3, [r3]
 800746a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007472:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	461a      	mov	r2, r3
 800747a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800747c:	637b      	str	r3, [r7, #52]	; 0x34
 800747e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007480:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007482:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007484:	e841 2300 	strex	r3, r2, [r1]
 8007488:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800748a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1e6      	bne.n	800745e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3308      	adds	r3, #8
 8007496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007498:	697b      	ldr	r3, [r7, #20]
 800749a:	e853 3f00 	ldrex	r3, [r3]
 800749e:	613b      	str	r3, [r7, #16]
   return(result);
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	f023 0301 	bic.w	r3, r3, #1
 80074a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	3308      	adds	r3, #8
 80074ae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80074b0:	623a      	str	r2, [r7, #32]
 80074b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074b4:	69f9      	ldr	r1, [r7, #28]
 80074b6:	6a3a      	ldr	r2, [r7, #32]
 80074b8:	e841 2300 	strex	r3, r2, [r1]
 80074bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074be:	69bb      	ldr	r3, [r7, #24]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d1e5      	bne.n	8007490 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2220      	movs	r2, #32
 80074c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2220      	movs	r2, #32
 80074d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80074e4:	2303      	movs	r3, #3
 80074e6:	e010      	b.n	800750a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	69da      	ldr	r2, [r3, #28]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	4013      	ands	r3, r2
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	429a      	cmp	r2, r3
 80074f6:	bf0c      	ite	eq
 80074f8:	2301      	moveq	r3, #1
 80074fa:	2300      	movne	r3, #0
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	461a      	mov	r2, r3
 8007500:	79fb      	ldrb	r3, [r7, #7]
 8007502:	429a      	cmp	r2, r3
 8007504:	f43f af46 	beq.w	8007394 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3770      	adds	r7, #112	; 0x70
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
	...

08007514 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007514:	b480      	push	{r7}
 8007516:	b0a3      	sub	sp, #140	; 0x8c
 8007518:	af00      	add	r7, sp, #0
 800751a:	60f8      	str	r0, [r7, #12]
 800751c:	60b9      	str	r1, [r7, #8]
 800751e:	4613      	mov	r3, r2
 8007520:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	68ba      	ldr	r2, [r7, #8]
 8007526:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	88fa      	ldrh	r2, [r7, #6]
 800752c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	88fa      	ldrh	r2, [r7, #6]
 8007534:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2200      	movs	r2, #0
 800753c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	689b      	ldr	r3, [r3, #8]
 8007542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007546:	d10e      	bne.n	8007566 <UART_Start_Receive_IT+0x52>
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d105      	bne.n	800755c <UART_Start_Receive_IT+0x48>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007556:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800755a:	e02d      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	22ff      	movs	r2, #255	; 0xff
 8007560:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007564:	e028      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	689b      	ldr	r3, [r3, #8]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d10d      	bne.n	800758a <UART_Start_Receive_IT+0x76>
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	691b      	ldr	r3, [r3, #16]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d104      	bne.n	8007580 <UART_Start_Receive_IT+0x6c>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	22ff      	movs	r2, #255	; 0xff
 800757a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800757e:	e01b      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	227f      	movs	r2, #127	; 0x7f
 8007584:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007588:	e016      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	689b      	ldr	r3, [r3, #8]
 800758e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007592:	d10d      	bne.n	80075b0 <UART_Start_Receive_IT+0x9c>
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	691b      	ldr	r3, [r3, #16]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d104      	bne.n	80075a6 <UART_Start_Receive_IT+0x92>
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	227f      	movs	r2, #127	; 0x7f
 80075a0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075a4:	e008      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	223f      	movs	r2, #63	; 0x3f
 80075aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075ae:	e003      	b.n	80075b8 <UART_Start_Receive_IT+0xa4>
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2222      	movs	r2, #34	; 0x22
 80075c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	3308      	adds	r3, #8
 80075ce:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075d2:	e853 3f00 	ldrex	r3, [r3]
 80075d6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80075d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075da:	f043 0301 	orr.w	r3, r3, #1
 80075de:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80075ec:	673a      	str	r2, [r7, #112]	; 0x70
 80075ee:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075f0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 80075f2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80075f4:	e841 2300 	strex	r3, r2, [r1]
 80075f8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80075fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d1e3      	bne.n	80075c8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007604:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007608:	d153      	bne.n	80076b2 <UART_Start_Receive_IT+0x19e>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007610:	88fa      	ldrh	r2, [r7, #6]
 8007612:	429a      	cmp	r2, r3
 8007614:	d34d      	bcc.n	80076b2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800761e:	d107      	bne.n	8007630 <UART_Start_Receive_IT+0x11c>
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	691b      	ldr	r3, [r3, #16]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d103      	bne.n	8007630 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4a4b      	ldr	r2, [pc, #300]	; (8007758 <UART_Start_Receive_IT+0x244>)
 800762c:	671a      	str	r2, [r3, #112]	; 0x70
 800762e:	e002      	b.n	8007636 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4a4a      	ldr	r2, [pc, #296]	; (800775c <UART_Start_Receive_IT+0x248>)
 8007634:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	2200      	movs	r2, #0
 800763a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	691b      	ldr	r3, [r3, #16]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d01a      	beq.n	800767c <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800764c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800764e:	e853 3f00 	ldrex	r3, [r3]
 8007652:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007654:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800765a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007668:	65fb      	str	r3, [r7, #92]	; 0x5c
 800766a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800766c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800766e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007670:	e841 2300 	strex	r3, r2, [r1]
 8007674:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007676:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007678:	2b00      	cmp	r3, #0
 800767a:	d1e4      	bne.n	8007646 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	3308      	adds	r3, #8
 8007682:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	e853 3f00 	ldrex	r3, [r3]
 800768a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800768c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007692:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	3308      	adds	r3, #8
 800769a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800769c:	64ba      	str	r2, [r7, #72]	; 0x48
 800769e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076a0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80076a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80076a4:	e841 2300 	strex	r3, r2, [r1]
 80076a8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80076aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d1e5      	bne.n	800767c <UART_Start_Receive_IT+0x168>
 80076b0:	e04a      	b.n	8007748 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ba:	d107      	bne.n	80076cc <UART_Start_Receive_IT+0x1b8>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a26      	ldr	r2, [pc, #152]	; (8007760 <UART_Start_Receive_IT+0x24c>)
 80076c8:	671a      	str	r2, [r3, #112]	; 0x70
 80076ca:	e002      	b.n	80076d2 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a25      	ldr	r2, [pc, #148]	; (8007764 <UART_Start_Receive_IT+0x250>)
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d019      	beq.n	8007716 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80076f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80076f6:	677b      	str	r3, [r7, #116]	; 0x74
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
 8007702:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007704:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007706:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007708:	e841 2300 	strex	r3, r2, [r1]
 800770c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	2b00      	cmp	r3, #0
 8007712:	d1e6      	bne.n	80076e2 <UART_Start_Receive_IT+0x1ce>
 8007714:	e018      	b.n	8007748 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	697b      	ldr	r3, [r7, #20]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	613b      	str	r3, [r7, #16]
   return(result);
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f043 0320 	orr.w	r3, r3, #32
 800772a:	67bb      	str	r3, [r7, #120]	; 0x78
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007734:	623b      	str	r3, [r7, #32]
 8007736:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	69f9      	ldr	r1, [r7, #28]
 800773a:	6a3a      	ldr	r2, [r7, #32]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	61bb      	str	r3, [r7, #24]
   return(result);
 8007742:	69bb      	ldr	r3, [r7, #24]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e6      	bne.n	8007716 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007748:	2300      	movs	r3, #0
}
 800774a:	4618      	mov	r0, r3
 800774c:	378c      	adds	r7, #140	; 0x8c
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	08007e71 	.word	0x08007e71
 800775c:	08007b79 	.word	0x08007b79
 8007760:	08007a17 	.word	0x08007a17
 8007764:	080078b7 	.word	0x080078b7

08007768 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b095      	sub	sp, #84	; 0x54
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007778:	e853 3f00 	ldrex	r3, [r3]
 800777c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800777e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007780:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007784:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	461a      	mov	r2, r3
 800778c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800778e:	643b      	str	r3, [r7, #64]	; 0x40
 8007790:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007792:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007794:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007796:	e841 2300 	strex	r3, r2, [r1]
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800779c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1e6      	bne.n	8007770 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3308      	adds	r3, #8
 80077a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077aa:	6a3b      	ldr	r3, [r7, #32]
 80077ac:	e853 3f00 	ldrex	r3, [r3]
 80077b0:	61fb      	str	r3, [r7, #28]
   return(result);
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80077b8:	f023 0301 	bic.w	r3, r3, #1
 80077bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	3308      	adds	r3, #8
 80077c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077c8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ce:	e841 2300 	strex	r3, r2, [r1]
 80077d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80077d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1e3      	bne.n	80077a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d118      	bne.n	8007814 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	e853 3f00 	ldrex	r3, [r3]
 80077ee:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	f023 0310 	bic.w	r3, r3, #16
 80077f6:	647b      	str	r3, [r7, #68]	; 0x44
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	461a      	mov	r2, r3
 80077fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007800:	61bb      	str	r3, [r7, #24]
 8007802:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007804:	6979      	ldr	r1, [r7, #20]
 8007806:	69ba      	ldr	r2, [r7, #24]
 8007808:	e841 2300 	strex	r3, r2, [r1]
 800780c:	613b      	str	r3, [r7, #16]
   return(result);
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d1e6      	bne.n	80077e2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2220      	movs	r2, #32
 8007818:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2200      	movs	r2, #0
 8007826:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007828:	bf00      	nop
 800782a:	3754      	adds	r7, #84	; 0x54
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007834:	b580      	push	{r7, lr}
 8007836:	b084      	sub	sp, #16
 8007838:	af00      	add	r7, sp, #0
 800783a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007840:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2200      	movs	r2, #0
 800784e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007852:	68f8      	ldr	r0, [r7, #12]
 8007854:	f7ff f996 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007858:	bf00      	nop
 800785a:	3710      	adds	r7, #16
 800785c:	46bd      	mov	sp, r7
 800785e:	bd80      	pop	{r7, pc}

08007860 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b088      	sub	sp, #32
 8007864:	af00      	add	r7, sp, #0
 8007866:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	e853 3f00 	ldrex	r3, [r3]
 8007874:	60bb      	str	r3, [r7, #8]
   return(result);
 8007876:	68bb      	ldr	r3, [r7, #8]
 8007878:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800787c:	61fb      	str	r3, [r7, #28]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	461a      	mov	r2, r3
 8007884:	69fb      	ldr	r3, [r7, #28]
 8007886:	61bb      	str	r3, [r7, #24]
 8007888:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788a:	6979      	ldr	r1, [r7, #20]
 800788c:	69ba      	ldr	r2, [r7, #24]
 800788e:	e841 2300 	strex	r3, r2, [r1]
 8007892:	613b      	str	r3, [r7, #16]
   return(result);
 8007894:	693b      	ldr	r3, [r7, #16]
 8007896:	2b00      	cmp	r3, #0
 8007898:	d1e6      	bne.n	8007868 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2220      	movs	r2, #32
 800789e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2200      	movs	r2, #0
 80078a6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f7ff f961 	bl	8006b70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ae:	bf00      	nop
 80078b0:	3720      	adds	r7, #32
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b096      	sub	sp, #88	; 0x58
 80078ba:	af00      	add	r7, sp, #0
 80078bc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80078c4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078ce:	2b22      	cmp	r3, #34	; 0x22
 80078d0:	f040 8095 	bne.w	80079fe <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078da:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80078de:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80078e2:	b2d9      	uxtb	r1, r3
 80078e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80078e8:	b2da      	uxtb	r2, r3
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078ee:	400a      	ands	r2, r1
 80078f0:	b2d2      	uxtb	r2, r2
 80078f2:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f8:	1c5a      	adds	r2, r3, #1
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007904:	b29b      	uxth	r3, r3
 8007906:	3b01      	subs	r3, #1
 8007908:	b29a      	uxth	r2, r3
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d178      	bne.n	8007a0e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007924:	e853 3f00 	ldrex	r3, [r3]
 8007928:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800792a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800792c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007930:	653b      	str	r3, [r7, #80]	; 0x50
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	461a      	mov	r2, r3
 8007938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800793a:	647b      	str	r3, [r7, #68]	; 0x44
 800793c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007940:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d1e6      	bne.n	800791c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007958:	e853 3f00 	ldrex	r3, [r3]
 800795c:	623b      	str	r3, [r7, #32]
   return(result);
 800795e:	6a3b      	ldr	r3, [r7, #32]
 8007960:	f023 0301 	bic.w	r3, r3, #1
 8007964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	3308      	adds	r3, #8
 800796c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800796e:	633a      	str	r2, [r7, #48]	; 0x30
 8007970:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007972:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007974:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007976:	e841 2300 	strex	r3, r2, [r1]
 800797a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800797c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1e5      	bne.n	800794e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2220      	movs	r2, #32
 8007986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007994:	2b01      	cmp	r3, #1
 8007996:	d12e      	bne.n	80079f6 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2200      	movs	r2, #0
 800799c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	e853 3f00 	ldrex	r3, [r3]
 80079aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f023 0310 	bic.w	r3, r3, #16
 80079b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	461a      	mov	r2, r3
 80079ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079bc:	61fb      	str	r3, [r7, #28]
 80079be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079c0:	69b9      	ldr	r1, [r7, #24]
 80079c2:	69fa      	ldr	r2, [r7, #28]
 80079c4:	e841 2300 	strex	r3, r2, [r1]
 80079c8:	617b      	str	r3, [r7, #20]
   return(result);
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d1e6      	bne.n	800799e <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	69db      	ldr	r3, [r3, #28]
 80079d6:	f003 0310 	and.w	r3, r3, #16
 80079da:	2b10      	cmp	r3, #16
 80079dc:	d103      	bne.n	80079e6 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	2210      	movs	r2, #16
 80079e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079ec:	4619      	mov	r1, r3
 80079ee:	6878      	ldr	r0, [r7, #4]
 80079f0:	f7ff f8d2 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80079f4:	e00b      	b.n	8007a0e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f7f9 fada 	bl	8000fb0 <HAL_UART_RxCpltCallback>
}
 80079fc:	e007      	b.n	8007a0e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	699a      	ldr	r2, [r3, #24]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f042 0208 	orr.w	r2, r2, #8
 8007a0c:	619a      	str	r2, [r3, #24]
}
 8007a0e:	bf00      	nop
 8007a10:	3758      	adds	r7, #88	; 0x58
 8007a12:	46bd      	mov	sp, r7
 8007a14:	bd80      	pop	{r7, pc}

08007a16 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007a16:	b580      	push	{r7, lr}
 8007a18:	b096      	sub	sp, #88	; 0x58
 8007a1a:	af00      	add	r7, sp, #0
 8007a1c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007a24:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a2e:	2b22      	cmp	r3, #34	; 0x22
 8007a30:	f040 8095 	bne.w	8007b5e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a3a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a42:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007a44:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007a48:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	b29a      	uxth	r2, r3
 8007a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a52:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a58:	1c9a      	adds	r2, r3, #2
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	3b01      	subs	r3, #1
 8007a68:	b29a      	uxth	r2, r3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d178      	bne.n	8007b6e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a84:	e853 3f00 	ldrex	r3, [r3]
 8007a88:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a90:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	461a      	mov	r2, r3
 8007a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a9a:	643b      	str	r3, [r7, #64]	; 0x40
 8007a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a9e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aa0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007aa2:	e841 2300 	strex	r3, r2, [r1]
 8007aa6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d1e6      	bne.n	8007a7c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3308      	adds	r3, #8
 8007ab4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab6:	6a3b      	ldr	r3, [r7, #32]
 8007ab8:	e853 3f00 	ldrex	r3, [r3]
 8007abc:	61fb      	str	r3, [r7, #28]
   return(result);
 8007abe:	69fb      	ldr	r3, [r7, #28]
 8007ac0:	f023 0301 	bic.w	r3, r3, #1
 8007ac4:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	3308      	adds	r3, #8
 8007acc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ace:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ad0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e5      	bne.n	8007aae <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d12e      	bne.n	8007b56 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	e853 3f00 	ldrex	r3, [r3]
 8007b0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	f023 0310 	bic.w	r3, r3, #16
 8007b12:	647b      	str	r3, [r7, #68]	; 0x44
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	461a      	mov	r2, r3
 8007b1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b1c:	61bb      	str	r3, [r7, #24]
 8007b1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b20:	6979      	ldr	r1, [r7, #20]
 8007b22:	69ba      	ldr	r2, [r7, #24]
 8007b24:	e841 2300 	strex	r3, r2, [r1]
 8007b28:	613b      	str	r3, [r7, #16]
   return(result);
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d1e6      	bne.n	8007afe <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69db      	ldr	r3, [r3, #28]
 8007b36:	f003 0310 	and.w	r3, r3, #16
 8007b3a:	2b10      	cmp	r3, #16
 8007b3c:	d103      	bne.n	8007b46 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2210      	movs	r2, #16
 8007b44:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f7ff f822 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b54:	e00b      	b.n	8007b6e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007b56:	6878      	ldr	r0, [r7, #4]
 8007b58:	f7f9 fa2a 	bl	8000fb0 <HAL_UART_RxCpltCallback>
}
 8007b5c:	e007      	b.n	8007b6e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	699a      	ldr	r2, [r3, #24]
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f042 0208 	orr.w	r2, r2, #8
 8007b6c:	619a      	str	r2, [r3, #24]
}
 8007b6e:	bf00      	nop
 8007b70:	3758      	adds	r7, #88	; 0x58
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}
	...

08007b78 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b0a6      	sub	sp, #152	; 0x98
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007b86:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	69db      	ldr	r3, [r3, #28]
 8007b90:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bae:	2b22      	cmp	r3, #34	; 0x22
 8007bb0:	f040 814f 	bne.w	8007e52 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007bba:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007bbe:	e0f6      	b.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bca:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007bce:	b2d9      	uxtb	r1, r3
 8007bd0:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bda:	400a      	ands	r2, r1
 8007bdc:	b2d2      	uxtb	r2, r2
 8007bde:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	3b01      	subs	r3, #1
 8007bf4:	b29a      	uxth	r2, r3
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	69db      	ldr	r3, [r3, #28]
 8007c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007c06:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c0a:	f003 0307 	and.w	r3, r3, #7
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d053      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007c12:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c16:	f003 0301 	and.w	r3, r3, #1
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d011      	beq.n	8007c42 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007c1e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007c22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00b      	beq.n	8007c42 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	2201      	movs	r2, #1
 8007c30:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c38:	f043 0201 	orr.w	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c46:	f003 0302 	and.w	r3, r3, #2
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d011      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007c4e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c52:	f003 0301 	and.w	r3, r3, #1
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d00b      	beq.n	8007c72 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2202      	movs	r2, #2
 8007c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c68:	f043 0204 	orr.w	r2, r3, #4
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007c76:	f003 0304 	and.w	r3, r3, #4
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d011      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007c82:	f003 0301 	and.w	r3, r3, #1
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d00b      	beq.n	8007ca2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2204      	movs	r2, #4
 8007c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c98:	f043 0202 	orr.w	r2, r3, #2
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d006      	beq.n	8007cba <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cac:	6878      	ldr	r0, [r7, #4]
 8007cae:	f7fe ff69 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d173      	bne.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ccc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007cce:	e853 3f00 	ldrex	r3, [r3]
 8007cd2:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007cd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007cd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cda:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007ce8:	66bb      	str	r3, [r7, #104]	; 0x68
 8007cea:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cec:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007cee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007cf0:	e841 2300 	strex	r3, r2, [r1]
 8007cf4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007cf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d1e4      	bne.n	8007cc6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	3308      	adds	r3, #8
 8007d02:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d06:	e853 3f00 	ldrex	r3, [r3]
 8007d0a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d12:	f023 0301 	bic.w	r3, r3, #1
 8007d16:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	3308      	adds	r3, #8
 8007d1e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007d20:	657a      	str	r2, [r7, #84]	; 0x54
 8007d22:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d24:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007d26:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007d28:	e841 2300 	strex	r3, r2, [r1]
 8007d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d1e3      	bne.n	8007cfc <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	2220      	movs	r2, #32
 8007d38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d46:	2b01      	cmp	r3, #1
 8007d48:	d12e      	bne.n	8007da8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d58:	e853 3f00 	ldrex	r3, [r3]
 8007d5c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d60:	f023 0310 	bic.w	r3, r3, #16
 8007d64:	67bb      	str	r3, [r7, #120]	; 0x78
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	461a      	mov	r2, r3
 8007d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d6e:	643b      	str	r3, [r7, #64]	; 0x40
 8007d70:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d72:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d74:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d76:	e841 2300 	strex	r3, r2, [r1]
 8007d7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d1e6      	bne.n	8007d50 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69db      	ldr	r3, [r3, #28]
 8007d88:	f003 0310 	and.w	r3, r3, #16
 8007d8c:	2b10      	cmp	r3, #16
 8007d8e:	d103      	bne.n	8007d98 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	2210      	movs	r2, #16
 8007d96:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d9e:	4619      	mov	r1, r3
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7fe fef9 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
 8007da6:	e002      	b.n	8007dae <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f7f9 f901 	bl	8000fb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dae:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d006      	beq.n	8007dc4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007db6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007dba:	f003 0320 	and.w	r3, r3, #32
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f47f aefe 	bne.w	8007bc0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007dca:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007dce:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d045      	beq.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007ddc:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007de0:	429a      	cmp	r2, r3
 8007de2:	d23e      	bcs.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	3308      	adds	r3, #8
 8007dea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dec:	6a3b      	ldr	r3, [r7, #32]
 8007dee:	e853 3f00 	ldrex	r3, [r3]
 8007df2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	3308      	adds	r3, #8
 8007e02:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007e04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e08:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007e0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e0c:	e841 2300 	strex	r3, r2, [r1]
 8007e10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d1e5      	bne.n	8007de4 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a14      	ldr	r2, [pc, #80]	; (8007e6c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8007e1c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	e853 3f00 	ldrex	r3, [r3]
 8007e2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	f043 0320 	orr.w	r3, r3, #32
 8007e32:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	461a      	mov	r2, r3
 8007e3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e3c:	61bb      	str	r3, [r7, #24]
 8007e3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e40:	6979      	ldr	r1, [r7, #20]
 8007e42:	69ba      	ldr	r2, [r7, #24]
 8007e44:	e841 2300 	strex	r3, r2, [r1]
 8007e48:	613b      	str	r3, [r7, #16]
   return(result);
 8007e4a:	693b      	ldr	r3, [r7, #16]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d1e6      	bne.n	8007e1e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e50:	e007      	b.n	8007e62 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0208 	orr.w	r2, r2, #8
 8007e60:	619a      	str	r2, [r3, #24]
}
 8007e62:	bf00      	nop
 8007e64:	3798      	adds	r7, #152	; 0x98
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	080078b7 	.word	0x080078b7

08007e70 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b0a8      	sub	sp, #160	; 0xa0
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007e7e:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	69db      	ldr	r3, [r3, #28]
 8007e88:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	689b      	ldr	r3, [r3, #8]
 8007e9c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ea6:	2b22      	cmp	r3, #34	; 0x22
 8007ea8:	f040 8153 	bne.w	8008152 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007eb2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007eb6:	e0fa      	b.n	80080ae <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ebe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ec6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007eca:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007ece:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007ed2:	4013      	ands	r3, r2
 8007ed4:	b29a      	uxth	r2, r3
 8007ed6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007eda:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ee0:	1c9a      	adds	r2, r3, #2
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007eec:	b29b      	uxth	r3, r3
 8007eee:	3b01      	subs	r3, #1
 8007ef0:	b29a      	uxth	r2, r3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	69db      	ldr	r3, [r3, #28]
 8007efe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f02:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d053      	beq.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f0e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f12:	f003 0301 	and.w	r3, r3, #1
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d011      	beq.n	8007f3e <UART_RxISR_16BIT_FIFOEN+0xce>
 8007f1a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00b      	beq.n	8007f3e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f34:	f043 0201 	orr.w	r2, r3, #1
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f42:	f003 0302 	and.w	r3, r3, #2
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d011      	beq.n	8007f6e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007f4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00b      	beq.n	8007f6e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	2202      	movs	r2, #2
 8007f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f64:	f043 0204 	orr.w	r2, r3, #4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007f72:	f003 0304 	and.w	r3, r3, #4
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d011      	beq.n	8007f9e <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007f7e:	f003 0301 	and.w	r3, r3, #1
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	2204      	movs	r2, #4
 8007f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f94:	f043 0202 	orr.w	r2, r3, #2
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d006      	beq.n	8007fb6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7fe fdeb 	bl	8006b84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2200      	movs	r2, #0
 8007fb2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d175      	bne.n	80080ae <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007fca:	e853 3f00 	ldrex	r3, [r3]
 8007fce:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007fd0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007fd2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007fd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	461a      	mov	r2, r3
 8007fe0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007fe4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007fe6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fe8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007fea:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fec:	e841 2300 	strex	r3, r2, [r1]
 8007ff0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007ff2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d1e4      	bne.n	8007fc2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008000:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008002:	e853 3f00 	ldrex	r3, [r3]
 8008006:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008008:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800800a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800800e:	f023 0301 	bic.w	r3, r3, #1
 8008012:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	3308      	adds	r3, #8
 800801c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008020:	65ba      	str	r2, [r7, #88]	; 0x58
 8008022:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008024:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008026:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008028:	e841 2300 	strex	r3, r2, [r1]
 800802c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800802e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008030:	2b00      	cmp	r3, #0
 8008032:	d1e1      	bne.n	8007ff8 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	2220      	movs	r2, #32
 8008038:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2200      	movs	r2, #0
 8008040:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008046:	2b01      	cmp	r3, #1
 8008048:	d12e      	bne.n	80080a8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2200      	movs	r2, #0
 800804e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	e853 3f00 	ldrex	r3, [r3]
 800805c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800805e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008060:	f023 0310 	bic.w	r3, r3, #16
 8008064:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	461a      	mov	r2, r3
 800806c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800806e:	647b      	str	r3, [r7, #68]	; 0x44
 8008070:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008072:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008074:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008076:	e841 2300 	strex	r3, r2, [r1]
 800807a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800807c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1e6      	bne.n	8008050 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69db      	ldr	r3, [r3, #28]
 8008088:	f003 0310 	and.w	r3, r3, #16
 800808c:	2b10      	cmp	r3, #16
 800808e:	d103      	bne.n	8008098 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2210      	movs	r2, #16
 8008096:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800809e:	4619      	mov	r1, r3
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f7fe fd79 	bl	8006b98 <HAL_UARTEx_RxEventCallback>
 80080a6:	e002      	b.n	80080ae <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80080a8:	6878      	ldr	r0, [r7, #4]
 80080aa:	f7f8 ff81 	bl	8000fb0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80080ae:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d006      	beq.n	80080c4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80080b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80080ba:	f003 0320 	and.w	r3, r3, #32
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f47f aefa 	bne.w	8007eb8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80080ca:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80080ce:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d045      	beq.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80080dc:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 80080e0:	429a      	cmp	r2, r3
 80080e2:	d23e      	bcs.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	3308      	adds	r3, #8
 80080ea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080ee:	e853 3f00 	ldrex	r3, [r3]
 80080f2:	623b      	str	r3, [r7, #32]
   return(result);
 80080f4:	6a3b      	ldr	r3, [r7, #32]
 80080f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080fa:	677b      	str	r3, [r7, #116]	; 0x74
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	3308      	adds	r3, #8
 8008102:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008104:	633a      	str	r2, [r7, #48]	; 0x30
 8008106:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008108:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800810a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800810c:	e841 2300 	strex	r3, r2, [r1]
 8008110:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	2b00      	cmp	r3, #0
 8008116:	d1e5      	bne.n	80080e4 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	4a14      	ldr	r2, [pc, #80]	; (800816c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800811c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	e853 3f00 	ldrex	r3, [r3]
 800812a:	60fb      	str	r3, [r7, #12]
   return(result);
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	f043 0320 	orr.w	r3, r3, #32
 8008132:	673b      	str	r3, [r7, #112]	; 0x70
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800813c:	61fb      	str	r3, [r7, #28]
 800813e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008140:	69b9      	ldr	r1, [r7, #24]
 8008142:	69fa      	ldr	r2, [r7, #28]
 8008144:	e841 2300 	strex	r3, r2, [r1]
 8008148:	617b      	str	r3, [r7, #20]
   return(result);
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1e6      	bne.n	800811e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008150:	e007      	b.n	8008162 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	699a      	ldr	r2, [r3, #24]
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0208 	orr.w	r2, r2, #8
 8008160:	619a      	str	r2, [r3, #24]
}
 8008162:	bf00      	nop
 8008164:	37a0      	adds	r7, #160	; 0xa0
 8008166:	46bd      	mov	sp, r7
 8008168:	bd80      	pop	{r7, pc}
 800816a:	bf00      	nop
 800816c:	08007a17 	.word	0x08007a17

08008170 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008170:	b480      	push	{r7}
 8008172:	b083      	sub	sp, #12
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008178:	bf00      	nop
 800817a:	370c      	adds	r7, #12
 800817c:	46bd      	mov	sp, r7
 800817e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008182:	4770      	bx	lr

08008184 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008184:	b480      	push	{r7}
 8008186:	b083      	sub	sp, #12
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800818c:	bf00      	nop
 800818e:	370c      	adds	r7, #12
 8008190:	46bd      	mov	sp, r7
 8008192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008196:	4770      	bx	lr

08008198 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008198:	b480      	push	{r7}
 800819a:	b083      	sub	sp, #12
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80081a0:	bf00      	nop
 80081a2:	370c      	adds	r7, #12
 80081a4:	46bd      	mov	sp, r7
 80081a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081aa:	4770      	bx	lr

080081ac <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b085      	sub	sp, #20
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80081ba:	2b01      	cmp	r3, #1
 80081bc:	d101      	bne.n	80081c2 <HAL_UARTEx_DisableFifoMode+0x16>
 80081be:	2302      	movs	r3, #2
 80081c0:	e027      	b.n	8008212 <HAL_UARTEx_DisableFifoMode+0x66>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	2201      	movs	r2, #1
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2224      	movs	r2, #36	; 0x24
 80081ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f022 0201 	bic.w	r2, r2, #1
 80081e8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80081f0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	2200      	movs	r2, #0
 80081f6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	68fa      	ldr	r2, [r7, #12]
 80081fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	2220      	movs	r2, #32
 8008204:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008210:	2300      	movs	r3, #0
}
 8008212:	4618      	mov	r0, r3
 8008214:	3714      	adds	r7, #20
 8008216:	46bd      	mov	sp, r7
 8008218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821c:	4770      	bx	lr

0800821e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
 8008226:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800822e:	2b01      	cmp	r3, #1
 8008230:	d101      	bne.n	8008236 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008232:	2302      	movs	r3, #2
 8008234:	e02d      	b.n	8008292 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2224      	movs	r2, #36	; 0x24
 8008242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681a      	ldr	r2, [r3, #0]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	f022 0201 	bic.w	r2, r2, #1
 800825c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	689b      	ldr	r3, [r3, #8]
 8008264:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	683a      	ldr	r2, [r7, #0]
 800826e:	430a      	orrs	r2, r1
 8008270:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f850 	bl	8008318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2220      	movs	r2, #32
 8008284:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2200      	movs	r2, #0
 800828c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008290:	2300      	movs	r3, #0
}
 8008292:	4618      	mov	r0, r3
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
 80082a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082aa:	2b01      	cmp	r3, #1
 80082ac:	d101      	bne.n	80082b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082ae:	2302      	movs	r3, #2
 80082b0:	e02d      	b.n	800830e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2224      	movs	r2, #36	; 0x24
 80082be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	681a      	ldr	r2, [r3, #0]
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f022 0201 	bic.w	r2, r2, #1
 80082d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	689b      	ldr	r3, [r3, #8]
 80082e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	683a      	ldr	r2, [r7, #0]
 80082ea:	430a      	orrs	r2, r1
 80082ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f000 f812 	bl	8008318 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	68fa      	ldr	r2, [r7, #12]
 80082fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	2200      	movs	r2, #0
 8008308:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800830c:	2300      	movs	r3, #0
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}
	...

08008318 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008318:	b480      	push	{r7}
 800831a:	b085      	sub	sp, #20
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008324:	2b00      	cmp	r3, #0
 8008326:	d108      	bne.n	800833a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	2201      	movs	r2, #1
 800832c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2201      	movs	r2, #1
 8008334:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008338:	e031      	b.n	800839e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800833a:	2308      	movs	r3, #8
 800833c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800833e:	2308      	movs	r3, #8
 8008340:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	0e5b      	lsrs	r3, r3, #25
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0307 	and.w	r3, r3, #7
 8008350:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	689b      	ldr	r3, [r3, #8]
 8008358:	0f5b      	lsrs	r3, r3, #29
 800835a:	b2db      	uxtb	r3, r3
 800835c:	f003 0307 	and.w	r3, r3, #7
 8008360:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008362:	7bbb      	ldrb	r3, [r7, #14]
 8008364:	7b3a      	ldrb	r2, [r7, #12]
 8008366:	4911      	ldr	r1, [pc, #68]	; (80083ac <UARTEx_SetNbDataToProcess+0x94>)
 8008368:	5c8a      	ldrb	r2, [r1, r2]
 800836a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800836e:	7b3a      	ldrb	r2, [r7, #12]
 8008370:	490f      	ldr	r1, [pc, #60]	; (80083b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008372:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008374:	fb93 f3f2 	sdiv	r3, r3, r2
 8008378:	b29a      	uxth	r2, r3
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008380:	7bfb      	ldrb	r3, [r7, #15]
 8008382:	7b7a      	ldrb	r2, [r7, #13]
 8008384:	4909      	ldr	r1, [pc, #36]	; (80083ac <UARTEx_SetNbDataToProcess+0x94>)
 8008386:	5c8a      	ldrb	r2, [r1, r2]
 8008388:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800838c:	7b7a      	ldrb	r2, [r7, #13]
 800838e:	4908      	ldr	r1, [pc, #32]	; (80083b0 <UARTEx_SetNbDataToProcess+0x98>)
 8008390:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008392:	fb93 f3f2 	sdiv	r3, r3, r2
 8008396:	b29a      	uxth	r2, r3
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800839e:	bf00      	nop
 80083a0:	3714      	adds	r7, #20
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	08009950 	.word	0x08009950
 80083b0:	08009958 	.word	0x08009958

080083b4 <atoi>:
 80083b4:	220a      	movs	r2, #10
 80083b6:	2100      	movs	r1, #0
 80083b8:	f000 b882 	b.w	80084c0 <strtol>

080083bc <_strtol_l.constprop.0>:
 80083bc:	2b01      	cmp	r3, #1
 80083be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083c2:	d001      	beq.n	80083c8 <_strtol_l.constprop.0+0xc>
 80083c4:	2b24      	cmp	r3, #36	; 0x24
 80083c6:	d906      	bls.n	80083d6 <_strtol_l.constprop.0+0x1a>
 80083c8:	f000 fa56 	bl	8008878 <__errno>
 80083cc:	2316      	movs	r3, #22
 80083ce:	6003      	str	r3, [r0, #0]
 80083d0:	2000      	movs	r0, #0
 80083d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80084bc <_strtol_l.constprop.0+0x100>
 80083da:	460d      	mov	r5, r1
 80083dc:	462e      	mov	r6, r5
 80083de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80083e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80083e6:	f017 0708 	ands.w	r7, r7, #8
 80083ea:	d1f7      	bne.n	80083dc <_strtol_l.constprop.0+0x20>
 80083ec:	2c2d      	cmp	r4, #45	; 0x2d
 80083ee:	d132      	bne.n	8008456 <_strtol_l.constprop.0+0x9a>
 80083f0:	782c      	ldrb	r4, [r5, #0]
 80083f2:	2701      	movs	r7, #1
 80083f4:	1cb5      	adds	r5, r6, #2
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d05b      	beq.n	80084b2 <_strtol_l.constprop.0+0xf6>
 80083fa:	2b10      	cmp	r3, #16
 80083fc:	d109      	bne.n	8008412 <_strtol_l.constprop.0+0x56>
 80083fe:	2c30      	cmp	r4, #48	; 0x30
 8008400:	d107      	bne.n	8008412 <_strtol_l.constprop.0+0x56>
 8008402:	782c      	ldrb	r4, [r5, #0]
 8008404:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008408:	2c58      	cmp	r4, #88	; 0x58
 800840a:	d14d      	bne.n	80084a8 <_strtol_l.constprop.0+0xec>
 800840c:	786c      	ldrb	r4, [r5, #1]
 800840e:	2310      	movs	r3, #16
 8008410:	3502      	adds	r5, #2
 8008412:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008416:	f108 38ff 	add.w	r8, r8, #4294967295
 800841a:	f04f 0e00 	mov.w	lr, #0
 800841e:	fbb8 f9f3 	udiv	r9, r8, r3
 8008422:	4676      	mov	r6, lr
 8008424:	fb03 8a19 	mls	sl, r3, r9, r8
 8008428:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800842c:	f1bc 0f09 	cmp.w	ip, #9
 8008430:	d816      	bhi.n	8008460 <_strtol_l.constprop.0+0xa4>
 8008432:	4664      	mov	r4, ip
 8008434:	42a3      	cmp	r3, r4
 8008436:	dd24      	ble.n	8008482 <_strtol_l.constprop.0+0xc6>
 8008438:	f1be 3fff 	cmp.w	lr, #4294967295
 800843c:	d008      	beq.n	8008450 <_strtol_l.constprop.0+0x94>
 800843e:	45b1      	cmp	r9, r6
 8008440:	d31c      	bcc.n	800847c <_strtol_l.constprop.0+0xc0>
 8008442:	d101      	bne.n	8008448 <_strtol_l.constprop.0+0x8c>
 8008444:	45a2      	cmp	sl, r4
 8008446:	db19      	blt.n	800847c <_strtol_l.constprop.0+0xc0>
 8008448:	fb06 4603 	mla	r6, r6, r3, r4
 800844c:	f04f 0e01 	mov.w	lr, #1
 8008450:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008454:	e7e8      	b.n	8008428 <_strtol_l.constprop.0+0x6c>
 8008456:	2c2b      	cmp	r4, #43	; 0x2b
 8008458:	bf04      	itt	eq
 800845a:	782c      	ldrbeq	r4, [r5, #0]
 800845c:	1cb5      	addeq	r5, r6, #2
 800845e:	e7ca      	b.n	80083f6 <_strtol_l.constprop.0+0x3a>
 8008460:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008464:	f1bc 0f19 	cmp.w	ip, #25
 8008468:	d801      	bhi.n	800846e <_strtol_l.constprop.0+0xb2>
 800846a:	3c37      	subs	r4, #55	; 0x37
 800846c:	e7e2      	b.n	8008434 <_strtol_l.constprop.0+0x78>
 800846e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008472:	f1bc 0f19 	cmp.w	ip, #25
 8008476:	d804      	bhi.n	8008482 <_strtol_l.constprop.0+0xc6>
 8008478:	3c57      	subs	r4, #87	; 0x57
 800847a:	e7db      	b.n	8008434 <_strtol_l.constprop.0+0x78>
 800847c:	f04f 3eff 	mov.w	lr, #4294967295
 8008480:	e7e6      	b.n	8008450 <_strtol_l.constprop.0+0x94>
 8008482:	f1be 3fff 	cmp.w	lr, #4294967295
 8008486:	d105      	bne.n	8008494 <_strtol_l.constprop.0+0xd8>
 8008488:	2322      	movs	r3, #34	; 0x22
 800848a:	6003      	str	r3, [r0, #0]
 800848c:	4646      	mov	r6, r8
 800848e:	b942      	cbnz	r2, 80084a2 <_strtol_l.constprop.0+0xe6>
 8008490:	4630      	mov	r0, r6
 8008492:	e79e      	b.n	80083d2 <_strtol_l.constprop.0+0x16>
 8008494:	b107      	cbz	r7, 8008498 <_strtol_l.constprop.0+0xdc>
 8008496:	4276      	negs	r6, r6
 8008498:	2a00      	cmp	r2, #0
 800849a:	d0f9      	beq.n	8008490 <_strtol_l.constprop.0+0xd4>
 800849c:	f1be 0f00 	cmp.w	lr, #0
 80084a0:	d000      	beq.n	80084a4 <_strtol_l.constprop.0+0xe8>
 80084a2:	1e69      	subs	r1, r5, #1
 80084a4:	6011      	str	r1, [r2, #0]
 80084a6:	e7f3      	b.n	8008490 <_strtol_l.constprop.0+0xd4>
 80084a8:	2430      	movs	r4, #48	; 0x30
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d1b1      	bne.n	8008412 <_strtol_l.constprop.0+0x56>
 80084ae:	2308      	movs	r3, #8
 80084b0:	e7af      	b.n	8008412 <_strtol_l.constprop.0+0x56>
 80084b2:	2c30      	cmp	r4, #48	; 0x30
 80084b4:	d0a5      	beq.n	8008402 <_strtol_l.constprop.0+0x46>
 80084b6:	230a      	movs	r3, #10
 80084b8:	e7ab      	b.n	8008412 <_strtol_l.constprop.0+0x56>
 80084ba:	bf00      	nop
 80084bc:	08009961 	.word	0x08009961

080084c0 <strtol>:
 80084c0:	4613      	mov	r3, r2
 80084c2:	460a      	mov	r2, r1
 80084c4:	4601      	mov	r1, r0
 80084c6:	4802      	ldr	r0, [pc, #8]	; (80084d0 <strtol+0x10>)
 80084c8:	6800      	ldr	r0, [r0, #0]
 80084ca:	f7ff bf77 	b.w	80083bc <_strtol_l.constprop.0>
 80084ce:	bf00      	nop
 80084d0:	20000124 	.word	0x20000124

080084d4 <std>:
 80084d4:	2300      	movs	r3, #0
 80084d6:	b510      	push	{r4, lr}
 80084d8:	4604      	mov	r4, r0
 80084da:	e9c0 3300 	strd	r3, r3, [r0]
 80084de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084e2:	6083      	str	r3, [r0, #8]
 80084e4:	8181      	strh	r1, [r0, #12]
 80084e6:	6643      	str	r3, [r0, #100]	; 0x64
 80084e8:	81c2      	strh	r2, [r0, #14]
 80084ea:	6183      	str	r3, [r0, #24]
 80084ec:	4619      	mov	r1, r3
 80084ee:	2208      	movs	r2, #8
 80084f0:	305c      	adds	r0, #92	; 0x5c
 80084f2:	f000 f916 	bl	8008722 <memset>
 80084f6:	4b05      	ldr	r3, [pc, #20]	; (800850c <std+0x38>)
 80084f8:	6263      	str	r3, [r4, #36]	; 0x24
 80084fa:	4b05      	ldr	r3, [pc, #20]	; (8008510 <std+0x3c>)
 80084fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80084fe:	4b05      	ldr	r3, [pc, #20]	; (8008514 <std+0x40>)
 8008500:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008502:	4b05      	ldr	r3, [pc, #20]	; (8008518 <std+0x44>)
 8008504:	6224      	str	r4, [r4, #32]
 8008506:	6323      	str	r3, [r4, #48]	; 0x30
 8008508:	bd10      	pop	{r4, pc}
 800850a:	bf00      	nop
 800850c:	0800869d 	.word	0x0800869d
 8008510:	080086bf 	.word	0x080086bf
 8008514:	080086f7 	.word	0x080086f7
 8008518:	0800871b 	.word	0x0800871b

0800851c <stdio_exit_handler>:
 800851c:	4a02      	ldr	r2, [pc, #8]	; (8008528 <stdio_exit_handler+0xc>)
 800851e:	4903      	ldr	r1, [pc, #12]	; (800852c <stdio_exit_handler+0x10>)
 8008520:	4803      	ldr	r0, [pc, #12]	; (8008530 <stdio_exit_handler+0x14>)
 8008522:	f000 b869 	b.w	80085f8 <_fwalk_sglue>
 8008526:	bf00      	nop
 8008528:	200000cc 	.word	0x200000cc
 800852c:	080091e9 	.word	0x080091e9
 8008530:	200000d8 	.word	0x200000d8

08008534 <cleanup_stdio>:
 8008534:	6841      	ldr	r1, [r0, #4]
 8008536:	4b0c      	ldr	r3, [pc, #48]	; (8008568 <cleanup_stdio+0x34>)
 8008538:	4299      	cmp	r1, r3
 800853a:	b510      	push	{r4, lr}
 800853c:	4604      	mov	r4, r0
 800853e:	d001      	beq.n	8008544 <cleanup_stdio+0x10>
 8008540:	f000 fe52 	bl	80091e8 <_fflush_r>
 8008544:	68a1      	ldr	r1, [r4, #8]
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <cleanup_stdio+0x38>)
 8008548:	4299      	cmp	r1, r3
 800854a:	d002      	beq.n	8008552 <cleanup_stdio+0x1e>
 800854c:	4620      	mov	r0, r4
 800854e:	f000 fe4b 	bl	80091e8 <_fflush_r>
 8008552:	68e1      	ldr	r1, [r4, #12]
 8008554:	4b06      	ldr	r3, [pc, #24]	; (8008570 <cleanup_stdio+0x3c>)
 8008556:	4299      	cmp	r1, r3
 8008558:	d004      	beq.n	8008564 <cleanup_stdio+0x30>
 800855a:	4620      	mov	r0, r4
 800855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008560:	f000 be42 	b.w	80091e8 <_fflush_r>
 8008564:	bd10      	pop	{r4, pc}
 8008566:	bf00      	nop
 8008568:	200004e8 	.word	0x200004e8
 800856c:	20000550 	.word	0x20000550
 8008570:	200005b8 	.word	0x200005b8

08008574 <global_stdio_init.part.0>:
 8008574:	b510      	push	{r4, lr}
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <global_stdio_init.part.0+0x30>)
 8008578:	4c0b      	ldr	r4, [pc, #44]	; (80085a8 <global_stdio_init.part.0+0x34>)
 800857a:	4a0c      	ldr	r2, [pc, #48]	; (80085ac <global_stdio_init.part.0+0x38>)
 800857c:	601a      	str	r2, [r3, #0]
 800857e:	4620      	mov	r0, r4
 8008580:	2200      	movs	r2, #0
 8008582:	2104      	movs	r1, #4
 8008584:	f7ff ffa6 	bl	80084d4 <std>
 8008588:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800858c:	2201      	movs	r2, #1
 800858e:	2109      	movs	r1, #9
 8008590:	f7ff ffa0 	bl	80084d4 <std>
 8008594:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8008598:	2202      	movs	r2, #2
 800859a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859e:	2112      	movs	r1, #18
 80085a0:	f7ff bf98 	b.w	80084d4 <std>
 80085a4:	20000620 	.word	0x20000620
 80085a8:	200004e8 	.word	0x200004e8
 80085ac:	0800851d 	.word	0x0800851d

080085b0 <__sfp_lock_acquire>:
 80085b0:	4801      	ldr	r0, [pc, #4]	; (80085b8 <__sfp_lock_acquire+0x8>)
 80085b2:	f000 b98b 	b.w	80088cc <__retarget_lock_acquire_recursive>
 80085b6:	bf00      	nop
 80085b8:	20000629 	.word	0x20000629

080085bc <__sfp_lock_release>:
 80085bc:	4801      	ldr	r0, [pc, #4]	; (80085c4 <__sfp_lock_release+0x8>)
 80085be:	f000 b986 	b.w	80088ce <__retarget_lock_release_recursive>
 80085c2:	bf00      	nop
 80085c4:	20000629 	.word	0x20000629

080085c8 <__sinit>:
 80085c8:	b510      	push	{r4, lr}
 80085ca:	4604      	mov	r4, r0
 80085cc:	f7ff fff0 	bl	80085b0 <__sfp_lock_acquire>
 80085d0:	6a23      	ldr	r3, [r4, #32]
 80085d2:	b11b      	cbz	r3, 80085dc <__sinit+0x14>
 80085d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d8:	f7ff bff0 	b.w	80085bc <__sfp_lock_release>
 80085dc:	4b04      	ldr	r3, [pc, #16]	; (80085f0 <__sinit+0x28>)
 80085de:	6223      	str	r3, [r4, #32]
 80085e0:	4b04      	ldr	r3, [pc, #16]	; (80085f4 <__sinit+0x2c>)
 80085e2:	681b      	ldr	r3, [r3, #0]
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d1f5      	bne.n	80085d4 <__sinit+0xc>
 80085e8:	f7ff ffc4 	bl	8008574 <global_stdio_init.part.0>
 80085ec:	e7f2      	b.n	80085d4 <__sinit+0xc>
 80085ee:	bf00      	nop
 80085f0:	08008535 	.word	0x08008535
 80085f4:	20000620 	.word	0x20000620

080085f8 <_fwalk_sglue>:
 80085f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085fc:	4607      	mov	r7, r0
 80085fe:	4688      	mov	r8, r1
 8008600:	4614      	mov	r4, r2
 8008602:	2600      	movs	r6, #0
 8008604:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008608:	f1b9 0901 	subs.w	r9, r9, #1
 800860c:	d505      	bpl.n	800861a <_fwalk_sglue+0x22>
 800860e:	6824      	ldr	r4, [r4, #0]
 8008610:	2c00      	cmp	r4, #0
 8008612:	d1f7      	bne.n	8008604 <_fwalk_sglue+0xc>
 8008614:	4630      	mov	r0, r6
 8008616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800861a:	89ab      	ldrh	r3, [r5, #12]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d907      	bls.n	8008630 <_fwalk_sglue+0x38>
 8008620:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008624:	3301      	adds	r3, #1
 8008626:	d003      	beq.n	8008630 <_fwalk_sglue+0x38>
 8008628:	4629      	mov	r1, r5
 800862a:	4638      	mov	r0, r7
 800862c:	47c0      	blx	r8
 800862e:	4306      	orrs	r6, r0
 8008630:	3568      	adds	r5, #104	; 0x68
 8008632:	e7e9      	b.n	8008608 <_fwalk_sglue+0x10>

08008634 <sniprintf>:
 8008634:	b40c      	push	{r2, r3}
 8008636:	b530      	push	{r4, r5, lr}
 8008638:	4b17      	ldr	r3, [pc, #92]	; (8008698 <sniprintf+0x64>)
 800863a:	1e0c      	subs	r4, r1, #0
 800863c:	681d      	ldr	r5, [r3, #0]
 800863e:	b09d      	sub	sp, #116	; 0x74
 8008640:	da08      	bge.n	8008654 <sniprintf+0x20>
 8008642:	238b      	movs	r3, #139	; 0x8b
 8008644:	602b      	str	r3, [r5, #0]
 8008646:	f04f 30ff 	mov.w	r0, #4294967295
 800864a:	b01d      	add	sp, #116	; 0x74
 800864c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008650:	b002      	add	sp, #8
 8008652:	4770      	bx	lr
 8008654:	f44f 7302 	mov.w	r3, #520	; 0x208
 8008658:	f8ad 3014 	strh.w	r3, [sp, #20]
 800865c:	bf14      	ite	ne
 800865e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008662:	4623      	moveq	r3, r4
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800866c:	9002      	str	r0, [sp, #8]
 800866e:	9006      	str	r0, [sp, #24]
 8008670:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008674:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008676:	ab21      	add	r3, sp, #132	; 0x84
 8008678:	a902      	add	r1, sp, #8
 800867a:	4628      	mov	r0, r5
 800867c:	9301      	str	r3, [sp, #4]
 800867e:	f000 fa9f 	bl	8008bc0 <_svfiprintf_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	bfbc      	itt	lt
 8008686:	238b      	movlt	r3, #139	; 0x8b
 8008688:	602b      	strlt	r3, [r5, #0]
 800868a:	2c00      	cmp	r4, #0
 800868c:	d0dd      	beq.n	800864a <sniprintf+0x16>
 800868e:	9b02      	ldr	r3, [sp, #8]
 8008690:	2200      	movs	r2, #0
 8008692:	701a      	strb	r2, [r3, #0]
 8008694:	e7d9      	b.n	800864a <sniprintf+0x16>
 8008696:	bf00      	nop
 8008698:	20000124 	.word	0x20000124

0800869c <__sread>:
 800869c:	b510      	push	{r4, lr}
 800869e:	460c      	mov	r4, r1
 80086a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086a4:	f000 f8c4 	bl	8008830 <_read_r>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	bfab      	itete	ge
 80086ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086ae:	89a3      	ldrhlt	r3, [r4, #12]
 80086b0:	181b      	addge	r3, r3, r0
 80086b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086b6:	bfac      	ite	ge
 80086b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80086ba:	81a3      	strhlt	r3, [r4, #12]
 80086bc:	bd10      	pop	{r4, pc}

080086be <__swrite>:
 80086be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086c2:	461f      	mov	r7, r3
 80086c4:	898b      	ldrh	r3, [r1, #12]
 80086c6:	05db      	lsls	r3, r3, #23
 80086c8:	4605      	mov	r5, r0
 80086ca:	460c      	mov	r4, r1
 80086cc:	4616      	mov	r6, r2
 80086ce:	d505      	bpl.n	80086dc <__swrite+0x1e>
 80086d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086d4:	2302      	movs	r3, #2
 80086d6:	2200      	movs	r2, #0
 80086d8:	f000 f898 	bl	800880c <_lseek_r>
 80086dc:	89a3      	ldrh	r3, [r4, #12]
 80086de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80086e6:	81a3      	strh	r3, [r4, #12]
 80086e8:	4632      	mov	r2, r6
 80086ea:	463b      	mov	r3, r7
 80086ec:	4628      	mov	r0, r5
 80086ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f2:	f000 b8af 	b.w	8008854 <_write_r>

080086f6 <__sseek>:
 80086f6:	b510      	push	{r4, lr}
 80086f8:	460c      	mov	r4, r1
 80086fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fe:	f000 f885 	bl	800880c <_lseek_r>
 8008702:	1c43      	adds	r3, r0, #1
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	bf15      	itete	ne
 8008708:	6560      	strne	r0, [r4, #84]	; 0x54
 800870a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800870e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008712:	81a3      	strheq	r3, [r4, #12]
 8008714:	bf18      	it	ne
 8008716:	81a3      	strhne	r3, [r4, #12]
 8008718:	bd10      	pop	{r4, pc}

0800871a <__sclose>:
 800871a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871e:	f000 b865 	b.w	80087ec <_close_r>

08008722 <memset>:
 8008722:	4402      	add	r2, r0
 8008724:	4603      	mov	r3, r0
 8008726:	4293      	cmp	r3, r2
 8008728:	d100      	bne.n	800872c <memset+0xa>
 800872a:	4770      	bx	lr
 800872c:	f803 1b01 	strb.w	r1, [r3], #1
 8008730:	e7f9      	b.n	8008726 <memset+0x4>
	...

08008734 <strtok>:
 8008734:	4b16      	ldr	r3, [pc, #88]	; (8008790 <strtok+0x5c>)
 8008736:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008738:	681e      	ldr	r6, [r3, #0]
 800873a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800873c:	4605      	mov	r5, r0
 800873e:	b9fc      	cbnz	r4, 8008780 <strtok+0x4c>
 8008740:	2050      	movs	r0, #80	; 0x50
 8008742:	9101      	str	r1, [sp, #4]
 8008744:	f000 f92e 	bl	80089a4 <malloc>
 8008748:	9901      	ldr	r1, [sp, #4]
 800874a:	6470      	str	r0, [r6, #68]	; 0x44
 800874c:	4602      	mov	r2, r0
 800874e:	b920      	cbnz	r0, 800875a <strtok+0x26>
 8008750:	4b10      	ldr	r3, [pc, #64]	; (8008794 <strtok+0x60>)
 8008752:	4811      	ldr	r0, [pc, #68]	; (8008798 <strtok+0x64>)
 8008754:	215b      	movs	r1, #91	; 0x5b
 8008756:	f000 f8bb 	bl	80088d0 <__assert_func>
 800875a:	e9c0 4400 	strd	r4, r4, [r0]
 800875e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8008762:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8008766:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800876a:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800876e:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8008772:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8008776:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800877a:	6184      	str	r4, [r0, #24]
 800877c:	7704      	strb	r4, [r0, #28]
 800877e:	6244      	str	r4, [r0, #36]	; 0x24
 8008780:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8008782:	2301      	movs	r3, #1
 8008784:	4628      	mov	r0, r5
 8008786:	b002      	add	sp, #8
 8008788:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800878c:	f000 b806 	b.w	800879c <__strtok_r>
 8008790:	20000124 	.word	0x20000124
 8008794:	08009a61 	.word	0x08009a61
 8008798:	08009a78 	.word	0x08009a78

0800879c <__strtok_r>:
 800879c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800879e:	b908      	cbnz	r0, 80087a4 <__strtok_r+0x8>
 80087a0:	6810      	ldr	r0, [r2, #0]
 80087a2:	b188      	cbz	r0, 80087c8 <__strtok_r+0x2c>
 80087a4:	4604      	mov	r4, r0
 80087a6:	4620      	mov	r0, r4
 80087a8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80087ac:	460f      	mov	r7, r1
 80087ae:	f817 6b01 	ldrb.w	r6, [r7], #1
 80087b2:	b91e      	cbnz	r6, 80087bc <__strtok_r+0x20>
 80087b4:	b965      	cbnz	r5, 80087d0 <__strtok_r+0x34>
 80087b6:	6015      	str	r5, [r2, #0]
 80087b8:	4628      	mov	r0, r5
 80087ba:	e005      	b.n	80087c8 <__strtok_r+0x2c>
 80087bc:	42b5      	cmp	r5, r6
 80087be:	d1f6      	bne.n	80087ae <__strtok_r+0x12>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d1f0      	bne.n	80087a6 <__strtok_r+0xa>
 80087c4:	6014      	str	r4, [r2, #0]
 80087c6:	7003      	strb	r3, [r0, #0]
 80087c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087ca:	461c      	mov	r4, r3
 80087cc:	e00c      	b.n	80087e8 <__strtok_r+0x4c>
 80087ce:	b915      	cbnz	r5, 80087d6 <__strtok_r+0x3a>
 80087d0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087d4:	460e      	mov	r6, r1
 80087d6:	f816 5b01 	ldrb.w	r5, [r6], #1
 80087da:	42ab      	cmp	r3, r5
 80087dc:	d1f7      	bne.n	80087ce <__strtok_r+0x32>
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f3      	beq.n	80087ca <__strtok_r+0x2e>
 80087e2:	2300      	movs	r3, #0
 80087e4:	f804 3c01 	strb.w	r3, [r4, #-1]
 80087e8:	6014      	str	r4, [r2, #0]
 80087ea:	e7ed      	b.n	80087c8 <__strtok_r+0x2c>

080087ec <_close_r>:
 80087ec:	b538      	push	{r3, r4, r5, lr}
 80087ee:	4d06      	ldr	r5, [pc, #24]	; (8008808 <_close_r+0x1c>)
 80087f0:	2300      	movs	r3, #0
 80087f2:	4604      	mov	r4, r0
 80087f4:	4608      	mov	r0, r1
 80087f6:	602b      	str	r3, [r5, #0]
 80087f8:	f7f8 fd23 	bl	8001242 <_close>
 80087fc:	1c43      	adds	r3, r0, #1
 80087fe:	d102      	bne.n	8008806 <_close_r+0x1a>
 8008800:	682b      	ldr	r3, [r5, #0]
 8008802:	b103      	cbz	r3, 8008806 <_close_r+0x1a>
 8008804:	6023      	str	r3, [r4, #0]
 8008806:	bd38      	pop	{r3, r4, r5, pc}
 8008808:	20000624 	.word	0x20000624

0800880c <_lseek_r>:
 800880c:	b538      	push	{r3, r4, r5, lr}
 800880e:	4d07      	ldr	r5, [pc, #28]	; (800882c <_lseek_r+0x20>)
 8008810:	4604      	mov	r4, r0
 8008812:	4608      	mov	r0, r1
 8008814:	4611      	mov	r1, r2
 8008816:	2200      	movs	r2, #0
 8008818:	602a      	str	r2, [r5, #0]
 800881a:	461a      	mov	r2, r3
 800881c:	f7f8 fd38 	bl	8001290 <_lseek>
 8008820:	1c43      	adds	r3, r0, #1
 8008822:	d102      	bne.n	800882a <_lseek_r+0x1e>
 8008824:	682b      	ldr	r3, [r5, #0]
 8008826:	b103      	cbz	r3, 800882a <_lseek_r+0x1e>
 8008828:	6023      	str	r3, [r4, #0]
 800882a:	bd38      	pop	{r3, r4, r5, pc}
 800882c:	20000624 	.word	0x20000624

08008830 <_read_r>:
 8008830:	b538      	push	{r3, r4, r5, lr}
 8008832:	4d07      	ldr	r5, [pc, #28]	; (8008850 <_read_r+0x20>)
 8008834:	4604      	mov	r4, r0
 8008836:	4608      	mov	r0, r1
 8008838:	4611      	mov	r1, r2
 800883a:	2200      	movs	r2, #0
 800883c:	602a      	str	r2, [r5, #0]
 800883e:	461a      	mov	r2, r3
 8008840:	f7f8 fcc6 	bl	80011d0 <_read>
 8008844:	1c43      	adds	r3, r0, #1
 8008846:	d102      	bne.n	800884e <_read_r+0x1e>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	b103      	cbz	r3, 800884e <_read_r+0x1e>
 800884c:	6023      	str	r3, [r4, #0]
 800884e:	bd38      	pop	{r3, r4, r5, pc}
 8008850:	20000624 	.word	0x20000624

08008854 <_write_r>:
 8008854:	b538      	push	{r3, r4, r5, lr}
 8008856:	4d07      	ldr	r5, [pc, #28]	; (8008874 <_write_r+0x20>)
 8008858:	4604      	mov	r4, r0
 800885a:	4608      	mov	r0, r1
 800885c:	4611      	mov	r1, r2
 800885e:	2200      	movs	r2, #0
 8008860:	602a      	str	r2, [r5, #0]
 8008862:	461a      	mov	r2, r3
 8008864:	f7f8 fcd1 	bl	800120a <_write>
 8008868:	1c43      	adds	r3, r0, #1
 800886a:	d102      	bne.n	8008872 <_write_r+0x1e>
 800886c:	682b      	ldr	r3, [r5, #0]
 800886e:	b103      	cbz	r3, 8008872 <_write_r+0x1e>
 8008870:	6023      	str	r3, [r4, #0]
 8008872:	bd38      	pop	{r3, r4, r5, pc}
 8008874:	20000624 	.word	0x20000624

08008878 <__errno>:
 8008878:	4b01      	ldr	r3, [pc, #4]	; (8008880 <__errno+0x8>)
 800887a:	6818      	ldr	r0, [r3, #0]
 800887c:	4770      	bx	lr
 800887e:	bf00      	nop
 8008880:	20000124 	.word	0x20000124

08008884 <__libc_init_array>:
 8008884:	b570      	push	{r4, r5, r6, lr}
 8008886:	4d0d      	ldr	r5, [pc, #52]	; (80088bc <__libc_init_array+0x38>)
 8008888:	4c0d      	ldr	r4, [pc, #52]	; (80088c0 <__libc_init_array+0x3c>)
 800888a:	1b64      	subs	r4, r4, r5
 800888c:	10a4      	asrs	r4, r4, #2
 800888e:	2600      	movs	r6, #0
 8008890:	42a6      	cmp	r6, r4
 8008892:	d109      	bne.n	80088a8 <__libc_init_array+0x24>
 8008894:	4d0b      	ldr	r5, [pc, #44]	; (80088c4 <__libc_init_array+0x40>)
 8008896:	4c0c      	ldr	r4, [pc, #48]	; (80088c8 <__libc_init_array+0x44>)
 8008898:	f000 fff8 	bl	800988c <_init>
 800889c:	1b64      	subs	r4, r4, r5
 800889e:	10a4      	asrs	r4, r4, #2
 80088a0:	2600      	movs	r6, #0
 80088a2:	42a6      	cmp	r6, r4
 80088a4:	d105      	bne.n	80088b2 <__libc_init_array+0x2e>
 80088a6:	bd70      	pop	{r4, r5, r6, pc}
 80088a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80088ac:	4798      	blx	r3
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7ee      	b.n	8008890 <__libc_init_array+0xc>
 80088b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80088b6:	4798      	blx	r3
 80088b8:	3601      	adds	r6, #1
 80088ba:	e7f2      	b.n	80088a2 <__libc_init_array+0x1e>
 80088bc:	08009b4c 	.word	0x08009b4c
 80088c0:	08009b4c 	.word	0x08009b4c
 80088c4:	08009b4c 	.word	0x08009b4c
 80088c8:	08009b50 	.word	0x08009b50

080088cc <__retarget_lock_acquire_recursive>:
 80088cc:	4770      	bx	lr

080088ce <__retarget_lock_release_recursive>:
 80088ce:	4770      	bx	lr

080088d0 <__assert_func>:
 80088d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80088d2:	4614      	mov	r4, r2
 80088d4:	461a      	mov	r2, r3
 80088d6:	4b09      	ldr	r3, [pc, #36]	; (80088fc <__assert_func+0x2c>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	4605      	mov	r5, r0
 80088dc:	68d8      	ldr	r0, [r3, #12]
 80088de:	b14c      	cbz	r4, 80088f4 <__assert_func+0x24>
 80088e0:	4b07      	ldr	r3, [pc, #28]	; (8008900 <__assert_func+0x30>)
 80088e2:	9100      	str	r1, [sp, #0]
 80088e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80088e8:	4906      	ldr	r1, [pc, #24]	; (8008904 <__assert_func+0x34>)
 80088ea:	462b      	mov	r3, r5
 80088ec:	f000 fca4 	bl	8009238 <fiprintf>
 80088f0:	f000 fcec 	bl	80092cc <abort>
 80088f4:	4b04      	ldr	r3, [pc, #16]	; (8008908 <__assert_func+0x38>)
 80088f6:	461c      	mov	r4, r3
 80088f8:	e7f3      	b.n	80088e2 <__assert_func+0x12>
 80088fa:	bf00      	nop
 80088fc:	20000124 	.word	0x20000124
 8008900:	08009ad2 	.word	0x08009ad2
 8008904:	08009adf 	.word	0x08009adf
 8008908:	08009b0d 	.word	0x08009b0d

0800890c <_free_r>:
 800890c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800890e:	2900      	cmp	r1, #0
 8008910:	d044      	beq.n	800899c <_free_r+0x90>
 8008912:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008916:	9001      	str	r0, [sp, #4]
 8008918:	2b00      	cmp	r3, #0
 800891a:	f1a1 0404 	sub.w	r4, r1, #4
 800891e:	bfb8      	it	lt
 8008920:	18e4      	addlt	r4, r4, r3
 8008922:	f000 f8e7 	bl	8008af4 <__malloc_lock>
 8008926:	4a1e      	ldr	r2, [pc, #120]	; (80089a0 <_free_r+0x94>)
 8008928:	9801      	ldr	r0, [sp, #4]
 800892a:	6813      	ldr	r3, [r2, #0]
 800892c:	b933      	cbnz	r3, 800893c <_free_r+0x30>
 800892e:	6063      	str	r3, [r4, #4]
 8008930:	6014      	str	r4, [r2, #0]
 8008932:	b003      	add	sp, #12
 8008934:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008938:	f000 b8e2 	b.w	8008b00 <__malloc_unlock>
 800893c:	42a3      	cmp	r3, r4
 800893e:	d908      	bls.n	8008952 <_free_r+0x46>
 8008940:	6825      	ldr	r5, [r4, #0]
 8008942:	1961      	adds	r1, r4, r5
 8008944:	428b      	cmp	r3, r1
 8008946:	bf01      	itttt	eq
 8008948:	6819      	ldreq	r1, [r3, #0]
 800894a:	685b      	ldreq	r3, [r3, #4]
 800894c:	1949      	addeq	r1, r1, r5
 800894e:	6021      	streq	r1, [r4, #0]
 8008950:	e7ed      	b.n	800892e <_free_r+0x22>
 8008952:	461a      	mov	r2, r3
 8008954:	685b      	ldr	r3, [r3, #4]
 8008956:	b10b      	cbz	r3, 800895c <_free_r+0x50>
 8008958:	42a3      	cmp	r3, r4
 800895a:	d9fa      	bls.n	8008952 <_free_r+0x46>
 800895c:	6811      	ldr	r1, [r2, #0]
 800895e:	1855      	adds	r5, r2, r1
 8008960:	42a5      	cmp	r5, r4
 8008962:	d10b      	bne.n	800897c <_free_r+0x70>
 8008964:	6824      	ldr	r4, [r4, #0]
 8008966:	4421      	add	r1, r4
 8008968:	1854      	adds	r4, r2, r1
 800896a:	42a3      	cmp	r3, r4
 800896c:	6011      	str	r1, [r2, #0]
 800896e:	d1e0      	bne.n	8008932 <_free_r+0x26>
 8008970:	681c      	ldr	r4, [r3, #0]
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	6053      	str	r3, [r2, #4]
 8008976:	440c      	add	r4, r1
 8008978:	6014      	str	r4, [r2, #0]
 800897a:	e7da      	b.n	8008932 <_free_r+0x26>
 800897c:	d902      	bls.n	8008984 <_free_r+0x78>
 800897e:	230c      	movs	r3, #12
 8008980:	6003      	str	r3, [r0, #0]
 8008982:	e7d6      	b.n	8008932 <_free_r+0x26>
 8008984:	6825      	ldr	r5, [r4, #0]
 8008986:	1961      	adds	r1, r4, r5
 8008988:	428b      	cmp	r3, r1
 800898a:	bf04      	itt	eq
 800898c:	6819      	ldreq	r1, [r3, #0]
 800898e:	685b      	ldreq	r3, [r3, #4]
 8008990:	6063      	str	r3, [r4, #4]
 8008992:	bf04      	itt	eq
 8008994:	1949      	addeq	r1, r1, r5
 8008996:	6021      	streq	r1, [r4, #0]
 8008998:	6054      	str	r4, [r2, #4]
 800899a:	e7ca      	b.n	8008932 <_free_r+0x26>
 800899c:	b003      	add	sp, #12
 800899e:	bd30      	pop	{r4, r5, pc}
 80089a0:	2000062c 	.word	0x2000062c

080089a4 <malloc>:
 80089a4:	4b02      	ldr	r3, [pc, #8]	; (80089b0 <malloc+0xc>)
 80089a6:	4601      	mov	r1, r0
 80089a8:	6818      	ldr	r0, [r3, #0]
 80089aa:	f000 b823 	b.w	80089f4 <_malloc_r>
 80089ae:	bf00      	nop
 80089b0:	20000124 	.word	0x20000124

080089b4 <sbrk_aligned>:
 80089b4:	b570      	push	{r4, r5, r6, lr}
 80089b6:	4e0e      	ldr	r6, [pc, #56]	; (80089f0 <sbrk_aligned+0x3c>)
 80089b8:	460c      	mov	r4, r1
 80089ba:	6831      	ldr	r1, [r6, #0]
 80089bc:	4605      	mov	r5, r0
 80089be:	b911      	cbnz	r1, 80089c6 <sbrk_aligned+0x12>
 80089c0:	f000 fc66 	bl	8009290 <_sbrk_r>
 80089c4:	6030      	str	r0, [r6, #0]
 80089c6:	4621      	mov	r1, r4
 80089c8:	4628      	mov	r0, r5
 80089ca:	f000 fc61 	bl	8009290 <_sbrk_r>
 80089ce:	1c43      	adds	r3, r0, #1
 80089d0:	d00a      	beq.n	80089e8 <sbrk_aligned+0x34>
 80089d2:	1cc4      	adds	r4, r0, #3
 80089d4:	f024 0403 	bic.w	r4, r4, #3
 80089d8:	42a0      	cmp	r0, r4
 80089da:	d007      	beq.n	80089ec <sbrk_aligned+0x38>
 80089dc:	1a21      	subs	r1, r4, r0
 80089de:	4628      	mov	r0, r5
 80089e0:	f000 fc56 	bl	8009290 <_sbrk_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	d101      	bne.n	80089ec <sbrk_aligned+0x38>
 80089e8:	f04f 34ff 	mov.w	r4, #4294967295
 80089ec:	4620      	mov	r0, r4
 80089ee:	bd70      	pop	{r4, r5, r6, pc}
 80089f0:	20000630 	.word	0x20000630

080089f4 <_malloc_r>:
 80089f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089f8:	1ccd      	adds	r5, r1, #3
 80089fa:	f025 0503 	bic.w	r5, r5, #3
 80089fe:	3508      	adds	r5, #8
 8008a00:	2d0c      	cmp	r5, #12
 8008a02:	bf38      	it	cc
 8008a04:	250c      	movcc	r5, #12
 8008a06:	2d00      	cmp	r5, #0
 8008a08:	4607      	mov	r7, r0
 8008a0a:	db01      	blt.n	8008a10 <_malloc_r+0x1c>
 8008a0c:	42a9      	cmp	r1, r5
 8008a0e:	d905      	bls.n	8008a1c <_malloc_r+0x28>
 8008a10:	230c      	movs	r3, #12
 8008a12:	603b      	str	r3, [r7, #0]
 8008a14:	2600      	movs	r6, #0
 8008a16:	4630      	mov	r0, r6
 8008a18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008af0 <_malloc_r+0xfc>
 8008a20:	f000 f868 	bl	8008af4 <__malloc_lock>
 8008a24:	f8d8 3000 	ldr.w	r3, [r8]
 8008a28:	461c      	mov	r4, r3
 8008a2a:	bb5c      	cbnz	r4, 8008a84 <_malloc_r+0x90>
 8008a2c:	4629      	mov	r1, r5
 8008a2e:	4638      	mov	r0, r7
 8008a30:	f7ff ffc0 	bl	80089b4 <sbrk_aligned>
 8008a34:	1c43      	adds	r3, r0, #1
 8008a36:	4604      	mov	r4, r0
 8008a38:	d155      	bne.n	8008ae6 <_malloc_r+0xf2>
 8008a3a:	f8d8 4000 	ldr.w	r4, [r8]
 8008a3e:	4626      	mov	r6, r4
 8008a40:	2e00      	cmp	r6, #0
 8008a42:	d145      	bne.n	8008ad0 <_malloc_r+0xdc>
 8008a44:	2c00      	cmp	r4, #0
 8008a46:	d048      	beq.n	8008ada <_malloc_r+0xe6>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	4631      	mov	r1, r6
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	eb04 0903 	add.w	r9, r4, r3
 8008a52:	f000 fc1d 	bl	8009290 <_sbrk_r>
 8008a56:	4581      	cmp	r9, r0
 8008a58:	d13f      	bne.n	8008ada <_malloc_r+0xe6>
 8008a5a:	6821      	ldr	r1, [r4, #0]
 8008a5c:	1a6d      	subs	r5, r5, r1
 8008a5e:	4629      	mov	r1, r5
 8008a60:	4638      	mov	r0, r7
 8008a62:	f7ff ffa7 	bl	80089b4 <sbrk_aligned>
 8008a66:	3001      	adds	r0, #1
 8008a68:	d037      	beq.n	8008ada <_malloc_r+0xe6>
 8008a6a:	6823      	ldr	r3, [r4, #0]
 8008a6c:	442b      	add	r3, r5
 8008a6e:	6023      	str	r3, [r4, #0]
 8008a70:	f8d8 3000 	ldr.w	r3, [r8]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d038      	beq.n	8008aea <_malloc_r+0xf6>
 8008a78:	685a      	ldr	r2, [r3, #4]
 8008a7a:	42a2      	cmp	r2, r4
 8008a7c:	d12b      	bne.n	8008ad6 <_malloc_r+0xe2>
 8008a7e:	2200      	movs	r2, #0
 8008a80:	605a      	str	r2, [r3, #4]
 8008a82:	e00f      	b.n	8008aa4 <_malloc_r+0xb0>
 8008a84:	6822      	ldr	r2, [r4, #0]
 8008a86:	1b52      	subs	r2, r2, r5
 8008a88:	d41f      	bmi.n	8008aca <_malloc_r+0xd6>
 8008a8a:	2a0b      	cmp	r2, #11
 8008a8c:	d917      	bls.n	8008abe <_malloc_r+0xca>
 8008a8e:	1961      	adds	r1, r4, r5
 8008a90:	42a3      	cmp	r3, r4
 8008a92:	6025      	str	r5, [r4, #0]
 8008a94:	bf18      	it	ne
 8008a96:	6059      	strne	r1, [r3, #4]
 8008a98:	6863      	ldr	r3, [r4, #4]
 8008a9a:	bf08      	it	eq
 8008a9c:	f8c8 1000 	streq.w	r1, [r8]
 8008aa0:	5162      	str	r2, [r4, r5]
 8008aa2:	604b      	str	r3, [r1, #4]
 8008aa4:	4638      	mov	r0, r7
 8008aa6:	f104 060b 	add.w	r6, r4, #11
 8008aaa:	f000 f829 	bl	8008b00 <__malloc_unlock>
 8008aae:	f026 0607 	bic.w	r6, r6, #7
 8008ab2:	1d23      	adds	r3, r4, #4
 8008ab4:	1af2      	subs	r2, r6, r3
 8008ab6:	d0ae      	beq.n	8008a16 <_malloc_r+0x22>
 8008ab8:	1b9b      	subs	r3, r3, r6
 8008aba:	50a3      	str	r3, [r4, r2]
 8008abc:	e7ab      	b.n	8008a16 <_malloc_r+0x22>
 8008abe:	42a3      	cmp	r3, r4
 8008ac0:	6862      	ldr	r2, [r4, #4]
 8008ac2:	d1dd      	bne.n	8008a80 <_malloc_r+0x8c>
 8008ac4:	f8c8 2000 	str.w	r2, [r8]
 8008ac8:	e7ec      	b.n	8008aa4 <_malloc_r+0xb0>
 8008aca:	4623      	mov	r3, r4
 8008acc:	6864      	ldr	r4, [r4, #4]
 8008ace:	e7ac      	b.n	8008a2a <_malloc_r+0x36>
 8008ad0:	4634      	mov	r4, r6
 8008ad2:	6876      	ldr	r6, [r6, #4]
 8008ad4:	e7b4      	b.n	8008a40 <_malloc_r+0x4c>
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	e7cc      	b.n	8008a74 <_malloc_r+0x80>
 8008ada:	230c      	movs	r3, #12
 8008adc:	603b      	str	r3, [r7, #0]
 8008ade:	4638      	mov	r0, r7
 8008ae0:	f000 f80e 	bl	8008b00 <__malloc_unlock>
 8008ae4:	e797      	b.n	8008a16 <_malloc_r+0x22>
 8008ae6:	6025      	str	r5, [r4, #0]
 8008ae8:	e7dc      	b.n	8008aa4 <_malloc_r+0xb0>
 8008aea:	605b      	str	r3, [r3, #4]
 8008aec:	deff      	udf	#255	; 0xff
 8008aee:	bf00      	nop
 8008af0:	2000062c 	.word	0x2000062c

08008af4 <__malloc_lock>:
 8008af4:	4801      	ldr	r0, [pc, #4]	; (8008afc <__malloc_lock+0x8>)
 8008af6:	f7ff bee9 	b.w	80088cc <__retarget_lock_acquire_recursive>
 8008afa:	bf00      	nop
 8008afc:	20000628 	.word	0x20000628

08008b00 <__malloc_unlock>:
 8008b00:	4801      	ldr	r0, [pc, #4]	; (8008b08 <__malloc_unlock+0x8>)
 8008b02:	f7ff bee4 	b.w	80088ce <__retarget_lock_release_recursive>
 8008b06:	bf00      	nop
 8008b08:	20000628 	.word	0x20000628

08008b0c <__ssputs_r>:
 8008b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b10:	688e      	ldr	r6, [r1, #8]
 8008b12:	461f      	mov	r7, r3
 8008b14:	42be      	cmp	r6, r7
 8008b16:	680b      	ldr	r3, [r1, #0]
 8008b18:	4682      	mov	sl, r0
 8008b1a:	460c      	mov	r4, r1
 8008b1c:	4690      	mov	r8, r2
 8008b1e:	d82c      	bhi.n	8008b7a <__ssputs_r+0x6e>
 8008b20:	898a      	ldrh	r2, [r1, #12]
 8008b22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008b26:	d026      	beq.n	8008b76 <__ssputs_r+0x6a>
 8008b28:	6965      	ldr	r5, [r4, #20]
 8008b2a:	6909      	ldr	r1, [r1, #16]
 8008b2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008b30:	eba3 0901 	sub.w	r9, r3, r1
 8008b34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008b38:	1c7b      	adds	r3, r7, #1
 8008b3a:	444b      	add	r3, r9
 8008b3c:	106d      	asrs	r5, r5, #1
 8008b3e:	429d      	cmp	r5, r3
 8008b40:	bf38      	it	cc
 8008b42:	461d      	movcc	r5, r3
 8008b44:	0553      	lsls	r3, r2, #21
 8008b46:	d527      	bpl.n	8008b98 <__ssputs_r+0x8c>
 8008b48:	4629      	mov	r1, r5
 8008b4a:	f7ff ff53 	bl	80089f4 <_malloc_r>
 8008b4e:	4606      	mov	r6, r0
 8008b50:	b360      	cbz	r0, 8008bac <__ssputs_r+0xa0>
 8008b52:	6921      	ldr	r1, [r4, #16]
 8008b54:	464a      	mov	r2, r9
 8008b56:	f000 fbab 	bl	80092b0 <memcpy>
 8008b5a:	89a3      	ldrh	r3, [r4, #12]
 8008b5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b64:	81a3      	strh	r3, [r4, #12]
 8008b66:	6126      	str	r6, [r4, #16]
 8008b68:	6165      	str	r5, [r4, #20]
 8008b6a:	444e      	add	r6, r9
 8008b6c:	eba5 0509 	sub.w	r5, r5, r9
 8008b70:	6026      	str	r6, [r4, #0]
 8008b72:	60a5      	str	r5, [r4, #8]
 8008b74:	463e      	mov	r6, r7
 8008b76:	42be      	cmp	r6, r7
 8008b78:	d900      	bls.n	8008b7c <__ssputs_r+0x70>
 8008b7a:	463e      	mov	r6, r7
 8008b7c:	6820      	ldr	r0, [r4, #0]
 8008b7e:	4632      	mov	r2, r6
 8008b80:	4641      	mov	r1, r8
 8008b82:	f000 fb6b 	bl	800925c <memmove>
 8008b86:	68a3      	ldr	r3, [r4, #8]
 8008b88:	1b9b      	subs	r3, r3, r6
 8008b8a:	60a3      	str	r3, [r4, #8]
 8008b8c:	6823      	ldr	r3, [r4, #0]
 8008b8e:	4433      	add	r3, r6
 8008b90:	6023      	str	r3, [r4, #0]
 8008b92:	2000      	movs	r0, #0
 8008b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b98:	462a      	mov	r2, r5
 8008b9a:	f000 fb9e 	bl	80092da <_realloc_r>
 8008b9e:	4606      	mov	r6, r0
 8008ba0:	2800      	cmp	r0, #0
 8008ba2:	d1e0      	bne.n	8008b66 <__ssputs_r+0x5a>
 8008ba4:	6921      	ldr	r1, [r4, #16]
 8008ba6:	4650      	mov	r0, sl
 8008ba8:	f7ff feb0 	bl	800890c <_free_r>
 8008bac:	230c      	movs	r3, #12
 8008bae:	f8ca 3000 	str.w	r3, [sl]
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb8:	81a3      	strh	r3, [r4, #12]
 8008bba:	f04f 30ff 	mov.w	r0, #4294967295
 8008bbe:	e7e9      	b.n	8008b94 <__ssputs_r+0x88>

08008bc0 <_svfiprintf_r>:
 8008bc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bc4:	4698      	mov	r8, r3
 8008bc6:	898b      	ldrh	r3, [r1, #12]
 8008bc8:	061b      	lsls	r3, r3, #24
 8008bca:	b09d      	sub	sp, #116	; 0x74
 8008bcc:	4607      	mov	r7, r0
 8008bce:	460d      	mov	r5, r1
 8008bd0:	4614      	mov	r4, r2
 8008bd2:	d50e      	bpl.n	8008bf2 <_svfiprintf_r+0x32>
 8008bd4:	690b      	ldr	r3, [r1, #16]
 8008bd6:	b963      	cbnz	r3, 8008bf2 <_svfiprintf_r+0x32>
 8008bd8:	2140      	movs	r1, #64	; 0x40
 8008bda:	f7ff ff0b 	bl	80089f4 <_malloc_r>
 8008bde:	6028      	str	r0, [r5, #0]
 8008be0:	6128      	str	r0, [r5, #16]
 8008be2:	b920      	cbnz	r0, 8008bee <_svfiprintf_r+0x2e>
 8008be4:	230c      	movs	r3, #12
 8008be6:	603b      	str	r3, [r7, #0]
 8008be8:	f04f 30ff 	mov.w	r0, #4294967295
 8008bec:	e0d0      	b.n	8008d90 <_svfiprintf_r+0x1d0>
 8008bee:	2340      	movs	r3, #64	; 0x40
 8008bf0:	616b      	str	r3, [r5, #20]
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	9309      	str	r3, [sp, #36]	; 0x24
 8008bf6:	2320      	movs	r3, #32
 8008bf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c00:	2330      	movs	r3, #48	; 0x30
 8008c02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008da8 <_svfiprintf_r+0x1e8>
 8008c06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008c0a:	f04f 0901 	mov.w	r9, #1
 8008c0e:	4623      	mov	r3, r4
 8008c10:	469a      	mov	sl, r3
 8008c12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c16:	b10a      	cbz	r2, 8008c1c <_svfiprintf_r+0x5c>
 8008c18:	2a25      	cmp	r2, #37	; 0x25
 8008c1a:	d1f9      	bne.n	8008c10 <_svfiprintf_r+0x50>
 8008c1c:	ebba 0b04 	subs.w	fp, sl, r4
 8008c20:	d00b      	beq.n	8008c3a <_svfiprintf_r+0x7a>
 8008c22:	465b      	mov	r3, fp
 8008c24:	4622      	mov	r2, r4
 8008c26:	4629      	mov	r1, r5
 8008c28:	4638      	mov	r0, r7
 8008c2a:	f7ff ff6f 	bl	8008b0c <__ssputs_r>
 8008c2e:	3001      	adds	r0, #1
 8008c30:	f000 80a9 	beq.w	8008d86 <_svfiprintf_r+0x1c6>
 8008c34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008c36:	445a      	add	r2, fp
 8008c38:	9209      	str	r2, [sp, #36]	; 0x24
 8008c3a:	f89a 3000 	ldrb.w	r3, [sl]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80a1 	beq.w	8008d86 <_svfiprintf_r+0x1c6>
 8008c44:	2300      	movs	r3, #0
 8008c46:	f04f 32ff 	mov.w	r2, #4294967295
 8008c4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c4e:	f10a 0a01 	add.w	sl, sl, #1
 8008c52:	9304      	str	r3, [sp, #16]
 8008c54:	9307      	str	r3, [sp, #28]
 8008c56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008c5a:	931a      	str	r3, [sp, #104]	; 0x68
 8008c5c:	4654      	mov	r4, sl
 8008c5e:	2205      	movs	r2, #5
 8008c60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c64:	4850      	ldr	r0, [pc, #320]	; (8008da8 <_svfiprintf_r+0x1e8>)
 8008c66:	f7f7 faf3 	bl	8000250 <memchr>
 8008c6a:	9a04      	ldr	r2, [sp, #16]
 8008c6c:	b9d8      	cbnz	r0, 8008ca6 <_svfiprintf_r+0xe6>
 8008c6e:	06d0      	lsls	r0, r2, #27
 8008c70:	bf44      	itt	mi
 8008c72:	2320      	movmi	r3, #32
 8008c74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c78:	0711      	lsls	r1, r2, #28
 8008c7a:	bf44      	itt	mi
 8008c7c:	232b      	movmi	r3, #43	; 0x2b
 8008c7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008c82:	f89a 3000 	ldrb.w	r3, [sl]
 8008c86:	2b2a      	cmp	r3, #42	; 0x2a
 8008c88:	d015      	beq.n	8008cb6 <_svfiprintf_r+0xf6>
 8008c8a:	9a07      	ldr	r2, [sp, #28]
 8008c8c:	4654      	mov	r4, sl
 8008c8e:	2000      	movs	r0, #0
 8008c90:	f04f 0c0a 	mov.w	ip, #10
 8008c94:	4621      	mov	r1, r4
 8008c96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c9a:	3b30      	subs	r3, #48	; 0x30
 8008c9c:	2b09      	cmp	r3, #9
 8008c9e:	d94d      	bls.n	8008d3c <_svfiprintf_r+0x17c>
 8008ca0:	b1b0      	cbz	r0, 8008cd0 <_svfiprintf_r+0x110>
 8008ca2:	9207      	str	r2, [sp, #28]
 8008ca4:	e014      	b.n	8008cd0 <_svfiprintf_r+0x110>
 8008ca6:	eba0 0308 	sub.w	r3, r0, r8
 8008caa:	fa09 f303 	lsl.w	r3, r9, r3
 8008cae:	4313      	orrs	r3, r2
 8008cb0:	9304      	str	r3, [sp, #16]
 8008cb2:	46a2      	mov	sl, r4
 8008cb4:	e7d2      	b.n	8008c5c <_svfiprintf_r+0x9c>
 8008cb6:	9b03      	ldr	r3, [sp, #12]
 8008cb8:	1d19      	adds	r1, r3, #4
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	9103      	str	r1, [sp, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	bfbb      	ittet	lt
 8008cc2:	425b      	neglt	r3, r3
 8008cc4:	f042 0202 	orrlt.w	r2, r2, #2
 8008cc8:	9307      	strge	r3, [sp, #28]
 8008cca:	9307      	strlt	r3, [sp, #28]
 8008ccc:	bfb8      	it	lt
 8008cce:	9204      	strlt	r2, [sp, #16]
 8008cd0:	7823      	ldrb	r3, [r4, #0]
 8008cd2:	2b2e      	cmp	r3, #46	; 0x2e
 8008cd4:	d10c      	bne.n	8008cf0 <_svfiprintf_r+0x130>
 8008cd6:	7863      	ldrb	r3, [r4, #1]
 8008cd8:	2b2a      	cmp	r3, #42	; 0x2a
 8008cda:	d134      	bne.n	8008d46 <_svfiprintf_r+0x186>
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	1d1a      	adds	r2, r3, #4
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	9203      	str	r2, [sp, #12]
 8008ce4:	2b00      	cmp	r3, #0
 8008ce6:	bfb8      	it	lt
 8008ce8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008cec:	3402      	adds	r4, #2
 8008cee:	9305      	str	r3, [sp, #20]
 8008cf0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008db8 <_svfiprintf_r+0x1f8>
 8008cf4:	7821      	ldrb	r1, [r4, #0]
 8008cf6:	2203      	movs	r2, #3
 8008cf8:	4650      	mov	r0, sl
 8008cfa:	f7f7 faa9 	bl	8000250 <memchr>
 8008cfe:	b138      	cbz	r0, 8008d10 <_svfiprintf_r+0x150>
 8008d00:	9b04      	ldr	r3, [sp, #16]
 8008d02:	eba0 000a 	sub.w	r0, r0, sl
 8008d06:	2240      	movs	r2, #64	; 0x40
 8008d08:	4082      	lsls	r2, r0
 8008d0a:	4313      	orrs	r3, r2
 8008d0c:	3401      	adds	r4, #1
 8008d0e:	9304      	str	r3, [sp, #16]
 8008d10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d14:	4825      	ldr	r0, [pc, #148]	; (8008dac <_svfiprintf_r+0x1ec>)
 8008d16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008d1a:	2206      	movs	r2, #6
 8008d1c:	f7f7 fa98 	bl	8000250 <memchr>
 8008d20:	2800      	cmp	r0, #0
 8008d22:	d038      	beq.n	8008d96 <_svfiprintf_r+0x1d6>
 8008d24:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <_svfiprintf_r+0x1f0>)
 8008d26:	bb1b      	cbnz	r3, 8008d70 <_svfiprintf_r+0x1b0>
 8008d28:	9b03      	ldr	r3, [sp, #12]
 8008d2a:	3307      	adds	r3, #7
 8008d2c:	f023 0307 	bic.w	r3, r3, #7
 8008d30:	3308      	adds	r3, #8
 8008d32:	9303      	str	r3, [sp, #12]
 8008d34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008d36:	4433      	add	r3, r6
 8008d38:	9309      	str	r3, [sp, #36]	; 0x24
 8008d3a:	e768      	b.n	8008c0e <_svfiprintf_r+0x4e>
 8008d3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d40:	460c      	mov	r4, r1
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7a6      	b.n	8008c94 <_svfiprintf_r+0xd4>
 8008d46:	2300      	movs	r3, #0
 8008d48:	3401      	adds	r4, #1
 8008d4a:	9305      	str	r3, [sp, #20]
 8008d4c:	4619      	mov	r1, r3
 8008d4e:	f04f 0c0a 	mov.w	ip, #10
 8008d52:	4620      	mov	r0, r4
 8008d54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d58:	3a30      	subs	r2, #48	; 0x30
 8008d5a:	2a09      	cmp	r2, #9
 8008d5c:	d903      	bls.n	8008d66 <_svfiprintf_r+0x1a6>
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d0c6      	beq.n	8008cf0 <_svfiprintf_r+0x130>
 8008d62:	9105      	str	r1, [sp, #20]
 8008d64:	e7c4      	b.n	8008cf0 <_svfiprintf_r+0x130>
 8008d66:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d6a:	4604      	mov	r4, r0
 8008d6c:	2301      	movs	r3, #1
 8008d6e:	e7f0      	b.n	8008d52 <_svfiprintf_r+0x192>
 8008d70:	ab03      	add	r3, sp, #12
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	462a      	mov	r2, r5
 8008d76:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <_svfiprintf_r+0x1f4>)
 8008d78:	a904      	add	r1, sp, #16
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	f3af 8000 	nop.w
 8008d80:	1c42      	adds	r2, r0, #1
 8008d82:	4606      	mov	r6, r0
 8008d84:	d1d6      	bne.n	8008d34 <_svfiprintf_r+0x174>
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	065b      	lsls	r3, r3, #25
 8008d8a:	f53f af2d 	bmi.w	8008be8 <_svfiprintf_r+0x28>
 8008d8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008d90:	b01d      	add	sp, #116	; 0x74
 8008d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d96:	ab03      	add	r3, sp, #12
 8008d98:	9300      	str	r3, [sp, #0]
 8008d9a:	462a      	mov	r2, r5
 8008d9c:	4b05      	ldr	r3, [pc, #20]	; (8008db4 <_svfiprintf_r+0x1f4>)
 8008d9e:	a904      	add	r1, sp, #16
 8008da0:	4638      	mov	r0, r7
 8008da2:	f000 f879 	bl	8008e98 <_printf_i>
 8008da6:	e7eb      	b.n	8008d80 <_svfiprintf_r+0x1c0>
 8008da8:	08009b0e 	.word	0x08009b0e
 8008dac:	08009b18 	.word	0x08009b18
 8008db0:	00000000 	.word	0x00000000
 8008db4:	08008b0d 	.word	0x08008b0d
 8008db8:	08009b14 	.word	0x08009b14

08008dbc <_printf_common>:
 8008dbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008dc0:	4616      	mov	r6, r2
 8008dc2:	4699      	mov	r9, r3
 8008dc4:	688a      	ldr	r2, [r1, #8]
 8008dc6:	690b      	ldr	r3, [r1, #16]
 8008dc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	bfb8      	it	lt
 8008dd0:	4613      	movlt	r3, r2
 8008dd2:	6033      	str	r3, [r6, #0]
 8008dd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008dd8:	4607      	mov	r7, r0
 8008dda:	460c      	mov	r4, r1
 8008ddc:	b10a      	cbz	r2, 8008de2 <_printf_common+0x26>
 8008dde:	3301      	adds	r3, #1
 8008de0:	6033      	str	r3, [r6, #0]
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	0699      	lsls	r1, r3, #26
 8008de6:	bf42      	ittt	mi
 8008de8:	6833      	ldrmi	r3, [r6, #0]
 8008dea:	3302      	addmi	r3, #2
 8008dec:	6033      	strmi	r3, [r6, #0]
 8008dee:	6825      	ldr	r5, [r4, #0]
 8008df0:	f015 0506 	ands.w	r5, r5, #6
 8008df4:	d106      	bne.n	8008e04 <_printf_common+0x48>
 8008df6:	f104 0a19 	add.w	sl, r4, #25
 8008dfa:	68e3      	ldr	r3, [r4, #12]
 8008dfc:	6832      	ldr	r2, [r6, #0]
 8008dfe:	1a9b      	subs	r3, r3, r2
 8008e00:	42ab      	cmp	r3, r5
 8008e02:	dc26      	bgt.n	8008e52 <_printf_common+0x96>
 8008e04:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008e08:	1e13      	subs	r3, r2, #0
 8008e0a:	6822      	ldr	r2, [r4, #0]
 8008e0c:	bf18      	it	ne
 8008e0e:	2301      	movne	r3, #1
 8008e10:	0692      	lsls	r2, r2, #26
 8008e12:	d42b      	bmi.n	8008e6c <_printf_common+0xb0>
 8008e14:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008e18:	4649      	mov	r1, r9
 8008e1a:	4638      	mov	r0, r7
 8008e1c:	47c0      	blx	r8
 8008e1e:	3001      	adds	r0, #1
 8008e20:	d01e      	beq.n	8008e60 <_printf_common+0xa4>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	6922      	ldr	r2, [r4, #16]
 8008e26:	f003 0306 	and.w	r3, r3, #6
 8008e2a:	2b04      	cmp	r3, #4
 8008e2c:	bf02      	ittt	eq
 8008e2e:	68e5      	ldreq	r5, [r4, #12]
 8008e30:	6833      	ldreq	r3, [r6, #0]
 8008e32:	1aed      	subeq	r5, r5, r3
 8008e34:	68a3      	ldr	r3, [r4, #8]
 8008e36:	bf0c      	ite	eq
 8008e38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e3c:	2500      	movne	r5, #0
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	bfc4      	itt	gt
 8008e42:	1a9b      	subgt	r3, r3, r2
 8008e44:	18ed      	addgt	r5, r5, r3
 8008e46:	2600      	movs	r6, #0
 8008e48:	341a      	adds	r4, #26
 8008e4a:	42b5      	cmp	r5, r6
 8008e4c:	d11a      	bne.n	8008e84 <_printf_common+0xc8>
 8008e4e:	2000      	movs	r0, #0
 8008e50:	e008      	b.n	8008e64 <_printf_common+0xa8>
 8008e52:	2301      	movs	r3, #1
 8008e54:	4652      	mov	r2, sl
 8008e56:	4649      	mov	r1, r9
 8008e58:	4638      	mov	r0, r7
 8008e5a:	47c0      	blx	r8
 8008e5c:	3001      	adds	r0, #1
 8008e5e:	d103      	bne.n	8008e68 <_printf_common+0xac>
 8008e60:	f04f 30ff 	mov.w	r0, #4294967295
 8008e64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e68:	3501      	adds	r5, #1
 8008e6a:	e7c6      	b.n	8008dfa <_printf_common+0x3e>
 8008e6c:	18e1      	adds	r1, r4, r3
 8008e6e:	1c5a      	adds	r2, r3, #1
 8008e70:	2030      	movs	r0, #48	; 0x30
 8008e72:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008e76:	4422      	add	r2, r4
 8008e78:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008e7c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008e80:	3302      	adds	r3, #2
 8008e82:	e7c7      	b.n	8008e14 <_printf_common+0x58>
 8008e84:	2301      	movs	r3, #1
 8008e86:	4622      	mov	r2, r4
 8008e88:	4649      	mov	r1, r9
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	47c0      	blx	r8
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d0e6      	beq.n	8008e60 <_printf_common+0xa4>
 8008e92:	3601      	adds	r6, #1
 8008e94:	e7d9      	b.n	8008e4a <_printf_common+0x8e>
	...

08008e98 <_printf_i>:
 8008e98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9c:	7e0f      	ldrb	r7, [r1, #24]
 8008e9e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008ea0:	2f78      	cmp	r7, #120	; 0x78
 8008ea2:	4691      	mov	r9, r2
 8008ea4:	4680      	mov	r8, r0
 8008ea6:	460c      	mov	r4, r1
 8008ea8:	469a      	mov	sl, r3
 8008eaa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008eae:	d807      	bhi.n	8008ec0 <_printf_i+0x28>
 8008eb0:	2f62      	cmp	r7, #98	; 0x62
 8008eb2:	d80a      	bhi.n	8008eca <_printf_i+0x32>
 8008eb4:	2f00      	cmp	r7, #0
 8008eb6:	f000 80d4 	beq.w	8009062 <_printf_i+0x1ca>
 8008eba:	2f58      	cmp	r7, #88	; 0x58
 8008ebc:	f000 80c0 	beq.w	8009040 <_printf_i+0x1a8>
 8008ec0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008ec4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ec8:	e03a      	b.n	8008f40 <_printf_i+0xa8>
 8008eca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ece:	2b15      	cmp	r3, #21
 8008ed0:	d8f6      	bhi.n	8008ec0 <_printf_i+0x28>
 8008ed2:	a101      	add	r1, pc, #4	; (adr r1, 8008ed8 <_printf_i+0x40>)
 8008ed4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008ed8:	08008f31 	.word	0x08008f31
 8008edc:	08008f45 	.word	0x08008f45
 8008ee0:	08008ec1 	.word	0x08008ec1
 8008ee4:	08008ec1 	.word	0x08008ec1
 8008ee8:	08008ec1 	.word	0x08008ec1
 8008eec:	08008ec1 	.word	0x08008ec1
 8008ef0:	08008f45 	.word	0x08008f45
 8008ef4:	08008ec1 	.word	0x08008ec1
 8008ef8:	08008ec1 	.word	0x08008ec1
 8008efc:	08008ec1 	.word	0x08008ec1
 8008f00:	08008ec1 	.word	0x08008ec1
 8008f04:	08009049 	.word	0x08009049
 8008f08:	08008f71 	.word	0x08008f71
 8008f0c:	08009003 	.word	0x08009003
 8008f10:	08008ec1 	.word	0x08008ec1
 8008f14:	08008ec1 	.word	0x08008ec1
 8008f18:	0800906b 	.word	0x0800906b
 8008f1c:	08008ec1 	.word	0x08008ec1
 8008f20:	08008f71 	.word	0x08008f71
 8008f24:	08008ec1 	.word	0x08008ec1
 8008f28:	08008ec1 	.word	0x08008ec1
 8008f2c:	0800900b 	.word	0x0800900b
 8008f30:	682b      	ldr	r3, [r5, #0]
 8008f32:	1d1a      	adds	r2, r3, #4
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	602a      	str	r2, [r5, #0]
 8008f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008f3c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008f40:	2301      	movs	r3, #1
 8008f42:	e09f      	b.n	8009084 <_printf_i+0x1ec>
 8008f44:	6820      	ldr	r0, [r4, #0]
 8008f46:	682b      	ldr	r3, [r5, #0]
 8008f48:	0607      	lsls	r7, r0, #24
 8008f4a:	f103 0104 	add.w	r1, r3, #4
 8008f4e:	6029      	str	r1, [r5, #0]
 8008f50:	d501      	bpl.n	8008f56 <_printf_i+0xbe>
 8008f52:	681e      	ldr	r6, [r3, #0]
 8008f54:	e003      	b.n	8008f5e <_printf_i+0xc6>
 8008f56:	0646      	lsls	r6, r0, #25
 8008f58:	d5fb      	bpl.n	8008f52 <_printf_i+0xba>
 8008f5a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008f5e:	2e00      	cmp	r6, #0
 8008f60:	da03      	bge.n	8008f6a <_printf_i+0xd2>
 8008f62:	232d      	movs	r3, #45	; 0x2d
 8008f64:	4276      	negs	r6, r6
 8008f66:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f6a:	485a      	ldr	r0, [pc, #360]	; (80090d4 <_printf_i+0x23c>)
 8008f6c:	230a      	movs	r3, #10
 8008f6e:	e012      	b.n	8008f96 <_printf_i+0xfe>
 8008f70:	682b      	ldr	r3, [r5, #0]
 8008f72:	6820      	ldr	r0, [r4, #0]
 8008f74:	1d19      	adds	r1, r3, #4
 8008f76:	6029      	str	r1, [r5, #0]
 8008f78:	0605      	lsls	r5, r0, #24
 8008f7a:	d501      	bpl.n	8008f80 <_printf_i+0xe8>
 8008f7c:	681e      	ldr	r6, [r3, #0]
 8008f7e:	e002      	b.n	8008f86 <_printf_i+0xee>
 8008f80:	0641      	lsls	r1, r0, #25
 8008f82:	d5fb      	bpl.n	8008f7c <_printf_i+0xe4>
 8008f84:	881e      	ldrh	r6, [r3, #0]
 8008f86:	4853      	ldr	r0, [pc, #332]	; (80090d4 <_printf_i+0x23c>)
 8008f88:	2f6f      	cmp	r7, #111	; 0x6f
 8008f8a:	bf0c      	ite	eq
 8008f8c:	2308      	moveq	r3, #8
 8008f8e:	230a      	movne	r3, #10
 8008f90:	2100      	movs	r1, #0
 8008f92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008f96:	6865      	ldr	r5, [r4, #4]
 8008f98:	60a5      	str	r5, [r4, #8]
 8008f9a:	2d00      	cmp	r5, #0
 8008f9c:	bfa2      	ittt	ge
 8008f9e:	6821      	ldrge	r1, [r4, #0]
 8008fa0:	f021 0104 	bicge.w	r1, r1, #4
 8008fa4:	6021      	strge	r1, [r4, #0]
 8008fa6:	b90e      	cbnz	r6, 8008fac <_printf_i+0x114>
 8008fa8:	2d00      	cmp	r5, #0
 8008faa:	d04b      	beq.n	8009044 <_printf_i+0x1ac>
 8008fac:	4615      	mov	r5, r2
 8008fae:	fbb6 f1f3 	udiv	r1, r6, r3
 8008fb2:	fb03 6711 	mls	r7, r3, r1, r6
 8008fb6:	5dc7      	ldrb	r7, [r0, r7]
 8008fb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008fbc:	4637      	mov	r7, r6
 8008fbe:	42bb      	cmp	r3, r7
 8008fc0:	460e      	mov	r6, r1
 8008fc2:	d9f4      	bls.n	8008fae <_printf_i+0x116>
 8008fc4:	2b08      	cmp	r3, #8
 8008fc6:	d10b      	bne.n	8008fe0 <_printf_i+0x148>
 8008fc8:	6823      	ldr	r3, [r4, #0]
 8008fca:	07de      	lsls	r6, r3, #31
 8008fcc:	d508      	bpl.n	8008fe0 <_printf_i+0x148>
 8008fce:	6923      	ldr	r3, [r4, #16]
 8008fd0:	6861      	ldr	r1, [r4, #4]
 8008fd2:	4299      	cmp	r1, r3
 8008fd4:	bfde      	ittt	le
 8008fd6:	2330      	movle	r3, #48	; 0x30
 8008fd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008fdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008fe0:	1b52      	subs	r2, r2, r5
 8008fe2:	6122      	str	r2, [r4, #16]
 8008fe4:	f8cd a000 	str.w	sl, [sp]
 8008fe8:	464b      	mov	r3, r9
 8008fea:	aa03      	add	r2, sp, #12
 8008fec:	4621      	mov	r1, r4
 8008fee:	4640      	mov	r0, r8
 8008ff0:	f7ff fee4 	bl	8008dbc <_printf_common>
 8008ff4:	3001      	adds	r0, #1
 8008ff6:	d14a      	bne.n	800908e <_printf_i+0x1f6>
 8008ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8008ffc:	b004      	add	sp, #16
 8008ffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009002:	6823      	ldr	r3, [r4, #0]
 8009004:	f043 0320 	orr.w	r3, r3, #32
 8009008:	6023      	str	r3, [r4, #0]
 800900a:	4833      	ldr	r0, [pc, #204]	; (80090d8 <_printf_i+0x240>)
 800900c:	2778      	movs	r7, #120	; 0x78
 800900e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009012:	6823      	ldr	r3, [r4, #0]
 8009014:	6829      	ldr	r1, [r5, #0]
 8009016:	061f      	lsls	r7, r3, #24
 8009018:	f851 6b04 	ldr.w	r6, [r1], #4
 800901c:	d402      	bmi.n	8009024 <_printf_i+0x18c>
 800901e:	065f      	lsls	r7, r3, #25
 8009020:	bf48      	it	mi
 8009022:	b2b6      	uxthmi	r6, r6
 8009024:	07df      	lsls	r7, r3, #31
 8009026:	bf48      	it	mi
 8009028:	f043 0320 	orrmi.w	r3, r3, #32
 800902c:	6029      	str	r1, [r5, #0]
 800902e:	bf48      	it	mi
 8009030:	6023      	strmi	r3, [r4, #0]
 8009032:	b91e      	cbnz	r6, 800903c <_printf_i+0x1a4>
 8009034:	6823      	ldr	r3, [r4, #0]
 8009036:	f023 0320 	bic.w	r3, r3, #32
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	2310      	movs	r3, #16
 800903e:	e7a7      	b.n	8008f90 <_printf_i+0xf8>
 8009040:	4824      	ldr	r0, [pc, #144]	; (80090d4 <_printf_i+0x23c>)
 8009042:	e7e4      	b.n	800900e <_printf_i+0x176>
 8009044:	4615      	mov	r5, r2
 8009046:	e7bd      	b.n	8008fc4 <_printf_i+0x12c>
 8009048:	682b      	ldr	r3, [r5, #0]
 800904a:	6826      	ldr	r6, [r4, #0]
 800904c:	6961      	ldr	r1, [r4, #20]
 800904e:	1d18      	adds	r0, r3, #4
 8009050:	6028      	str	r0, [r5, #0]
 8009052:	0635      	lsls	r5, r6, #24
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	d501      	bpl.n	800905c <_printf_i+0x1c4>
 8009058:	6019      	str	r1, [r3, #0]
 800905a:	e002      	b.n	8009062 <_printf_i+0x1ca>
 800905c:	0670      	lsls	r0, r6, #25
 800905e:	d5fb      	bpl.n	8009058 <_printf_i+0x1c0>
 8009060:	8019      	strh	r1, [r3, #0]
 8009062:	2300      	movs	r3, #0
 8009064:	6123      	str	r3, [r4, #16]
 8009066:	4615      	mov	r5, r2
 8009068:	e7bc      	b.n	8008fe4 <_printf_i+0x14c>
 800906a:	682b      	ldr	r3, [r5, #0]
 800906c:	1d1a      	adds	r2, r3, #4
 800906e:	602a      	str	r2, [r5, #0]
 8009070:	681d      	ldr	r5, [r3, #0]
 8009072:	6862      	ldr	r2, [r4, #4]
 8009074:	2100      	movs	r1, #0
 8009076:	4628      	mov	r0, r5
 8009078:	f7f7 f8ea 	bl	8000250 <memchr>
 800907c:	b108      	cbz	r0, 8009082 <_printf_i+0x1ea>
 800907e:	1b40      	subs	r0, r0, r5
 8009080:	6060      	str	r0, [r4, #4]
 8009082:	6863      	ldr	r3, [r4, #4]
 8009084:	6123      	str	r3, [r4, #16]
 8009086:	2300      	movs	r3, #0
 8009088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800908c:	e7aa      	b.n	8008fe4 <_printf_i+0x14c>
 800908e:	6923      	ldr	r3, [r4, #16]
 8009090:	462a      	mov	r2, r5
 8009092:	4649      	mov	r1, r9
 8009094:	4640      	mov	r0, r8
 8009096:	47d0      	blx	sl
 8009098:	3001      	adds	r0, #1
 800909a:	d0ad      	beq.n	8008ff8 <_printf_i+0x160>
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	079b      	lsls	r3, r3, #30
 80090a0:	d413      	bmi.n	80090ca <_printf_i+0x232>
 80090a2:	68e0      	ldr	r0, [r4, #12]
 80090a4:	9b03      	ldr	r3, [sp, #12]
 80090a6:	4298      	cmp	r0, r3
 80090a8:	bfb8      	it	lt
 80090aa:	4618      	movlt	r0, r3
 80090ac:	e7a6      	b.n	8008ffc <_printf_i+0x164>
 80090ae:	2301      	movs	r3, #1
 80090b0:	4632      	mov	r2, r6
 80090b2:	4649      	mov	r1, r9
 80090b4:	4640      	mov	r0, r8
 80090b6:	47d0      	blx	sl
 80090b8:	3001      	adds	r0, #1
 80090ba:	d09d      	beq.n	8008ff8 <_printf_i+0x160>
 80090bc:	3501      	adds	r5, #1
 80090be:	68e3      	ldr	r3, [r4, #12]
 80090c0:	9903      	ldr	r1, [sp, #12]
 80090c2:	1a5b      	subs	r3, r3, r1
 80090c4:	42ab      	cmp	r3, r5
 80090c6:	dcf2      	bgt.n	80090ae <_printf_i+0x216>
 80090c8:	e7eb      	b.n	80090a2 <_printf_i+0x20a>
 80090ca:	2500      	movs	r5, #0
 80090cc:	f104 0619 	add.w	r6, r4, #25
 80090d0:	e7f5      	b.n	80090be <_printf_i+0x226>
 80090d2:	bf00      	nop
 80090d4:	08009b1f 	.word	0x08009b1f
 80090d8:	08009b30 	.word	0x08009b30

080090dc <__sflush_r>:
 80090dc:	898a      	ldrh	r2, [r1, #12]
 80090de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090e2:	4605      	mov	r5, r0
 80090e4:	0710      	lsls	r0, r2, #28
 80090e6:	460c      	mov	r4, r1
 80090e8:	d458      	bmi.n	800919c <__sflush_r+0xc0>
 80090ea:	684b      	ldr	r3, [r1, #4]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	dc05      	bgt.n	80090fc <__sflush_r+0x20>
 80090f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	dc02      	bgt.n	80090fc <__sflush_r+0x20>
 80090f6:	2000      	movs	r0, #0
 80090f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090fe:	2e00      	cmp	r6, #0
 8009100:	d0f9      	beq.n	80090f6 <__sflush_r+0x1a>
 8009102:	2300      	movs	r3, #0
 8009104:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009108:	682f      	ldr	r7, [r5, #0]
 800910a:	6a21      	ldr	r1, [r4, #32]
 800910c:	602b      	str	r3, [r5, #0]
 800910e:	d032      	beq.n	8009176 <__sflush_r+0x9a>
 8009110:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009112:	89a3      	ldrh	r3, [r4, #12]
 8009114:	075a      	lsls	r2, r3, #29
 8009116:	d505      	bpl.n	8009124 <__sflush_r+0x48>
 8009118:	6863      	ldr	r3, [r4, #4]
 800911a:	1ac0      	subs	r0, r0, r3
 800911c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800911e:	b10b      	cbz	r3, 8009124 <__sflush_r+0x48>
 8009120:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009122:	1ac0      	subs	r0, r0, r3
 8009124:	2300      	movs	r3, #0
 8009126:	4602      	mov	r2, r0
 8009128:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800912a:	6a21      	ldr	r1, [r4, #32]
 800912c:	4628      	mov	r0, r5
 800912e:	47b0      	blx	r6
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	d106      	bne.n	8009144 <__sflush_r+0x68>
 8009136:	6829      	ldr	r1, [r5, #0]
 8009138:	291d      	cmp	r1, #29
 800913a:	d82b      	bhi.n	8009194 <__sflush_r+0xb8>
 800913c:	4a29      	ldr	r2, [pc, #164]	; (80091e4 <__sflush_r+0x108>)
 800913e:	410a      	asrs	r2, r1
 8009140:	07d6      	lsls	r6, r2, #31
 8009142:	d427      	bmi.n	8009194 <__sflush_r+0xb8>
 8009144:	2200      	movs	r2, #0
 8009146:	6062      	str	r2, [r4, #4]
 8009148:	04d9      	lsls	r1, r3, #19
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	6022      	str	r2, [r4, #0]
 800914e:	d504      	bpl.n	800915a <__sflush_r+0x7e>
 8009150:	1c42      	adds	r2, r0, #1
 8009152:	d101      	bne.n	8009158 <__sflush_r+0x7c>
 8009154:	682b      	ldr	r3, [r5, #0]
 8009156:	b903      	cbnz	r3, 800915a <__sflush_r+0x7e>
 8009158:	6560      	str	r0, [r4, #84]	; 0x54
 800915a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800915c:	602f      	str	r7, [r5, #0]
 800915e:	2900      	cmp	r1, #0
 8009160:	d0c9      	beq.n	80090f6 <__sflush_r+0x1a>
 8009162:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009166:	4299      	cmp	r1, r3
 8009168:	d002      	beq.n	8009170 <__sflush_r+0x94>
 800916a:	4628      	mov	r0, r5
 800916c:	f7ff fbce 	bl	800890c <_free_r>
 8009170:	2000      	movs	r0, #0
 8009172:	6360      	str	r0, [r4, #52]	; 0x34
 8009174:	e7c0      	b.n	80090f8 <__sflush_r+0x1c>
 8009176:	2301      	movs	r3, #1
 8009178:	4628      	mov	r0, r5
 800917a:	47b0      	blx	r6
 800917c:	1c41      	adds	r1, r0, #1
 800917e:	d1c8      	bne.n	8009112 <__sflush_r+0x36>
 8009180:	682b      	ldr	r3, [r5, #0]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0c5      	beq.n	8009112 <__sflush_r+0x36>
 8009186:	2b1d      	cmp	r3, #29
 8009188:	d001      	beq.n	800918e <__sflush_r+0xb2>
 800918a:	2b16      	cmp	r3, #22
 800918c:	d101      	bne.n	8009192 <__sflush_r+0xb6>
 800918e:	602f      	str	r7, [r5, #0]
 8009190:	e7b1      	b.n	80090f6 <__sflush_r+0x1a>
 8009192:	89a3      	ldrh	r3, [r4, #12]
 8009194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009198:	81a3      	strh	r3, [r4, #12]
 800919a:	e7ad      	b.n	80090f8 <__sflush_r+0x1c>
 800919c:	690f      	ldr	r7, [r1, #16]
 800919e:	2f00      	cmp	r7, #0
 80091a0:	d0a9      	beq.n	80090f6 <__sflush_r+0x1a>
 80091a2:	0793      	lsls	r3, r2, #30
 80091a4:	680e      	ldr	r6, [r1, #0]
 80091a6:	bf08      	it	eq
 80091a8:	694b      	ldreq	r3, [r1, #20]
 80091aa:	600f      	str	r7, [r1, #0]
 80091ac:	bf18      	it	ne
 80091ae:	2300      	movne	r3, #0
 80091b0:	eba6 0807 	sub.w	r8, r6, r7
 80091b4:	608b      	str	r3, [r1, #8]
 80091b6:	f1b8 0f00 	cmp.w	r8, #0
 80091ba:	dd9c      	ble.n	80090f6 <__sflush_r+0x1a>
 80091bc:	6a21      	ldr	r1, [r4, #32]
 80091be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091c0:	4643      	mov	r3, r8
 80091c2:	463a      	mov	r2, r7
 80091c4:	4628      	mov	r0, r5
 80091c6:	47b0      	blx	r6
 80091c8:	2800      	cmp	r0, #0
 80091ca:	dc06      	bgt.n	80091da <__sflush_r+0xfe>
 80091cc:	89a3      	ldrh	r3, [r4, #12]
 80091ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091d2:	81a3      	strh	r3, [r4, #12]
 80091d4:	f04f 30ff 	mov.w	r0, #4294967295
 80091d8:	e78e      	b.n	80090f8 <__sflush_r+0x1c>
 80091da:	4407      	add	r7, r0
 80091dc:	eba8 0800 	sub.w	r8, r8, r0
 80091e0:	e7e9      	b.n	80091b6 <__sflush_r+0xda>
 80091e2:	bf00      	nop
 80091e4:	dfbffffe 	.word	0xdfbffffe

080091e8 <_fflush_r>:
 80091e8:	b538      	push	{r3, r4, r5, lr}
 80091ea:	690b      	ldr	r3, [r1, #16]
 80091ec:	4605      	mov	r5, r0
 80091ee:	460c      	mov	r4, r1
 80091f0:	b913      	cbnz	r3, 80091f8 <_fflush_r+0x10>
 80091f2:	2500      	movs	r5, #0
 80091f4:	4628      	mov	r0, r5
 80091f6:	bd38      	pop	{r3, r4, r5, pc}
 80091f8:	b118      	cbz	r0, 8009202 <_fflush_r+0x1a>
 80091fa:	6a03      	ldr	r3, [r0, #32]
 80091fc:	b90b      	cbnz	r3, 8009202 <_fflush_r+0x1a>
 80091fe:	f7ff f9e3 	bl	80085c8 <__sinit>
 8009202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d0f3      	beq.n	80091f2 <_fflush_r+0xa>
 800920a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800920c:	07d0      	lsls	r0, r2, #31
 800920e:	d404      	bmi.n	800921a <_fflush_r+0x32>
 8009210:	0599      	lsls	r1, r3, #22
 8009212:	d402      	bmi.n	800921a <_fflush_r+0x32>
 8009214:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009216:	f7ff fb59 	bl	80088cc <__retarget_lock_acquire_recursive>
 800921a:	4628      	mov	r0, r5
 800921c:	4621      	mov	r1, r4
 800921e:	f7ff ff5d 	bl	80090dc <__sflush_r>
 8009222:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009224:	07da      	lsls	r2, r3, #31
 8009226:	4605      	mov	r5, r0
 8009228:	d4e4      	bmi.n	80091f4 <_fflush_r+0xc>
 800922a:	89a3      	ldrh	r3, [r4, #12]
 800922c:	059b      	lsls	r3, r3, #22
 800922e:	d4e1      	bmi.n	80091f4 <_fflush_r+0xc>
 8009230:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009232:	f7ff fb4c 	bl	80088ce <__retarget_lock_release_recursive>
 8009236:	e7dd      	b.n	80091f4 <_fflush_r+0xc>

08009238 <fiprintf>:
 8009238:	b40e      	push	{r1, r2, r3}
 800923a:	b503      	push	{r0, r1, lr}
 800923c:	4601      	mov	r1, r0
 800923e:	ab03      	add	r3, sp, #12
 8009240:	4805      	ldr	r0, [pc, #20]	; (8009258 <fiprintf+0x20>)
 8009242:	f853 2b04 	ldr.w	r2, [r3], #4
 8009246:	6800      	ldr	r0, [r0, #0]
 8009248:	9301      	str	r3, [sp, #4]
 800924a:	f000 f89f 	bl	800938c <_vfiprintf_r>
 800924e:	b002      	add	sp, #8
 8009250:	f85d eb04 	ldr.w	lr, [sp], #4
 8009254:	b003      	add	sp, #12
 8009256:	4770      	bx	lr
 8009258:	20000124 	.word	0x20000124

0800925c <memmove>:
 800925c:	4288      	cmp	r0, r1
 800925e:	b510      	push	{r4, lr}
 8009260:	eb01 0402 	add.w	r4, r1, r2
 8009264:	d902      	bls.n	800926c <memmove+0x10>
 8009266:	4284      	cmp	r4, r0
 8009268:	4623      	mov	r3, r4
 800926a:	d807      	bhi.n	800927c <memmove+0x20>
 800926c:	1e43      	subs	r3, r0, #1
 800926e:	42a1      	cmp	r1, r4
 8009270:	d008      	beq.n	8009284 <memmove+0x28>
 8009272:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800927a:	e7f8      	b.n	800926e <memmove+0x12>
 800927c:	4402      	add	r2, r0
 800927e:	4601      	mov	r1, r0
 8009280:	428a      	cmp	r2, r1
 8009282:	d100      	bne.n	8009286 <memmove+0x2a>
 8009284:	bd10      	pop	{r4, pc}
 8009286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800928a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800928e:	e7f7      	b.n	8009280 <memmove+0x24>

08009290 <_sbrk_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d06      	ldr	r5, [pc, #24]	; (80092ac <_sbrk_r+0x1c>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7f8 f806 	bl	80012ac <_sbrk>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_sbrk_r+0x1a>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_sbrk_r+0x1a>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20000624 	.word	0x20000624

080092b0 <memcpy>:
 80092b0:	440a      	add	r2, r1
 80092b2:	4291      	cmp	r1, r2
 80092b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80092b8:	d100      	bne.n	80092bc <memcpy+0xc>
 80092ba:	4770      	bx	lr
 80092bc:	b510      	push	{r4, lr}
 80092be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092c6:	4291      	cmp	r1, r2
 80092c8:	d1f9      	bne.n	80092be <memcpy+0xe>
 80092ca:	bd10      	pop	{r4, pc}

080092cc <abort>:
 80092cc:	b508      	push	{r3, lr}
 80092ce:	2006      	movs	r0, #6
 80092d0:	f000 fa34 	bl	800973c <raise>
 80092d4:	2001      	movs	r0, #1
 80092d6:	f7f7 ff71 	bl	80011bc <_exit>

080092da <_realloc_r>:
 80092da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092de:	4680      	mov	r8, r0
 80092e0:	4614      	mov	r4, r2
 80092e2:	460e      	mov	r6, r1
 80092e4:	b921      	cbnz	r1, 80092f0 <_realloc_r+0x16>
 80092e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ea:	4611      	mov	r1, r2
 80092ec:	f7ff bb82 	b.w	80089f4 <_malloc_r>
 80092f0:	b92a      	cbnz	r2, 80092fe <_realloc_r+0x24>
 80092f2:	f7ff fb0b 	bl	800890c <_free_r>
 80092f6:	4625      	mov	r5, r4
 80092f8:	4628      	mov	r0, r5
 80092fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092fe:	f000 fa39 	bl	8009774 <_malloc_usable_size_r>
 8009302:	4284      	cmp	r4, r0
 8009304:	4607      	mov	r7, r0
 8009306:	d802      	bhi.n	800930e <_realloc_r+0x34>
 8009308:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800930c:	d812      	bhi.n	8009334 <_realloc_r+0x5a>
 800930e:	4621      	mov	r1, r4
 8009310:	4640      	mov	r0, r8
 8009312:	f7ff fb6f 	bl	80089f4 <_malloc_r>
 8009316:	4605      	mov	r5, r0
 8009318:	2800      	cmp	r0, #0
 800931a:	d0ed      	beq.n	80092f8 <_realloc_r+0x1e>
 800931c:	42bc      	cmp	r4, r7
 800931e:	4622      	mov	r2, r4
 8009320:	4631      	mov	r1, r6
 8009322:	bf28      	it	cs
 8009324:	463a      	movcs	r2, r7
 8009326:	f7ff ffc3 	bl	80092b0 <memcpy>
 800932a:	4631      	mov	r1, r6
 800932c:	4640      	mov	r0, r8
 800932e:	f7ff faed 	bl	800890c <_free_r>
 8009332:	e7e1      	b.n	80092f8 <_realloc_r+0x1e>
 8009334:	4635      	mov	r5, r6
 8009336:	e7df      	b.n	80092f8 <_realloc_r+0x1e>

08009338 <__sfputc_r>:
 8009338:	6893      	ldr	r3, [r2, #8]
 800933a:	3b01      	subs	r3, #1
 800933c:	2b00      	cmp	r3, #0
 800933e:	b410      	push	{r4}
 8009340:	6093      	str	r3, [r2, #8]
 8009342:	da08      	bge.n	8009356 <__sfputc_r+0x1e>
 8009344:	6994      	ldr	r4, [r2, #24]
 8009346:	42a3      	cmp	r3, r4
 8009348:	db01      	blt.n	800934e <__sfputc_r+0x16>
 800934a:	290a      	cmp	r1, #10
 800934c:	d103      	bne.n	8009356 <__sfputc_r+0x1e>
 800934e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009352:	f000 b935 	b.w	80095c0 <__swbuf_r>
 8009356:	6813      	ldr	r3, [r2, #0]
 8009358:	1c58      	adds	r0, r3, #1
 800935a:	6010      	str	r0, [r2, #0]
 800935c:	7019      	strb	r1, [r3, #0]
 800935e:	4608      	mov	r0, r1
 8009360:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009364:	4770      	bx	lr

08009366 <__sfputs_r>:
 8009366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009368:	4606      	mov	r6, r0
 800936a:	460f      	mov	r7, r1
 800936c:	4614      	mov	r4, r2
 800936e:	18d5      	adds	r5, r2, r3
 8009370:	42ac      	cmp	r4, r5
 8009372:	d101      	bne.n	8009378 <__sfputs_r+0x12>
 8009374:	2000      	movs	r0, #0
 8009376:	e007      	b.n	8009388 <__sfputs_r+0x22>
 8009378:	f814 1b01 	ldrb.w	r1, [r4], #1
 800937c:	463a      	mov	r2, r7
 800937e:	4630      	mov	r0, r6
 8009380:	f7ff ffda 	bl	8009338 <__sfputc_r>
 8009384:	1c43      	adds	r3, r0, #1
 8009386:	d1f3      	bne.n	8009370 <__sfputs_r+0xa>
 8009388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800938c <_vfiprintf_r>:
 800938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009390:	460d      	mov	r5, r1
 8009392:	b09d      	sub	sp, #116	; 0x74
 8009394:	4614      	mov	r4, r2
 8009396:	4698      	mov	r8, r3
 8009398:	4606      	mov	r6, r0
 800939a:	b118      	cbz	r0, 80093a4 <_vfiprintf_r+0x18>
 800939c:	6a03      	ldr	r3, [r0, #32]
 800939e:	b90b      	cbnz	r3, 80093a4 <_vfiprintf_r+0x18>
 80093a0:	f7ff f912 	bl	80085c8 <__sinit>
 80093a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093a6:	07d9      	lsls	r1, r3, #31
 80093a8:	d405      	bmi.n	80093b6 <_vfiprintf_r+0x2a>
 80093aa:	89ab      	ldrh	r3, [r5, #12]
 80093ac:	059a      	lsls	r2, r3, #22
 80093ae:	d402      	bmi.n	80093b6 <_vfiprintf_r+0x2a>
 80093b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093b2:	f7ff fa8b 	bl	80088cc <__retarget_lock_acquire_recursive>
 80093b6:	89ab      	ldrh	r3, [r5, #12]
 80093b8:	071b      	lsls	r3, r3, #28
 80093ba:	d501      	bpl.n	80093c0 <_vfiprintf_r+0x34>
 80093bc:	692b      	ldr	r3, [r5, #16]
 80093be:	b99b      	cbnz	r3, 80093e8 <_vfiprintf_r+0x5c>
 80093c0:	4629      	mov	r1, r5
 80093c2:	4630      	mov	r0, r6
 80093c4:	f000 f93a 	bl	800963c <__swsetup_r>
 80093c8:	b170      	cbz	r0, 80093e8 <_vfiprintf_r+0x5c>
 80093ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80093cc:	07dc      	lsls	r4, r3, #31
 80093ce:	d504      	bpl.n	80093da <_vfiprintf_r+0x4e>
 80093d0:	f04f 30ff 	mov.w	r0, #4294967295
 80093d4:	b01d      	add	sp, #116	; 0x74
 80093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093da:	89ab      	ldrh	r3, [r5, #12]
 80093dc:	0598      	lsls	r0, r3, #22
 80093de:	d4f7      	bmi.n	80093d0 <_vfiprintf_r+0x44>
 80093e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80093e2:	f7ff fa74 	bl	80088ce <__retarget_lock_release_recursive>
 80093e6:	e7f3      	b.n	80093d0 <_vfiprintf_r+0x44>
 80093e8:	2300      	movs	r3, #0
 80093ea:	9309      	str	r3, [sp, #36]	; 0x24
 80093ec:	2320      	movs	r3, #32
 80093ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80093f2:	f8cd 800c 	str.w	r8, [sp, #12]
 80093f6:	2330      	movs	r3, #48	; 0x30
 80093f8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80095ac <_vfiprintf_r+0x220>
 80093fc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009400:	f04f 0901 	mov.w	r9, #1
 8009404:	4623      	mov	r3, r4
 8009406:	469a      	mov	sl, r3
 8009408:	f813 2b01 	ldrb.w	r2, [r3], #1
 800940c:	b10a      	cbz	r2, 8009412 <_vfiprintf_r+0x86>
 800940e:	2a25      	cmp	r2, #37	; 0x25
 8009410:	d1f9      	bne.n	8009406 <_vfiprintf_r+0x7a>
 8009412:	ebba 0b04 	subs.w	fp, sl, r4
 8009416:	d00b      	beq.n	8009430 <_vfiprintf_r+0xa4>
 8009418:	465b      	mov	r3, fp
 800941a:	4622      	mov	r2, r4
 800941c:	4629      	mov	r1, r5
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ffa1 	bl	8009366 <__sfputs_r>
 8009424:	3001      	adds	r0, #1
 8009426:	f000 80a9 	beq.w	800957c <_vfiprintf_r+0x1f0>
 800942a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800942c:	445a      	add	r2, fp
 800942e:	9209      	str	r2, [sp, #36]	; 0x24
 8009430:	f89a 3000 	ldrb.w	r3, [sl]
 8009434:	2b00      	cmp	r3, #0
 8009436:	f000 80a1 	beq.w	800957c <_vfiprintf_r+0x1f0>
 800943a:	2300      	movs	r3, #0
 800943c:	f04f 32ff 	mov.w	r2, #4294967295
 8009440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009444:	f10a 0a01 	add.w	sl, sl, #1
 8009448:	9304      	str	r3, [sp, #16]
 800944a:	9307      	str	r3, [sp, #28]
 800944c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009450:	931a      	str	r3, [sp, #104]	; 0x68
 8009452:	4654      	mov	r4, sl
 8009454:	2205      	movs	r2, #5
 8009456:	f814 1b01 	ldrb.w	r1, [r4], #1
 800945a:	4854      	ldr	r0, [pc, #336]	; (80095ac <_vfiprintf_r+0x220>)
 800945c:	f7f6 fef8 	bl	8000250 <memchr>
 8009460:	9a04      	ldr	r2, [sp, #16]
 8009462:	b9d8      	cbnz	r0, 800949c <_vfiprintf_r+0x110>
 8009464:	06d1      	lsls	r1, r2, #27
 8009466:	bf44      	itt	mi
 8009468:	2320      	movmi	r3, #32
 800946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800946e:	0713      	lsls	r3, r2, #28
 8009470:	bf44      	itt	mi
 8009472:	232b      	movmi	r3, #43	; 0x2b
 8009474:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009478:	f89a 3000 	ldrb.w	r3, [sl]
 800947c:	2b2a      	cmp	r3, #42	; 0x2a
 800947e:	d015      	beq.n	80094ac <_vfiprintf_r+0x120>
 8009480:	9a07      	ldr	r2, [sp, #28]
 8009482:	4654      	mov	r4, sl
 8009484:	2000      	movs	r0, #0
 8009486:	f04f 0c0a 	mov.w	ip, #10
 800948a:	4621      	mov	r1, r4
 800948c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009490:	3b30      	subs	r3, #48	; 0x30
 8009492:	2b09      	cmp	r3, #9
 8009494:	d94d      	bls.n	8009532 <_vfiprintf_r+0x1a6>
 8009496:	b1b0      	cbz	r0, 80094c6 <_vfiprintf_r+0x13a>
 8009498:	9207      	str	r2, [sp, #28]
 800949a:	e014      	b.n	80094c6 <_vfiprintf_r+0x13a>
 800949c:	eba0 0308 	sub.w	r3, r0, r8
 80094a0:	fa09 f303 	lsl.w	r3, r9, r3
 80094a4:	4313      	orrs	r3, r2
 80094a6:	9304      	str	r3, [sp, #16]
 80094a8:	46a2      	mov	sl, r4
 80094aa:	e7d2      	b.n	8009452 <_vfiprintf_r+0xc6>
 80094ac:	9b03      	ldr	r3, [sp, #12]
 80094ae:	1d19      	adds	r1, r3, #4
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	9103      	str	r1, [sp, #12]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	bfbb      	ittet	lt
 80094b8:	425b      	neglt	r3, r3
 80094ba:	f042 0202 	orrlt.w	r2, r2, #2
 80094be:	9307      	strge	r3, [sp, #28]
 80094c0:	9307      	strlt	r3, [sp, #28]
 80094c2:	bfb8      	it	lt
 80094c4:	9204      	strlt	r2, [sp, #16]
 80094c6:	7823      	ldrb	r3, [r4, #0]
 80094c8:	2b2e      	cmp	r3, #46	; 0x2e
 80094ca:	d10c      	bne.n	80094e6 <_vfiprintf_r+0x15a>
 80094cc:	7863      	ldrb	r3, [r4, #1]
 80094ce:	2b2a      	cmp	r3, #42	; 0x2a
 80094d0:	d134      	bne.n	800953c <_vfiprintf_r+0x1b0>
 80094d2:	9b03      	ldr	r3, [sp, #12]
 80094d4:	1d1a      	adds	r2, r3, #4
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	9203      	str	r2, [sp, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	bfb8      	it	lt
 80094de:	f04f 33ff 	movlt.w	r3, #4294967295
 80094e2:	3402      	adds	r4, #2
 80094e4:	9305      	str	r3, [sp, #20]
 80094e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80095bc <_vfiprintf_r+0x230>
 80094ea:	7821      	ldrb	r1, [r4, #0]
 80094ec:	2203      	movs	r2, #3
 80094ee:	4650      	mov	r0, sl
 80094f0:	f7f6 feae 	bl	8000250 <memchr>
 80094f4:	b138      	cbz	r0, 8009506 <_vfiprintf_r+0x17a>
 80094f6:	9b04      	ldr	r3, [sp, #16]
 80094f8:	eba0 000a 	sub.w	r0, r0, sl
 80094fc:	2240      	movs	r2, #64	; 0x40
 80094fe:	4082      	lsls	r2, r0
 8009500:	4313      	orrs	r3, r2
 8009502:	3401      	adds	r4, #1
 8009504:	9304      	str	r3, [sp, #16]
 8009506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800950a:	4829      	ldr	r0, [pc, #164]	; (80095b0 <_vfiprintf_r+0x224>)
 800950c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009510:	2206      	movs	r2, #6
 8009512:	f7f6 fe9d 	bl	8000250 <memchr>
 8009516:	2800      	cmp	r0, #0
 8009518:	d03f      	beq.n	800959a <_vfiprintf_r+0x20e>
 800951a:	4b26      	ldr	r3, [pc, #152]	; (80095b4 <_vfiprintf_r+0x228>)
 800951c:	bb1b      	cbnz	r3, 8009566 <_vfiprintf_r+0x1da>
 800951e:	9b03      	ldr	r3, [sp, #12]
 8009520:	3307      	adds	r3, #7
 8009522:	f023 0307 	bic.w	r3, r3, #7
 8009526:	3308      	adds	r3, #8
 8009528:	9303      	str	r3, [sp, #12]
 800952a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800952c:	443b      	add	r3, r7
 800952e:	9309      	str	r3, [sp, #36]	; 0x24
 8009530:	e768      	b.n	8009404 <_vfiprintf_r+0x78>
 8009532:	fb0c 3202 	mla	r2, ip, r2, r3
 8009536:	460c      	mov	r4, r1
 8009538:	2001      	movs	r0, #1
 800953a:	e7a6      	b.n	800948a <_vfiprintf_r+0xfe>
 800953c:	2300      	movs	r3, #0
 800953e:	3401      	adds	r4, #1
 8009540:	9305      	str	r3, [sp, #20]
 8009542:	4619      	mov	r1, r3
 8009544:	f04f 0c0a 	mov.w	ip, #10
 8009548:	4620      	mov	r0, r4
 800954a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800954e:	3a30      	subs	r2, #48	; 0x30
 8009550:	2a09      	cmp	r2, #9
 8009552:	d903      	bls.n	800955c <_vfiprintf_r+0x1d0>
 8009554:	2b00      	cmp	r3, #0
 8009556:	d0c6      	beq.n	80094e6 <_vfiprintf_r+0x15a>
 8009558:	9105      	str	r1, [sp, #20]
 800955a:	e7c4      	b.n	80094e6 <_vfiprintf_r+0x15a>
 800955c:	fb0c 2101 	mla	r1, ip, r1, r2
 8009560:	4604      	mov	r4, r0
 8009562:	2301      	movs	r3, #1
 8009564:	e7f0      	b.n	8009548 <_vfiprintf_r+0x1bc>
 8009566:	ab03      	add	r3, sp, #12
 8009568:	9300      	str	r3, [sp, #0]
 800956a:	462a      	mov	r2, r5
 800956c:	4b12      	ldr	r3, [pc, #72]	; (80095b8 <_vfiprintf_r+0x22c>)
 800956e:	a904      	add	r1, sp, #16
 8009570:	4630      	mov	r0, r6
 8009572:	f3af 8000 	nop.w
 8009576:	4607      	mov	r7, r0
 8009578:	1c78      	adds	r0, r7, #1
 800957a:	d1d6      	bne.n	800952a <_vfiprintf_r+0x19e>
 800957c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800957e:	07d9      	lsls	r1, r3, #31
 8009580:	d405      	bmi.n	800958e <_vfiprintf_r+0x202>
 8009582:	89ab      	ldrh	r3, [r5, #12]
 8009584:	059a      	lsls	r2, r3, #22
 8009586:	d402      	bmi.n	800958e <_vfiprintf_r+0x202>
 8009588:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800958a:	f7ff f9a0 	bl	80088ce <__retarget_lock_release_recursive>
 800958e:	89ab      	ldrh	r3, [r5, #12]
 8009590:	065b      	lsls	r3, r3, #25
 8009592:	f53f af1d 	bmi.w	80093d0 <_vfiprintf_r+0x44>
 8009596:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009598:	e71c      	b.n	80093d4 <_vfiprintf_r+0x48>
 800959a:	ab03      	add	r3, sp, #12
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	462a      	mov	r2, r5
 80095a0:	4b05      	ldr	r3, [pc, #20]	; (80095b8 <_vfiprintf_r+0x22c>)
 80095a2:	a904      	add	r1, sp, #16
 80095a4:	4630      	mov	r0, r6
 80095a6:	f7ff fc77 	bl	8008e98 <_printf_i>
 80095aa:	e7e4      	b.n	8009576 <_vfiprintf_r+0x1ea>
 80095ac:	08009b0e 	.word	0x08009b0e
 80095b0:	08009b18 	.word	0x08009b18
 80095b4:	00000000 	.word	0x00000000
 80095b8:	08009367 	.word	0x08009367
 80095bc:	08009b14 	.word	0x08009b14

080095c0 <__swbuf_r>:
 80095c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095c2:	460e      	mov	r6, r1
 80095c4:	4614      	mov	r4, r2
 80095c6:	4605      	mov	r5, r0
 80095c8:	b118      	cbz	r0, 80095d2 <__swbuf_r+0x12>
 80095ca:	6a03      	ldr	r3, [r0, #32]
 80095cc:	b90b      	cbnz	r3, 80095d2 <__swbuf_r+0x12>
 80095ce:	f7fe fffb 	bl	80085c8 <__sinit>
 80095d2:	69a3      	ldr	r3, [r4, #24]
 80095d4:	60a3      	str	r3, [r4, #8]
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	071a      	lsls	r2, r3, #28
 80095da:	d525      	bpl.n	8009628 <__swbuf_r+0x68>
 80095dc:	6923      	ldr	r3, [r4, #16]
 80095de:	b31b      	cbz	r3, 8009628 <__swbuf_r+0x68>
 80095e0:	6823      	ldr	r3, [r4, #0]
 80095e2:	6922      	ldr	r2, [r4, #16]
 80095e4:	1a98      	subs	r0, r3, r2
 80095e6:	6963      	ldr	r3, [r4, #20]
 80095e8:	b2f6      	uxtb	r6, r6
 80095ea:	4283      	cmp	r3, r0
 80095ec:	4637      	mov	r7, r6
 80095ee:	dc04      	bgt.n	80095fa <__swbuf_r+0x3a>
 80095f0:	4621      	mov	r1, r4
 80095f2:	4628      	mov	r0, r5
 80095f4:	f7ff fdf8 	bl	80091e8 <_fflush_r>
 80095f8:	b9e0      	cbnz	r0, 8009634 <__swbuf_r+0x74>
 80095fa:	68a3      	ldr	r3, [r4, #8]
 80095fc:	3b01      	subs	r3, #1
 80095fe:	60a3      	str	r3, [r4, #8]
 8009600:	6823      	ldr	r3, [r4, #0]
 8009602:	1c5a      	adds	r2, r3, #1
 8009604:	6022      	str	r2, [r4, #0]
 8009606:	701e      	strb	r6, [r3, #0]
 8009608:	6962      	ldr	r2, [r4, #20]
 800960a:	1c43      	adds	r3, r0, #1
 800960c:	429a      	cmp	r2, r3
 800960e:	d004      	beq.n	800961a <__swbuf_r+0x5a>
 8009610:	89a3      	ldrh	r3, [r4, #12]
 8009612:	07db      	lsls	r3, r3, #31
 8009614:	d506      	bpl.n	8009624 <__swbuf_r+0x64>
 8009616:	2e0a      	cmp	r6, #10
 8009618:	d104      	bne.n	8009624 <__swbuf_r+0x64>
 800961a:	4621      	mov	r1, r4
 800961c:	4628      	mov	r0, r5
 800961e:	f7ff fde3 	bl	80091e8 <_fflush_r>
 8009622:	b938      	cbnz	r0, 8009634 <__swbuf_r+0x74>
 8009624:	4638      	mov	r0, r7
 8009626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009628:	4621      	mov	r1, r4
 800962a:	4628      	mov	r0, r5
 800962c:	f000 f806 	bl	800963c <__swsetup_r>
 8009630:	2800      	cmp	r0, #0
 8009632:	d0d5      	beq.n	80095e0 <__swbuf_r+0x20>
 8009634:	f04f 37ff 	mov.w	r7, #4294967295
 8009638:	e7f4      	b.n	8009624 <__swbuf_r+0x64>
	...

0800963c <__swsetup_r>:
 800963c:	b538      	push	{r3, r4, r5, lr}
 800963e:	4b2a      	ldr	r3, [pc, #168]	; (80096e8 <__swsetup_r+0xac>)
 8009640:	4605      	mov	r5, r0
 8009642:	6818      	ldr	r0, [r3, #0]
 8009644:	460c      	mov	r4, r1
 8009646:	b118      	cbz	r0, 8009650 <__swsetup_r+0x14>
 8009648:	6a03      	ldr	r3, [r0, #32]
 800964a:	b90b      	cbnz	r3, 8009650 <__swsetup_r+0x14>
 800964c:	f7fe ffbc 	bl	80085c8 <__sinit>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009656:	0718      	lsls	r0, r3, #28
 8009658:	d422      	bmi.n	80096a0 <__swsetup_r+0x64>
 800965a:	06d9      	lsls	r1, r3, #27
 800965c:	d407      	bmi.n	800966e <__swsetup_r+0x32>
 800965e:	2309      	movs	r3, #9
 8009660:	602b      	str	r3, [r5, #0]
 8009662:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009666:	81a3      	strh	r3, [r4, #12]
 8009668:	f04f 30ff 	mov.w	r0, #4294967295
 800966c:	e034      	b.n	80096d8 <__swsetup_r+0x9c>
 800966e:	0758      	lsls	r0, r3, #29
 8009670:	d512      	bpl.n	8009698 <__swsetup_r+0x5c>
 8009672:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009674:	b141      	cbz	r1, 8009688 <__swsetup_r+0x4c>
 8009676:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800967a:	4299      	cmp	r1, r3
 800967c:	d002      	beq.n	8009684 <__swsetup_r+0x48>
 800967e:	4628      	mov	r0, r5
 8009680:	f7ff f944 	bl	800890c <_free_r>
 8009684:	2300      	movs	r3, #0
 8009686:	6363      	str	r3, [r4, #52]	; 0x34
 8009688:	89a3      	ldrh	r3, [r4, #12]
 800968a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800968e:	81a3      	strh	r3, [r4, #12]
 8009690:	2300      	movs	r3, #0
 8009692:	6063      	str	r3, [r4, #4]
 8009694:	6923      	ldr	r3, [r4, #16]
 8009696:	6023      	str	r3, [r4, #0]
 8009698:	89a3      	ldrh	r3, [r4, #12]
 800969a:	f043 0308 	orr.w	r3, r3, #8
 800969e:	81a3      	strh	r3, [r4, #12]
 80096a0:	6923      	ldr	r3, [r4, #16]
 80096a2:	b94b      	cbnz	r3, 80096b8 <__swsetup_r+0x7c>
 80096a4:	89a3      	ldrh	r3, [r4, #12]
 80096a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80096aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80096ae:	d003      	beq.n	80096b8 <__swsetup_r+0x7c>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4628      	mov	r0, r5
 80096b4:	f000 f88c 	bl	80097d0 <__smakebuf_r>
 80096b8:	89a0      	ldrh	r0, [r4, #12]
 80096ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80096be:	f010 0301 	ands.w	r3, r0, #1
 80096c2:	d00a      	beq.n	80096da <__swsetup_r+0x9e>
 80096c4:	2300      	movs	r3, #0
 80096c6:	60a3      	str	r3, [r4, #8]
 80096c8:	6963      	ldr	r3, [r4, #20]
 80096ca:	425b      	negs	r3, r3
 80096cc:	61a3      	str	r3, [r4, #24]
 80096ce:	6923      	ldr	r3, [r4, #16]
 80096d0:	b943      	cbnz	r3, 80096e4 <__swsetup_r+0xa8>
 80096d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80096d6:	d1c4      	bne.n	8009662 <__swsetup_r+0x26>
 80096d8:	bd38      	pop	{r3, r4, r5, pc}
 80096da:	0781      	lsls	r1, r0, #30
 80096dc:	bf58      	it	pl
 80096de:	6963      	ldrpl	r3, [r4, #20]
 80096e0:	60a3      	str	r3, [r4, #8]
 80096e2:	e7f4      	b.n	80096ce <__swsetup_r+0x92>
 80096e4:	2000      	movs	r0, #0
 80096e6:	e7f7      	b.n	80096d8 <__swsetup_r+0x9c>
 80096e8:	20000124 	.word	0x20000124

080096ec <_raise_r>:
 80096ec:	291f      	cmp	r1, #31
 80096ee:	b538      	push	{r3, r4, r5, lr}
 80096f0:	4604      	mov	r4, r0
 80096f2:	460d      	mov	r5, r1
 80096f4:	d904      	bls.n	8009700 <_raise_r+0x14>
 80096f6:	2316      	movs	r3, #22
 80096f8:	6003      	str	r3, [r0, #0]
 80096fa:	f04f 30ff 	mov.w	r0, #4294967295
 80096fe:	bd38      	pop	{r3, r4, r5, pc}
 8009700:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009702:	b112      	cbz	r2, 800970a <_raise_r+0x1e>
 8009704:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009708:	b94b      	cbnz	r3, 800971e <_raise_r+0x32>
 800970a:	4620      	mov	r0, r4
 800970c:	f000 f830 	bl	8009770 <_getpid_r>
 8009710:	462a      	mov	r2, r5
 8009712:	4601      	mov	r1, r0
 8009714:	4620      	mov	r0, r4
 8009716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800971a:	f000 b817 	b.w	800974c <_kill_r>
 800971e:	2b01      	cmp	r3, #1
 8009720:	d00a      	beq.n	8009738 <_raise_r+0x4c>
 8009722:	1c59      	adds	r1, r3, #1
 8009724:	d103      	bne.n	800972e <_raise_r+0x42>
 8009726:	2316      	movs	r3, #22
 8009728:	6003      	str	r3, [r0, #0]
 800972a:	2001      	movs	r0, #1
 800972c:	e7e7      	b.n	80096fe <_raise_r+0x12>
 800972e:	2400      	movs	r4, #0
 8009730:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009734:	4628      	mov	r0, r5
 8009736:	4798      	blx	r3
 8009738:	2000      	movs	r0, #0
 800973a:	e7e0      	b.n	80096fe <_raise_r+0x12>

0800973c <raise>:
 800973c:	4b02      	ldr	r3, [pc, #8]	; (8009748 <raise+0xc>)
 800973e:	4601      	mov	r1, r0
 8009740:	6818      	ldr	r0, [r3, #0]
 8009742:	f7ff bfd3 	b.w	80096ec <_raise_r>
 8009746:	bf00      	nop
 8009748:	20000124 	.word	0x20000124

0800974c <_kill_r>:
 800974c:	b538      	push	{r3, r4, r5, lr}
 800974e:	4d07      	ldr	r5, [pc, #28]	; (800976c <_kill_r+0x20>)
 8009750:	2300      	movs	r3, #0
 8009752:	4604      	mov	r4, r0
 8009754:	4608      	mov	r0, r1
 8009756:	4611      	mov	r1, r2
 8009758:	602b      	str	r3, [r5, #0]
 800975a:	f7f7 fd1f 	bl	800119c <_kill>
 800975e:	1c43      	adds	r3, r0, #1
 8009760:	d102      	bne.n	8009768 <_kill_r+0x1c>
 8009762:	682b      	ldr	r3, [r5, #0]
 8009764:	b103      	cbz	r3, 8009768 <_kill_r+0x1c>
 8009766:	6023      	str	r3, [r4, #0]
 8009768:	bd38      	pop	{r3, r4, r5, pc}
 800976a:	bf00      	nop
 800976c:	20000624 	.word	0x20000624

08009770 <_getpid_r>:
 8009770:	f7f7 bd0c 	b.w	800118c <_getpid>

08009774 <_malloc_usable_size_r>:
 8009774:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009778:	1f18      	subs	r0, r3, #4
 800977a:	2b00      	cmp	r3, #0
 800977c:	bfbc      	itt	lt
 800977e:	580b      	ldrlt	r3, [r1, r0]
 8009780:	18c0      	addlt	r0, r0, r3
 8009782:	4770      	bx	lr

08009784 <__swhatbuf_r>:
 8009784:	b570      	push	{r4, r5, r6, lr}
 8009786:	460c      	mov	r4, r1
 8009788:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800978c:	2900      	cmp	r1, #0
 800978e:	b096      	sub	sp, #88	; 0x58
 8009790:	4615      	mov	r5, r2
 8009792:	461e      	mov	r6, r3
 8009794:	da0d      	bge.n	80097b2 <__swhatbuf_r+0x2e>
 8009796:	89a3      	ldrh	r3, [r4, #12]
 8009798:	f013 0f80 	tst.w	r3, #128	; 0x80
 800979c:	f04f 0100 	mov.w	r1, #0
 80097a0:	bf0c      	ite	eq
 80097a2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80097a6:	2340      	movne	r3, #64	; 0x40
 80097a8:	2000      	movs	r0, #0
 80097aa:	6031      	str	r1, [r6, #0]
 80097ac:	602b      	str	r3, [r5, #0]
 80097ae:	b016      	add	sp, #88	; 0x58
 80097b0:	bd70      	pop	{r4, r5, r6, pc}
 80097b2:	466a      	mov	r2, sp
 80097b4:	f000 f848 	bl	8009848 <_fstat_r>
 80097b8:	2800      	cmp	r0, #0
 80097ba:	dbec      	blt.n	8009796 <__swhatbuf_r+0x12>
 80097bc:	9901      	ldr	r1, [sp, #4]
 80097be:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80097c2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80097c6:	4259      	negs	r1, r3
 80097c8:	4159      	adcs	r1, r3
 80097ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80097ce:	e7eb      	b.n	80097a8 <__swhatbuf_r+0x24>

080097d0 <__smakebuf_r>:
 80097d0:	898b      	ldrh	r3, [r1, #12]
 80097d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80097d4:	079d      	lsls	r5, r3, #30
 80097d6:	4606      	mov	r6, r0
 80097d8:	460c      	mov	r4, r1
 80097da:	d507      	bpl.n	80097ec <__smakebuf_r+0x1c>
 80097dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80097e0:	6023      	str	r3, [r4, #0]
 80097e2:	6123      	str	r3, [r4, #16]
 80097e4:	2301      	movs	r3, #1
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	b002      	add	sp, #8
 80097ea:	bd70      	pop	{r4, r5, r6, pc}
 80097ec:	ab01      	add	r3, sp, #4
 80097ee:	466a      	mov	r2, sp
 80097f0:	f7ff ffc8 	bl	8009784 <__swhatbuf_r>
 80097f4:	9900      	ldr	r1, [sp, #0]
 80097f6:	4605      	mov	r5, r0
 80097f8:	4630      	mov	r0, r6
 80097fa:	f7ff f8fb 	bl	80089f4 <_malloc_r>
 80097fe:	b948      	cbnz	r0, 8009814 <__smakebuf_r+0x44>
 8009800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009804:	059a      	lsls	r2, r3, #22
 8009806:	d4ef      	bmi.n	80097e8 <__smakebuf_r+0x18>
 8009808:	f023 0303 	bic.w	r3, r3, #3
 800980c:	f043 0302 	orr.w	r3, r3, #2
 8009810:	81a3      	strh	r3, [r4, #12]
 8009812:	e7e3      	b.n	80097dc <__smakebuf_r+0xc>
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	6020      	str	r0, [r4, #0]
 8009818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800981c:	81a3      	strh	r3, [r4, #12]
 800981e:	9b00      	ldr	r3, [sp, #0]
 8009820:	6163      	str	r3, [r4, #20]
 8009822:	9b01      	ldr	r3, [sp, #4]
 8009824:	6120      	str	r0, [r4, #16]
 8009826:	b15b      	cbz	r3, 8009840 <__smakebuf_r+0x70>
 8009828:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800982c:	4630      	mov	r0, r6
 800982e:	f000 f81d 	bl	800986c <_isatty_r>
 8009832:	b128      	cbz	r0, 8009840 <__smakebuf_r+0x70>
 8009834:	89a3      	ldrh	r3, [r4, #12]
 8009836:	f023 0303 	bic.w	r3, r3, #3
 800983a:	f043 0301 	orr.w	r3, r3, #1
 800983e:	81a3      	strh	r3, [r4, #12]
 8009840:	89a3      	ldrh	r3, [r4, #12]
 8009842:	431d      	orrs	r5, r3
 8009844:	81a5      	strh	r5, [r4, #12]
 8009846:	e7cf      	b.n	80097e8 <__smakebuf_r+0x18>

08009848 <_fstat_r>:
 8009848:	b538      	push	{r3, r4, r5, lr}
 800984a:	4d07      	ldr	r5, [pc, #28]	; (8009868 <_fstat_r+0x20>)
 800984c:	2300      	movs	r3, #0
 800984e:	4604      	mov	r4, r0
 8009850:	4608      	mov	r0, r1
 8009852:	4611      	mov	r1, r2
 8009854:	602b      	str	r3, [r5, #0]
 8009856:	f7f7 fd00 	bl	800125a <_fstat>
 800985a:	1c43      	adds	r3, r0, #1
 800985c:	d102      	bne.n	8009864 <_fstat_r+0x1c>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	b103      	cbz	r3, 8009864 <_fstat_r+0x1c>
 8009862:	6023      	str	r3, [r4, #0]
 8009864:	bd38      	pop	{r3, r4, r5, pc}
 8009866:	bf00      	nop
 8009868:	20000624 	.word	0x20000624

0800986c <_isatty_r>:
 800986c:	b538      	push	{r3, r4, r5, lr}
 800986e:	4d06      	ldr	r5, [pc, #24]	; (8009888 <_isatty_r+0x1c>)
 8009870:	2300      	movs	r3, #0
 8009872:	4604      	mov	r4, r0
 8009874:	4608      	mov	r0, r1
 8009876:	602b      	str	r3, [r5, #0]
 8009878:	f7f7 fcff 	bl	800127a <_isatty>
 800987c:	1c43      	adds	r3, r0, #1
 800987e:	d102      	bne.n	8009886 <_isatty_r+0x1a>
 8009880:	682b      	ldr	r3, [r5, #0]
 8009882:	b103      	cbz	r3, 8009886 <_isatty_r+0x1a>
 8009884:	6023      	str	r3, [r4, #0]
 8009886:	bd38      	pop	{r3, r4, r5, pc}
 8009888:	20000624 	.word	0x20000624

0800988c <_init>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	bf00      	nop
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr

08009898 <_fini>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	bf00      	nop
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr
