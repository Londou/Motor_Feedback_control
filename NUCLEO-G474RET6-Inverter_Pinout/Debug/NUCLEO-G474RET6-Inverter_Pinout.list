
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800c558  0800c558  0001c558  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c9e8  0800c9e8  000202a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c9e8  0800c9e8  0001c9e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c9f0  0800c9f0  000202a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c9f0  0800c9f0  0001c9f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c9f4  0800c9f4  0001c9f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a4  20000000  0800c9f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  200002a4  0800cc9c  000202a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007b0  0800cc9c  000207b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202a4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b80f  00000000  00000000  00020317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a21  00000000  00000000  0003bb26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0003f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000112a  00000000  00000000  00040b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a9bd  00000000  00000000  00041cb2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c4bb  00000000  00000000  0006c66f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114eda  00000000  00000000  00088b2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007090  00000000  00000000  0019da04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  001a4a94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200002a4 	.word	0x200002a4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c53c 	.word	0x0800c53c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200002a8 	.word	0x200002a8
 800021c:	0800c53c 	.word	0x0800c53c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 f9b2 	bl	800a296 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f32:	4b32      	ldr	r3, [pc, #200]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3a:	4b30      	ldr	r3, [pc, #192]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b2e      	ldr	r3, [pc, #184]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b2c      	ldr	r3, [pc, #176]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f4e:	4b2b      	ldr	r3, [pc, #172]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f54:	4b29      	ldr	r3, [pc, #164]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b28      	ldr	r3, [pc, #160]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f60:	4b26      	ldr	r3, [pc, #152]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f66:	4b25      	ldr	r3, [pc, #148]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	4b23      	ldr	r3, [pc, #140]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b22      	ldr	r3, [pc, #136]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f7a:	4b20      	ldr	r3, [pc, #128]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f80:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f86:	4b1d      	ldr	r3, [pc, #116]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f8e:	4b1b      	ldr	r3, [pc, #108]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f94:	4b19      	ldr	r3, [pc, #100]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f9c:	4817      	ldr	r0, [pc, #92]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000f9e:	f001 fceb 	bl	8002978 <HAL_ADC_Init>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d001      	beq.n	8000fac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000fa8:	f000 faea 	bl	8001580 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fac:	2300      	movs	r3, #0
 8000fae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	4811      	ldr	r0, [pc, #68]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000fb8:	f002 feb0 	bl	8003d1c <HAL_ADCEx_MultiModeConfigChannel>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000fc2:	f000 fadd 	bl	8001580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000fc6:	4b0e      	ldr	r3, [pc, #56]	; (8001000 <MX_ADC1_Init+0xec>)
 8000fc8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fca:	2306      	movs	r3, #6
 8000fcc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd2:	237f      	movs	r3, #127	; 0x7f
 8000fd4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fd6:	2304      	movs	r3, #4
 8000fd8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4806      	ldr	r0, [pc, #24]	; (8000ffc <MX_ADC1_Init+0xe8>)
 8000fe4:	f002 f8b6 	bl	8003154 <HAL_ADC_ConfigChannel>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d001      	beq.n	8000ff2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000fee:	f000 fac7 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff2:	bf00      	nop
 8000ff4:	3730      	adds	r7, #48	; 0x30
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200002c0 	.word	0x200002c0
 8001000:	32601000 	.word	0x32601000

08001004 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b088      	sub	sp, #32
 8001008:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100a:	463b      	mov	r3, r7
 800100c:	2220      	movs	r2, #32
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f009 f940 	bl	800a296 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8001016:	4b2b      	ldr	r3, [pc, #172]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001018:	4a2b      	ldr	r2, [pc, #172]	; (80010c8 <MX_ADC2_Init+0xc4>)
 800101a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800101c:	4b29      	ldr	r3, [pc, #164]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800101e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001022:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001024:	4b27      	ldr	r3, [pc, #156]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102a:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001032:	2200      	movs	r2, #0
 8001034:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001038:	2200      	movs	r2, #0
 800103a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800103e:	2204      	movs	r2, #4
 8001040:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001044:	2200      	movs	r2, #0
 8001046:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001048:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800104a:	2200      	movs	r2, #0
 800104c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 800104e:	4b1d      	ldr	r3, [pc, #116]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001050:	2201      	movs	r2, #1
 8001052:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001056:	2200      	movs	r2, #0
 8001058:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800105e:	2200      	movs	r2, #0
 8001060:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001068:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC2_Init+0xc0>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001070:	4b14      	ldr	r3, [pc, #80]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001072:	2200      	movs	r2, #0
 8001074:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001076:	4b13      	ldr	r3, [pc, #76]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800107e:	4811      	ldr	r0, [pc, #68]	; (80010c4 <MX_ADC2_Init+0xc0>)
 8001080:	f001 fc7a 	bl	8002978 <HAL_ADC_Init>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 800108a:	f000 fa79 	bl	8001580 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <MX_ADC2_Init+0xc8>)
 8001090:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001092:	2306      	movs	r3, #6
 8001094:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8001096:	2300      	movs	r3, #0
 8001098:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800109a:	237f      	movs	r3, #127	; 0x7f
 800109c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800109e:	2304      	movs	r3, #4
 80010a0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010a2:	2300      	movs	r3, #0
 80010a4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010a6:	463b      	mov	r3, r7
 80010a8:	4619      	mov	r1, r3
 80010aa:	4806      	ldr	r0, [pc, #24]	; (80010c4 <MX_ADC2_Init+0xc0>)
 80010ac:	f002 f852 	bl	8003154 <HAL_ADC_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80010b6:	f000 fa63 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010ba:	bf00      	nop
 80010bc:	3720      	adds	r7, #32
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	2000032c 	.word	0x2000032c
 80010c8:	50000100 	.word	0x50000100
 80010cc:	19200040 	.word	0x19200040

080010d0 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0a4      	sub	sp, #144	; 0x90
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ec:	2254      	movs	r2, #84	; 0x54
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f009 f8d0 	bl	800a296 <memset>
  if(adcHandle->Instance==ADC1)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010fe:	d174      	bne.n	80011ea <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001100:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001104:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001106:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800110a:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800110c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001110:	4618      	mov	r0, r3
 8001112:	f004 f883 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800111c:	f000 fa30 	bl	8001580 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001120:	4b63      	ldr	r3, [pc, #396]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	3301      	adds	r3, #1
 8001126:	4a62      	ldr	r2, [pc, #392]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 8001128:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800112a:	4b61      	ldr	r3, [pc, #388]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b01      	cmp	r3, #1
 8001130:	d10b      	bne.n	800114a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001132:	4b60      	ldr	r3, [pc, #384]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	4a5f      	ldr	r2, [pc, #380]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001138:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113e:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001142:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001146:	627b      	str	r3, [r7, #36]	; 0x24
 8001148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800114a:	4b5a      	ldr	r3, [pc, #360]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 800114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114e:	4a59      	ldr	r2, [pc, #356]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001150:	f043 0304 	orr.w	r3, r3, #4
 8001154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001156:	4b57      	ldr	r3, [pc, #348]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	623b      	str	r3, [r7, #32]
 8001160:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001162:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001166:	4a53      	ldr	r2, [pc, #332]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800116e:	4b51      	ldr	r3, [pc, #324]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	61fb      	str	r3, [r7, #28]
 8001178:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117a:	4b4e      	ldr	r3, [pc, #312]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 800117c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800117e:	4a4d      	ldr	r2, [pc, #308]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001180:	f043 0302 	orr.w	r3, r3, #2
 8001184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001186:	4b4b      	ldr	r3, [pc, #300]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	f003 0302 	and.w	r3, r3, #2
 800118e:	61bb      	str	r3, [r7, #24]
 8001190:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 8001192:	2304      	movs	r3, #4
 8001194:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001196:	2303      	movs	r3, #3
 8001198:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80011a2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a6:	4619      	mov	r1, r3
 80011a8:	4843      	ldr	r0, [pc, #268]	; (80012b8 <HAL_ADC_MspInit+0x1e8>)
 80011aa:	f003 f85f 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011ae:	2302      	movs	r3, #2
 80011b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011be:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011c2:	4619      	mov	r1, r3
 80011c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011c8:	f003 f850 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|V_Imes_Pin;
 80011cc:	2303      	movs	r3, #3
 80011ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011d0:	2303      	movs	r3, #3
 80011d2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011dc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011e0:	4619      	mov	r1, r3
 80011e2:	4836      	ldr	r0, [pc, #216]	; (80012bc <HAL_ADC_MspInit+0x1ec>)
 80011e4:	f003 f842 	bl	800426c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80011e8:	e05e      	b.n	80012a8 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a34      	ldr	r2, [pc, #208]	; (80012c0 <HAL_ADC_MspInit+0x1f0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d159      	bne.n	80012a8 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011f4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011f8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011fa:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001200:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001204:	4618      	mov	r0, r3
 8001206:	f004 f809 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <HAL_ADC_MspInit+0x144>
      Error_Handler();
 8001210:	f000 f9b6 	bl	8001580 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001214:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3301      	adds	r3, #1
 800121a:	4a25      	ldr	r2, [pc, #148]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 800121c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_ADC_MspInit+0x1e0>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2b01      	cmp	r3, #1
 8001224:	d10b      	bne.n	800123e <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001226:	4b23      	ldr	r3, [pc, #140]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122a:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 800122c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001232:	4b20      	ldr	r3, [pc, #128]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800123a:	617b      	str	r3, [r7, #20]
 800123c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124a:	4b1a      	ldr	r3, [pc, #104]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800124e:	f003 0304 	and.w	r3, r3, #4
 8001252:	613b      	str	r3, [r7, #16]
 8001254:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b17      	ldr	r3, [pc, #92]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125a:	4a16      	ldr	r2, [pc, #88]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 800125c:	f043 0301 	orr.w	r3, r3, #1
 8001260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001262:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_ADC_MspInit+0x1e4>)
 8001264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001266:	f003 0301 	and.w	r3, r3, #1
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 800126e:	230b      	movs	r3, #11
 8001270:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001272:	2303      	movs	r3, #3
 8001274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800127e:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <HAL_ADC_MspInit+0x1e8>)
 8001286:	f002 fff1 	bl	800426c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 800128a:	2301      	movs	r3, #1
 800128c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800128e:	2303      	movs	r3, #3
 8001290:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f002 ffe2 	bl	800426c <HAL_GPIO_Init>
}
 80012a8:	bf00      	nop
 80012aa:	3790      	adds	r7, #144	; 0x90
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	20000398 	.word	0x20000398
 80012b4:	40021000 	.word	0x40021000
 80012b8:	48000800 	.word	0x48000800
 80012bc:	48000400 	.word	0x48000400
 80012c0:	50000100 	.word	0x50000100

080012c4 <mesure_Current_U>:
float gain=50; // mV/A
float offset_Voltage=5; //mV



void  mesure_Current_U(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b0a2      	sub	sp, #136	; 0x88
 80012c8:	af00      	add	r7, sp, #0
	float buffer[32];
	float measured_Value;
	float courant;
	HAL_ADC_Start(&hadc1);
 80012ca:	4824      	ldr	r0, [pc, #144]	; (800135c <mesure_Current_U+0x98>)
 80012cc:	f001 fd16 	bl	8002cfc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	4821      	ldr	r0, [pc, #132]	; (800135c <mesure_Current_U+0x98>)
 80012d6:	f001 fe29 	bl	8002f2c <HAL_ADC_PollForConversion>
	measured_Value = HAL_ADC_GetValue(&hadc1);
 80012da:	4820      	ldr	r0, [pc, #128]	; (800135c <mesure_Current_U+0x98>)
 80012dc:	f001 ff2c 	bl	8003138 <HAL_ADC_GetValue>
 80012e0:	ee07 0a90 	vmov	s15, r0
 80012e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80012e8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
	courant=1/gain*((plage_Dynamique*measured_Value)/digit_Max-offset_Voltage);
 80012ec:	4b1c      	ldr	r3, [pc, #112]	; (8001360 <mesure_Current_U+0x9c>)
 80012ee:	edd3 7a00 	vldr	s15, [r3]
 80012f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80012f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80012fa:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <mesure_Current_U+0xa0>)
 80012fc:	edd3 6a00 	vldr	s13, [r3]
 8001300:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 8001304:	ee26 6aa7 	vmul.f32	s12, s13, s15
 8001308:	4b17      	ldr	r3, [pc, #92]	; (8001368 <mesure_Current_U+0xa4>)
 800130a:	edd3 7a00 	vldr	s15, [r3]
 800130e:	eec6 6a27 	vdiv.f32	s13, s12, s15
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <mesure_Current_U+0xa8>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800131c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001320:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
	HAL_ADC_Stop(&hadc1);
 8001324:	480d      	ldr	r0, [pc, #52]	; (800135c <mesure_Current_U+0x98>)
 8001326:	f001 fdcd 	bl	8002ec4 <HAL_ADC_Stop>
	HAL_UART_Transmit(&huart2,(void*)buffer, sprintf((char*)buffer, "%f \r\n", (float) courant),10);
 800132a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800132e:	f7ff f943 	bl	80005b8 <__aeabi_f2d>
 8001332:	4602      	mov	r2, r0
 8001334:	460b      	mov	r3, r1
 8001336:	4638      	mov	r0, r7
 8001338:	490d      	ldr	r1, [pc, #52]	; (8001370 <mesure_Current_U+0xac>)
 800133a:	f008 ff49 	bl	800a1d0 <siprintf>
 800133e:	4603      	mov	r3, r0
 8001340:	b29a      	uxth	r2, r3
 8001342:	4639      	mov	r1, r7
 8001344:	230a      	movs	r3, #10
 8001346:	480b      	ldr	r0, [pc, #44]	; (8001374 <mesure_Current_U+0xb0>)
 8001348:	f006 f941 	bl	80075ce <HAL_UART_Transmit>
	HAL_Delay(1000);
 800134c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001350:	f001 f872 	bl	8002438 <HAL_Delay>
}
 8001354:	bf00      	nop
 8001356:	3788      	adds	r7, #136	; 0x88
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200002c0 	.word	0x200002c0
 8001360:	20000008 	.word	0x20000008
 8001364:	20000004 	.word	0x20000004
 8001368:	20000000 	.word	0x20000000
 800136c:	2000000c 	.word	0x2000000c
 8001370:	0800c558 	.word	0x0800c558
 8001374:	20000540 	.word	0x20000540

08001378 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b08a      	sub	sp, #40	; 0x28
 800137c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]
 800138a:	60da      	str	r2, [r3, #12]
 800138c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800138e:	4b3f      	ldr	r3, [pc, #252]	; (800148c <MX_GPIO_Init+0x114>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a3e      	ldr	r2, [pc, #248]	; (800148c <MX_GPIO_Init+0x114>)
 8001394:	f043 0304 	orr.w	r3, r3, #4
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b3c      	ldr	r3, [pc, #240]	; (800148c <MX_GPIO_Init+0x114>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0304 	and.w	r3, r3, #4
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	4b39      	ldr	r3, [pc, #228]	; (800148c <MX_GPIO_Init+0x114>)
 80013a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013aa:	4a38      	ldr	r2, [pc, #224]	; (800148c <MX_GPIO_Init+0x114>)
 80013ac:	f043 0320 	orr.w	r3, r3, #32
 80013b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013b2:	4b36      	ldr	r3, [pc, #216]	; (800148c <MX_GPIO_Init+0x114>)
 80013b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013b6:	f003 0320 	and.w	r3, r3, #32
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013be:	4b33      	ldr	r3, [pc, #204]	; (800148c <MX_GPIO_Init+0x114>)
 80013c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c2:	4a32      	ldr	r2, [pc, #200]	; (800148c <MX_GPIO_Init+0x114>)
 80013c4:	f043 0301 	orr.w	r3, r3, #1
 80013c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ca:	4b30      	ldr	r3, [pc, #192]	; (800148c <MX_GPIO_Init+0x114>)
 80013cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013ce:	f003 0301 	and.w	r3, r3, #1
 80013d2:	60bb      	str	r3, [r7, #8]
 80013d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d6:	4b2d      	ldr	r3, [pc, #180]	; (800148c <MX_GPIO_Init+0x114>)
 80013d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013da:	4a2c      	ldr	r2, [pc, #176]	; (800148c <MX_GPIO_Init+0x114>)
 80013dc:	f043 0302 	orr.w	r3, r3, #2
 80013e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013e2:	4b2a      	ldr	r3, [pc, #168]	; (800148c <MX_GPIO_Init+0x114>)
 80013e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ee:	4b27      	ldr	r3, [pc, #156]	; (800148c <MX_GPIO_Init+0x114>)
 80013f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013f2:	4a26      	ldr	r2, [pc, #152]	; (800148c <MX_GPIO_Init+0x114>)
 80013f4:	f043 0308 	orr.w	r3, r3, #8
 80013f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013fa:	4b24      	ldr	r3, [pc, #144]	; (800148c <MX_GPIO_Init+0x114>)
 80013fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001406:	2200      	movs	r2, #0
 8001408:	2120      	movs	r1, #32
 800140a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800140e:	f003 f8af 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8001412:	2200      	movs	r2, #0
 8001414:	2104      	movs	r1, #4
 8001416:	481e      	ldr	r0, [pc, #120]	; (8001490 <MX_GPIO_Init+0x118>)
 8001418:	f003 f8aa 	bl	8004570 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 800141c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001420:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001422:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001426:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001428:	2300      	movs	r3, #0
 800142a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 800142c:	f107 0314 	add.w	r3, r7, #20
 8001430:	4619      	mov	r1, r3
 8001432:	4818      	ldr	r0, [pc, #96]	; (8001494 <MX_GPIO_Init+0x11c>)
 8001434:	f002 ff1a 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001438:	2320      	movs	r3, #32
 800143a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143c:	2301      	movs	r3, #1
 800143e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001452:	f002 ff0b 	bl	800426c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001456:	2304      	movs	r3, #4
 8001458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145a:	2301      	movs	r3, #1
 800145c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145e:	2300      	movs	r3, #0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001462:	2300      	movs	r3, #0
 8001464:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4808      	ldr	r0, [pc, #32]	; (8001490 <MX_GPIO_Init+0x118>)
 800146e:	f002 fefd 	bl	800426c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	2028      	movs	r0, #40	; 0x28
 8001478:	f002 fe10 	bl	800409c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800147c:	2028      	movs	r0, #40	; 0x28
 800147e:	f002 fe27 	bl	80040d0 <HAL_NVIC_EnableIRQ>

}
 8001482:	bf00      	nop
 8001484:	3728      	adds	r7, #40	; 0x28
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40021000 	.word	0x40021000
 8001490:	48000c00 	.word	0x48000c00
 8001494:	48000800 	.word	0x48000800

08001498 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800149c:	f000 ff95 	bl	80023ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014a0:	f000 f813 	bl	80014ca <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014a4:	f7ff ff68 	bl	8001378 <MX_GPIO_Init>
  MX_ADC2_Init();
 80014a8:	f7ff fdac 	bl	8001004 <MX_ADC2_Init>
  MX_ADC1_Init();
 80014ac:	f7ff fd32 	bl	8000f14 <MX_ADC1_Init>
  MX_TIM1_Init();
 80014b0:	f000 fc2a 	bl	8001d08 <MX_TIM1_Init>
  MX_TIM3_Init();
 80014b4:	f000 fcf2 	bl	8001e9c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80014b8:	f000 fe26 	bl	8002108 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80014bc:	f000 fe70 	bl	80021a0 <MX_USART3_UART_Init>
//  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 512);
//  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 512);


  Shell_Init();
 80014c0:	f000 f8f0 	bl	80016a4 <Shell_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Shell_Loop();
 80014c4:	f000 f92e 	bl	8001724 <Shell_Loop>
  {
 80014c8:	e7fc      	b.n	80014c4 <main+0x2c>

080014ca <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b094      	sub	sp, #80	; 0x50
 80014ce:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d0:	f107 0318 	add.w	r3, r7, #24
 80014d4:	2238      	movs	r2, #56	; 0x38
 80014d6:	2100      	movs	r1, #0
 80014d8:	4618      	mov	r0, r3
 80014da:	f008 fedc 	bl	800a296 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014de:	1d3b      	adds	r3, r7, #4
 80014e0:	2200      	movs	r2, #0
 80014e2:	601a      	str	r2, [r3, #0]
 80014e4:	605a      	str	r2, [r3, #4]
 80014e6:	609a      	str	r2, [r3, #8]
 80014e8:	60da      	str	r2, [r3, #12]
 80014ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014ec:	2000      	movs	r0, #0
 80014ee:	f003 f87b 	bl	80045e8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014f2:	2301      	movs	r3, #1
 80014f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014fa:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001500:	2303      	movs	r3, #3
 8001502:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8001504:	2306      	movs	r3, #6
 8001506:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001508:	2355      	movs	r3, #85	; 0x55
 800150a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800150c:	2302      	movs	r3, #2
 800150e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001510:	2302      	movs	r3, #2
 8001512:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001514:	2302      	movs	r3, #2
 8001516:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001518:	f107 0318 	add.w	r3, r7, #24
 800151c:	4618      	mov	r0, r3
 800151e:	f003 f917 	bl	8004750 <HAL_RCC_OscConfig>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d001      	beq.n	800152c <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001528:	f000 f82a 	bl	8001580 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800152c:	230f      	movs	r3, #15
 800152e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001530:	2303      	movs	r3, #3
 8001532:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001534:	2300      	movs	r3, #0
 8001536:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2104      	movs	r1, #4
 8001544:	4618      	mov	r0, r3
 8001546:	f003 fc1b 	bl	8004d80 <HAL_RCC_ClockConfig>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001550:	f000 f816 	bl	8001580 <Error_Handler>
  }
}
 8001554:	bf00      	nop
 8001556:	3750      	adds	r7, #80	; 0x50
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}

0800155c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a04      	ldr	r2, [pc, #16]	; (800157c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d101      	bne.n	8001572 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800156e:	f000 ff45 	bl	80023fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	40001000 	.word	0x40001000

08001580 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001584:	b672      	cpsid	i
}
 8001586:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001588:	e7fe      	b.n	8001588 <Error_Handler+0x8>
	...

0800158c <set_PWM>:

int         alpha = 512;
int         value;
#define Speed_Max 3000 //rpm

void set_PWM(void){
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0

	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001590:	2100      	movs	r1, #0
 8001592:	480d      	ldr	r0, [pc, #52]	; (80015c8 <set_PWM+0x3c>)
 8001594:	f004 f9c2 	bl	800591c <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001598:	2104      	movs	r1, #4
 800159a:	480b      	ldr	r0, [pc, #44]	; (80015c8 <set_PWM+0x3c>)
 800159c:	f004 f9be 	bl	800591c <HAL_TIM_PWM_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 80015a0:	2100      	movs	r1, #0
 80015a2:	4809      	ldr	r0, [pc, #36]	; (80015c8 <set_PWM+0x3c>)
 80015a4:	f005 fcf0 	bl	8006f88 <HAL_TIMEx_PWMN_Start>
	  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 80015a8:	2104      	movs	r1, #4
 80015aa:	4807      	ldr	r0, [pc, #28]	; (80015c8 <set_PWM+0x3c>)
 80015ac:	f005 fcec 	bl	8006f88 <HAL_TIMEx_PWMN_Start>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 80015b0:	4b06      	ldr	r3, [pc, #24]	; (80015cc <set_PWM+0x40>)
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	4b04      	ldr	r3, [pc, #16]	; (80015c8 <set_PWM+0x3c>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, alpha);
 80015ba:	4b04      	ldr	r3, [pc, #16]	; (80015cc <set_PWM+0x40>)
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	4b02      	ldr	r3, [pc, #8]	; (80015c8 <set_PWM+0x3c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	639a      	str	r2, [r3, #56]	; 0x38

}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	200004a8 	.word	0x200004a8
 80015cc:	20000010 	.word	0x20000010

080015d0 <set_motor_speed>:


void set_motor_speed(int speed){
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b084      	sub	sp, #16
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
	if(speed > Speed_Max) speed = Speed_Max;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80015de:	4293      	cmp	r3, r2
 80015e0:	dd02      	ble.n	80015e8 <set_motor_speed+0x18>
 80015e2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80015e6:	607b      	str	r3, [r7, #4]
	if(speed < -Speed_Max) speed = -Speed_Max;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	4a1f      	ldr	r2, [pc, #124]	; (8001668 <set_motor_speed+0x98>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	da01      	bge.n	80015f4 <set_motor_speed+0x24>
 80015f0:	4b1d      	ldr	r3, [pc, #116]	; (8001668 <set_motor_speed+0x98>)
 80015f2:	607b      	str	r3, [r7, #4]
	int alpha_target = (speed + Speed_Max)*512/Speed_Max;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	f603 33b8 	addw	r3, r3, #3000	; 0xbb8
 80015fa:	025b      	lsls	r3, r3, #9
 80015fc:	4a1b      	ldr	r2, [pc, #108]	; (800166c <set_motor_speed+0x9c>)
 80015fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001602:	1192      	asrs	r2, r2, #6
 8001604:	17db      	asrs	r3, r3, #31
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	60fb      	str	r3, [r7, #12]

    while (alpha!=alpha_target){
 800160a:	e022      	b.n	8001652 <set_motor_speed+0x82>
 	   if(alpha<alpha_target) alpha++;
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <set_motor_speed+0xa0>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	429a      	cmp	r2, r3
 8001614:	dd04      	ble.n	8001620 <set_motor_speed+0x50>
 8001616:	4b16      	ldr	r3, [pc, #88]	; (8001670 <set_motor_speed+0xa0>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	3301      	adds	r3, #1
 800161c:	4a14      	ldr	r2, [pc, #80]	; (8001670 <set_motor_speed+0xa0>)
 800161e:	6013      	str	r3, [r2, #0]
	   if(alpha>alpha_target) alpha--;
 8001620:	4b13      	ldr	r3, [pc, #76]	; (8001670 <set_motor_speed+0xa0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	68fa      	ldr	r2, [r7, #12]
 8001626:	429a      	cmp	r2, r3
 8001628:	da04      	bge.n	8001634 <set_motor_speed+0x64>
 800162a:	4b11      	ldr	r3, [pc, #68]	; (8001670 <set_motor_speed+0xa0>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	3b01      	subs	r3, #1
 8001630:	4a0f      	ldr	r2, [pc, #60]	; (8001670 <set_motor_speed+0xa0>)
 8001632:	6013      	str	r3, [r2, #0]
       __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, alpha);
 8001634:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <set_motor_speed+0xa0>)
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <set_motor_speed+0xa4>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	635a      	str	r2, [r3, #52]	; 0x34
       __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, (1024-alpha));
 800163e:	4b0c      	ldr	r3, [pc, #48]	; (8001670 <set_motor_speed+0xa0>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f5c3 6280 	rsb	r2, r3, #1024	; 0x400
 8001646:	4b0b      	ldr	r3, [pc, #44]	; (8001674 <set_motor_speed+0xa4>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	639a      	str	r2, [r3, #56]	; 0x38
       HAL_Delay(10);
 800164c:	200a      	movs	r0, #10
 800164e:	f000 fef3 	bl	8002438 <HAL_Delay>
    while (alpha!=alpha_target){
 8001652:	4b07      	ldr	r3, [pc, #28]	; (8001670 <set_motor_speed+0xa0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	68fa      	ldr	r2, [r7, #12]
 8001658:	429a      	cmp	r2, r3
 800165a:	d1d7      	bne.n	800160c <set_motor_speed+0x3c>
  }

}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	fffff448 	.word	0xfffff448
 800166c:	057619f1 	.word	0x057619f1
 8001670:	20000010 	.word	0x20000010
 8001674:	200004a8 	.word	0x200004a8

08001678 <deactivate_PWM>:

void deactivate_PWM(void){
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800167c:	2100      	movs	r1, #0
 800167e:	4808      	ldr	r0, [pc, #32]	; (80016a0 <deactivate_PWM+0x28>)
 8001680:	f004 fa5e 	bl	8005b40 <HAL_TIM_PWM_Stop>
	HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001684:	2104      	movs	r1, #4
 8001686:	4806      	ldr	r0, [pc, #24]	; (80016a0 <deactivate_PWM+0x28>)
 8001688:	f004 fa5a 	bl	8005b40 <HAL_TIM_PWM_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4804      	ldr	r0, [pc, #16]	; (80016a0 <deactivate_PWM+0x28>)
 8001690:	f005 fd3c 	bl	800710c <HAL_TIMEx_PWMN_Stop>
	HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001694:	2104      	movs	r1, #4
 8001696:	4802      	ldr	r0, [pc, #8]	; (80016a0 <deactivate_PWM+0x28>)
 8001698:	f005 fd38 	bl	800710c <HAL_TIMEx_PWMN_Stop>

}
 800169c:	bf00      	nop
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	200004a8 	.word	0x200004a8

080016a4 <Shell_Init>:
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;


void Shell_Init(void){
 80016a4:	b580      	push	{r7, lr}
 80016a6:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 80016a8:	2224      	movs	r2, #36	; 0x24
 80016aa:	2100      	movs	r1, #0
 80016ac:	4816      	ldr	r0, [pc, #88]	; (8001708 <Shell_Init+0x64>)
 80016ae:	f008 fdf2 	bl	800a296 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 80016b2:	2240      	movs	r2, #64	; 0x40
 80016b4:	2100      	movs	r1, #0
 80016b6:	4815      	ldr	r0, [pc, #84]	; (800170c <Shell_Init+0x68>)
 80016b8:	f008 fded 	bl	800a296 <memset>
 80016bc:	4b14      	ldr	r3, [pc, #80]	; (8001710 <Shell_Init+0x6c>)
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 80016c2:	2240      	movs	r2, #64	; 0x40
 80016c4:	2100      	movs	r1, #0
 80016c6:	4813      	ldr	r0, [pc, #76]	; (8001714 <Shell_Init+0x70>)
 80016c8:	f008 fde5 	bl	800a296 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80016cc:	2201      	movs	r2, #1
 80016ce:	4910      	ldr	r1, [pc, #64]	; (8001710 <Shell_Init+0x6c>)
 80016d0:	4811      	ldr	r0, [pc, #68]	; (8001718 <Shell_Init+0x74>)
 80016d2:	f006 f813 	bl	80076fc <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80016d6:	4811      	ldr	r0, [pc, #68]	; (800171c <Shell_Init+0x78>)
 80016d8:	f7fe fe02 	bl	80002e0 <strlen>
 80016dc:	4603      	mov	r3, r0
 80016de:	b29a      	uxth	r2, r3
 80016e0:	f04f 33ff 	mov.w	r3, #4294967295
 80016e4:	490d      	ldr	r1, [pc, #52]	; (800171c <Shell_Init+0x78>)
 80016e6:	480c      	ldr	r0, [pc, #48]	; (8001718 <Shell_Init+0x74>)
 80016e8:	f005 ff71 	bl	80075ce <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <Shell_Init+0x7c>)
 80016ee:	f7fe fdf7 	bl	80002e0 <strlen>
 80016f2:	4603      	mov	r3, r0
 80016f4:	b29a      	uxth	r2, r3
 80016f6:	f04f 33ff 	mov.w	r3, #4294967295
 80016fa:	4909      	ldr	r1, [pc, #36]	; (8001720 <Shell_Init+0x7c>)
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <Shell_Init+0x74>)
 80016fe:	f005 ff66 	bl	80075ce <HAL_UART_Transmit>
}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000428 	.word	0x20000428
 800170c:	200003e4 	.word	0x200003e4
 8001710:	200003a0 	.word	0x200003a0
 8001714:	200003a4 	.word	0x200003a4
 8001718:	20000540 	.word	0x20000540
 800171c:	20000030 	.word	0x20000030
 8001720:	20000014 	.word	0x20000014

08001724 <Shell_Loop>:

void Shell_Loop(void){
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800172a:	4b7b      	ldr	r3, [pc, #492]	; (8001918 <Shell_Loop+0x1f4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d05b      	beq.n	80017ea <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001732:	4b7a      	ldr	r3, [pc, #488]	; (800191c <Shell_Loop+0x1f8>)
 8001734:	781b      	ldrb	r3, [r3, #0]
 8001736:	2b08      	cmp	r3, #8
 8001738:	d034      	beq.n	80017a4 <Shell_Loop+0x80>
 800173a:	2b0d      	cmp	r3, #13
 800173c:	d142      	bne.n	80017c4 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
 8001742:	2203      	movs	r2, #3
 8001744:	4976      	ldr	r1, [pc, #472]	; (8001920 <Shell_Loop+0x1fc>)
 8001746:	4877      	ldr	r0, [pc, #476]	; (8001924 <Shell_Loop+0x200>)
 8001748:	f005 ff41 	bl	80075ce <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800174c:	4b76      	ldr	r3, [pc, #472]	; (8001928 <Shell_Loop+0x204>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a76      	ldr	r2, [pc, #472]	; (800192c <Shell_Loop+0x208>)
 8001752:	2100      	movs	r1, #0
 8001754:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8001756:	4b76      	ldr	r3, [pc, #472]	; (8001930 <Shell_Loop+0x20c>)
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800175c:	4975      	ldr	r1, [pc, #468]	; (8001934 <Shell_Loop+0x210>)
 800175e:	4873      	ldr	r0, [pc, #460]	; (800192c <Shell_Loop+0x208>)
 8001760:	f008 fda2 	bl	800a2a8 <strtok>
 8001764:	4603      	mov	r3, r0
 8001766:	4a74      	ldr	r2, [pc, #464]	; (8001938 <Shell_Loop+0x214>)
 8001768:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800176a:	e010      	b.n	800178e <Shell_Loop+0x6a>
				argv[argc++] = token;
 800176c:	4b70      	ldr	r3, [pc, #448]	; (8001930 <Shell_Loop+0x20c>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	1c5a      	adds	r2, r3, #1
 8001772:	496f      	ldr	r1, [pc, #444]	; (8001930 <Shell_Loop+0x20c>)
 8001774:	600a      	str	r2, [r1, #0]
 8001776:	4a70      	ldr	r2, [pc, #448]	; (8001938 <Shell_Loop+0x214>)
 8001778:	6812      	ldr	r2, [r2, #0]
 800177a:	4970      	ldr	r1, [pc, #448]	; (800193c <Shell_Loop+0x218>)
 800177c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8001780:	496c      	ldr	r1, [pc, #432]	; (8001934 <Shell_Loop+0x210>)
 8001782:	2000      	movs	r0, #0
 8001784:	f008 fd90 	bl	800a2a8 <strtok>
 8001788:	4603      	mov	r3, r0
 800178a:	4a6b      	ldr	r2, [pc, #428]	; (8001938 <Shell_Loop+0x214>)
 800178c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800178e:	4b6a      	ldr	r3, [pc, #424]	; (8001938 <Shell_Loop+0x214>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ea      	bne.n	800176c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8001796:	4b64      	ldr	r3, [pc, #400]	; (8001928 <Shell_Loop+0x204>)
 8001798:	2200      	movs	r2, #0
 800179a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800179c:	4b68      	ldr	r3, [pc, #416]	; (8001940 <Shell_Loop+0x21c>)
 800179e:	2201      	movs	r2, #1
 80017a0:	601a      	str	r2, [r3, #0]
			break;
 80017a2:	e01f      	b.n	80017e4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 80017a4:	4b60      	ldr	r3, [pc, #384]	; (8001928 <Shell_Loop+0x204>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	1e5a      	subs	r2, r3, #1
 80017aa:	495f      	ldr	r1, [pc, #380]	; (8001928 <Shell_Loop+0x204>)
 80017ac:	600a      	str	r2, [r1, #0]
 80017ae:	4a5f      	ldr	r2, [pc, #380]	; (800192c <Shell_Loop+0x208>)
 80017b0:	2100      	movs	r1, #0
 80017b2:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 80017b4:	f04f 33ff 	mov.w	r3, #4294967295
 80017b8:	2204      	movs	r2, #4
 80017ba:	4962      	ldr	r1, [pc, #392]	; (8001944 <Shell_Loop+0x220>)
 80017bc:	4859      	ldr	r0, [pc, #356]	; (8001924 <Shell_Loop+0x200>)
 80017be:	f005 ff06 	bl	80075ce <HAL_UART_Transmit>
			break;
 80017c2:	e00f      	b.n	80017e4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 80017c4:	4b58      	ldr	r3, [pc, #352]	; (8001928 <Shell_Loop+0x204>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	1c5a      	adds	r2, r3, #1
 80017ca:	4957      	ldr	r1, [pc, #348]	; (8001928 <Shell_Loop+0x204>)
 80017cc:	600a      	str	r2, [r1, #0]
 80017ce:	4a53      	ldr	r2, [pc, #332]	; (800191c <Shell_Loop+0x1f8>)
 80017d0:	7811      	ldrb	r1, [r2, #0]
 80017d2:	4a56      	ldr	r2, [pc, #344]	; (800192c <Shell_Loop+0x208>)
 80017d4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295
 80017da:	2201      	movs	r2, #1
 80017dc:	494f      	ldr	r1, [pc, #316]	; (800191c <Shell_Loop+0x1f8>)
 80017de:	4851      	ldr	r0, [pc, #324]	; (8001924 <Shell_Loop+0x200>)
 80017e0:	f005 fef5 	bl	80075ce <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80017e4:	4b4c      	ldr	r3, [pc, #304]	; (8001918 <Shell_Loop+0x1f4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80017ea:	4b55      	ldr	r3, [pc, #340]	; (8001940 <Shell_Loop+0x21c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 808d 	beq.w	800190e <Shell_Loop+0x1ea>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80017f4:	4b51      	ldr	r3, [pc, #324]	; (800193c <Shell_Loop+0x218>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4953      	ldr	r1, [pc, #332]	; (8001948 <Shell_Loop+0x224>)
 80017fa:	4618      	mov	r0, r3
 80017fc:	f7fe fd10 	bl	8000220 <strcmp>
 8001800:	4603      	mov	r3, r0
 8001802:	2b00      	cmp	r3, #0
 8001804:	d107      	bne.n	8001816 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001806:	f04f 33ff 	mov.w	r3, #4294967295
 800180a:	221a      	movs	r2, #26
 800180c:	494f      	ldr	r1, [pc, #316]	; (800194c <Shell_Loop+0x228>)
 800180e:	4845      	ldr	r0, [pc, #276]	; (8001924 <Shell_Loop+0x200>)
 8001810:	f005 fedd 	bl	80075ce <HAL_UART_Transmit>
 8001814:	e071      	b.n	80018fa <Shell_Loop+0x1d6>
		}
		else if(strcmp(argv[0],"help")==0){
 8001816:	4b49      	ldr	r3, [pc, #292]	; (800193c <Shell_Loop+0x218>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	494d      	ldr	r1, [pc, #308]	; (8001950 <Shell_Loop+0x22c>)
 800181c:	4618      	mov	r0, r3
 800181e:	f7fe fcff 	bl	8000220 <strcmp>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10e      	bne.n	8001846 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001828:	4a4a      	ldr	r2, [pc, #296]	; (8001954 <Shell_Loop+0x230>)
 800182a:	2140      	movs	r1, #64	; 0x40
 800182c:	484a      	ldr	r0, [pc, #296]	; (8001958 <Shell_Loop+0x234>)
 800182e:	f008 fc9b 	bl	800a168 <sniprintf>
 8001832:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	b29a      	uxth	r2, r3
 8001838:	f04f 33ff 	mov.w	r3, #4294967295
 800183c:	4946      	ldr	r1, [pc, #280]	; (8001958 <Shell_Loop+0x234>)
 800183e:	4839      	ldr	r0, [pc, #228]	; (8001924 <Shell_Loop+0x200>)
 8001840:	f005 fec5 	bl	80075ce <HAL_UART_Transmit>
 8001844:	e059      	b.n	80018fa <Shell_Loop+0x1d6>
		}
		else if(strcmp(argv[0],"start")==0){
 8001846:	4b3d      	ldr	r3, [pc, #244]	; (800193c <Shell_Loop+0x218>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	4944      	ldr	r1, [pc, #272]	; (800195c <Shell_Loop+0x238>)
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fce7 	bl	8000220 <strcmp>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d110      	bne.n	800187a <Shell_Loop+0x156>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "POWER ON\r\n");
 8001858:	4a41      	ldr	r2, [pc, #260]	; (8001960 <Shell_Loop+0x23c>)
 800185a:	2140      	movs	r1, #64	; 0x40
 800185c:	483e      	ldr	r0, [pc, #248]	; (8001958 <Shell_Loop+0x234>)
 800185e:	f008 fc83 	bl	800a168 <sniprintf>
 8001862:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	b29a      	uxth	r2, r3
 8001868:	f04f 33ff 	mov.w	r3, #4294967295
 800186c:	493a      	ldr	r1, [pc, #232]	; (8001958 <Shell_Loop+0x234>)
 800186e:	482d      	ldr	r0, [pc, #180]	; (8001924 <Shell_Loop+0x200>)
 8001870:	f005 fead 	bl	80075ce <HAL_UART_Transmit>
			set_PWM();
 8001874:	f7ff fe8a 	bl	800158c <set_PWM>
 8001878:	e03f      	b.n	80018fa <Shell_Loop+0x1d6>
				}
		else if(strcmp(argv[0],"stop")==0){
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <Shell_Loop+0x218>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4939      	ldr	r1, [pc, #228]	; (8001964 <Shell_Loop+0x240>)
 8001880:	4618      	mov	r0, r3
 8001882:	f7fe fccd 	bl	8000220 <strcmp>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d110      	bne.n	80018ae <Shell_Loop+0x18a>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "POWER OFF\r\n");
 800188c:	4a36      	ldr	r2, [pc, #216]	; (8001968 <Shell_Loop+0x244>)
 800188e:	2140      	movs	r1, #64	; 0x40
 8001890:	4831      	ldr	r0, [pc, #196]	; (8001958 <Shell_Loop+0x234>)
 8001892:	f008 fc69 	bl	800a168 <sniprintf>
 8001896:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	b29a      	uxth	r2, r3
 800189c:	f04f 33ff 	mov.w	r3, #4294967295
 80018a0:	492d      	ldr	r1, [pc, #180]	; (8001958 <Shell_Loop+0x234>)
 80018a2:	4820      	ldr	r0, [pc, #128]	; (8001924 <Shell_Loop+0x200>)
 80018a4:	f005 fe93 	bl	80075ce <HAL_UART_Transmit>
			deactivate_PWM();
 80018a8:	f7ff fee6 	bl	8001678 <deactivate_PWM>
 80018ac:	e025      	b.n	80018fa <Shell_Loop+0x1d6>
				}
		else if(strcmp(argv[0],"speed")==0){
 80018ae:	4b23      	ldr	r3, [pc, #140]	; (800193c <Shell_Loop+0x218>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	492e      	ldr	r1, [pc, #184]	; (800196c <Shell_Loop+0x248>)
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7fe fcb3 	bl	8000220 <strcmp>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d109      	bne.n	80018d4 <Shell_Loop+0x1b0>

		    set_motor_speed(atoi(argv[1]));
 80018c0:	4b1e      	ldr	r3, [pc, #120]	; (800193c <Shell_Loop+0x218>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f007 fea9 	bl	800961c <atoi>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4618      	mov	r0, r3
 80018ce:	f7ff fe7f 	bl	80015d0 <set_motor_speed>
 80018d2:	e012      	b.n	80018fa <Shell_Loop+0x1d6>
		}

		else if(strcmp(argv[0],"U_Imes")==0){
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <Shell_Loop+0x218>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4925      	ldr	r1, [pc, #148]	; (8001970 <Shell_Loop+0x24c>)
 80018da:	4618      	mov	r0, r3
 80018dc:	f7fe fca0 	bl	8000220 <strcmp>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <Shell_Loop+0x1c8>
		    mesure_Current_U();
 80018e6:	f7ff fced 	bl	80012c4 <mesure_Current_U>
 80018ea:	e006      	b.n	80018fa <Shell_Loop+0x1d6>

	    }
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2214      	movs	r2, #20
 80018f2:	4920      	ldr	r1, [pc, #128]	; (8001974 <Shell_Loop+0x250>)
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <Shell_Loop+0x200>)
 80018f6:	f005 fe6a 	bl	80075ce <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80018fa:	f04f 33ff 	mov.w	r3, #4294967295
 80018fe:	221c      	movs	r2, #28
 8001900:	491d      	ldr	r1, [pc, #116]	; (8001978 <Shell_Loop+0x254>)
 8001902:	4808      	ldr	r0, [pc, #32]	; (8001924 <Shell_Loop+0x200>)
 8001904:	f005 fe63 	bl	80075ce <HAL_UART_Transmit>
		newCmdReady = 0;
 8001908:	4b0d      	ldr	r3, [pc, #52]	; (8001940 <Shell_Loop+0x21c>)
 800190a:	2200      	movs	r2, #0
 800190c:	601a      	str	r2, [r3, #0]
	}
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	2000039c 	.word	0x2000039c
 800191c:	200003a0 	.word	0x200003a0
 8001920:	20000098 	.word	0x20000098
 8001924:	20000540 	.word	0x20000540
 8001928:	20000424 	.word	0x20000424
 800192c:	200003e4 	.word	0x200003e4
 8001930:	2000044c 	.word	0x2000044c
 8001934:	0800c560 	.word	0x0800c560
 8001938:	20000450 	.word	0x20000450
 800193c:	20000428 	.word	0x20000428
 8001940:	20000454 	.word	0x20000454
 8001944:	2000009c 	.word	0x2000009c
 8001948:	0800c564 	.word	0x0800c564
 800194c:	200000b4 	.word	0x200000b4
 8001950:	0800c574 	.word	0x0800c574
 8001954:	0800c57c 	.word	0x0800c57c
 8001958:	200003a4 	.word	0x200003a4
 800195c:	0800c5a4 	.word	0x0800c5a4
 8001960:	0800c5ac 	.word	0x0800c5ac
 8001964:	0800c5b8 	.word	0x0800c5b8
 8001968:	0800c5c0 	.word	0x0800c5c0
 800196c:	0800c5cc 	.word	0x0800c5cc
 8001970:	0800c5d4 	.word	0x0800c5d4
 8001974:	200000a0 	.word	0x200000a0
 8001978:	20000014 	.word	0x20000014

0800197c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
 8001982:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <HAL_UART_RxCpltCallback+0x20>)
 8001986:	2201      	movs	r2, #1
 8001988:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800198a:	2201      	movs	r2, #1
 800198c:	4904      	ldr	r1, [pc, #16]	; (80019a0 <HAL_UART_RxCpltCallback+0x24>)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <HAL_UART_RxCpltCallback+0x28>)
 8001990:	f005 feb4 	bl	80076fc <HAL_UART_Receive_IT>
}
 8001994:	bf00      	nop
 8001996:	3708      	adds	r7, #8
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	2000039c 	.word	0x2000039c
 80019a0:	200003a0 	.word	0x200003a0
 80019a4:	20000540 	.word	0x20000540

080019a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ae:	4b0f      	ldr	r3, [pc, #60]	; (80019ec <HAL_MspInit+0x44>)
 80019b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019b2:	4a0e      	ldr	r2, [pc, #56]	; (80019ec <HAL_MspInit+0x44>)
 80019b4:	f043 0301 	orr.w	r3, r3, #1
 80019b8:	6613      	str	r3, [r2, #96]	; 0x60
 80019ba:	4b0c      	ldr	r3, [pc, #48]	; (80019ec <HAL_MspInit+0x44>)
 80019bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019c6:	4b09      	ldr	r3, [pc, #36]	; (80019ec <HAL_MspInit+0x44>)
 80019c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ca:	4a08      	ldr	r2, [pc, #32]	; (80019ec <HAL_MspInit+0x44>)
 80019cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019d0:	6593      	str	r3, [r2, #88]	; 0x58
 80019d2:	4b06      	ldr	r3, [pc, #24]	; (80019ec <HAL_MspInit+0x44>)
 80019d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80019de:	f002 fea7 	bl	8004730 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40021000 	.word	0x40021000

080019f0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08c      	sub	sp, #48	; 0x30
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80019f8:	2300      	movs	r3, #0
 80019fa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001a00:	4b2c      	ldr	r3, [pc, #176]	; (8001ab4 <HAL_InitTick+0xc4>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	4a2b      	ldr	r2, [pc, #172]	; (8001ab4 <HAL_InitTick+0xc4>)
 8001a06:	f043 0310 	orr.w	r3, r3, #16
 8001a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0c:	4b29      	ldr	r3, [pc, #164]	; (8001ab4 <HAL_InitTick+0xc4>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f003 0310 	and.w	r3, r3, #16
 8001a14:	60bb      	str	r3, [r7, #8]
 8001a16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a18:	f107 020c 	add.w	r2, r7, #12
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	4611      	mov	r1, r2
 8001a22:	4618      	mov	r0, r3
 8001a24:	f003 fb82 	bl	800512c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a28:	f003 fb54 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8001a2c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a30:	4a21      	ldr	r2, [pc, #132]	; (8001ab8 <HAL_InitTick+0xc8>)
 8001a32:	fba2 2303 	umull	r2, r3, r2, r3
 8001a36:	0c9b      	lsrs	r3, r3, #18
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001a3c:	4b1f      	ldr	r3, [pc, #124]	; (8001abc <HAL_InitTick+0xcc>)
 8001a3e:	4a20      	ldr	r2, [pc, #128]	; (8001ac0 <HAL_InitTick+0xd0>)
 8001a40:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a42:	4b1e      	ldr	r3, [pc, #120]	; (8001abc <HAL_InitTick+0xcc>)
 8001a44:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a48:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a4a:	4a1c      	ldr	r2, [pc, #112]	; (8001abc <HAL_InitTick+0xcc>)
 8001a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001a50:	4b1a      	ldr	r3, [pc, #104]	; (8001abc <HAL_InitTick+0xcc>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a56:	4b19      	ldr	r3, [pc, #100]	; (8001abc <HAL_InitTick+0xcc>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001a5c:	4817      	ldr	r0, [pc, #92]	; (8001abc <HAL_InitTick+0xcc>)
 8001a5e:	f003 fe2b 	bl	80056b8 <HAL_TIM_Base_Init>
 8001a62:	4603      	mov	r3, r0
 8001a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001a68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d11b      	bne.n	8001aa8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001a70:	4812      	ldr	r0, [pc, #72]	; (8001abc <HAL_InitTick+0xcc>)
 8001a72:	f003 fe79 	bl	8005768 <HAL_TIM_Base_Start_IT>
 8001a76:	4603      	mov	r3, r0
 8001a78:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001a7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d111      	bne.n	8001aa8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001a84:	2036      	movs	r0, #54	; 0x36
 8001a86:	f002 fb23 	bl	80040d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b0f      	cmp	r3, #15
 8001a8e:	d808      	bhi.n	8001aa2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001a90:	2200      	movs	r2, #0
 8001a92:	6879      	ldr	r1, [r7, #4]
 8001a94:	2036      	movs	r0, #54	; 0x36
 8001a96:	f002 fb01 	bl	800409c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ac4 <HAL_InitTick+0xd4>)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6013      	str	r3, [r2, #0]
 8001aa0:	e002      	b.n	8001aa8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001aa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	431bde83 	.word	0x431bde83
 8001abc:	20000458 	.word	0x20000458
 8001ac0:	40001000 	.word	0x40001000
 8001ac4:	200000d4 	.word	0x200000d4

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b14:	bf00      	nop
 8001b16:	46bd      	mov	sp, r7
 8001b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1c:	4770      	bx	lr
	...

08001b20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART2_IRQHandler+0x10>)
 8001b26:	f005 fe3f 	bl	80077a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	20000540 	.word	0x20000540

08001b34 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001b38:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b3c:	f002 fd30 	bl	80045a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b40:	bf00      	nop
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM6_DAC_IRQHandler+0x10>)
 8001b4a:	f004 f895 	bl	8005c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000458 	.word	0x20000458

08001b58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  return 1;
 8001b5c:	2301      	movs	r3, #1
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_kill>:

int _kill(int pid, int sig)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001b72:	f008 fc3f 	bl	800a3f4 <__errno>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2216      	movs	r2, #22
 8001b7a:	601a      	str	r2, [r3, #0]
  return -1;
 8001b7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <_exit>:

void _exit (int status)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001b90:	f04f 31ff 	mov.w	r1, #4294967295
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff ffe7 	bl	8001b68 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001b9a:	e7fe      	b.n	8001b9a <_exit+0x12>

08001b9c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b086      	sub	sp, #24
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
 8001bac:	e00a      	b.n	8001bc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001bae:	f3af 8000 	nop.w
 8001bb2:	4601      	mov	r1, r0
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	b2ca      	uxtb	r2, r1
 8001bbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	429a      	cmp	r2, r3
 8001bca:	dbf0      	blt.n	8001bae <_read+0x12>
  }

  return len;
 8001bcc:	687b      	ldr	r3, [r7, #4]
}
 8001bce:	4618      	mov	r0, r3
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b086      	sub	sp, #24
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	60f8      	str	r0, [r7, #12]
 8001bde:	60b9      	str	r1, [r7, #8]
 8001be0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
 8001be6:	e009      	b.n	8001bfc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001be8:	68bb      	ldr	r3, [r7, #8]
 8001bea:	1c5a      	adds	r2, r3, #1
 8001bec:	60ba      	str	r2, [r7, #8]
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dbf1      	blt.n	8001be8 <_write+0x12>
  }
  return len;
 8001c04:	687b      	ldr	r3, [r7, #4]
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3718      	adds	r7, #24
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}

08001c0e <_close>:

int _close(int file)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	370c      	adds	r7, #12
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr

08001c26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c36:	605a      	str	r2, [r3, #4]
  return 0;
 8001c38:	2300      	movs	r3, #0
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <_isatty>:

int _isatty(int file)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	60f8      	str	r0, [r7, #12]
 8001c64:	60b9      	str	r1, [r7, #8]
 8001c66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001c68:	2300      	movs	r3, #0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3714      	adds	r7, #20
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
	...

08001c78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b086      	sub	sp, #24
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c80:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <_sbrk+0x5c>)
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <_sbrk+0x60>)
 8001c84:	1ad3      	subs	r3, r2, r3
 8001c86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <_sbrk+0x64>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c94:	4b11      	ldr	r3, [pc, #68]	; (8001cdc <_sbrk+0x64>)
 8001c96:	4a12      	ldr	r2, [pc, #72]	; (8001ce0 <_sbrk+0x68>)
 8001c98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c9a:	4b10      	ldr	r3, [pc, #64]	; (8001cdc <_sbrk+0x64>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d207      	bcs.n	8001cb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ca8:	f008 fba4 	bl	800a3f4 <__errno>
 8001cac:	4603      	mov	r3, r0
 8001cae:	220c      	movs	r2, #12
 8001cb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	e009      	b.n	8001ccc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001cb8:	4b08      	ldr	r3, [pc, #32]	; (8001cdc <_sbrk+0x64>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <_sbrk+0x64>)
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4413      	add	r3, r2
 8001cc6:	4a05      	ldr	r2, [pc, #20]	; (8001cdc <_sbrk+0x64>)
 8001cc8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001cca:	68fb      	ldr	r3, [r7, #12]
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3718      	adds	r7, #24
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20020000 	.word	0x20020000
 8001cd8:	00000400 	.word	0x00000400
 8001cdc:	200004a4 	.word	0x200004a4
 8001ce0:	200007b0 	.word	0x200007b0

08001ce4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001ce8:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <SystemInit+0x20>)
 8001cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cee:	4a05      	ldr	r2, [pc, #20]	; (8001d04 <SystemInit+0x20>)
 8001cf0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cf4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cf8:	bf00      	nop
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
 8001d02:	bf00      	nop
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b09c      	sub	sp, #112	; 0x70
 8001d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d0e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
 8001d16:	605a      	str	r2, [r3, #4]
 8001d18:	609a      	str	r2, [r3, #8]
 8001d1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d1c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001d20:	2200      	movs	r2, #0
 8001d22:	601a      	str	r2, [r3, #0]
 8001d24:	605a      	str	r2, [r3, #4]
 8001d26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d28:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
 8001d38:	615a      	str	r2, [r3, #20]
 8001d3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2234      	movs	r2, #52	; 0x34
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f008 faa7 	bl	800a296 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d48:	4b52      	ldr	r3, [pc, #328]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d4a:	4a53      	ldr	r2, [pc, #332]	; (8001e98 <MX_TIM1_Init+0x190>)
 8001d4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001d4e:	4b51      	ldr	r3, [pc, #324]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d50:	2207      	movs	r2, #7
 8001d52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001d54:	4b4f      	ldr	r3, [pc, #316]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d56:	2220      	movs	r2, #32
 8001d58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 8001d5a:	4b4e      	ldr	r3, [pc, #312]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d5c:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001d60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d62:	4b4c      	ldr	r3, [pc, #304]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d68:	4b4a      	ldr	r3, [pc, #296]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6e:	4b49      	ldr	r3, [pc, #292]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d74:	4847      	ldr	r0, [pc, #284]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d76:	f003 fc9f 	bl	80056b8 <HAL_TIM_Base_Init>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001d80:	f7ff fbfe 	bl	8001580 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d88:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d8a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001d8e:	4619      	mov	r1, r3
 8001d90:	4840      	ldr	r0, [pc, #256]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001d92:	f004 fa05 	bl	80061a0 <HAL_TIM_ConfigClockSource>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001d9c:	f7ff fbf0 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001da0:	483c      	ldr	r0, [pc, #240]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001da2:	f003 fd59 	bl	8005858 <HAL_TIM_PWM_Init>
 8001da6:	4603      	mov	r3, r0
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d001      	beq.n	8001db0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8001dac:	f7ff fbe8 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001db0:	2300      	movs	r3, #0
 8001db2:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001db4:	2300      	movs	r3, #0
 8001db6:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db8:	2300      	movs	r3, #0
 8001dba:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001dbc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	4834      	ldr	r0, [pc, #208]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001dc4:	f005 fa00 	bl	80071c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d001      	beq.n	8001dd2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001dce:	f7ff fbd7 	bl	8001580 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd2:	2360      	movs	r3, #96	; 0x60
 8001dd4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 512;
 8001dd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001dda:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001de0:	2300      	movs	r3, #0
 8001de2:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de4:	2300      	movs	r3, #0
 8001de6:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001de8:	2300      	movs	r3, #0
 8001dea:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001dec:	2300      	movs	r3, #0
 8001dee:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001df0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001df4:	2200      	movs	r2, #0
 8001df6:	4619      	mov	r1, r3
 8001df8:	4826      	ldr	r0, [pc, #152]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001dfa:	f004 f8bd 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d001      	beq.n	8001e08 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 8001e04:	f7ff fbbc 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e0c:	2204      	movs	r2, #4
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4820      	ldr	r0, [pc, #128]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001e12:	f004 f8b1 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001e1c:	f7ff fbb0 	bl	8001580 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001e20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001e24:	2208      	movs	r2, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	481a      	ldr	r0, [pc, #104]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001e2a:	f004 f8a5 	bl	8005f78 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8001e34:	f7ff fba4 	bl	8001580 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e40:	2300      	movs	r3, #0
 8001e42:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 25;
 8001e44:	2319      	movs	r3, #25
 8001e46:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e50:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001e56:	2300      	movs	r3, #0
 8001e58:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001e5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001e70:	1d3b      	adds	r3, r7, #4
 8001e72:	4619      	mov	r1, r3
 8001e74:	4807      	ldr	r0, [pc, #28]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001e76:	f005 fa3d 	bl	80072f4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d001      	beq.n	8001e84 <MX_TIM1_Init+0x17c>
  {
    Error_Handler();
 8001e80:	f7ff fb7e 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001e84:	4803      	ldr	r0, [pc, #12]	; (8001e94 <MX_TIM1_Init+0x18c>)
 8001e86:	f000 f8d7 	bl	8002038 <HAL_TIM_MspPostInit>

}
 8001e8a:	bf00      	nop
 8001e8c:	3770      	adds	r7, #112	; 0x70
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	200004a8 	.word	0x200004a8
 8001e98:	40012c00 	.word	0x40012c00

08001e9c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b088      	sub	sp, #32
 8001ea0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001ea2:	f107 0310 	add.w	r3, r7, #16
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	601a      	str	r2, [r3, #0]
 8001eaa:	605a      	str	r2, [r3, #4]
 8001eac:	609a      	str	r2, [r3, #8]
 8001eae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eb0:	1d3b      	adds	r3, r7, #4
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]
 8001eb6:	605a      	str	r2, [r3, #4]
 8001eb8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001eba:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <MX_TIM3_Init+0x94>)
 8001ebe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ec0:	4b1a      	ldr	r3, [pc, #104]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ec6:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001ecc:	4b17      	ldr	r3, [pc, #92]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ece:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ed2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ed4:	4b15      	ldr	r3, [pc, #84]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eda:	4b14      	ldr	r3, [pc, #80]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001ef0:	f107 0310 	add.w	r3, r7, #16
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	480d      	ldr	r0, [pc, #52]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001ef8:	f004 ff97 	bl	8006e2a <HAL_TIMEx_HallSensor_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001f02:	f7ff fb3d 	bl	8001580 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001f06:	2350      	movs	r3, #80	; 0x50
 8001f08:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f0e:	1d3b      	adds	r3, r7, #4
 8001f10:	4619      	mov	r1, r3
 8001f12:	4806      	ldr	r0, [pc, #24]	; (8001f2c <MX_TIM3_Init+0x90>)
 8001f14:	f005 f958 	bl	80071c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d001      	beq.n	8001f22 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001f1e:	f7ff fb2f 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f22:	bf00      	nop
 8001f24:	3720      	adds	r7, #32
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	200004f4 	.word	0x200004f4
 8001f30:	40000400 	.word	0x40000400

08001f34 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <HAL_TIM_Base_MspInit+0x38>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d10b      	bne.n	8001f5e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f46:	4b0a      	ldr	r3, [pc, #40]	; (8001f70 <HAL_TIM_Base_MspInit+0x3c>)
 8001f48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f4a:	4a09      	ldr	r2, [pc, #36]	; (8001f70 <HAL_TIM_Base_MspInit+0x3c>)
 8001f4c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f50:	6613      	str	r3, [r2, #96]	; 0x60
 8001f52:	4b07      	ldr	r3, [pc, #28]	; (8001f70 <HAL_TIM_Base_MspInit+0x3c>)
 8001f54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3714      	adds	r7, #20
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40012c00 	.word	0x40012c00
 8001f70:	40021000 	.word	0x40021000

08001f74 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a26      	ldr	r2, [pc, #152]	; (800202c <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d145      	bne.n	8002022 <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f96:	4b26      	ldr	r3, [pc, #152]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9a:	4a25      	ldr	r2, [pc, #148]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001f9c:	f043 0302 	orr.w	r3, r3, #2
 8001fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8001fa2:	4b23      	ldr	r3, [pc, #140]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	613b      	str	r3, [r7, #16]
 8001fac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fae:	4b20      	ldr	r3, [pc, #128]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fb2:	4a1f      	ldr	r2, [pc, #124]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fba:	4b1d      	ldr	r3, [pc, #116]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	60fb      	str	r3, [r7, #12]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fc6:	4b1a      	ldr	r3, [pc, #104]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fca:	4a19      	ldr	r2, [pc, #100]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fcc:	f043 0304 	orr.w	r3, r3, #4
 8001fd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001fd2:	4b17      	ldr	r3, [pc, #92]	; (8002030 <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fd6:	f003 0304 	and.w	r3, r3, #4
 8001fda:	60bb      	str	r3, [r7, #8]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001fde:	2350      	movs	r3, #80	; 0x50
 8001fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ff2:	f107 0314 	add.w	r3, r7, #20
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffc:	f002 f936 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002012:	2302      	movs	r3, #2
 8002014:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	4805      	ldr	r0, [pc, #20]	; (8002034 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800201e:	f002 f925 	bl	800426c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002022:	bf00      	nop
 8002024:	3728      	adds	r7, #40	; 0x28
 8002026:	46bd      	mov	sp, r7
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	40000400 	.word	0x40000400
 8002030:	40021000 	.word	0x40021000
 8002034:	48000800 	.word	0x48000800

08002038 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b08a      	sub	sp, #40	; 0x28
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	2200      	movs	r2, #0
 8002046:	601a      	str	r2, [r3, #0]
 8002048:	605a      	str	r2, [r3, #4]
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	60da      	str	r2, [r3, #12]
 800204e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a29      	ldr	r2, [pc, #164]	; (80020fc <HAL_TIM_MspPostInit+0xc4>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d14b      	bne.n	80020f2 <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800205a:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	4a28      	ldr	r2, [pc, #160]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002060:	f043 0302 	orr.w	r3, r3, #2
 8002064:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002066:	4b26      	ldr	r3, [pc, #152]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002068:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800206a:	f003 0302 	and.w	r3, r3, #2
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_TIM_MspPostInit+0xc8>)
 8002080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 800208a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800209c:	2306      	movs	r3, #6
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4817      	ldr	r0, [pc, #92]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020a8:	f002 f8e0 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 80020ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b2:	2302      	movs	r3, #2
 80020b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b6:	2300      	movs	r3, #0
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ba:	2300      	movs	r3, #0
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 80020be:	2304      	movs	r3, #4
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 80020c2:	f107 0314 	add.w	r3, r7, #20
 80020c6:	4619      	mov	r1, r3
 80020c8:	480e      	ldr	r0, [pc, #56]	; (8002104 <HAL_TIM_MspPostInit+0xcc>)
 80020ca:	f002 f8cf 	bl	800426c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80020ce:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020dc:	2300      	movs	r3, #0
 80020de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020e0:	2306      	movs	r3, #6
 80020e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e4:	f107 0314 	add.w	r3, r7, #20
 80020e8:	4619      	mov	r1, r3
 80020ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ee:	f002 f8bd 	bl	800426c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40021000 	.word	0x40021000
 8002104:	48000400 	.word	0x48000400

08002108 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800210c:	4b22      	ldr	r3, [pc, #136]	; (8002198 <MX_USART2_UART_Init+0x90>)
 800210e:	4a23      	ldr	r2, [pc, #140]	; (800219c <MX_USART2_UART_Init+0x94>)
 8002110:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002112:	4b21      	ldr	r3, [pc, #132]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002114:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002118:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <MX_USART2_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002120:	4b1d      	ldr	r3, [pc, #116]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800212c:	4b1a      	ldr	r3, [pc, #104]	; (8002198 <MX_USART2_UART_Init+0x90>)
 800212e:	220c      	movs	r2, #12
 8002130:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002132:	4b19      	ldr	r3, [pc, #100]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002134:	2200      	movs	r2, #0
 8002136:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002138:	4b17      	ldr	r3, [pc, #92]	; (8002198 <MX_USART2_UART_Init+0x90>)
 800213a:	2200      	movs	r2, #0
 800213c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800213e:	4b16      	ldr	r3, [pc, #88]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002140:	2200      	movs	r2, #0
 8002142:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002144:	4b14      	ldr	r3, [pc, #80]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002146:	2200      	movs	r2, #0
 8002148:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800214a:	4b13      	ldr	r3, [pc, #76]	; (8002198 <MX_USART2_UART_Init+0x90>)
 800214c:	2200      	movs	r2, #0
 800214e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002150:	4811      	ldr	r0, [pc, #68]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002152:	f005 f9ec 	bl	800752e <HAL_UART_Init>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800215c:	f7ff fa10 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002160:	2100      	movs	r1, #0
 8002162:	480d      	ldr	r0, [pc, #52]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002164:	f007 f98f 	bl	8009486 <HAL_UARTEx_SetTxFifoThreshold>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800216e:	f7ff fa07 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002172:	2100      	movs	r1, #0
 8002174:	4808      	ldr	r0, [pc, #32]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002176:	f007 f9c4 	bl	8009502 <HAL_UARTEx_SetRxFifoThreshold>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8002180:	f7ff f9fe 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002184:	4804      	ldr	r0, [pc, #16]	; (8002198 <MX_USART2_UART_Init+0x90>)
 8002186:	f007 f945 	bl	8009414 <HAL_UARTEx_DisableFifoMode>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d001      	beq.n	8002194 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8002190:	f7ff f9f6 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002194:	bf00      	nop
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000540 	.word	0x20000540
 800219c:	40004400 	.word	0x40004400

080021a0 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80021a4:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021a6:	4a23      	ldr	r2, [pc, #140]	; (8002234 <MX_USART3_UART_Init+0x94>)
 80021a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80021aa:	4b21      	ldr	r3, [pc, #132]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80021b2:	4b1f      	ldr	r3, [pc, #124]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80021be:	4b1c      	ldr	r3, [pc, #112]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021c4:	4b1a      	ldr	r3, [pc, #104]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021c6:	220c      	movs	r2, #12
 80021c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021ca:	4b19      	ldr	r3, [pc, #100]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021d0:	4b17      	ldr	r3, [pc, #92]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021d6:	4b16      	ldr	r3, [pc, #88]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021d8:	2200      	movs	r2, #0
 80021da:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021dc:	4b14      	ldr	r3, [pc, #80]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021de:	2200      	movs	r2, #0
 80021e0:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021e2:	4b13      	ldr	r3, [pc, #76]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021e8:	4811      	ldr	r0, [pc, #68]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021ea:	f005 f9a0 	bl	800752e <HAL_UART_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021f4:	f7ff f9c4 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021f8:	2100      	movs	r1, #0
 80021fa:	480d      	ldr	r0, [pc, #52]	; (8002230 <MX_USART3_UART_Init+0x90>)
 80021fc:	f007 f943 	bl	8009486 <HAL_UARTEx_SetTxFifoThreshold>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002206:	f7ff f9bb 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800220a:	2100      	movs	r1, #0
 800220c:	4808      	ldr	r0, [pc, #32]	; (8002230 <MX_USART3_UART_Init+0x90>)
 800220e:	f007 f978 	bl	8009502 <HAL_UARTEx_SetRxFifoThreshold>
 8002212:	4603      	mov	r3, r0
 8002214:	2b00      	cmp	r3, #0
 8002216:	d001      	beq.n	800221c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002218:	f7ff f9b2 	bl	8001580 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800221c:	4804      	ldr	r0, [pc, #16]	; (8002230 <MX_USART3_UART_Init+0x90>)
 800221e:	f007 f8f9 	bl	8009414 <HAL_UARTEx_DisableFifoMode>
 8002222:	4603      	mov	r3, r0
 8002224:	2b00      	cmp	r3, #0
 8002226:	d001      	beq.n	800222c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002228:	f7ff f9aa 	bl	8001580 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800222c:	bf00      	nop
 800222e:	bd80      	pop	{r7, pc}
 8002230:	200005d0 	.word	0x200005d0
 8002234:	40004800 	.word	0x40004800

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b0a0      	sub	sp, #128	; 0x80
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002250:	f107 0318 	add.w	r3, r7, #24
 8002254:	2254      	movs	r2, #84	; 0x54
 8002256:	2100      	movs	r1, #0
 8002258:	4618      	mov	r0, r3
 800225a:	f008 f81c 	bl	800a296 <memset>
  if(uartHandle->Instance==USART2)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a41      	ldr	r2, [pc, #260]	; (8002368 <HAL_UART_MspInit+0x130>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d13f      	bne.n	80022e8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002268:	2302      	movs	r3, #2
 800226a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800226c:	2300      	movs	r3, #0
 800226e:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002270:	f107 0318 	add.w	r3, r7, #24
 8002274:	4618      	mov	r0, r3
 8002276:	f002 ffd1 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002280:	f7ff f97e 	bl	8001580 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002284:	4b39      	ldr	r3, [pc, #228]	; (800236c <HAL_UART_MspInit+0x134>)
 8002286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002288:	4a38      	ldr	r2, [pc, #224]	; (800236c <HAL_UART_MspInit+0x134>)
 800228a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800228e:	6593      	str	r3, [r2, #88]	; 0x58
 8002290:	4b36      	ldr	r3, [pc, #216]	; (800236c <HAL_UART_MspInit+0x134>)
 8002292:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800229c:	4b33      	ldr	r3, [pc, #204]	; (800236c <HAL_UART_MspInit+0x134>)
 800229e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022a0:	4a32      	ldr	r2, [pc, #200]	; (800236c <HAL_UART_MspInit+0x134>)
 80022a2:	f043 0301 	orr.w	r3, r3, #1
 80022a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80022a8:	4b30      	ldr	r3, [pc, #192]	; (800236c <HAL_UART_MspInit+0x134>)
 80022aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80022b4:	230c      	movs	r3, #12
 80022b6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b8:	2302      	movs	r3, #2
 80022ba:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022bc:	2300      	movs	r3, #0
 80022be:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c0:	2300      	movs	r3, #0
 80022c2:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022c4:	2307      	movs	r3, #7
 80022c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022c8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022cc:	4619      	mov	r1, r3
 80022ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d2:	f001 ffcb 	bl	800426c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022d6:	2200      	movs	r2, #0
 80022d8:	2100      	movs	r1, #0
 80022da:	2026      	movs	r0, #38	; 0x26
 80022dc:	f001 fede 	bl	800409c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022e0:	2026      	movs	r0, #38	; 0x26
 80022e2:	f001 fef5 	bl	80040d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022e6:	e03b      	b.n	8002360 <HAL_UART_MspInit+0x128>
  else if(uartHandle->Instance==USART3)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a20      	ldr	r2, [pc, #128]	; (8002370 <HAL_UART_MspInit+0x138>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d136      	bne.n	8002360 <HAL_UART_MspInit+0x128>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022f2:	2304      	movs	r3, #4
 80022f4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022fa:	f107 0318 	add.w	r3, r7, #24
 80022fe:	4618      	mov	r0, r3
 8002300:	f002 ff8c 	bl	800521c <HAL_RCCEx_PeriphCLKConfig>
 8002304:	4603      	mov	r3, r0
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <HAL_UART_MspInit+0xd6>
      Error_Handler();
 800230a:	f7ff f939 	bl	8001580 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <HAL_UART_MspInit+0x134>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <HAL_UART_MspInit+0x134>)
 8002314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
 800231a:	4b14      	ldr	r3, [pc, #80]	; (800236c <HAL_UART_MspInit+0x134>)
 800231c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800231e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002322:	60fb      	str	r3, [r7, #12]
 8002324:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002326:	4b11      	ldr	r3, [pc, #68]	; (800236c <HAL_UART_MspInit+0x134>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	4a10      	ldr	r2, [pc, #64]	; (800236c <HAL_UART_MspInit+0x134>)
 800232c:	f043 0304 	orr.w	r3, r3, #4
 8002330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002332:	4b0e      	ldr	r3, [pc, #56]	; (800236c <HAL_UART_MspInit+0x134>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002336:	f003 0304 	and.w	r3, r3, #4
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800233e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002342:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002344:	2302      	movs	r3, #2
 8002346:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002348:	2300      	movs	r3, #0
 800234a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800234c:	2300      	movs	r3, #0
 800234e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002350:	2307      	movs	r3, #7
 8002352:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002354:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002358:	4619      	mov	r1, r3
 800235a:	4806      	ldr	r0, [pc, #24]	; (8002374 <HAL_UART_MspInit+0x13c>)
 800235c:	f001 ff86 	bl	800426c <HAL_GPIO_Init>
}
 8002360:	bf00      	nop
 8002362:	3780      	adds	r7, #128	; 0x80
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	40004400 	.word	0x40004400
 800236c:	40021000 	.word	0x40021000
 8002370:	40004800 	.word	0x40004800
 8002374:	48000800 	.word	0x48000800

08002378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002378:	480d      	ldr	r0, [pc, #52]	; (80023b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800237a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800237c:	480d      	ldr	r0, [pc, #52]	; (80023b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800237e:	490e      	ldr	r1, [pc, #56]	; (80023b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002380:	4a0e      	ldr	r2, [pc, #56]	; (80023bc <LoopForever+0xe>)
  movs r3, #0
 8002382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002384:	e002      	b.n	800238c <LoopCopyDataInit>

08002386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800238a:	3304      	adds	r3, #4

0800238c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800238c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800238e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002390:	d3f9      	bcc.n	8002386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002392:	4a0b      	ldr	r2, [pc, #44]	; (80023c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002394:	4c0b      	ldr	r4, [pc, #44]	; (80023c4 <LoopForever+0x16>)
  movs r3, #0
 8002396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002398:	e001      	b.n	800239e <LoopFillZerobss>

0800239a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800239a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800239c:	3204      	adds	r2, #4

0800239e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800239e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023a0:	d3fb      	bcc.n	800239a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023a2:	f7ff fc9f 	bl	8001ce4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023a6:	f008 f82b 	bl	800a400 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023aa:	f7ff f875 	bl	8001498 <main>

080023ae <LoopForever>:

LoopForever:
    b LoopForever
 80023ae:	e7fe      	b.n	80023ae <LoopForever>
  ldr   r0, =_estack
 80023b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80023b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023b8:	200002a4 	.word	0x200002a4
  ldr r2, =_sidata
 80023bc:	0800c9f8 	.word	0x0800c9f8
  ldr r2, =_sbss
 80023c0:	200002a4 	.word	0x200002a4
  ldr r4, =_ebss
 80023c4:	200007b0 	.word	0x200007b0

080023c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023c8:	e7fe      	b.n	80023c8 <ADC1_2_IRQHandler>

080023ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ca:	b580      	push	{r7, lr}
 80023cc:	b082      	sub	sp, #8
 80023ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023d4:	2003      	movs	r0, #3
 80023d6:	f001 fe56 	bl	8004086 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023da:	200f      	movs	r0, #15
 80023dc:	f7ff fb08 	bl	80019f0 <HAL_InitTick>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d002      	beq.n	80023ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	71fb      	strb	r3, [r7, #7]
 80023ea:	e001      	b.n	80023f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80023ec:	f7ff fadc 	bl	80019a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80023f0:	79fb      	ldrb	r3, [r7, #7]

}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3708      	adds	r7, #8
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bd80      	pop	{r7, pc}
	...

080023fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002400:	4b05      	ldr	r3, [pc, #20]	; (8002418 <HAL_IncTick+0x1c>)
 8002402:	681a      	ldr	r2, [r3, #0]
 8002404:	4b05      	ldr	r3, [pc, #20]	; (800241c <HAL_IncTick+0x20>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4413      	add	r3, r2
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <HAL_IncTick+0x1c>)
 800240c:	6013      	str	r3, [r2, #0]
}
 800240e:	bf00      	nop
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	20000660 	.word	0x20000660
 800241c:	200000d8 	.word	0x200000d8

08002420 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return uwTick;
 8002424:	4b03      	ldr	r3, [pc, #12]	; (8002434 <HAL_GetTick+0x14>)
 8002426:	681b      	ldr	r3, [r3, #0]
}
 8002428:	4618      	mov	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002430:	4770      	bx	lr
 8002432:	bf00      	nop
 8002434:	20000660 	.word	0x20000660

08002438 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b084      	sub	sp, #16
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002440:	f7ff ffee 	bl	8002420 <HAL_GetTick>
 8002444:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002450:	d004      	beq.n	800245c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002452:	4b09      	ldr	r3, [pc, #36]	; (8002478 <HAL_Delay+0x40>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	4413      	add	r3, r2
 800245a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800245c:	bf00      	nop
 800245e:	f7ff ffdf 	bl	8002420 <HAL_GetTick>
 8002462:	4602      	mov	r2, r0
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	1ad3      	subs	r3, r2, r3
 8002468:	68fa      	ldr	r2, [r7, #12]
 800246a:	429a      	cmp	r2, r3
 800246c:	d8f7      	bhi.n	800245e <HAL_Delay+0x26>
  {
  }
}
 800246e:	bf00      	nop
 8002470:	bf00      	nop
 8002472:	3710      	adds	r7, #16
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	200000d8 	.word	0x200000d8

0800247c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	431a      	orrs	r2, r3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	609a      	str	r2, [r3, #8]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr

080024a2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80024a2:	b480      	push	{r7}
 80024a4:	b083      	sub	sp, #12
 80024a6:	af00      	add	r7, sp, #0
 80024a8:	6078      	str	r0, [r7, #4]
 80024aa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	609a      	str	r2, [r3, #8]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c8:	b480      	push	{r7}
 80024ca:	b083      	sub	sp, #12
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b087      	sub	sp, #28
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
 80024f0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	3360      	adds	r3, #96	; 0x60
 80024f6:	461a      	mov	r2, r3
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	4413      	add	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002500:	697b      	ldr	r3, [r7, #20]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	4b08      	ldr	r3, [pc, #32]	; (8002528 <LL_ADC_SetOffset+0x44>)
 8002506:	4013      	ands	r3, r2
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800250e:	683a      	ldr	r2, [r7, #0]
 8002510:	430a      	orrs	r2, r1
 8002512:	4313      	orrs	r3, r2
 8002514:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002518:	697b      	ldr	r3, [r7, #20]
 800251a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800251c:	bf00      	nop
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr
 8002528:	03fff000 	.word	0x03fff000

0800252c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800252c:	b480      	push	{r7}
 800252e:	b085      	sub	sp, #20
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
 8002534:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	3360      	adds	r3, #96	; 0x60
 800253a:	461a      	mov	r2, r3
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002558:	b480      	push	{r7}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	3360      	adds	r3, #96	; 0x60
 8002568:	461a      	mov	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	009b      	lsls	r3, r3, #2
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	431a      	orrs	r2, r3
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002582:	bf00      	nop
 8002584:	371c      	adds	r7, #28
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800258e:	b480      	push	{r7}
 8002590:	b087      	sub	sp, #28
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	3360      	adds	r3, #96	; 0x60
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80025b8:	bf00      	nop
 80025ba:	371c      	adds	r7, #28
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b087      	sub	sp, #28
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	3360      	adds	r3, #96	; 0x60
 80025d4:	461a      	mov	r2, r3
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	4413      	add	r3, r2
 80025dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	431a      	orrs	r2, r3
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80025ee:	bf00      	nop
 80025f0:	371c      	adds	r7, #28
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
 8002602:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	695b      	ldr	r3, [r3, #20]
 8002608:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	615a      	str	r2, [r3, #20]
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002634:	2301      	movs	r3, #1
 8002636:	e000      	b.n	800263a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr

08002646 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002646:	b480      	push	{r7}
 8002648:	b087      	sub	sp, #28
 800264a:	af00      	add	r7, sp, #0
 800264c:	60f8      	str	r0, [r7, #12]
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	3330      	adds	r3, #48	; 0x30
 8002656:	461a      	mov	r2, r3
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	0a1b      	lsrs	r3, r3, #8
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	4413      	add	r3, r2
 8002664:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	f003 031f 	and.w	r3, r3, #31
 8002670:	211f      	movs	r1, #31
 8002672:	fa01 f303 	lsl.w	r3, r1, r3
 8002676:	43db      	mvns	r3, r3
 8002678:	401a      	ands	r2, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	0e9b      	lsrs	r3, r3, #26
 800267e:	f003 011f 	and.w	r1, r3, #31
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f003 031f 	and.w	r3, r3, #31
 8002688:	fa01 f303 	lsl.w	r3, r1, r3
 800268c:	431a      	orrs	r2, r3
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002692:	bf00      	nop
 8002694:	371c      	adds	r7, #28
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800269e:	b480      	push	{r7}
 80026a0:	b087      	sub	sp, #28
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	60f8      	str	r0, [r7, #12]
 80026a6:	60b9      	str	r1, [r7, #8]
 80026a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	3314      	adds	r3, #20
 80026ae:	461a      	mov	r2, r3
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	0e5b      	lsrs	r3, r3, #25
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	4413      	add	r3, r2
 80026bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	681a      	ldr	r2, [r3, #0]
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	0d1b      	lsrs	r3, r3, #20
 80026c6:	f003 031f 	and.w	r3, r3, #31
 80026ca:	2107      	movs	r1, #7
 80026cc:	fa01 f303 	lsl.w	r3, r1, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	401a      	ands	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	0d1b      	lsrs	r3, r3, #20
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	6879      	ldr	r1, [r7, #4]
 80026de:	fa01 f303 	lsl.w	r3, r1, r3
 80026e2:	431a      	orrs	r2, r3
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80026e8:	bf00      	nop
 80026ea:	371c      	adds	r7, #28
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	4a0f      	ldr	r2, [pc, #60]	; (8002740 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d10a      	bne.n	800271e <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 800271c:	e00a      	b.n	8002734 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002724:	68bb      	ldr	r3, [r7, #8]
 8002726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800272a:	43db      	mvns	r3, r3
 800272c:	401a      	ands	r2, r3
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002734:	bf00      	nop
 8002736:	3714      	adds	r7, #20
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	407f0000 	.word	0x407f0000

08002744 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 031f 	and.w	r3, r3, #31
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800278c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6093      	str	r3, [r2, #8]
}
 8002794:	bf00      	nop
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80027b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027b4:	d101      	bne.n	80027ba <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80027d8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80027dc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027e4:	bf00      	nop
 80027e6:	370c      	adds	r7, #12
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002800:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002804:	d101      	bne.n	800280a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800280a:	2300      	movs	r3, #0
}
 800280c:	4618      	mov	r0, r3
 800280e:	370c      	adds	r7, #12
 8002810:	46bd      	mov	sp, r7
 8002812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002816:	4770      	bx	lr

08002818 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002828:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800282c:	f043 0201 	orr.w	r2, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002850:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002854:	f043 0202 	orr.w	r2, r3, #2
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f003 0301 	and.w	r3, r3, #1
 8002878:	2b01      	cmp	r3, #1
 800287a:	d101      	bne.n	8002880 <LL_ADC_IsEnabled+0x18>
 800287c:	2301      	movs	r3, #1
 800287e:	e000      	b.n	8002882 <LL_ADC_IsEnabled+0x1a>
 8002880:	2300      	movs	r3, #0
}
 8002882:	4618      	mov	r0, r3
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b02      	cmp	r3, #2
 80028a0:	d101      	bne.n	80028a6 <LL_ADC_IsDisableOngoing+0x18>
 80028a2:	2301      	movs	r3, #1
 80028a4:	e000      	b.n	80028a8 <LL_ADC_IsDisableOngoing+0x1a>
 80028a6:	2300      	movs	r3, #0
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr

080028b4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b083      	sub	sp, #12
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028c8:	f043 0204 	orr.w	r2, r3, #4
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	689b      	ldr	r3, [r3, #8]
 80028e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80028f0:	f043 0210 	orr.w	r2, r3, #16
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b04      	cmp	r3, #4
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsConversionOngoing+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800293a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800293e:	f043 0220 	orr.w	r2, r3, #32
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr

08002952 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b08      	cmp	r3, #8
 8002964:	d101      	bne.n	800296a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002966:	2301      	movs	r3, #1
 8002968:	e000      	b.n	800296c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002978:	b590      	push	{r4, r7, lr}
 800297a:	b089      	sub	sp, #36	; 0x24
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002980:	2300      	movs	r3, #0
 8002982:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002984:	2300      	movs	r3, #0
 8002986:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d101      	bne.n	8002992 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e1af      	b.n	8002cf2 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800299c:	2b00      	cmp	r3, #0
 800299e:	d109      	bne.n	80029b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f7fe fb95 	bl	80010d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2200      	movs	r2, #0
 80029b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff fef1 	bl	80027a0 <LL_ADC_IsDeepPowerDownEnabled>
 80029be:	4603      	mov	r3, r0
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d004      	beq.n	80029ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff fed7 	bl	800277c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4618      	mov	r0, r3
 80029d4:	f7ff ff0c 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d115      	bne.n	8002a0a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4618      	mov	r0, r3
 80029e4:	f7ff fef0 	bl	80027c8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e8:	4b9f      	ldr	r3, [pc, #636]	; (8002c68 <HAL_ADC_Init+0x2f0>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	4a9f      	ldr	r2, [pc, #636]	; (8002c6c <HAL_ADC_Init+0x2f4>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099b      	lsrs	r3, r3, #6
 80029f6:	3301      	adds	r3, #1
 80029f8:	005b      	lsls	r3, r3, #1
 80029fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80029fc:	e002      	b.n	8002a04 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80029fe:	68bb      	ldr	r3, [r7, #8]
 8002a00:	3b01      	subs	r3, #1
 8002a02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d1f9      	bne.n	80029fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7ff feee 	bl	80027f0 <LL_ADC_IsInternalRegulatorEnabled>
 8002a14:	4603      	mov	r3, r0
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d10d      	bne.n	8002a36 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1e:	f043 0210 	orr.w	r2, r3, #16
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a2a:	f043 0201 	orr.w	r2, r3, #1
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff ff62 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002a40:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a46:	f003 0310 	and.w	r3, r3, #16
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f040 8148 	bne.w	8002ce0 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f040 8144 	bne.w	8002ce0 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a5c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002a60:	f043 0202 	orr.w	r2, r3, #2
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff fefb 	bl	8002868 <LL_ADC_IsEnabled>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d141      	bne.n	8002afc <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a80:	d004      	beq.n	8002a8c <HAL_ADC_Init+0x114>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a7a      	ldr	r2, [pc, #488]	; (8002c70 <HAL_ADC_Init+0x2f8>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d10f      	bne.n	8002aac <HAL_ADC_Init+0x134>
 8002a8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a90:	f7ff feea 	bl	8002868 <LL_ADC_IsEnabled>
 8002a94:	4604      	mov	r4, r0
 8002a96:	4876      	ldr	r0, [pc, #472]	; (8002c70 <HAL_ADC_Init+0x2f8>)
 8002a98:	f7ff fee6 	bl	8002868 <LL_ADC_IsEnabled>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	4323      	orrs	r3, r4
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	bf0c      	ite	eq
 8002aa4:	2301      	moveq	r3, #1
 8002aa6:	2300      	movne	r3, #0
 8002aa8:	b2db      	uxtb	r3, r3
 8002aaa:	e012      	b.n	8002ad2 <HAL_ADC_Init+0x15a>
 8002aac:	4871      	ldr	r0, [pc, #452]	; (8002c74 <HAL_ADC_Init+0x2fc>)
 8002aae:	f7ff fedb 	bl	8002868 <LL_ADC_IsEnabled>
 8002ab2:	4604      	mov	r4, r0
 8002ab4:	4870      	ldr	r0, [pc, #448]	; (8002c78 <HAL_ADC_Init+0x300>)
 8002ab6:	f7ff fed7 	bl	8002868 <LL_ADC_IsEnabled>
 8002aba:	4603      	mov	r3, r0
 8002abc:	431c      	orrs	r4, r3
 8002abe:	486f      	ldr	r0, [pc, #444]	; (8002c7c <HAL_ADC_Init+0x304>)
 8002ac0:	f7ff fed2 	bl	8002868 <LL_ADC_IsEnabled>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4323      	orrs	r3, r4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bf0c      	ite	eq
 8002acc:	2301      	moveq	r3, #1
 8002ace:	2300      	movne	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d012      	beq.n	8002afc <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ade:	d004      	beq.n	8002aea <HAL_ADC_Init+0x172>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a62      	ldr	r2, [pc, #392]	; (8002c70 <HAL_ADC_Init+0x2f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d101      	bne.n	8002aee <HAL_ADC_Init+0x176>
 8002aea:	4a65      	ldr	r2, [pc, #404]	; (8002c80 <HAL_ADC_Init+0x308>)
 8002aec:	e000      	b.n	8002af0 <HAL_ADC_Init+0x178>
 8002aee:	4a65      	ldr	r2, [pc, #404]	; (8002c84 <HAL_ADC_Init+0x30c>)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f7ff fcc0 	bl	800247c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	7f5b      	ldrb	r3, [r3, #29]
 8002b00:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b06:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002b0c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002b12:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b1a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b26:	2b01      	cmp	r3, #1
 8002b28:	d106      	bne.n	8002b38 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	045b      	lsls	r3, r3, #17
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d009      	beq.n	8002b54 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b44:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002b4e:	69ba      	ldr	r2, [r7, #24]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68da      	ldr	r2, [r3, #12]
 8002b5a:	4b4b      	ldr	r3, [pc, #300]	; (8002c88 <HAL_ADC_Init+0x310>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6812      	ldr	r2, [r2, #0]
 8002b62:	69b9      	ldr	r1, [r7, #24]
 8002b64:	430b      	orrs	r3, r1
 8002b66:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4618      	mov	r0, r3
 8002b84:	f7ff febe 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002b88:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fedf 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8002b94:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d17f      	bne.n	8002c9c <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d17c      	bne.n	8002c9c <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ba6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bae:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002bb0:	4313      	orrs	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002bbe:	f023 0302 	bic.w	r3, r3, #2
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	6812      	ldr	r2, [r2, #0]
 8002bc6:	69b9      	ldr	r1, [r7, #24]
 8002bc8:	430b      	orrs	r3, r1
 8002bca:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	691b      	ldr	r3, [r3, #16]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d017      	beq.n	8002c04 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691a      	ldr	r2, [r3, #16]
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002be2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002bec:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bf4:	687a      	ldr	r2, [r7, #4]
 8002bf6:	6911      	ldr	r1, [r2, #16]
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430b      	orrs	r3, r1
 8002bfe:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002c02:	e013      	b.n	8002c2c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691a      	ldr	r2, [r3, #16]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002c12:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	6812      	ldr	r2, [r2, #0]
 8002c20:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002c24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c28:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d12a      	bne.n	8002c8c <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002c40:	f023 0304 	bic.w	r3, r3, #4
 8002c44:	687a      	ldr	r2, [r7, #4]
 8002c46:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c4c:	4311      	orrs	r1, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002c52:	4311      	orrs	r1, r2
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002c58:	430a      	orrs	r2, r1
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f042 0201 	orr.w	r2, r2, #1
 8002c64:	611a      	str	r2, [r3, #16]
 8002c66:	e019      	b.n	8002c9c <HAL_ADC_Init+0x324>
 8002c68:	200000d0 	.word	0x200000d0
 8002c6c:	053e2d63 	.word	0x053e2d63
 8002c70:	50000100 	.word	0x50000100
 8002c74:	50000400 	.word	0x50000400
 8002c78:	50000500 	.word	0x50000500
 8002c7c:	50000600 	.word	0x50000600
 8002c80:	50000300 	.word	0x50000300
 8002c84:	50000700 	.word	0x50000700
 8002c88:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	691a      	ldr	r2, [r3, #16]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 0201 	bic.w	r2, r2, #1
 8002c9a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	695b      	ldr	r3, [r3, #20]
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d10c      	bne.n	8002cbe <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f023 010f 	bic.w	r1, r3, #15
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6a1b      	ldr	r3, [r3, #32]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	430a      	orrs	r2, r1
 8002cba:	631a      	str	r2, [r3, #48]	; 0x30
 8002cbc:	e007      	b.n	8002cce <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f022 020f 	bic.w	r2, r2, #15
 8002ccc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cd2:	f023 0303 	bic.w	r3, r3, #3
 8002cd6:	f043 0201 	orr.w	r2, r3, #1
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	65da      	str	r2, [r3, #92]	; 0x5c
 8002cde:	e007      	b.n	8002cf0 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce4:	f043 0210 	orr.w	r2, r3, #16
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002cf0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3724      	adds	r7, #36	; 0x24
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop

08002cfc <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d0c:	d004      	beq.n	8002d18 <HAL_ADC_Start+0x1c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a67      	ldr	r2, [pc, #412]	; (8002eb0 <HAL_ADC_Start+0x1b4>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_ADC_Start+0x20>
 8002d18:	4b66      	ldr	r3, [pc, #408]	; (8002eb4 <HAL_ADC_Start+0x1b8>)
 8002d1a:	e000      	b.n	8002d1e <HAL_ADC_Start+0x22>
 8002d1c:	4b66      	ldr	r3, [pc, #408]	; (8002eb8 <HAL_ADC_Start+0x1bc>)
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7ff fd10 	bl	8002744 <LL_ADC_GetMultimode>
 8002d24:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fdea 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8002d30:	4603      	mov	r3, r0
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	f040 80b4 	bne.w	8002ea0 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d101      	bne.n	8002d46 <HAL_ADC_Start+0x4a>
 8002d42:	2302      	movs	r3, #2
 8002d44:	e0af      	b.n	8002ea6 <HAL_ADC_Start+0x1aa>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	2201      	movs	r2, #1
 8002d4a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f000 fefc 	bl	8003b4c <ADC_Enable>
 8002d54:	4603      	mov	r3, r0
 8002d56:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002d58:	7dfb      	ldrb	r3, [r7, #23]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f040 809b 	bne.w	8002e96 <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002d68:	f023 0301 	bic.w	r3, r3, #1
 8002d6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a4d      	ldr	r2, [pc, #308]	; (8002eb0 <HAL_ADC_Start+0x1b4>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d009      	beq.n	8002d92 <HAL_ADC_Start+0x96>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a4e      	ldr	r2, [pc, #312]	; (8002ebc <HAL_ADC_Start+0x1c0>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d002      	beq.n	8002d8e <HAL_ADC_Start+0x92>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	e003      	b.n	8002d96 <HAL_ADC_Start+0x9a>
 8002d8e:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <HAL_ADC_Start+0x1c4>)
 8002d90:	e001      	b.n	8002d96 <HAL_ADC_Start+0x9a>
 8002d92:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6812      	ldr	r2, [r2, #0]
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d002      	beq.n	8002da4 <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002db4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002db8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dbc:	d106      	bne.n	8002dcc <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002dc2:	f023 0206 	bic.w	r2, r3, #6
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	661a      	str	r2, [r3, #96]	; 0x60
 8002dca:	e002      	b.n	8002dd2 <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	221c      	movs	r2, #28
 8002dd8:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a32      	ldr	r2, [pc, #200]	; (8002eb0 <HAL_ADC_Start+0x1b4>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d009      	beq.n	8002e00 <HAL_ADC_Start+0x104>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_ADC_Start+0x1c0>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d002      	beq.n	8002dfc <HAL_ADC_Start+0x100>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	e003      	b.n	8002e04 <HAL_ADC_Start+0x108>
 8002dfc:	4b30      	ldr	r3, [pc, #192]	; (8002ec0 <HAL_ADC_Start+0x1c4>)
 8002dfe:	e001      	b.n	8002e04 <HAL_ADC_Start+0x108>
 8002e00:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e04:	687a      	ldr	r2, [r7, #4]
 8002e06:	6812      	ldr	r2, [r2, #0]
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d008      	beq.n	8002e1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d005      	beq.n	8002e1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	2b05      	cmp	r3, #5
 8002e16:	d002      	beq.n	8002e1e <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	2b09      	cmp	r3, #9
 8002e1c:	d114      	bne.n	8002e48 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d007      	beq.n	8002e3c <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e30:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e34:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4618      	mov	r0, r3
 8002e42:	f7ff fd37 	bl	80028b4 <LL_ADC_REG_StartConversion>
 8002e46:	e02d      	b.n	8002ea4 <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a15      	ldr	r2, [pc, #84]	; (8002eb0 <HAL_ADC_Start+0x1b4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d009      	beq.n	8002e72 <HAL_ADC_Start+0x176>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_ADC_Start+0x1c0>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d002      	beq.n	8002e6e <HAL_ADC_Start+0x172>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	e003      	b.n	8002e76 <HAL_ADC_Start+0x17a>
 8002e6e:	4b14      	ldr	r3, [pc, #80]	; (8002ec0 <HAL_ADC_Start+0x1c4>)
 8002e70:	e001      	b.n	8002e76 <HAL_ADC_Start+0x17a>
 8002e72:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002e76:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d00f      	beq.n	8002ea4 <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002e8c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e94:	e006      	b.n	8002ea4 <HAL_ADC_Start+0x1a8>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8002e9e:	e001      	b.n	8002ea4 <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002ea4:	7dfb      	ldrb	r3, [r7, #23]
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	3718      	adds	r7, #24
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	50000100 	.word	0x50000100
 8002eb4:	50000300 	.word	0x50000300
 8002eb8:	50000700 	.word	0x50000700
 8002ebc:	50000500 	.word	0x50000500
 8002ec0:	50000400 	.word	0x50000400

08002ec4 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b084      	sub	sp, #16
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d101      	bne.n	8002eda <HAL_ADC_Stop+0x16>
 8002ed6:	2302      	movs	r3, #2
 8002ed8:	e023      	b.n	8002f22 <HAL_ADC_Stop+0x5e>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002ee2:	2103      	movs	r1, #3
 8002ee4:	6878      	ldr	r0, [r7, #4]
 8002ee6:	f000 fd75 	bl	80039d4 <ADC_ConversionStop>
 8002eea:	4603      	mov	r3, r0
 8002eec:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002eee:	7bfb      	ldrb	r3, [r7, #15]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d111      	bne.n	8002f18 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f000 fe8b 	bl	8003c10 <ADC_Disable>
 8002efa:	4603      	mov	r3, r0
 8002efc:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002efe:	7bfb      	ldrb	r3, [r7, #15]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d109      	bne.n	8002f18 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f08:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f0c:	f023 0301 	bic.w	r3, r3, #1
 8002f10:	f043 0201 	orr.w	r2, r3, #1
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
	...

08002f2c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b088      	sub	sp, #32
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
 8002f34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3e:	d004      	beq.n	8002f4a <HAL_ADC_PollForConversion+0x1e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	4a77      	ldr	r2, [pc, #476]	; (8003124 <HAL_ADC_PollForConversion+0x1f8>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_PollForConversion+0x22>
 8002f4a:	4b77      	ldr	r3, [pc, #476]	; (8003128 <HAL_ADC_PollForConversion+0x1fc>)
 8002f4c:	e000      	b.n	8002f50 <HAL_ADC_PollForConversion+0x24>
 8002f4e:	4b77      	ldr	r3, [pc, #476]	; (800312c <HAL_ADC_PollForConversion+0x200>)
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7ff fbf7 	bl	8002744 <LL_ADC_GetMultimode>
 8002f56:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	2b08      	cmp	r3, #8
 8002f5e:	d102      	bne.n	8002f66 <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002f60:	2308      	movs	r3, #8
 8002f62:	61fb      	str	r3, [r7, #28]
 8002f64:	e037      	b.n	8002fd6 <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d005      	beq.n	8002f78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d002      	beq.n	8002f78 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	d111      	bne.n	8002f9c <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68db      	ldr	r3, [r3, #12]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d007      	beq.n	8002f96 <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	f043 0220 	orr.w	r2, r3, #32
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e0c1      	b.n	800311a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002f96:	2304      	movs	r3, #4
 8002f98:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002f9a:	e01c      	b.n	8002fd6 <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002fa4:	d004      	beq.n	8002fb0 <HAL_ADC_PollForConversion+0x84>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a5e      	ldr	r2, [pc, #376]	; (8003124 <HAL_ADC_PollForConversion+0x1f8>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d101      	bne.n	8002fb4 <HAL_ADC_PollForConversion+0x88>
 8002fb0:	4b5d      	ldr	r3, [pc, #372]	; (8003128 <HAL_ADC_PollForConversion+0x1fc>)
 8002fb2:	e000      	b.n	8002fb6 <HAL_ADC_PollForConversion+0x8a>
 8002fb4:	4b5d      	ldr	r3, [pc, #372]	; (800312c <HAL_ADC_PollForConversion+0x200>)
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7ff fbd2 	bl	8002760 <LL_ADC_GetMultiDMATransfer>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d007      	beq.n	8002fd2 <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc6:	f043 0220 	orr.w	r2, r3, #32
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e0a3      	b.n	800311a <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002fd2:	2304      	movs	r3, #4
 8002fd4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002fd6:	f7ff fa23 	bl	8002420 <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002fdc:	e021      	b.n	8003022 <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fe4:	d01d      	beq.n	8003022 <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002fe6:	f7ff fa1b 	bl	8002420 <HAL_GetTick>
 8002fea:	4602      	mov	r2, r0
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	1ad3      	subs	r3, r2, r3
 8002ff0:	683a      	ldr	r2, [r7, #0]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d302      	bcc.n	8002ffc <HAL_ADC_PollForConversion+0xd0>
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d112      	bne.n	8003022 <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	4013      	ands	r3, r2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d10b      	bne.n	8003022 <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300e:	f043 0204 	orr.w	r2, r3, #4
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e07b      	b.n	800311a <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	4013      	ands	r3, r2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0d6      	beq.n	8002fde <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003034:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7ff faed 	bl	8002620 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003046:	4603      	mov	r3, r0
 8003048:	2b00      	cmp	r3, #0
 800304a:	d01c      	beq.n	8003086 <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	7f5b      	ldrb	r3, [r3, #29]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d118      	bne.n	8003086 <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 0308 	and.w	r3, r3, #8
 800305e:	2b08      	cmp	r3, #8
 8003060:	d111      	bne.n	8003086 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003066:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003072:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800307e:	f043 0201 	orr.w	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a26      	ldr	r2, [pc, #152]	; (8003124 <HAL_ADC_PollForConversion+0x1f8>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d009      	beq.n	80030a4 <HAL_ADC_PollForConversion+0x178>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a26      	ldr	r2, [pc, #152]	; (8003130 <HAL_ADC_PollForConversion+0x204>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d002      	beq.n	80030a0 <HAL_ADC_PollForConversion+0x174>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	e003      	b.n	80030a8 <HAL_ADC_PollForConversion+0x17c>
 80030a0:	4b24      	ldr	r3, [pc, #144]	; (8003134 <HAL_ADC_PollForConversion+0x208>)
 80030a2:	e001      	b.n	80030a8 <HAL_ADC_PollForConversion+0x17c>
 80030a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6812      	ldr	r2, [r2, #0]
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d008      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d005      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d002      	beq.n	80030c2 <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	2b09      	cmp	r3, #9
 80030c0:	d104      	bne.n	80030cc <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
 80030ca:	e014      	b.n	80030f6 <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a14      	ldr	r2, [pc, #80]	; (8003124 <HAL_ADC_PollForConversion+0x1f8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d009      	beq.n	80030ea <HAL_ADC_PollForConversion+0x1be>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a15      	ldr	r2, [pc, #84]	; (8003130 <HAL_ADC_PollForConversion+0x204>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d002      	beq.n	80030e6 <HAL_ADC_PollForConversion+0x1ba>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	e003      	b.n	80030ee <HAL_ADC_PollForConversion+0x1c2>
 80030e6:	4b13      	ldr	r3, [pc, #76]	; (8003134 <HAL_ADC_PollForConversion+0x208>)
 80030e8:	e001      	b.n	80030ee <HAL_ADC_PollForConversion+0x1c2>
 80030ea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030ee:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d104      	bne.n	8003106 <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2208      	movs	r2, #8
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	e008      	b.n	8003118 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800310c:	2b00      	cmp	r3, #0
 800310e:	d103      	bne.n	8003118 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	220c      	movs	r2, #12
 8003116:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003118:	2300      	movs	r3, #0
}
 800311a:	4618      	mov	r0, r3
 800311c:	3720      	adds	r7, #32
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	50000100 	.word	0x50000100
 8003128:	50000300 	.word	0x50000300
 800312c:	50000700 	.word	0x50000700
 8003130:	50000500 	.word	0x50000500
 8003134:	50000400 	.word	0x50000400

08003138 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003146:	4618      	mov	r0, r3
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr
	...

08003154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b0b6      	sub	sp, #216	; 0xd8
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
 800315c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800315e:	2300      	movs	r3, #0
 8003160:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003164:	2300      	movs	r3, #0
 8003166:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x24>
 8003172:	2302      	movs	r3, #2
 8003174:	f000 bc13 	b.w	800399e <HAL_ADC_ConfigChannel+0x84a>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fbbd 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 83f3 	bne.w	8003978 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6818      	ldr	r0, [r3, #0]
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6859      	ldr	r1, [r3, #4]
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	461a      	mov	r2, r3
 80031a0:	f7ff fa51 	bl	8002646 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fbab 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 80031ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff fbcb 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 80031bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80031c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f040 81d9 	bne.w	800357c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80031ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f040 81d4 	bne.w	800357c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031dc:	d10f      	bne.n	80031fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6818      	ldr	r0, [r3, #0]
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	2200      	movs	r2, #0
 80031e8:	4619      	mov	r1, r3
 80031ea:	f7ff fa58 	bl	800269e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7ff f9ff 	bl	80025fa <LL_ADC_SetSamplingTimeCommonConfig>
 80031fc:	e00e      	b.n	800321c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6819      	ldr	r1, [r3, #0]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	461a      	mov	r2, r3
 800320c:	f7ff fa47 	bl	800269e <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f7ff f9ef 	bl	80025fa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	695a      	ldr	r2, [r3, #20]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	08db      	lsrs	r3, r3, #3
 8003228:	f003 0303 	and.w	r3, r3, #3
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	691b      	ldr	r3, [r3, #16]
 800323a:	2b04      	cmp	r3, #4
 800323c:	d022      	beq.n	8003284 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6818      	ldr	r0, [r3, #0]
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	6919      	ldr	r1, [r3, #16]
 8003246:	683b      	ldr	r3, [r7, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800324e:	f7ff f949 	bl	80024e4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6818      	ldr	r0, [r3, #0]
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	6919      	ldr	r1, [r3, #16]
 800325a:	683b      	ldr	r3, [r7, #0]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	461a      	mov	r2, r3
 8003260:	f7ff f995 	bl	800258e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6818      	ldr	r0, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	6919      	ldr	r1, [r3, #16]
 800326c:	683b      	ldr	r3, [r7, #0]
 800326e:	7f1b      	ldrb	r3, [r3, #28]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d102      	bne.n	800327a <HAL_ADC_ConfigChannel+0x126>
 8003274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003278:	e000      	b.n	800327c <HAL_ADC_ConfigChannel+0x128>
 800327a:	2300      	movs	r3, #0
 800327c:	461a      	mov	r2, r3
 800327e:	f7ff f9a1 	bl	80025c4 <LL_ADC_SetOffsetSaturation>
 8003282:	e17b      	b.n	800357c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff f94e 	bl	800252c <LL_ADC_GetOffsetChannel>
 8003290:	4603      	mov	r3, r0
 8003292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003296:	2b00      	cmp	r3, #0
 8003298:	d10a      	bne.n	80032b0 <HAL_ADC_ConfigChannel+0x15c>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2100      	movs	r1, #0
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff f943 	bl	800252c <LL_ADC_GetOffsetChannel>
 80032a6:	4603      	mov	r3, r0
 80032a8:	0e9b      	lsrs	r3, r3, #26
 80032aa:	f003 021f 	and.w	r2, r3, #31
 80032ae:	e01e      	b.n	80032ee <HAL_ADC_ConfigChannel+0x19a>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2100      	movs	r1, #0
 80032b6:	4618      	mov	r0, r3
 80032b8:	f7ff f938 	bl	800252c <LL_ADC_GetOffsetChannel>
 80032bc:	4603      	mov	r3, r0
 80032be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80032c6:	fa93 f3a3 	rbit	r3, r3
 80032ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80032ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80032d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032de:	2320      	movs	r3, #32
 80032e0:	e004      	b.n	80032ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032e6:	fab3 f383 	clz	r3, r3
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d105      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x1b2>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	0e9b      	lsrs	r3, r3, #26
 8003300:	f003 031f 	and.w	r3, r3, #31
 8003304:	e018      	b.n	8003338 <HAL_ADC_ConfigChannel+0x1e4>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003312:	fa93 f3a3 	rbit	r3, r3
 8003316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800331a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800331e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800332a:	2320      	movs	r3, #32
 800332c:	e004      	b.n	8003338 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800332e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003332:	fab3 f383 	clz	r3, r3
 8003336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003338:	429a      	cmp	r2, r3
 800333a:	d106      	bne.n	800334a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	2200      	movs	r2, #0
 8003342:	2100      	movs	r1, #0
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff f907 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	2101      	movs	r1, #1
 8003350:	4618      	mov	r0, r3
 8003352:	f7ff f8eb 	bl	800252c <LL_ADC_GetOffsetChannel>
 8003356:	4603      	mov	r3, r0
 8003358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <HAL_ADC_ConfigChannel+0x222>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	2101      	movs	r1, #1
 8003366:	4618      	mov	r0, r3
 8003368:	f7ff f8e0 	bl	800252c <LL_ADC_GetOffsetChannel>
 800336c:	4603      	mov	r3, r0
 800336e:	0e9b      	lsrs	r3, r3, #26
 8003370:	f003 021f 	and.w	r2, r3, #31
 8003374:	e01e      	b.n	80033b4 <HAL_ADC_ConfigChannel+0x260>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2101      	movs	r1, #1
 800337c:	4618      	mov	r0, r3
 800337e:	f7ff f8d5 	bl	800252c <LL_ADC_GetOffsetChannel>
 8003382:	4603      	mov	r3, r0
 8003384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800338c:	fa93 f3a3 	rbit	r3, r3
 8003390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800339c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80033a4:	2320      	movs	r3, #32
 80033a6:	e004      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80033a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80033ac:	fab3 f383 	clz	r3, r3
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_ConfigChannel+0x278>
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	0e9b      	lsrs	r3, r3, #26
 80033c6:	f003 031f 	and.w	r3, r3, #31
 80033ca:	e018      	b.n	80033fe <HAL_ADC_ConfigChannel+0x2aa>
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033d8:	fa93 f3a3 	rbit	r3, r3
 80033dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d101      	bne.n	80033f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033f0:	2320      	movs	r3, #32
 80033f2:	e004      	b.n	80033fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80033f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033f8:	fab3 f383 	clz	r3, r3
 80033fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033fe:	429a      	cmp	r2, r3
 8003400:	d106      	bne.n	8003410 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	2200      	movs	r2, #0
 8003408:	2101      	movs	r1, #1
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f8a4 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f7ff f888 	bl	800252c <LL_ADC_GetOffsetChannel>
 800341c:	4603      	mov	r3, r0
 800341e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10a      	bne.n	800343c <HAL_ADC_ConfigChannel+0x2e8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2102      	movs	r1, #2
 800342c:	4618      	mov	r0, r3
 800342e:	f7ff f87d 	bl	800252c <LL_ADC_GetOffsetChannel>
 8003432:	4603      	mov	r3, r0
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	f003 021f 	and.w	r2, r3, #31
 800343a:	e01e      	b.n	800347a <HAL_ADC_ConfigChannel+0x326>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2102      	movs	r1, #2
 8003442:	4618      	mov	r0, r3
 8003444:	f7ff f872 	bl	800252c <LL_ADC_GetOffsetChannel>
 8003448:	4603      	mov	r3, r0
 800344a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003452:	fa93 f3a3 	rbit	r3, r3
 8003456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800345a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800345e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800346a:	2320      	movs	r3, #32
 800346c:	e004      	b.n	8003478 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800346e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003472:	fab3 f383 	clz	r3, r3
 8003476:	b2db      	uxtb	r3, r3
 8003478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <HAL_ADC_ConfigChannel+0x33e>
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	0e9b      	lsrs	r3, r3, #26
 800348c:	f003 031f 	and.w	r3, r3, #31
 8003490:	e016      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x36c>
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800349e:	fa93 f3a3 	rbit	r3, r3
 80034a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80034a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80034a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80034aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d101      	bne.n	80034b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80034b2:	2320      	movs	r3, #32
 80034b4:	e004      	b.n	80034c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80034b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80034ba:	fab3 f383 	clz	r3, r3
 80034be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80034c0:	429a      	cmp	r2, r3
 80034c2:	d106      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	2200      	movs	r2, #0
 80034ca:	2102      	movs	r1, #2
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f843 	bl	8002558 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2103      	movs	r1, #3
 80034d8:	4618      	mov	r0, r3
 80034da:	f7ff f827 	bl	800252c <LL_ADC_GetOffsetChannel>
 80034de:	4603      	mov	r3, r0
 80034e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d10a      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x3aa>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2103      	movs	r1, #3
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7ff f81c 	bl	800252c <LL_ADC_GetOffsetChannel>
 80034f4:	4603      	mov	r3, r0
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 021f 	and.w	r2, r3, #31
 80034fc:	e017      	b.n	800352e <HAL_ADC_ConfigChannel+0x3da>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2103      	movs	r1, #3
 8003504:	4618      	mov	r0, r3
 8003506:	f7ff f811 	bl	800252c <LL_ADC_GetOffsetChannel>
 800350a:	4603      	mov	r3, r0
 800350c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800350e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003510:	fa93 f3a3 	rbit	r3, r3
 8003514:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003518:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800351a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003520:	2320      	movs	r3, #32
 8003522:	e003      	b.n	800352c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
 800352c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003536:	2b00      	cmp	r3, #0
 8003538:	d105      	bne.n	8003546 <HAL_ADC_ConfigChannel+0x3f2>
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	0e9b      	lsrs	r3, r3, #26
 8003540:	f003 031f 	and.w	r3, r3, #31
 8003544:	e011      	b.n	800356a <HAL_ADC_ConfigChannel+0x416>
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800354c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800354e:	fa93 f3a3 	rbit	r3, r3
 8003552:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003556:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800355a:	2b00      	cmp	r3, #0
 800355c:	d101      	bne.n	8003562 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800355e:	2320      	movs	r3, #32
 8003560:	e003      	b.n	800356a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800356a:	429a      	cmp	r2, r3
 800356c:	d106      	bne.n	800357c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	2200      	movs	r2, #0
 8003574:	2103      	movs	r1, #3
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe ffee 	bl	8002558 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4618      	mov	r0, r3
 8003582:	f7ff f971 	bl	8002868 <LL_ADC_IsEnabled>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	f040 813d 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6818      	ldr	r0, [r3, #0]
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	6819      	ldr	r1, [r3, #0]
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	68db      	ldr	r3, [r3, #12]
 800359a:	461a      	mov	r2, r3
 800359c:	f7ff f8aa 	bl	80026f4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	68db      	ldr	r3, [r3, #12]
 80035a4:	4aa2      	ldr	r2, [pc, #648]	; (8003830 <HAL_ADC_ConfigChannel+0x6dc>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	f040 812e 	bne.w	8003808 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_ADC_ConfigChannel+0x480>
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0e9b      	lsrs	r3, r3, #26
 80035c2:	3301      	adds	r3, #1
 80035c4:	f003 031f 	and.w	r3, r3, #31
 80035c8:	2b09      	cmp	r3, #9
 80035ca:	bf94      	ite	ls
 80035cc:	2301      	movls	r3, #1
 80035ce:	2300      	movhi	r3, #0
 80035d0:	b2db      	uxtb	r3, r3
 80035d2:	e019      	b.n	8003608 <HAL_ADC_ConfigChannel+0x4b4>
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035dc:	fa93 f3a3 	rbit	r3, r3
 80035e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d101      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035ec:	2320      	movs	r3, #32
 80035ee:	e003      	b.n	80035f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035f2:	fab3 f383 	clz	r3, r3
 80035f6:	b2db      	uxtb	r3, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	f003 031f 	and.w	r3, r3, #31
 80035fe:	2b09      	cmp	r3, #9
 8003600:	bf94      	ite	ls
 8003602:	2301      	movls	r3, #1
 8003604:	2300      	movhi	r3, #0
 8003606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003608:	2b00      	cmp	r3, #0
 800360a:	d079      	beq.n	8003700 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003614:	2b00      	cmp	r3, #0
 8003616:	d107      	bne.n	8003628 <HAL_ADC_ConfigChannel+0x4d4>
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0e9b      	lsrs	r3, r3, #26
 800361e:	3301      	adds	r3, #1
 8003620:	069b      	lsls	r3, r3, #26
 8003622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003626:	e015      	b.n	8003654 <HAL_ADC_ConfigChannel+0x500>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800362e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003630:	fa93 f3a3 	rbit	r3, r3
 8003634:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003638:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800363a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800363c:	2b00      	cmp	r3, #0
 800363e:	d101      	bne.n	8003644 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003640:	2320      	movs	r3, #32
 8003642:	e003      	b.n	800364c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8003644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	b2db      	uxtb	r3, r3
 800364c:	3301      	adds	r3, #1
 800364e:	069b      	lsls	r3, r3, #26
 8003650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800365c:	2b00      	cmp	r3, #0
 800365e:	d109      	bne.n	8003674 <HAL_ADC_ConfigChannel+0x520>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	0e9b      	lsrs	r3, r3, #26
 8003666:	3301      	adds	r3, #1
 8003668:	f003 031f 	and.w	r3, r3, #31
 800366c:	2101      	movs	r1, #1
 800366e:	fa01 f303 	lsl.w	r3, r1, r3
 8003672:	e017      	b.n	80036a4 <HAL_ADC_ConfigChannel+0x550>
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800367a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800367c:	fa93 f3a3 	rbit	r3, r3
 8003680:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003684:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003688:	2b00      	cmp	r3, #0
 800368a:	d101      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800368c:	2320      	movs	r3, #32
 800368e:	e003      	b.n	8003698 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	3301      	adds	r3, #1
 800369a:	f003 031f 	and.w	r3, r3, #31
 800369e:	2101      	movs	r1, #1
 80036a0:	fa01 f303 	lsl.w	r3, r1, r3
 80036a4:	ea42 0103 	orr.w	r1, r2, r3
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x576>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	3301      	adds	r3, #1
 80036bc:	f003 021f 	and.w	r2, r3, #31
 80036c0:	4613      	mov	r3, r2
 80036c2:	005b      	lsls	r3, r3, #1
 80036c4:	4413      	add	r3, r2
 80036c6:	051b      	lsls	r3, r3, #20
 80036c8:	e018      	b.n	80036fc <HAL_ADC_ConfigChannel+0x5a8>
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036d2:	fa93 f3a3 	rbit	r3, r3
 80036d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036e2:	2320      	movs	r3, #32
 80036e4:	e003      	b.n	80036ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036e8:	fab3 f383 	clz	r3, r3
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	3301      	adds	r3, #1
 80036f0:	f003 021f 	and.w	r2, r3, #31
 80036f4:	4613      	mov	r3, r2
 80036f6:	005b      	lsls	r3, r3, #1
 80036f8:	4413      	add	r3, r2
 80036fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036fc:	430b      	orrs	r3, r1
 80036fe:	e07e      	b.n	80037fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d107      	bne.n	800371c <HAL_ADC_ConfigChannel+0x5c8>
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	0e9b      	lsrs	r3, r3, #26
 8003712:	3301      	adds	r3, #1
 8003714:	069b      	lsls	r3, r3, #26
 8003716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800371a:	e015      	b.n	8003748 <HAL_ADC_ConfigChannel+0x5f4>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003724:	fa93 f3a3 	rbit	r3, r3
 8003728:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800372a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800372e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003730:	2b00      	cmp	r3, #0
 8003732:	d101      	bne.n	8003738 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8003734:	2320      	movs	r3, #32
 8003736:	e003      	b.n	8003740 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	fab3 f383 	clz	r3, r3
 800373e:	b2db      	uxtb	r3, r3
 8003740:	3301      	adds	r3, #1
 8003742:	069b      	lsls	r3, r3, #26
 8003744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003750:	2b00      	cmp	r3, #0
 8003752:	d109      	bne.n	8003768 <HAL_ADC_ConfigChannel+0x614>
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	0e9b      	lsrs	r3, r3, #26
 800375a:	3301      	adds	r3, #1
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	2101      	movs	r1, #1
 8003762:	fa01 f303 	lsl.w	r3, r1, r3
 8003766:	e017      	b.n	8003798 <HAL_ADC_ConfigChannel+0x644>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	fa93 f3a3 	rbit	r3, r3
 8003774:	61fb      	str	r3, [r7, #28]
  return result;
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800377a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003780:	2320      	movs	r3, #32
 8003782:	e003      	b.n	800378c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003786:	fab3 f383 	clz	r3, r3
 800378a:	b2db      	uxtb	r3, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f003 031f 	and.w	r3, r3, #31
 8003792:	2101      	movs	r1, #1
 8003794:	fa01 f303 	lsl.w	r3, r1, r3
 8003798:	ea42 0103 	orr.w	r1, r2, r3
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10d      	bne.n	80037c4 <HAL_ADC_ConfigChannel+0x670>
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	0e9b      	lsrs	r3, r3, #26
 80037ae:	3301      	adds	r3, #1
 80037b0:	f003 021f 	and.w	r2, r3, #31
 80037b4:	4613      	mov	r3, r2
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	4413      	add	r3, r2
 80037ba:	3b1e      	subs	r3, #30
 80037bc:	051b      	lsls	r3, r3, #20
 80037be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80037c2:	e01b      	b.n	80037fc <HAL_ADC_ConfigChannel+0x6a8>
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	613b      	str	r3, [r7, #16]
  return result;
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80037d6:	69bb      	ldr	r3, [r7, #24]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d101      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037dc:	2320      	movs	r3, #32
 80037de:	e003      	b.n	80037e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	fab3 f383 	clz	r3, r3
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3301      	adds	r3, #1
 80037ea:	f003 021f 	and.w	r2, r3, #31
 80037ee:	4613      	mov	r3, r2
 80037f0:	005b      	lsls	r3, r3, #1
 80037f2:	4413      	add	r3, r2
 80037f4:	3b1e      	subs	r3, #30
 80037f6:	051b      	lsls	r3, r3, #20
 80037f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037fc:	430b      	orrs	r3, r1
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	6892      	ldr	r2, [r2, #8]
 8003802:	4619      	mov	r1, r3
 8003804:	f7fe ff4b 	bl	800269e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	4b09      	ldr	r3, [pc, #36]	; (8003834 <HAL_ADC_ConfigChannel+0x6e0>)
 800380e:	4013      	ands	r3, r2
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 80be 	beq.w	8003992 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800381e:	d004      	beq.n	800382a <HAL_ADC_ConfigChannel+0x6d6>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a04      	ldr	r2, [pc, #16]	; (8003838 <HAL_ADC_ConfigChannel+0x6e4>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d10a      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x6ec>
 800382a:	4b04      	ldr	r3, [pc, #16]	; (800383c <HAL_ADC_ConfigChannel+0x6e8>)
 800382c:	e009      	b.n	8003842 <HAL_ADC_ConfigChannel+0x6ee>
 800382e:	bf00      	nop
 8003830:	407f0000 	.word	0x407f0000
 8003834:	80080000 	.word	0x80080000
 8003838:	50000100 	.word	0x50000100
 800383c:	50000300 	.word	0x50000300
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_ADC_ConfigChannel+0x854>)
 8003842:	4618      	mov	r0, r3
 8003844:	f7fe fe40 	bl	80024c8 <LL_ADC_GetCommonPathInternalCh>
 8003848:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a56      	ldr	r2, [pc, #344]	; (80039ac <HAL_ADC_ConfigChannel+0x858>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_ADC_ConfigChannel+0x70c>
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a55      	ldr	r2, [pc, #340]	; (80039b0 <HAL_ADC_ConfigChannel+0x85c>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d13a      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003868:	2b00      	cmp	r3, #0
 800386a:	d134      	bne.n	80038d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003874:	d005      	beq.n	8003882 <HAL_ADC_ConfigChannel+0x72e>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a4e      	ldr	r2, [pc, #312]	; (80039b4 <HAL_ADC_ConfigChannel+0x860>)
 800387c:	4293      	cmp	r3, r2
 800387e:	f040 8085 	bne.w	800398c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800388a:	d004      	beq.n	8003896 <HAL_ADC_ConfigChannel+0x742>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a49      	ldr	r2, [pc, #292]	; (80039b8 <HAL_ADC_ConfigChannel+0x864>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d101      	bne.n	800389a <HAL_ADC_ConfigChannel+0x746>
 8003896:	4a49      	ldr	r2, [pc, #292]	; (80039bc <HAL_ADC_ConfigChannel+0x868>)
 8003898:	e000      	b.n	800389c <HAL_ADC_ConfigChannel+0x748>
 800389a:	4a43      	ldr	r2, [pc, #268]	; (80039a8 <HAL_ADC_ConfigChannel+0x854>)
 800389c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80038a4:	4619      	mov	r1, r3
 80038a6:	4610      	mov	r0, r2
 80038a8:	f7fe fdfb 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80038ac:	4b44      	ldr	r3, [pc, #272]	; (80039c0 <HAL_ADC_ConfigChannel+0x86c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	099b      	lsrs	r3, r3, #6
 80038b2:	4a44      	ldr	r2, [pc, #272]	; (80039c4 <HAL_ADC_ConfigChannel+0x870>)
 80038b4:	fba2 2303 	umull	r2, r3, r2, r3
 80038b8:	099b      	lsrs	r3, r3, #6
 80038ba:	1c5a      	adds	r2, r3, #1
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038c6:	e002      	b.n	80038ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d1f9      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d4:	e05a      	b.n	800398c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a3b      	ldr	r2, [pc, #236]	; (80039c8 <HAL_ADC_ConfigChannel+0x874>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d125      	bne.n	800392c <HAL_ADC_ConfigChannel+0x7d8>
 80038e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d11f      	bne.n	800392c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a31      	ldr	r2, [pc, #196]	; (80039b8 <HAL_ADC_ConfigChannel+0x864>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d104      	bne.n	8003900 <HAL_ADC_ConfigChannel+0x7ac>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a34      	ldr	r2, [pc, #208]	; (80039cc <HAL_ADC_ConfigChannel+0x878>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d047      	beq.n	8003990 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003908:	d004      	beq.n	8003914 <HAL_ADC_ConfigChannel+0x7c0>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a2a      	ldr	r2, [pc, #168]	; (80039b8 <HAL_ADC_ConfigChannel+0x864>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x7c4>
 8003914:	4a29      	ldr	r2, [pc, #164]	; (80039bc <HAL_ADC_ConfigChannel+0x868>)
 8003916:	e000      	b.n	800391a <HAL_ADC_ConfigChannel+0x7c6>
 8003918:	4a23      	ldr	r2, [pc, #140]	; (80039a8 <HAL_ADC_ConfigChannel+0x854>)
 800391a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800391e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003922:	4619      	mov	r1, r3
 8003924:	4610      	mov	r0, r2
 8003926:	f7fe fdbc 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800392a:	e031      	b.n	8003990 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <HAL_ADC_ConfigChannel+0x87c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d12d      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800393a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393e:	2b00      	cmp	r3, #0
 8003940:	d127      	bne.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a1c      	ldr	r2, [pc, #112]	; (80039b8 <HAL_ADC_ConfigChannel+0x864>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003954:	d004      	beq.n	8003960 <HAL_ADC_ConfigChannel+0x80c>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a17      	ldr	r2, [pc, #92]	; (80039b8 <HAL_ADC_ConfigChannel+0x864>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d101      	bne.n	8003964 <HAL_ADC_ConfigChannel+0x810>
 8003960:	4a16      	ldr	r2, [pc, #88]	; (80039bc <HAL_ADC_ConfigChannel+0x868>)
 8003962:	e000      	b.n	8003966 <HAL_ADC_ConfigChannel+0x812>
 8003964:	4a10      	ldr	r2, [pc, #64]	; (80039a8 <HAL_ADC_ConfigChannel+0x854>)
 8003966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800396a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800396e:	4619      	mov	r1, r3
 8003970:	4610      	mov	r0, r2
 8003972:	f7fe fd96 	bl	80024a2 <LL_ADC_SetCommonPathInternalCh>
 8003976:	e00c      	b.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397c:	f043 0220 	orr.w	r2, r3, #32
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800398a:	e002      	b.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800398c:	bf00      	nop
 800398e:	e000      	b.n	8003992 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003990:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800399a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800399e:	4618      	mov	r0, r3
 80039a0:	37d8      	adds	r7, #216	; 0xd8
 80039a2:	46bd      	mov	sp, r7
 80039a4:	bd80      	pop	{r7, pc}
 80039a6:	bf00      	nop
 80039a8:	50000700 	.word	0x50000700
 80039ac:	c3210000 	.word	0xc3210000
 80039b0:	90c00010 	.word	0x90c00010
 80039b4:	50000600 	.word	0x50000600
 80039b8:	50000100 	.word	0x50000100
 80039bc:	50000300 	.word	0x50000300
 80039c0:	200000d0 	.word	0x200000d0
 80039c4:	053e2d63 	.word	0x053e2d63
 80039c8:	c7520000 	.word	0xc7520000
 80039cc:	50000500 	.word	0x50000500
 80039d0:	cb840000 	.word	0xcb840000

080039d4 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b088      	sub	sp, #32
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 80039de:	2300      	movs	r3, #0
 80039e0:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4618      	mov	r0, r3
 80039ec:	f7fe ff8a 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 80039f0:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7fe ffab 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 80039fc:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d103      	bne.n	8003a0c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	f000 8098 	beq.w	8003b3c <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d02a      	beq.n	8003a70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	7f5b      	ldrb	r3, [r3, #29]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	d126      	bne.n	8003a70 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	7f1b      	ldrb	r3, [r3, #28]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d122      	bne.n	8003a70 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a2e:	e014      	b.n	8003a5a <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	4a45      	ldr	r2, [pc, #276]	; (8003b48 <ADC_ConversionStop+0x174>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d90d      	bls.n	8003a54 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a3c:	f043 0210 	orr.w	r2, r3, #16
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a48:	f043 0201 	orr.w	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e074      	b.n	8003b3e <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003a54:	69fb      	ldr	r3, [r7, #28]
 8003a56:	3301      	adds	r3, #1
 8003a58:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a64:	2b40      	cmp	r3, #64	; 0x40
 8003a66:	d1e3      	bne.n	8003a30 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2240      	movs	r2, #64	; 0x40
 8003a6e:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	2b02      	cmp	r3, #2
 8003a74:	d014      	beq.n	8003aa0 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f7fe ff42 	bl	8002904 <LL_ADC_REG_IsConversionOngoing>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00c      	beq.n	8003aa0 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe feff 	bl	800288e <LL_ADC_IsDisableOngoing>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d104      	bne.n	8003aa0 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fe ff1e 	bl	80028dc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003aa0:	69bb      	ldr	r3, [r7, #24]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d014      	beq.n	8003ad0 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe ff51 	bl	8002952 <LL_ADC_INJ_IsConversionOngoing>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fee7 	bl	800288e <LL_ADC_IsDisableOngoing>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d104      	bne.n	8003ad0 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4618      	mov	r0, r3
 8003acc:	f7fe ff2d 	bl	800292a <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d005      	beq.n	8003ae2 <ADC_ConversionStop+0x10e>
 8003ad6:	69bb      	ldr	r3, [r7, #24]
 8003ad8:	2b03      	cmp	r3, #3
 8003ada:	d105      	bne.n	8003ae8 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003adc:	230c      	movs	r3, #12
 8003ade:	617b      	str	r3, [r7, #20]
        break;
 8003ae0:	e005      	b.n	8003aee <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003ae2:	2308      	movs	r3, #8
 8003ae4:	617b      	str	r3, [r7, #20]
        break;
 8003ae6:	e002      	b.n	8003aee <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003ae8:	2304      	movs	r3, #4
 8003aea:	617b      	str	r3, [r7, #20]
        break;
 8003aec:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003aee:	f7fe fc97 	bl	8002420 <HAL_GetTick>
 8003af2:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003af4:	e01b      	b.n	8003b2e <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003af6:	f7fe fc93 	bl	8002420 <HAL_GetTick>
 8003afa:	4602      	mov	r2, r0
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b05      	cmp	r3, #5
 8003b02:	d914      	bls.n	8003b2e <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00d      	beq.n	8003b2e <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b16:	f043 0210 	orr.w	r2, r3, #16
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b22:	f043 0201 	orr.w	r2, r3, #1
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e007      	b.n	8003b3e <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	4013      	ands	r3, r2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1dc      	bne.n	8003af6 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3720      	adds	r7, #32
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	bf00      	nop
 8003b48:	a33fffff 	.word	0xa33fffff

08003b4c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f7fe fe85 	bl	8002868 <LL_ADC_IsEnabled>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d14d      	bne.n	8003c00 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	689a      	ldr	r2, [r3, #8]
 8003b6a:	4b28      	ldr	r3, [pc, #160]	; (8003c0c <ADC_Enable+0xc0>)
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d00d      	beq.n	8003b8e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	f043 0210 	orr.w	r2, r3, #16
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b82:	f043 0201 	orr.w	r2, r3, #1
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e039      	b.n	8003c02 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fe40 	bl	8002818 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003b98:	f7fe fc42 	bl	8002420 <HAL_GetTick>
 8003b9c:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b9e:	e028      	b.n	8003bf2 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	f7fe fe5f 	bl	8002868 <LL_ADC_IsEnabled>
 8003baa:	4603      	mov	r3, r0
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d104      	bne.n	8003bba <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f7fe fe2f 	bl	8002818 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003bba:	f7fe fc31 	bl	8002420 <HAL_GetTick>
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d914      	bls.n	8003bf2 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 0301 	and.w	r3, r3, #1
 8003bd2:	2b01      	cmp	r3, #1
 8003bd4:	d00d      	beq.n	8003bf2 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bda:	f043 0210 	orr.w	r2, r3, #16
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003be6:	f043 0201 	orr.w	r2, r3, #1
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	e007      	b.n	8003c02 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0301 	and.w	r3, r3, #1
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d1cf      	bne.n	8003ba0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c00:	2300      	movs	r3, #0
}
 8003c02:	4618      	mov	r0, r3
 8003c04:	3710      	adds	r7, #16
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	bf00      	nop
 8003c0c:	8000003f 	.word	0x8000003f

08003c10 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b084      	sub	sp, #16
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	f7fe fe36 	bl	800288e <LL_ADC_IsDisableOngoing>
 8003c22:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7fe fe1d 	bl	8002868 <LL_ADC_IsEnabled>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d047      	beq.n	8003cc4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d144      	bne.n	8003cc4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030d 	and.w	r3, r3, #13
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d10c      	bne.n	8003c62 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f7fe fdf7 	bl	8002840 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	2203      	movs	r2, #3
 8003c58:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c5a:	f7fe fbe1 	bl	8002420 <HAL_GetTick>
 8003c5e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c60:	e029      	b.n	8003cb6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c66:	f043 0210 	orr.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c72:	f043 0201 	orr.w	r2, r3, #1
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e023      	b.n	8003cc6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003c7e:	f7fe fbcf 	bl	8002420 <HAL_GetTick>
 8003c82:	4602      	mov	r2, r0
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	1ad3      	subs	r3, r2, r3
 8003c88:	2b02      	cmp	r3, #2
 8003c8a:	d914      	bls.n	8003cb6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0301 	and.w	r3, r3, #1
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d00d      	beq.n	8003cb6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c9e:	f043 0210 	orr.w	r2, r3, #16
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f043 0201 	orr.w	r2, r3, #1
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e007      	b.n	8003cc6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1dc      	bne.n	8003c7e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <LL_ADC_IsEnabled>:
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b01      	cmp	r3, #1
 8003ce0:	d101      	bne.n	8003ce6 <LL_ADC_IsEnabled+0x18>
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e000      	b.n	8003ce8 <LL_ADC_IsEnabled+0x1a>
 8003ce6:	2300      	movs	r3, #0
}
 8003ce8:	4618      	mov	r0, r3
 8003cea:	370c      	adds	r7, #12
 8003cec:	46bd      	mov	sp, r7
 8003cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf2:	4770      	bx	lr

08003cf4 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cf4:	b480      	push	{r7}
 8003cf6:	b083      	sub	sp, #12
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	f003 0304 	and.w	r3, r3, #4
 8003d04:	2b04      	cmp	r3, #4
 8003d06:	d101      	bne.n	8003d0c <LL_ADC_REG_IsConversionOngoing+0x18>
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e000      	b.n	8003d0e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003d0c:	2300      	movs	r3, #0
}
 8003d0e:	4618      	mov	r0, r3
 8003d10:	370c      	adds	r7, #12
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr
	...

08003d1c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003d1c:	b590      	push	{r4, r7, lr}
 8003d1e:	b0a1      	sub	sp, #132	; 0x84
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
 8003d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d26:	2300      	movs	r3, #0
 8003d28:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d101      	bne.n	8003d3a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003d36:	2302      	movs	r3, #2
 8003d38:	e0e7      	b.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003d42:	2300      	movs	r3, #0
 8003d44:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003d46:	2300      	movs	r3, #0
 8003d48:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003d52:	d102      	bne.n	8003d5a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003d54:	4b6f      	ldr	r3, [pc, #444]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	e009      	b.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a6e      	ldr	r2, [pc, #440]	; (8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d102      	bne.n	8003d6a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003d64:	4b6d      	ldr	r3, [pc, #436]	; (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003d66:	60bb      	str	r3, [r7, #8]
 8003d68:	e001      	b.n	8003d6e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d78:	f043 0220 	orr.w	r2, r3, #32
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	e0be      	b.n	8003f0a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f7ff ffb0 	bl	8003cf4 <LL_ADC_REG_IsConversionOngoing>
 8003d94:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f7ff ffaa 	bl	8003cf4 <LL_ADC_REG_IsConversionOngoing>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f040 80a0 	bne.w	8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003da8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	f040 809c 	bne.w	8003ee8 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003db8:	d004      	beq.n	8003dc4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a55      	ldr	r2, [pc, #340]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003dc4:	4b56      	ldr	r3, [pc, #344]	; (8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003dc6:	e000      	b.n	8003dca <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003dc8:	4b56      	ldr	r3, [pc, #344]	; (8003f24 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003dca:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d04b      	beq.n	8003e6c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003dd4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	6859      	ldr	r1, [r3, #4]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003de6:	035b      	lsls	r3, r3, #13
 8003de8:	430b      	orrs	r3, r1
 8003dea:	431a      	orrs	r2, r3
 8003dec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003dee:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003df8:	d004      	beq.n	8003e04 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a45      	ldr	r2, [pc, #276]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10f      	bne.n	8003e24 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e04:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e08:	f7ff ff61 	bl	8003cce <LL_ADC_IsEnabled>
 8003e0c:	4604      	mov	r4, r0
 8003e0e:	4841      	ldr	r0, [pc, #260]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e10:	f7ff ff5d 	bl	8003cce <LL_ADC_IsEnabled>
 8003e14:	4603      	mov	r3, r0
 8003e16:	4323      	orrs	r3, r4
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	bf0c      	ite	eq
 8003e1c:	2301      	moveq	r3, #1
 8003e1e:	2300      	movne	r3, #0
 8003e20:	b2db      	uxtb	r3, r3
 8003e22:	e012      	b.n	8003e4a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003e24:	483c      	ldr	r0, [pc, #240]	; (8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003e26:	f7ff ff52 	bl	8003cce <LL_ADC_IsEnabled>
 8003e2a:	4604      	mov	r4, r0
 8003e2c:	483b      	ldr	r0, [pc, #236]	; (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003e2e:	f7ff ff4e 	bl	8003cce <LL_ADC_IsEnabled>
 8003e32:	4603      	mov	r3, r0
 8003e34:	431c      	orrs	r4, r3
 8003e36:	483c      	ldr	r0, [pc, #240]	; (8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003e38:	f7ff ff49 	bl	8003cce <LL_ADC_IsEnabled>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4323      	orrs	r3, r4
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	bf0c      	ite	eq
 8003e44:	2301      	moveq	r3, #1
 8003e46:	2300      	movne	r3, #0
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d056      	beq.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003e4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003e56:	f023 030f 	bic.w	r3, r3, #15
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	6811      	ldr	r1, [r2, #0]
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	6892      	ldr	r2, [r2, #8]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	431a      	orrs	r2, r3
 8003e66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e68:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e6a:	e047      	b.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e76:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e80:	d004      	beq.n	8003e8c <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a23      	ldr	r2, [pc, #140]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d10f      	bne.n	8003eac <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003e8c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e90:	f7ff ff1d 	bl	8003cce <LL_ADC_IsEnabled>
 8003e94:	4604      	mov	r4, r0
 8003e96:	481f      	ldr	r0, [pc, #124]	; (8003f14 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e98:	f7ff ff19 	bl	8003cce <LL_ADC_IsEnabled>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4323      	orrs	r3, r4
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	bf0c      	ite	eq
 8003ea4:	2301      	moveq	r3, #1
 8003ea6:	2300      	movne	r3, #0
 8003ea8:	b2db      	uxtb	r3, r3
 8003eaa:	e012      	b.n	8003ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003eac:	481a      	ldr	r0, [pc, #104]	; (8003f18 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eae:	f7ff ff0e 	bl	8003cce <LL_ADC_IsEnabled>
 8003eb2:	4604      	mov	r4, r0
 8003eb4:	4819      	ldr	r0, [pc, #100]	; (8003f1c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003eb6:	f7ff ff0a 	bl	8003cce <LL_ADC_IsEnabled>
 8003eba:	4603      	mov	r3, r0
 8003ebc:	431c      	orrs	r4, r3
 8003ebe:	481a      	ldr	r0, [pc, #104]	; (8003f28 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ec0:	f7ff ff05 	bl	8003cce <LL_ADC_IsEnabled>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	4323      	orrs	r3, r4
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	bf0c      	ite	eq
 8003ecc:	2301      	moveq	r3, #1
 8003ece:	2300      	movne	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d012      	beq.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003ede:	f023 030f 	bic.w	r3, r3, #15
 8003ee2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003ee4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003ee6:	e009      	b.n	8003efc <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eec:	f043 0220 	orr.w	r2, r3, #32
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003efa:	e000      	b.n	8003efe <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003efc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f06:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3784      	adds	r7, #132	; 0x84
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd90      	pop	{r4, r7, pc}
 8003f12:	bf00      	nop
 8003f14:	50000100 	.word	0x50000100
 8003f18:	50000400 	.word	0x50000400
 8003f1c:	50000500 	.word	0x50000500
 8003f20:	50000300 	.word	0x50000300
 8003f24:	50000700 	.word	0x50000700
 8003f28:	50000600 	.word	0x50000600

08003f2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f3c:	4b0c      	ldr	r3, [pc, #48]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f3e:	68db      	ldr	r3, [r3, #12]
 8003f40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f48:	4013      	ands	r3, r2
 8003f4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f5e:	4a04      	ldr	r2, [pc, #16]	; (8003f70 <__NVIC_SetPriorityGrouping+0x44>)
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	60d3      	str	r3, [r2, #12]
}
 8003f64:	bf00      	nop
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	e000ed00 	.word	0xe000ed00

08003f74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f78:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <__NVIC_GetPriorityGrouping+0x18>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	0a1b      	lsrs	r3, r3, #8
 8003f7e:	f003 0307 	and.w	r3, r3, #7
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00

08003f90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	4603      	mov	r3, r0
 8003f98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	db0b      	blt.n	8003fba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fa2:	79fb      	ldrb	r3, [r7, #7]
 8003fa4:	f003 021f 	and.w	r2, r3, #31
 8003fa8:	4907      	ldr	r1, [pc, #28]	; (8003fc8 <__NVIC_EnableIRQ+0x38>)
 8003faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fae:	095b      	lsrs	r3, r3, #5
 8003fb0:	2001      	movs	r0, #1
 8003fb2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fb6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	e000e100 	.word	0xe000e100

08003fcc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db0a      	blt.n	8003ff6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	490c      	ldr	r1, [pc, #48]	; (8004018 <__NVIC_SetPriority+0x4c>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ff4:	e00a      	b.n	800400c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <__NVIC_SetPriority+0x50>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	3b04      	subs	r3, #4
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	440b      	add	r3, r1
 800400a:	761a      	strb	r2, [r3, #24]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004020:	b480      	push	{r7}
 8004022:	b089      	sub	sp, #36	; 0x24
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f003 0307 	and.w	r3, r3, #7
 8004032:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f1c3 0307 	rsb	r3, r3, #7
 800403a:	2b04      	cmp	r3, #4
 800403c:	bf28      	it	cs
 800403e:	2304      	movcs	r3, #4
 8004040:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	3304      	adds	r3, #4
 8004046:	2b06      	cmp	r3, #6
 8004048:	d902      	bls.n	8004050 <NVIC_EncodePriority+0x30>
 800404a:	69fb      	ldr	r3, [r7, #28]
 800404c:	3b03      	subs	r3, #3
 800404e:	e000      	b.n	8004052 <NVIC_EncodePriority+0x32>
 8004050:	2300      	movs	r3, #0
 8004052:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004054:	f04f 32ff 	mov.w	r2, #4294967295
 8004058:	69bb      	ldr	r3, [r7, #24]
 800405a:	fa02 f303 	lsl.w	r3, r2, r3
 800405e:	43da      	mvns	r2, r3
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	401a      	ands	r2, r3
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004068:	f04f 31ff 	mov.w	r1, #4294967295
 800406c:	697b      	ldr	r3, [r7, #20]
 800406e:	fa01 f303 	lsl.w	r3, r1, r3
 8004072:	43d9      	mvns	r1, r3
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004078:	4313      	orrs	r3, r2
         );
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f7ff ff4c 	bl	8003f2c <__NVIC_SetPriorityGrouping>
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}

0800409c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b086      	sub	sp, #24
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	60b9      	str	r1, [r7, #8]
 80040a6:	607a      	str	r2, [r7, #4]
 80040a8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80040aa:	f7ff ff63 	bl	8003f74 <__NVIC_GetPriorityGrouping>
 80040ae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68b9      	ldr	r1, [r7, #8]
 80040b4:	6978      	ldr	r0, [r7, #20]
 80040b6:	f7ff ffb3 	bl	8004020 <NVIC_EncodePriority>
 80040ba:	4602      	mov	r2, r0
 80040bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f7ff ff82 	bl	8003fcc <__NVIC_SetPriority>
}
 80040c8:	bf00      	nop
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b082      	sub	sp, #8
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80040da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040de:	4618      	mov	r0, r3
 80040e0:	f7ff ff56 	bl	8003f90 <__NVIC_EnableIRQ>
}
 80040e4:	bf00      	nop
 80040e6:	3708      	adds	r7, #8
 80040e8:	46bd      	mov	sp, r7
 80040ea:	bd80      	pop	{r7, pc}

080040ec <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80040ec:	b480      	push	{r7}
 80040ee:	b085      	sub	sp, #20
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80040fe:	b2db      	uxtb	r3, r3
 8004100:	2b02      	cmp	r3, #2
 8004102:	d005      	beq.n	8004110 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2204      	movs	r2, #4
 8004108:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	73fb      	strb	r3, [r7, #15]
 800410e:	e037      	b.n	8004180 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f022 020e 	bic.w	r2, r2, #14
 800411e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800412a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800412e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0201 	bic.w	r2, r2, #1
 800413e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004144:	f003 021f 	and.w	r2, r3, #31
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	2101      	movs	r1, #1
 800414e:	fa01 f202 	lsl.w	r2, r1, r2
 8004152:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800415c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004162:	2b00      	cmp	r3, #0
 8004164:	d00c      	beq.n	8004180 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004170:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004174:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800417e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004190:	7bfb      	ldrb	r3, [r7, #15]
}
 8004192:	4618      	mov	r0, r3
 8004194:	3714      	adds	r7, #20
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041a6:	2300      	movs	r3, #0
 80041a8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d00d      	beq.n	80041d2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2204      	movs	r2, #4
 80041ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	73fb      	strb	r3, [r7, #15]
 80041d0:	e047      	b.n	8004262 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f022 020e 	bic.w	r2, r2, #14
 80041e0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0201 	bic.w	r2, r2, #1
 80041f0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004200:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f003 021f 	and.w	r2, r3, #31
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2101      	movs	r1, #1
 8004210:	fa01 f202 	lsl.w	r2, r1, r2
 8004214:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800421e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00c      	beq.n	8004242 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004232:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004236:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004240:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2201      	movs	r2, #1
 8004246:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2200      	movs	r2, #0
 800424e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	4798      	blx	r3
    }
  }
  return status;
 8004262:	7bfb      	ldrb	r3, [r7, #15]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800426c:	b480      	push	{r7}
 800426e:	b087      	sub	sp, #28
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004276:	2300      	movs	r3, #0
 8004278:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800427a:	e15a      	b.n	8004532 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	2101      	movs	r1, #1
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	fa01 f303 	lsl.w	r3, r1, r3
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2b00      	cmp	r3, #0
 8004290:	f000 814c 	beq.w	800452c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f003 0303 	and.w	r3, r3, #3
 800429c:	2b01      	cmp	r3, #1
 800429e:	d005      	beq.n	80042ac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80042a8:	2b02      	cmp	r3, #2
 80042aa:	d130      	bne.n	800430e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	005b      	lsls	r3, r3, #1
 80042b6:	2203      	movs	r2, #3
 80042b8:	fa02 f303 	lsl.w	r3, r2, r3
 80042bc:	43db      	mvns	r3, r3
 80042be:	693a      	ldr	r2, [r7, #16]
 80042c0:	4013      	ands	r3, r2
 80042c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	005b      	lsls	r3, r3, #1
 80042cc:	fa02 f303 	lsl.w	r3, r2, r3
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80042e2:	2201      	movs	r2, #1
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	fa02 f303 	lsl.w	r3, r2, r3
 80042ea:	43db      	mvns	r3, r3
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4013      	ands	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	091b      	lsrs	r3, r3, #4
 80042f8:	f003 0201 	and.w	r2, r3, #1
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	693a      	ldr	r2, [r7, #16]
 8004304:	4313      	orrs	r3, r2
 8004306:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	f003 0303 	and.w	r3, r3, #3
 8004316:	2b03      	cmp	r3, #3
 8004318:	d017      	beq.n	800434a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	2203      	movs	r2, #3
 8004326:	fa02 f303 	lsl.w	r3, r2, r3
 800432a:	43db      	mvns	r3, r3
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	4013      	ands	r3, r2
 8004330:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	005b      	lsls	r3, r3, #1
 800433a:	fa02 f303 	lsl.w	r3, r2, r3
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	4313      	orrs	r3, r2
 8004342:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	693a      	ldr	r2, [r7, #16]
 8004348:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	f003 0303 	and.w	r3, r3, #3
 8004352:	2b02      	cmp	r3, #2
 8004354:	d123      	bne.n	800439e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	08da      	lsrs	r2, r3, #3
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	3208      	adds	r2, #8
 800435e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004362:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f003 0307 	and.w	r3, r3, #7
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	220f      	movs	r2, #15
 800436e:	fa02 f303 	lsl.w	r3, r2, r3
 8004372:	43db      	mvns	r3, r3
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4013      	ands	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	009b      	lsls	r3, r3, #2
 8004386:	fa02 f303 	lsl.w	r3, r2, r3
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	4313      	orrs	r3, r2
 800438e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	08da      	lsrs	r2, r3, #3
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	3208      	adds	r2, #8
 8004398:	6939      	ldr	r1, [r7, #16]
 800439a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	2203      	movs	r2, #3
 80043aa:	fa02 f303 	lsl.w	r3, r2, r3
 80043ae:	43db      	mvns	r3, r3
 80043b0:	693a      	ldr	r2, [r7, #16]
 80043b2:	4013      	ands	r3, r2
 80043b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f003 0203 	and.w	r2, r3, #3
 80043be:	697b      	ldr	r3, [r7, #20]
 80043c0:	005b      	lsls	r3, r3, #1
 80043c2:	fa02 f303 	lsl.w	r3, r2, r3
 80043c6:	693a      	ldr	r2, [r7, #16]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80043da:	2b00      	cmp	r3, #0
 80043dc:	f000 80a6 	beq.w	800452c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043e0:	4b5b      	ldr	r3, [pc, #364]	; (8004550 <HAL_GPIO_Init+0x2e4>)
 80043e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043e4:	4a5a      	ldr	r2, [pc, #360]	; (8004550 <HAL_GPIO_Init+0x2e4>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6613      	str	r3, [r2, #96]	; 0x60
 80043ec:	4b58      	ldr	r3, [pc, #352]	; (8004550 <HAL_GPIO_Init+0x2e4>)
 80043ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	60bb      	str	r3, [r7, #8]
 80043f6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80043f8:	4a56      	ldr	r2, [pc, #344]	; (8004554 <HAL_GPIO_Init+0x2e8>)
 80043fa:	697b      	ldr	r3, [r7, #20]
 80043fc:	089b      	lsrs	r3, r3, #2
 80043fe:	3302      	adds	r3, #2
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f003 0303 	and.w	r3, r3, #3
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	220f      	movs	r2, #15
 8004410:	fa02 f303 	lsl.w	r3, r2, r3
 8004414:	43db      	mvns	r3, r3
 8004416:	693a      	ldr	r2, [r7, #16]
 8004418:	4013      	ands	r3, r2
 800441a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004422:	d01f      	beq.n	8004464 <HAL_GPIO_Init+0x1f8>
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a4c      	ldr	r2, [pc, #304]	; (8004558 <HAL_GPIO_Init+0x2ec>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d019      	beq.n	8004460 <HAL_GPIO_Init+0x1f4>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a4b      	ldr	r2, [pc, #300]	; (800455c <HAL_GPIO_Init+0x2f0>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d013      	beq.n	800445c <HAL_GPIO_Init+0x1f0>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a4a      	ldr	r2, [pc, #296]	; (8004560 <HAL_GPIO_Init+0x2f4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d00d      	beq.n	8004458 <HAL_GPIO_Init+0x1ec>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a49      	ldr	r2, [pc, #292]	; (8004564 <HAL_GPIO_Init+0x2f8>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d007      	beq.n	8004454 <HAL_GPIO_Init+0x1e8>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	4a48      	ldr	r2, [pc, #288]	; (8004568 <HAL_GPIO_Init+0x2fc>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d101      	bne.n	8004450 <HAL_GPIO_Init+0x1e4>
 800444c:	2305      	movs	r3, #5
 800444e:	e00a      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 8004450:	2306      	movs	r3, #6
 8004452:	e008      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 8004454:	2304      	movs	r3, #4
 8004456:	e006      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 8004458:	2303      	movs	r3, #3
 800445a:	e004      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 800445c:	2302      	movs	r3, #2
 800445e:	e002      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 8004460:	2301      	movs	r3, #1
 8004462:	e000      	b.n	8004466 <HAL_GPIO_Init+0x1fa>
 8004464:	2300      	movs	r3, #0
 8004466:	697a      	ldr	r2, [r7, #20]
 8004468:	f002 0203 	and.w	r2, r2, #3
 800446c:	0092      	lsls	r2, r2, #2
 800446e:	4093      	lsls	r3, r2
 8004470:	693a      	ldr	r2, [r7, #16]
 8004472:	4313      	orrs	r3, r2
 8004474:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004476:	4937      	ldr	r1, [pc, #220]	; (8004554 <HAL_GPIO_Init+0x2e8>)
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	089b      	lsrs	r3, r3, #2
 800447c:	3302      	adds	r3, #2
 800447e:	693a      	ldr	r2, [r7, #16]
 8004480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004484:	4b39      	ldr	r3, [pc, #228]	; (800456c <HAL_GPIO_Init+0x300>)
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	43db      	mvns	r3, r3
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80044a8:	4a30      	ldr	r2, [pc, #192]	; (800456c <HAL_GPIO_Init+0x300>)
 80044aa:	693b      	ldr	r3, [r7, #16]
 80044ac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80044ae:	4b2f      	ldr	r3, [pc, #188]	; (800456c <HAL_GPIO_Init+0x300>)
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	43db      	mvns	r3, r3
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4013      	ands	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d003      	beq.n	80044d2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80044ca:	693a      	ldr	r2, [r7, #16]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80044d2:	4a26      	ldr	r2, [pc, #152]	; (800456c <HAL_GPIO_Init+0x300>)
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80044d8:	4b24      	ldr	r3, [pc, #144]	; (800456c <HAL_GPIO_Init+0x300>)
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	43db      	mvns	r3, r3
 80044e2:	693a      	ldr	r2, [r7, #16]
 80044e4:	4013      	ands	r3, r2
 80044e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d003      	beq.n	80044fc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80044fc:	4a1b      	ldr	r2, [pc, #108]	; (800456c <HAL_GPIO_Init+0x300>)
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <HAL_GPIO_Init+0x300>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	43db      	mvns	r3, r3
 800450c:	693a      	ldr	r2, [r7, #16]
 800450e:	4013      	ands	r3, r2
 8004510:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d003      	beq.n	8004526 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4313      	orrs	r3, r2
 8004524:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004526:	4a11      	ldr	r2, [pc, #68]	; (800456c <HAL_GPIO_Init+0x300>)
 8004528:	693b      	ldr	r3, [r7, #16]
 800452a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	3301      	adds	r3, #1
 8004530:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681a      	ldr	r2, [r3, #0]
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	fa22 f303 	lsr.w	r3, r2, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	f47f ae9d 	bne.w	800427c <HAL_GPIO_Init+0x10>
  }
}
 8004542:	bf00      	nop
 8004544:	bf00      	nop
 8004546:	371c      	adds	r7, #28
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr
 8004550:	40021000 	.word	0x40021000
 8004554:	40010000 	.word	0x40010000
 8004558:	48000400 	.word	0x48000400
 800455c:	48000800 	.word	0x48000800
 8004560:	48000c00 	.word	0x48000c00
 8004564:	48001000 	.word	0x48001000
 8004568:	48001400 	.word	0x48001400
 800456c:	40010400 	.word	0x40010400

08004570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004570:	b480      	push	{r7}
 8004572:	b083      	sub	sp, #12
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	460b      	mov	r3, r1
 800457a:	807b      	strh	r3, [r7, #2]
 800457c:	4613      	mov	r3, r2
 800457e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004580:	787b      	ldrb	r3, [r7, #1]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d003      	beq.n	800458e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004586:	887a      	ldrh	r2, [r7, #2]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800458c:	e002      	b.n	8004594 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800458e:	887a      	ldrh	r2, [r7, #2]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004594:	bf00      	nop
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b082      	sub	sp, #8
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	4603      	mov	r3, r0
 80045a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045ac:	695a      	ldr	r2, [r3, #20]
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d006      	beq.n	80045c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80045b6:	4a05      	ldr	r2, [pc, #20]	; (80045cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80045b8:	88fb      	ldrh	r3, [r7, #6]
 80045ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80045bc:	88fb      	ldrh	r3, [r7, #6]
 80045be:	4618      	mov	r0, r3
 80045c0:	f000 f806 	bl	80045d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80045c4:	bf00      	nop
 80045c6:	3708      	adds	r7, #8
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40010400 	.word	0x40010400

080045d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80045da:	bf00      	nop
 80045dc:	370c      	adds	r7, #12
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
	...

080045e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d141      	bne.n	800467a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80045f6:	4b4b      	ldr	r3, [pc, #300]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80045fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004602:	d131      	bne.n	8004668 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004604:	4b47      	ldr	r3, [pc, #284]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800460a:	4a46      	ldr	r2, [pc, #280]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004614:	4b43      	ldr	r3, [pc, #268]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800461c:	4a41      	ldr	r2, [pc, #260]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800461e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004624:	4b40      	ldr	r3, [pc, #256]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2232      	movs	r2, #50	; 0x32
 800462a:	fb02 f303 	mul.w	r3, r2, r3
 800462e:	4a3f      	ldr	r2, [pc, #252]	; (800472c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004630:	fba2 2303 	umull	r2, r3, r2, r3
 8004634:	0c9b      	lsrs	r3, r3, #18
 8004636:	3301      	adds	r3, #1
 8004638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800463a:	e002      	b.n	8004642 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	3b01      	subs	r3, #1
 8004640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004642:	4b38      	ldr	r3, [pc, #224]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800464a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800464e:	d102      	bne.n	8004656 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f2      	bne.n	800463c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004656:	4b33      	ldr	r3, [pc, #204]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800465e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004662:	d158      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004664:	2303      	movs	r3, #3
 8004666:	e057      	b.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004668:	4b2e      	ldr	r3, [pc, #184]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800466a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800466e:	4a2d      	ldr	r2, [pc, #180]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004670:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004678:	e04d      	b.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004680:	d141      	bne.n	8004706 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004682:	4b28      	ldr	r3, [pc, #160]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800468a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800468e:	d131      	bne.n	80046f4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004690:	4b24      	ldr	r3, [pc, #144]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004692:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004696:	4a23      	ldr	r2, [pc, #140]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80046a0:	4b20      	ldr	r3, [pc, #128]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80046a8:	4a1e      	ldr	r2, [pc, #120]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046ae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80046b0:	4b1d      	ldr	r3, [pc, #116]	; (8004728 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2232      	movs	r2, #50	; 0x32
 80046b6:	fb02 f303 	mul.w	r3, r2, r3
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80046bc:	fba2 2303 	umull	r2, r3, r2, r3
 80046c0:	0c9b      	lsrs	r3, r3, #18
 80046c2:	3301      	adds	r3, #1
 80046c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046c6:	e002      	b.n	80046ce <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3b01      	subs	r3, #1
 80046cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80046ce:	4b15      	ldr	r3, [pc, #84]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046da:	d102      	bne.n	80046e2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1f2      	bne.n	80046c8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80046e2:	4b10      	ldr	r3, [pc, #64]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046ee:	d112      	bne.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e011      	b.n	8004718 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80046f4:	4b0b      	ldr	r3, [pc, #44]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046fa:	4a0a      	ldr	r2, [pc, #40]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80046fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004700:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004704:	e007      	b.n	8004716 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004706:	4b07      	ldr	r3, [pc, #28]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800470e:	4a05      	ldr	r2, [pc, #20]	; (8004724 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004710:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004714:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004716:	2300      	movs	r3, #0
}
 8004718:	4618      	mov	r0, r3
 800471a:	3714      	adds	r7, #20
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr
 8004724:	40007000 	.word	0x40007000
 8004728:	200000d0 	.word	0x200000d0
 800472c:	431bde83 	.word	0x431bde83

08004730 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004734:	4b05      	ldr	r3, [pc, #20]	; (800474c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	4a04      	ldr	r2, [pc, #16]	; (800474c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800473a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800473e:	6093      	str	r3, [r2, #8]
}
 8004740:	bf00      	nop
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	40007000 	.word	0x40007000

08004750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b088      	sub	sp, #32
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e306      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d075      	beq.n	800485a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800476e:	4b97      	ldr	r3, [pc, #604]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004778:	4b94      	ldr	r3, [pc, #592]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 800477a:	68db      	ldr	r3, [r3, #12]
 800477c:	f003 0303 	and.w	r3, r3, #3
 8004780:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	2b0c      	cmp	r3, #12
 8004786:	d102      	bne.n	800478e <HAL_RCC_OscConfig+0x3e>
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	2b03      	cmp	r3, #3
 800478c:	d002      	beq.n	8004794 <HAL_RCC_OscConfig+0x44>
 800478e:	69bb      	ldr	r3, [r7, #24]
 8004790:	2b08      	cmp	r3, #8
 8004792:	d10b      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <HAL_RCC_OscConfig+0x108>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d157      	bne.n	8004858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e2e1      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x74>
 80047b6:	4b85      	ldr	r3, [pc, #532]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a84      	ldr	r2, [pc, #528]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x98>
 80047ce:	4b7f      	ldr	r3, [pc, #508]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a7e      	ldr	r2, [pc, #504]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b7c      	ldr	r3, [pc, #496]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a7b      	ldr	r2, [pc, #492]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047e8:	4b78      	ldr	r3, [pc, #480]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a77      	ldr	r2, [pc, #476]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b75      	ldr	r3, [pc, #468]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a74      	ldr	r2, [pc, #464]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fd fe0a 	bl	8002420 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fd fe06 	bl	8002420 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e2a6      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004822:	4b6a      	ldr	r3, [pc, #424]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xc0>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004830:	f7fd fdf6 	bl	8002420 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004838:	f7fd fdf2 	bl	8002420 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e292      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800484a:	4b60      	ldr	r3, [pc, #384]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0xe8>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d075      	beq.n	8004952 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004866:	4b59      	ldr	r3, [pc, #356]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004870:	4b56      	ldr	r3, [pc, #344]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	f003 0303 	and.w	r3, r3, #3
 8004878:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800487a:	69bb      	ldr	r3, [r7, #24]
 800487c:	2b0c      	cmp	r3, #12
 800487e:	d102      	bne.n	8004886 <HAL_RCC_OscConfig+0x136>
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	2b02      	cmp	r3, #2
 8004884:	d002      	beq.n	800488c <HAL_RCC_OscConfig+0x13c>
 8004886:	69bb      	ldr	r3, [r7, #24]
 8004888:	2b04      	cmp	r3, #4
 800488a:	d11f      	bne.n	80048cc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800488c:	4b4f      	ldr	r3, [pc, #316]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <HAL_RCC_OscConfig+0x154>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d101      	bne.n	80048a4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	e265      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b49      	ldr	r3, [pc, #292]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	061b      	lsls	r3, r3, #24
 80048b2:	4946      	ldr	r1, [pc, #280]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80048b8:	4b45      	ldr	r3, [pc, #276]	; (80049d0 <HAL_RCC_OscConfig+0x280>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4618      	mov	r0, r3
 80048be:	f7fd f897 	bl	80019f0 <HAL_InitTick>
 80048c2:	4603      	mov	r3, r0
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d043      	beq.n	8004950 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80048c8:	2301      	movs	r3, #1
 80048ca:	e251      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d023      	beq.n	800491c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048d4:	4b3d      	ldr	r3, [pc, #244]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a3c      	ldr	r2, [pc, #240]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80048da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e0:	f7fd fd9e 	bl	8002420 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048e8:	f7fd fd9a 	bl	8002420 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e23a      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048fa:	4b34      	ldr	r3, [pc, #208]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004902:	2b00      	cmp	r3, #0
 8004904:	d0f0      	beq.n	80048e8 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004906:	4b31      	ldr	r3, [pc, #196]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	061b      	lsls	r3, r3, #24
 8004914:	492d      	ldr	r1, [pc, #180]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004916:	4313      	orrs	r3, r2
 8004918:	604b      	str	r3, [r1, #4]
 800491a:	e01a      	b.n	8004952 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800491c:	4b2b      	ldr	r3, [pc, #172]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	4a2a      	ldr	r2, [pc, #168]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004922:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004926:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004928:	f7fd fd7a 	bl	8002420 <HAL_GetTick>
 800492c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800492e:	e008      	b.n	8004942 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004930:	f7fd fd76 	bl	8002420 <HAL_GetTick>
 8004934:	4602      	mov	r2, r0
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	1ad3      	subs	r3, r2, r3
 800493a:	2b02      	cmp	r3, #2
 800493c:	d901      	bls.n	8004942 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e216      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800494a:	2b00      	cmp	r3, #0
 800494c:	d1f0      	bne.n	8004930 <HAL_RCC_OscConfig+0x1e0>
 800494e:	e000      	b.n	8004952 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004950:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	f003 0308 	and.w	r3, r3, #8
 800495a:	2b00      	cmp	r3, #0
 800495c:	d041      	beq.n	80049e2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d01c      	beq.n	80049a0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004966:	4b19      	ldr	r3, [pc, #100]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004968:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800496c:	4a17      	ldr	r2, [pc, #92]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 800496e:	f043 0301 	orr.w	r3, r3, #1
 8004972:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004976:	f7fd fd53 	bl	8002420 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800497c:	e008      	b.n	8004990 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800497e:	f7fd fd4f 	bl	8002420 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d901      	bls.n	8004990 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e1ef      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004990:	4b0e      	ldr	r3, [pc, #56]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 8004992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0ef      	beq.n	800497e <HAL_RCC_OscConfig+0x22e>
 800499e:	e020      	b.n	80049e2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80049a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049a6:	4a09      	ldr	r2, [pc, #36]	; (80049cc <HAL_RCC_OscConfig+0x27c>)
 80049a8:	f023 0301 	bic.w	r3, r3, #1
 80049ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049b0:	f7fd fd36 	bl	8002420 <HAL_GetTick>
 80049b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049b6:	e00d      	b.n	80049d4 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80049b8:	f7fd fd32 	bl	8002420 <HAL_GetTick>
 80049bc:	4602      	mov	r2, r0
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	1ad3      	subs	r3, r2, r3
 80049c2:	2b02      	cmp	r3, #2
 80049c4:	d906      	bls.n	80049d4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80049c6:	2303      	movs	r3, #3
 80049c8:	e1d2      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	200000d4 	.word	0x200000d4
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80049d4:	4b8c      	ldr	r3, [pc, #560]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 80049d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1ea      	bne.n	80049b8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 80a6 	beq.w	8004b3c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f0:	2300      	movs	r3, #0
 80049f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80049f4:	4b84      	ldr	r3, [pc, #528]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 80049f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_OscConfig+0x2b4>
 8004a00:	2301      	movs	r3, #1
 8004a02:	e000      	b.n	8004a06 <HAL_RCC_OscConfig+0x2b6>
 8004a04:	2300      	movs	r3, #0
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00d      	beq.n	8004a26 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b7f      	ldr	r3, [pc, #508]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a0e:	4a7e      	ldr	r2, [pc, #504]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6593      	str	r3, [r2, #88]	; 0x58
 8004a16:	4b7c      	ldr	r3, [pc, #496]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60fb      	str	r3, [r7, #12]
 8004a20:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a26:	4b79      	ldr	r3, [pc, #484]	; (8004c0c <HAL_RCC_OscConfig+0x4bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004a32:	4b76      	ldr	r3, [pc, #472]	; (8004c0c <HAL_RCC_OscConfig+0x4bc>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a75      	ldr	r2, [pc, #468]	; (8004c0c <HAL_RCC_OscConfig+0x4bc>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fd fcef 	bl	8002420 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fd fceb 	bl	8002420 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e18b      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a58:	4b6c      	ldr	r3, [pc, #432]	; (8004c0c <HAL_RCC_OscConfig+0x4bc>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d108      	bne.n	8004a7e <HAL_RCC_OscConfig+0x32e>
 8004a6c:	4b66      	ldr	r3, [pc, #408]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a72:	4a65      	ldr	r2, [pc, #404]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a74:	f043 0301 	orr.w	r3, r3, #1
 8004a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a7c:	e024      	b.n	8004ac8 <HAL_RCC_OscConfig+0x378>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b05      	cmp	r3, #5
 8004a84:	d110      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x358>
 8004a86:	4b60      	ldr	r3, [pc, #384]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a8c:	4a5e      	ldr	r2, [pc, #376]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a8e:	f043 0304 	orr.w	r3, r3, #4
 8004a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004a96:	4b5c      	ldr	r3, [pc, #368]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9c:	4a5a      	ldr	r2, [pc, #360]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004a9e:	f043 0301 	orr.w	r3, r3, #1
 8004aa2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004aa6:	e00f      	b.n	8004ac8 <HAL_RCC_OscConfig+0x378>
 8004aa8:	4b57      	ldr	r3, [pc, #348]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aae:	4a56      	ldr	r2, [pc, #344]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004ab0:	f023 0301 	bic.w	r3, r3, #1
 8004ab4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ab8:	4b53      	ldr	r3, [pc, #332]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004abe:	4a52      	ldr	r2, [pc, #328]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
 8004ac4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d016      	beq.n	8004afe <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ad0:	f7fd fca6 	bl	8002420 <HAL_GetTick>
 8004ad4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ad8:	f7fd fca2 	bl	8002420 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e140      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004aee:	4b46      	ldr	r3, [pc, #280]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004af0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004af4:	f003 0302 	and.w	r3, r3, #2
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d0ed      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x388>
 8004afc:	e015      	b.n	8004b2a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004afe:	f7fd fc8f 	bl	8002420 <HAL_GetTick>
 8004b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b04:	e00a      	b.n	8004b1c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b06:	f7fd fc8b 	bl	8002420 <HAL_GetTick>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	1ad3      	subs	r3, r2, r3
 8004b10:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d901      	bls.n	8004b1c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004b18:	2303      	movs	r3, #3
 8004b1a:	e129      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004b1c:	4b3a      	ldr	r3, [pc, #232]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1ed      	bne.n	8004b06 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004b2a:	7ffb      	ldrb	r3, [r7, #31]
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	d105      	bne.n	8004b3c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b30:	4b35      	ldr	r3, [pc, #212]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	4a34      	ldr	r2, [pc, #208]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b3a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0320 	and.w	r3, r3, #32
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d03c      	beq.n	8004bc2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d01c      	beq.n	8004b8a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b50:	4b2d      	ldr	r3, [pc, #180]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b56:	4a2c      	ldr	r2, [pc, #176]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b58:	f043 0301 	orr.w	r3, r3, #1
 8004b5c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b60:	f7fd fc5e 	bl	8002420 <HAL_GetTick>
 8004b64:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b68:	f7fd fc5a 	bl	8002420 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e0fa      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004b7a:	4b23      	ldr	r3, [pc, #140]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b80:	f003 0302 	and.w	r3, r3, #2
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0ef      	beq.n	8004b68 <HAL_RCC_OscConfig+0x418>
 8004b88:	e01b      	b.n	8004bc2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b8a:	4b1f      	ldr	r3, [pc, #124]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004b90:	4a1d      	ldr	r2, [pc, #116]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b9a:	f7fd fc41 	bl	8002420 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004ba2:	f7fd fc3d 	bl	8002420 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e0dd      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004bb4:	4b14      	ldr	r3, [pc, #80]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004bba:	f003 0302 	and.w	r3, r3, #2
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d1ef      	bne.n	8004ba2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69db      	ldr	r3, [r3, #28]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 80d1 	beq.w	8004d6e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004bcc:	4b0e      	ldr	r3, [pc, #56]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	f003 030c 	and.w	r3, r3, #12
 8004bd4:	2b0c      	cmp	r3, #12
 8004bd6:	f000 808b 	beq.w	8004cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	69db      	ldr	r3, [r3, #28]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d15e      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004be2:	4b09      	ldr	r3, [pc, #36]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a08      	ldr	r2, [pc, #32]	; (8004c08 <HAL_RCC_OscConfig+0x4b8>)
 8004be8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004bec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bee:	f7fd fc17 	bl	8002420 <HAL_GetTick>
 8004bf2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004bf4:	e00c      	b.n	8004c10 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bf6:	f7fd fc13 	bl	8002420 <HAL_GetTick>
 8004bfa:	4602      	mov	r2, r0
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	1ad3      	subs	r3, r2, r3
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d905      	bls.n	8004c10 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e0b3      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004c10:	4b59      	ldr	r3, [pc, #356]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1ec      	bne.n	8004bf6 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c1c:	4b56      	ldr	r3, [pc, #344]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c1e:	68da      	ldr	r2, [r3, #12]
 8004c20:	4b56      	ldr	r3, [pc, #344]	; (8004d7c <HAL_RCC_OscConfig+0x62c>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6a11      	ldr	r1, [r2, #32]
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	4311      	orrs	r1, r2
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004c36:	0212      	lsls	r2, r2, #8
 8004c38:	4311      	orrs	r1, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004c3e:	0852      	lsrs	r2, r2, #1
 8004c40:	3a01      	subs	r2, #1
 8004c42:	0552      	lsls	r2, r2, #21
 8004c44:	4311      	orrs	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004c4a:	0852      	lsrs	r2, r2, #1
 8004c4c:	3a01      	subs	r2, #1
 8004c4e:	0652      	lsls	r2, r2, #25
 8004c50:	4311      	orrs	r1, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004c56:	06d2      	lsls	r2, r2, #27
 8004c58:	430a      	orrs	r2, r1
 8004c5a:	4947      	ldr	r1, [pc, #284]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c60:	4b45      	ldr	r3, [pc, #276]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a44      	ldr	r2, [pc, #272]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c6a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004c6c:	4b42      	ldr	r3, [pc, #264]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	4a41      	ldr	r2, [pc, #260]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c76:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd fbd2 	bl	8002420 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fbce 	bl	8002420 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e06e      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004c92:	4b39      	ldr	r3, [pc, #228]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0f0      	beq.n	8004c80 <HAL_RCC_OscConfig+0x530>
 8004c9e:	e066      	b.n	8004d6e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ca0:	4b35      	ldr	r3, [pc, #212]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a34      	ldr	r2, [pc, #208]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004caa:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004cac:	4b32      	ldr	r3, [pc, #200]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	4a31      	ldr	r2, [pc, #196]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004cb2:	f023 0303 	bic.w	r3, r3, #3
 8004cb6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004cb8:	4b2f      	ldr	r3, [pc, #188]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	4a2e      	ldr	r2, [pc, #184]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004cbe:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004cc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cc6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc8:	f7fd fbaa 	bl	8002420 <HAL_GetTick>
 8004ccc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004cce:	e008      	b.n	8004ce2 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd0:	f7fd fba6 	bl	8002420 <HAL_GetTick>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	1ad3      	subs	r3, r2, r3
 8004cda:	2b02      	cmp	r3, #2
 8004cdc:	d901      	bls.n	8004ce2 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8004cde:	2303      	movs	r3, #3
 8004ce0:	e046      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004ce2:	4b25      	ldr	r3, [pc, #148]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d1f0      	bne.n	8004cd0 <HAL_RCC_OscConfig+0x580>
 8004cee:	e03e      	b.n	8004d6e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	69db      	ldr	r3, [r3, #28]
 8004cf4:	2b01      	cmp	r3, #1
 8004cf6:	d101      	bne.n	8004cfc <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8004cf8:	2301      	movs	r3, #1
 8004cfa:	e039      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004cfc:	4b1e      	ldr	r3, [pc, #120]	; (8004d78 <HAL_RCC_OscConfig+0x628>)
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d02:	697b      	ldr	r3, [r7, #20]
 8004d04:	f003 0203 	and.w	r2, r3, #3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6a1b      	ldr	r3, [r3, #32]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d12c      	bne.n	8004d6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d10:	697b      	ldr	r3, [r7, #20]
 8004d12:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d123      	bne.n	8004d6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d2c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004d2e:	429a      	cmp	r2, r3
 8004d30:	d11b      	bne.n	8004d6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d3c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d3e:	429a      	cmp	r2, r3
 8004d40:	d113      	bne.n	8004d6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d4c:	085b      	lsrs	r3, r3, #1
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d60:	085b      	lsrs	r3, r3, #1
 8004d62:	3b01      	subs	r3, #1
 8004d64:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d66:	429a      	cmp	r2, r3
 8004d68:	d001      	beq.n	8004d6e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e000      	b.n	8004d70 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8004d6e:	2300      	movs	r3, #0
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3720      	adds	r7, #32
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}
 8004d78:	40021000 	.word	0x40021000
 8004d7c:	019f800c 	.word	0x019f800c

08004d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b086      	sub	sp, #24
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
 8004d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d101      	bne.n	8004d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e11e      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d98:	4b91      	ldr	r3, [pc, #580]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f003 030f 	and.w	r3, r3, #15
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	429a      	cmp	r2, r3
 8004da4:	d910      	bls.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004da6:	4b8e      	ldr	r3, [pc, #568]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f023 020f 	bic.w	r2, r3, #15
 8004dae:	498c      	ldr	r1, [pc, #560]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	4313      	orrs	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b8a      	ldr	r3, [pc, #552]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 030f 	and.w	r3, r3, #15
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e106      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d073      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	2b03      	cmp	r3, #3
 8004dda:	d129      	bne.n	8004e30 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ddc:	4b81      	ldr	r3, [pc, #516]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d101      	bne.n	8004dec <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0f4      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004dec:	f000 f9d0 	bl	8005190 <RCC_GetSysClockFreqFromPLLSource>
 8004df0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	4a7c      	ldr	r2, [pc, #496]	; (8004fe8 <HAL_RCC_ClockConfig+0x268>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d93f      	bls.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004dfa:	4b7a      	ldr	r3, [pc, #488]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d033      	beq.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d12f      	bne.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e1a:	4b72      	ldr	r3, [pc, #456]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e22:	4a70      	ldr	r2, [pc, #448]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004e2a:	2380      	movs	r3, #128	; 0x80
 8004e2c:	617b      	str	r3, [r7, #20]
 8004e2e:	e024      	b.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d107      	bne.n	8004e48 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004e38:	4b6a      	ldr	r3, [pc, #424]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e44:	2301      	movs	r3, #1
 8004e46:	e0c6      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e48:	4b66      	ldr	r3, [pc, #408]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d101      	bne.n	8004e58 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004e54:	2301      	movs	r3, #1
 8004e56:	e0be      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004e58:	f000 f8ce 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004e5c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	4a61      	ldr	r2, [pc, #388]	; (8004fe8 <HAL_RCC_ClockConfig+0x268>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d909      	bls.n	8004e7a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004e66:	4b5f      	ldr	r3, [pc, #380]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e6e:	4a5d      	ldr	r2, [pc, #372]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e74:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004e76:	2380      	movs	r3, #128	; 0x80
 8004e78:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004e7a:	4b5a      	ldr	r3, [pc, #360]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e7c:	689b      	ldr	r3, [r3, #8]
 8004e7e:	f023 0203 	bic.w	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	4957      	ldr	r1, [pc, #348]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fac8 	bl	8002420 <HAL_GetTick>
 8004e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e92:	e00a      	b.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e94:	f7fd fac4 	bl	8002420 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	d901      	bls.n	8004eaa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e095      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	4b4e      	ldr	r3, [pc, #312]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eac:	689b      	ldr	r3, [r3, #8]
 8004eae:	f003 020c 	and.w	r2, r3, #12
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d1eb      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d023      	beq.n	8004f10 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b43      	ldr	r3, [pc, #268]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a42      	ldr	r2, [pc, #264]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eda:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004ede:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004eec:	4b3d      	ldr	r3, [pc, #244]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ef4:	4a3b      	ldr	r2, [pc, #236]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004ef6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004efa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004efc:	4b39      	ldr	r3, [pc, #228]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004efe:	689b      	ldr	r3, [r3, #8]
 8004f00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	4936      	ldr	r1, [pc, #216]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f0a:	4313      	orrs	r3, r2
 8004f0c:	608b      	str	r3, [r1, #8]
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2b80      	cmp	r3, #128	; 0x80
 8004f14:	d105      	bne.n	8004f22 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004f16:	4b33      	ldr	r3, [pc, #204]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	4a32      	ldr	r2, [pc, #200]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f1c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f20:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f22:	4b2f      	ldr	r3, [pc, #188]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 030f 	and.w	r3, r3, #15
 8004f2a:	683a      	ldr	r2, [r7, #0]
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d21d      	bcs.n	8004f6c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f30:	4b2b      	ldr	r3, [pc, #172]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f023 020f 	bic.w	r2, r3, #15
 8004f38:	4929      	ldr	r1, [pc, #164]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f40:	f7fd fa6e 	bl	8002420 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f48:	f7fd fa6a 	bl	8002420 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e03b      	b.n	8004fd6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f5e:	4b20      	ldr	r3, [pc, #128]	; (8004fe0 <HAL_RCC_ClockConfig+0x260>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 030f 	and.w	r3, r3, #15
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	429a      	cmp	r2, r3
 8004f6a:	d1ed      	bne.n	8004f48 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f003 0304 	and.w	r3, r3, #4
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d008      	beq.n	8004f8a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f78:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4917      	ldr	r1, [pc, #92]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f86:	4313      	orrs	r3, r2
 8004f88:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0308 	and.w	r3, r3, #8
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d009      	beq.n	8004faa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f96:	4b13      	ldr	r3, [pc, #76]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004f98:	689b      	ldr	r3, [r3, #8]
 8004f9a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	691b      	ldr	r3, [r3, #16]
 8004fa2:	00db      	lsls	r3, r3, #3
 8004fa4:	490f      	ldr	r1, [pc, #60]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004faa:	f000 f825 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	4b0c      	ldr	r3, [pc, #48]	; (8004fe4 <HAL_RCC_ClockConfig+0x264>)
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	091b      	lsrs	r3, r3, #4
 8004fb6:	f003 030f 	and.w	r3, r3, #15
 8004fba:	490c      	ldr	r1, [pc, #48]	; (8004fec <HAL_RCC_ClockConfig+0x26c>)
 8004fbc:	5ccb      	ldrb	r3, [r1, r3]
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	fa22 f303 	lsr.w	r3, r2, r3
 8004fc6:	4a0a      	ldr	r2, [pc, #40]	; (8004ff0 <HAL_RCC_ClockConfig+0x270>)
 8004fc8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004fca:	4b0a      	ldr	r3, [pc, #40]	; (8004ff4 <HAL_RCC_ClockConfig+0x274>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fc fd0e 	bl	80019f0 <HAL_InitTick>
 8004fd4:	4603      	mov	r3, r0
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	3718      	adds	r7, #24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	40022000 	.word	0x40022000
 8004fe4:	40021000 	.word	0x40021000
 8004fe8:	04c4b400 	.word	0x04c4b400
 8004fec:	0800c5dc 	.word	0x0800c5dc
 8004ff0:	200000d0 	.word	0x200000d0
 8004ff4:	200000d4 	.word	0x200000d4

08004ff8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b087      	sub	sp, #28
 8004ffc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004ffe:	4b2c      	ldr	r3, [pc, #176]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f003 030c 	and.w	r3, r3, #12
 8005006:	2b04      	cmp	r3, #4
 8005008:	d102      	bne.n	8005010 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800500a:	4b2a      	ldr	r3, [pc, #168]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 800500c:	613b      	str	r3, [r7, #16]
 800500e:	e047      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005010:	4b27      	ldr	r3, [pc, #156]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	f003 030c 	and.w	r3, r3, #12
 8005018:	2b08      	cmp	r3, #8
 800501a:	d102      	bne.n	8005022 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800501c:	4b26      	ldr	r3, [pc, #152]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	e03e      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005022:	4b23      	ldr	r3, [pc, #140]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 030c 	and.w	r3, r3, #12
 800502a:	2b0c      	cmp	r3, #12
 800502c:	d136      	bne.n	800509c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800502e:	4b20      	ldr	r3, [pc, #128]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005038:	4b1d      	ldr	r3, [pc, #116]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	091b      	lsrs	r3, r3, #4
 800503e:	f003 030f 	and.w	r3, r3, #15
 8005042:	3301      	adds	r3, #1
 8005044:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2b03      	cmp	r3, #3
 800504a:	d10c      	bne.n	8005066 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800504c:	4a1a      	ldr	r2, [pc, #104]	; (80050b8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	fbb2 f3f3 	udiv	r3, r2, r3
 8005054:	4a16      	ldr	r2, [pc, #88]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005056:	68d2      	ldr	r2, [r2, #12]
 8005058:	0a12      	lsrs	r2, r2, #8
 800505a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800505e:	fb02 f303 	mul.w	r3, r2, r3
 8005062:	617b      	str	r3, [r7, #20]
      break;
 8005064:	e00c      	b.n	8005080 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005066:	4a13      	ldr	r2, [pc, #76]	; (80050b4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	fbb2 f3f3 	udiv	r3, r2, r3
 800506e:	4a10      	ldr	r2, [pc, #64]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005070:	68d2      	ldr	r2, [r2, #12]
 8005072:	0a12      	lsrs	r2, r2, #8
 8005074:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005078:	fb02 f303 	mul.w	r3, r2, r3
 800507c:	617b      	str	r3, [r7, #20]
      break;
 800507e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005080:	4b0b      	ldr	r3, [pc, #44]	; (80050b0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	0e5b      	lsrs	r3, r3, #25
 8005086:	f003 0303 	and.w	r3, r3, #3
 800508a:	3301      	adds	r3, #1
 800508c:	005b      	lsls	r3, r3, #1
 800508e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	fbb2 f3f3 	udiv	r3, r2, r3
 8005098:	613b      	str	r3, [r7, #16]
 800509a:	e001      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80050a0:	693b      	ldr	r3, [r7, #16]
}
 80050a2:	4618      	mov	r0, r3
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40021000 	.word	0x40021000
 80050b4:	00f42400 	.word	0x00f42400
 80050b8:	016e3600 	.word	0x016e3600

080050bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050bc:	b480      	push	{r7}
 80050be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050c0:	4b03      	ldr	r3, [pc, #12]	; (80050d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80050c2:	681b      	ldr	r3, [r3, #0]
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050cc:	4770      	bx	lr
 80050ce:	bf00      	nop
 80050d0:	200000d0 	.word	0x200000d0

080050d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80050d8:	f7ff fff0 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 80050dc:	4602      	mov	r2, r0
 80050de:	4b06      	ldr	r3, [pc, #24]	; (80050f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	0a1b      	lsrs	r3, r3, #8
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	4904      	ldr	r1, [pc, #16]	; (80050fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80050ea:	5ccb      	ldrb	r3, [r1, r3]
 80050ec:	f003 031f 	and.w	r3, r3, #31
 80050f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050f4:	4618      	mov	r0, r3
 80050f6:	bd80      	pop	{r7, pc}
 80050f8:	40021000 	.word	0x40021000
 80050fc:	0800c5ec 	.word	0x0800c5ec

08005100 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005104:	f7ff ffda 	bl	80050bc <HAL_RCC_GetHCLKFreq>
 8005108:	4602      	mov	r2, r0
 800510a:	4b06      	ldr	r3, [pc, #24]	; (8005124 <HAL_RCC_GetPCLK2Freq+0x24>)
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	0adb      	lsrs	r3, r3, #11
 8005110:	f003 0307 	and.w	r3, r3, #7
 8005114:	4904      	ldr	r1, [pc, #16]	; (8005128 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005116:	5ccb      	ldrb	r3, [r1, r3]
 8005118:	f003 031f 	and.w	r3, r3, #31
 800511c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005120:	4618      	mov	r0, r3
 8005122:	bd80      	pop	{r7, pc}
 8005124:	40021000 	.word	0x40021000
 8005128:	0800c5ec 	.word	0x0800c5ec

0800512c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	220f      	movs	r2, #15
 800513a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	f003 0203 	and.w	r2, r3, #3
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005156:	689b      	ldr	r3, [r3, #8]
 8005158:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005160:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_RCC_GetClockConfig+0x5c>)
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800516e:	4b07      	ldr	r3, [pc, #28]	; (800518c <HAL_RCC_GetClockConfig+0x60>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 020f 	and.w	r2, r3, #15
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	601a      	str	r2, [r3, #0]
}
 800517a:	bf00      	nop
 800517c:	370c      	adds	r7, #12
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr
 8005186:	bf00      	nop
 8005188:	40021000 	.word	0x40021000
 800518c:	40022000 	.word	0x40022000

08005190 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005196:	4b1e      	ldr	r3, [pc, #120]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	f003 0303 	and.w	r3, r3, #3
 800519e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80051a0:	4b1b      	ldr	r3, [pc, #108]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	2b03      	cmp	r3, #3
 80051b2:	d10c      	bne.n	80051ce <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051b4:	4a17      	ldr	r2, [pc, #92]	; (8005214 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80051bc:	4a14      	ldr	r2, [pc, #80]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051be:	68d2      	ldr	r2, [r2, #12]
 80051c0:	0a12      	lsrs	r2, r2, #8
 80051c2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051c6:	fb02 f303 	mul.w	r3, r2, r3
 80051ca:	617b      	str	r3, [r7, #20]
    break;
 80051cc:	e00c      	b.n	80051e8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80051ce:	4a12      	ldr	r2, [pc, #72]	; (8005218 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80051d6:	4a0e      	ldr	r2, [pc, #56]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051d8:	68d2      	ldr	r2, [r2, #12]
 80051da:	0a12      	lsrs	r2, r2, #8
 80051dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80051e0:	fb02 f303 	mul.w	r3, r2, r3
 80051e4:	617b      	str	r3, [r7, #20]
    break;
 80051e6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80051e8:	4b09      	ldr	r3, [pc, #36]	; (8005210 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	0e5b      	lsrs	r3, r3, #25
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	3301      	adds	r3, #1
 80051f4:	005b      	lsls	r3, r3, #1
 80051f6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005200:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005202:	687b      	ldr	r3, [r7, #4]
}
 8005204:	4618      	mov	r0, r3
 8005206:	371c      	adds	r7, #28
 8005208:	46bd      	mov	sp, r7
 800520a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520e:	4770      	bx	lr
 8005210:	40021000 	.word	0x40021000
 8005214:	016e3600 	.word	0x016e3600
 8005218:	00f42400 	.word	0x00f42400

0800521c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b086      	sub	sp, #24
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005224:	2300      	movs	r3, #0
 8005226:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005228:	2300      	movs	r3, #0
 800522a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005234:	2b00      	cmp	r3, #0
 8005236:	f000 8098 	beq.w	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800523a:	2300      	movs	r3, #0
 800523c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800523e:	4b43      	ldr	r3, [pc, #268]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005240:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005242:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10d      	bne.n	8005266 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800524a:	4b40      	ldr	r3, [pc, #256]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800524c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800524e:	4a3f      	ldr	r2, [pc, #252]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005250:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005254:	6593      	str	r3, [r2, #88]	; 0x58
 8005256:	4b3d      	ldr	r3, [pc, #244]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005258:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800525a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005262:	2301      	movs	r3, #1
 8005264:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005266:	4b3a      	ldr	r3, [pc, #232]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a39      	ldr	r2, [pc, #228]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800526c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005270:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005272:	f7fd f8d5 	bl	8002420 <HAL_GetTick>
 8005276:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005278:	e009      	b.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800527a:	f7fd f8d1 	bl	8002420 <HAL_GetTick>
 800527e:	4602      	mov	r2, r0
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	2b02      	cmp	r3, #2
 8005286:	d902      	bls.n	800528e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005288:	2303      	movs	r3, #3
 800528a:	74fb      	strb	r3, [r7, #19]
        break;
 800528c:	e005      	b.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800528e:	4b30      	ldr	r3, [pc, #192]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0ef      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800529a:	7cfb      	ldrb	r3, [r7, #19]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d159      	bne.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80052a0:	4b2a      	ldr	r3, [pc, #168]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052aa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d01e      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d019      	beq.n	80052f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80052bc:	4b23      	ldr	r3, [pc, #140]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052c6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052ce:	4a1f      	ldr	r2, [pc, #124]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80052d8:	4b1c      	ldr	r3, [pc, #112]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052de:	4a1b      	ldr	r2, [pc, #108]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80052e8:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80052ea:	697b      	ldr	r3, [r7, #20]
 80052ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d016      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fa:	f7fd f891 	bl	8002420 <HAL_GetTick>
 80052fe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005300:	e00b      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005302:	f7fd f88d 	bl	8002420 <HAL_GetTick>
 8005306:	4602      	mov	r2, r0
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	1ad3      	subs	r3, r2, r3
 800530c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005310:	4293      	cmp	r3, r2
 8005312:	d902      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005314:	2303      	movs	r3, #3
 8005316:	74fb      	strb	r3, [r7, #19]
            break;
 8005318:	e006      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800531c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d0ec      	beq.n	8005302 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005328:	7cfb      	ldrb	r3, [r7, #19]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d10b      	bne.n	8005346 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005334:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800533c:	4903      	ldr	r1, [pc, #12]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005344:	e008      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005346:	7cfb      	ldrb	r3, [r7, #19]
 8005348:	74bb      	strb	r3, [r7, #18]
 800534a:	e005      	b.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800534c:	40021000 	.word	0x40021000
 8005350:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005354:	7cfb      	ldrb	r3, [r7, #19]
 8005356:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005358:	7c7b      	ldrb	r3, [r7, #17]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d105      	bne.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4ba7      	ldr	r3, [pc, #668]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005360:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005362:	4aa6      	ldr	r2, [pc, #664]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005368:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f003 0301 	and.w	r3, r3, #1
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005376:	4ba1      	ldr	r3, [pc, #644]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800537c:	f023 0203 	bic.w	r2, r3, #3
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	685b      	ldr	r3, [r3, #4]
 8005384:	499d      	ldr	r1, [pc, #628]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005386:	4313      	orrs	r3, r2
 8005388:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00a      	beq.n	80053ae <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005398:	4b98      	ldr	r3, [pc, #608]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800539a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800539e:	f023 020c 	bic.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	4995      	ldr	r1, [pc, #596]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053a8:	4313      	orrs	r3, r2
 80053aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f003 0304 	and.w	r3, r3, #4
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d00a      	beq.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80053ba:	4b90      	ldr	r3, [pc, #576]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053c0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	498c      	ldr	r1, [pc, #560]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ca:	4313      	orrs	r3, r2
 80053cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d00a      	beq.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80053dc:	4b87      	ldr	r3, [pc, #540]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	4984      	ldr	r1, [pc, #528]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80053ec:	4313      	orrs	r3, r2
 80053ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f003 0310 	and.w	r3, r3, #16
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d00a      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80053fe:	4b7f      	ldr	r3, [pc, #508]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	497b      	ldr	r1, [pc, #492]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800540e:	4313      	orrs	r3, r2
 8005410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 0320 	and.w	r3, r3, #32
 800541c:	2b00      	cmp	r3, #0
 800541e:	d00a      	beq.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005420:	4b76      	ldr	r3, [pc, #472]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	4973      	ldr	r1, [pc, #460]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005430:	4313      	orrs	r3, r2
 8005432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800543e:	2b00      	cmp	r3, #0
 8005440:	d00a      	beq.n	8005458 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005442:	4b6e      	ldr	r3, [pc, #440]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005448:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	496a      	ldr	r1, [pc, #424]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005452:	4313      	orrs	r3, r2
 8005454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005460:	2b00      	cmp	r3, #0
 8005462:	d00a      	beq.n	800547a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005464:	4b65      	ldr	r3, [pc, #404]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a1b      	ldr	r3, [r3, #32]
 8005472:	4962      	ldr	r1, [pc, #392]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005474:	4313      	orrs	r3, r2
 8005476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005482:	2b00      	cmp	r3, #0
 8005484:	d00a      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005486:	4b5d      	ldr	r3, [pc, #372]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005494:	4959      	ldr	r1, [pc, #356]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80054a8:	4b54      	ldr	r3, [pc, #336]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80054ae:	f023 0203 	bic.w	r2, r3, #3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054b6:	4951      	ldr	r1, [pc, #324]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d00a      	beq.n	80054e0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80054ca:	4b4c      	ldr	r3, [pc, #304]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054d0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054d8:	4948      	ldr	r1, [pc, #288]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d015      	beq.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80054ec:	4b43      	ldr	r3, [pc, #268]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054f2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054fa:	4940      	ldr	r1, [pc, #256]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80054fc:	4313      	orrs	r3, r2
 80054fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800550a:	d105      	bne.n	8005518 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800550c:	4b3b      	ldr	r3, [pc, #236]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	4a3a      	ldr	r2, [pc, #232]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005516:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005520:	2b00      	cmp	r3, #0
 8005522:	d015      	beq.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005524:	4b35      	ldr	r3, [pc, #212]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005526:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800552a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005532:	4932      	ldr	r1, [pc, #200]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005534:	4313      	orrs	r3, r2
 8005536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005542:	d105      	bne.n	8005550 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005544:	4b2d      	ldr	r3, [pc, #180]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	4a2c      	ldr	r2, [pc, #176]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800554a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800554e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005558:	2b00      	cmp	r3, #0
 800555a:	d015      	beq.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800555c:	4b27      	ldr	r3, [pc, #156]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800555e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005562:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	4924      	ldr	r1, [pc, #144]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800556c:	4313      	orrs	r3, r2
 800556e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005576:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800557a:	d105      	bne.n	8005588 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800557c:	4b1f      	ldr	r3, [pc, #124]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	4a1e      	ldr	r2, [pc, #120]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005582:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005586:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d015      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005594:	4b19      	ldr	r3, [pc, #100]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800559a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055a2:	4916      	ldr	r1, [pc, #88]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055a4:	4313      	orrs	r3, r2
 80055a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055b2:	d105      	bne.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055b4:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	4a10      	ldr	r2, [pc, #64]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055be:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d019      	beq.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80055cc:	4b0b      	ldr	r3, [pc, #44]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055d2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055da:	4908      	ldr	r1, [pc, #32]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80055ea:	d109      	bne.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055ec:	4b03      	ldr	r3, [pc, #12]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	4a02      	ldr	r2, [pc, #8]	; (80055fc <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80055f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80055f6:	60d3      	str	r3, [r2, #12]
 80055f8:	e002      	b.n	8005600 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80055fa:	bf00      	nop
 80055fc:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d015      	beq.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800560c:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800560e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005612:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800561a:	4926      	ldr	r1, [pc, #152]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800561c:	4313      	orrs	r3, r2
 800561e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005626:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800562a:	d105      	bne.n	8005638 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800562c:	4b21      	ldr	r3, [pc, #132]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	4a20      	ldr	r2, [pc, #128]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005632:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005636:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005640:	2b00      	cmp	r3, #0
 8005642:	d015      	beq.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005644:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800564a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005652:	4918      	ldr	r1, [pc, #96]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005654:	4313      	orrs	r3, r2
 8005656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800565e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005662:	d105      	bne.n	8005670 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005664:	4b13      	ldr	r3, [pc, #76]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	4a12      	ldr	r2, [pc, #72]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800566a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800566e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d015      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800567e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005682:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800568a:	490a      	ldr	r1, [pc, #40]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800568c:	4313      	orrs	r3, r2
 800568e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005696:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800569a:	d105      	bne.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800569c:	4b05      	ldr	r3, [pc, #20]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4a04      	ldr	r2, [pc, #16]	; (80056b4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80056a2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80056a6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80056a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3718      	adds	r7, #24
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	40021000 	.word	0x40021000

080056b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d101      	bne.n	80056ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e049      	b.n	800575e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056d0:	b2db      	uxtb	r3, r3
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d106      	bne.n	80056e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f7fc fc28 	bl	8001f34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2202      	movs	r2, #2
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	3304      	adds	r3, #4
 80056f4:	4619      	mov	r1, r3
 80056f6:	4610      	mov	r0, r2
 80056f8:	f000 fe90 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2201      	movs	r2, #1
 8005710:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2201      	movs	r2, #1
 8005718:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2201      	movs	r2, #1
 8005720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2201      	movs	r2, #1
 8005728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2201      	movs	r2, #1
 8005730:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2201      	movs	r2, #1
 8005738:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b085      	sub	sp, #20
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	d001      	beq.n	8005780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800577c:	2301      	movs	r3, #1
 800577e:	e054      	b.n	800582a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2202      	movs	r2, #2
 8005784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	68da      	ldr	r2, [r3, #12]
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0201 	orr.w	r2, r2, #1
 8005796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a26      	ldr	r2, [pc, #152]	; (8005838 <HAL_TIM_Base_Start_IT+0xd0>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d022      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057aa:	d01d      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a22      	ldr	r2, [pc, #136]	; (800583c <HAL_TIM_Base_Start_IT+0xd4>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d018      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a21      	ldr	r2, [pc, #132]	; (8005840 <HAL_TIM_Base_Start_IT+0xd8>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d013      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a1f      	ldr	r2, [pc, #124]	; (8005844 <HAL_TIM_Base_Start_IT+0xdc>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d00e      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a1e      	ldr	r2, [pc, #120]	; (8005848 <HAL_TIM_Base_Start_IT+0xe0>)
 80057d0:	4293      	cmp	r3, r2
 80057d2:	d009      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a1c      	ldr	r2, [pc, #112]	; (800584c <HAL_TIM_Base_Start_IT+0xe4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d004      	beq.n	80057e8 <HAL_TIM_Base_Start_IT+0x80>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a1b      	ldr	r2, [pc, #108]	; (8005850 <HAL_TIM_Base_Start_IT+0xe8>)
 80057e4:	4293      	cmp	r3, r2
 80057e6:	d115      	bne.n	8005814 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	689a      	ldr	r2, [r3, #8]
 80057ee:	4b19      	ldr	r3, [pc, #100]	; (8005854 <HAL_TIM_Base_Start_IT+0xec>)
 80057f0:	4013      	ands	r3, r2
 80057f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b06      	cmp	r3, #6
 80057f8:	d015      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0xbe>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005800:	d011      	beq.n	8005826 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	681a      	ldr	r2, [r3, #0]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f042 0201 	orr.w	r2, r2, #1
 8005810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005812:	e008      	b.n	8005826 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f042 0201 	orr.w	r2, r2, #1
 8005822:	601a      	str	r2, [r3, #0]
 8005824:	e000      	b.n	8005828 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005828:	2300      	movs	r3, #0
}
 800582a:	4618      	mov	r0, r3
 800582c:	3714      	adds	r7, #20
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
 8005836:	bf00      	nop
 8005838:	40012c00 	.word	0x40012c00
 800583c:	40000400 	.word	0x40000400
 8005840:	40000800 	.word	0x40000800
 8005844:	40000c00 	.word	0x40000c00
 8005848:	40013400 	.word	0x40013400
 800584c:	40014000 	.word	0x40014000
 8005850:	40015000 	.word	0x40015000
 8005854:	00010007 	.word	0x00010007

08005858 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e049      	b.n	80058fe <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005870:	b2db      	uxtb	r3, r3
 8005872:	2b00      	cmp	r3, #0
 8005874:	d106      	bne.n	8005884 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2200      	movs	r2, #0
 800587a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 f841 	bl	8005906 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	3304      	adds	r3, #4
 8005894:	4619      	mov	r1, r3
 8005896:	4610      	mov	r0, r2
 8005898:	f000 fdc0 	bl	800641c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2201      	movs	r2, #1
 80058a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2201      	movs	r2, #1
 80058a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2201      	movs	r2, #1
 80058b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2201      	movs	r2, #1
 80058b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2201      	movs	r2, #1
 80058d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3708      	adds	r7, #8
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005906:	b480      	push	{r7}
 8005908:	b083      	sub	sp, #12
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800590e:	bf00      	nop
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr
	...

0800591c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d109      	bne.n	8005940 <HAL_TIM_PWM_Start+0x24>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005932:	b2db      	uxtb	r3, r3
 8005934:	2b01      	cmp	r3, #1
 8005936:	bf14      	ite	ne
 8005938:	2301      	movne	r3, #1
 800593a:	2300      	moveq	r3, #0
 800593c:	b2db      	uxtb	r3, r3
 800593e:	e03c      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	2b04      	cmp	r3, #4
 8005944:	d109      	bne.n	800595a <HAL_TIM_PWM_Start+0x3e>
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800594c:	b2db      	uxtb	r3, r3
 800594e:	2b01      	cmp	r3, #1
 8005950:	bf14      	ite	ne
 8005952:	2301      	movne	r3, #1
 8005954:	2300      	moveq	r3, #0
 8005956:	b2db      	uxtb	r3, r3
 8005958:	e02f      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	2b08      	cmp	r3, #8
 800595e:	d109      	bne.n	8005974 <HAL_TIM_PWM_Start+0x58>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005966:	b2db      	uxtb	r3, r3
 8005968:	2b01      	cmp	r3, #1
 800596a:	bf14      	ite	ne
 800596c:	2301      	movne	r3, #1
 800596e:	2300      	moveq	r3, #0
 8005970:	b2db      	uxtb	r3, r3
 8005972:	e022      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b0c      	cmp	r3, #12
 8005978:	d109      	bne.n	800598e <HAL_TIM_PWM_Start+0x72>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005980:	b2db      	uxtb	r3, r3
 8005982:	2b01      	cmp	r3, #1
 8005984:	bf14      	ite	ne
 8005986:	2301      	movne	r3, #1
 8005988:	2300      	moveq	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	e015      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	2b10      	cmp	r3, #16
 8005992:	d109      	bne.n	80059a8 <HAL_TIM_PWM_Start+0x8c>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800599a:	b2db      	uxtb	r3, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	bf14      	ite	ne
 80059a0:	2301      	movne	r3, #1
 80059a2:	2300      	moveq	r3, #0
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	e008      	b.n	80059ba <HAL_TIM_PWM_Start+0x9e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	bf14      	ite	ne
 80059b4:	2301      	movne	r3, #1
 80059b6:	2300      	moveq	r3, #0
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e0a6      	b.n	8005b10 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d104      	bne.n	80059d2 <HAL_TIM_PWM_Start+0xb6>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2202      	movs	r2, #2
 80059cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059d0:	e023      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	2b04      	cmp	r3, #4
 80059d6:	d104      	bne.n	80059e2 <HAL_TIM_PWM_Start+0xc6>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2202      	movs	r2, #2
 80059dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059e0:	e01b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	2b08      	cmp	r3, #8
 80059e6:	d104      	bne.n	80059f2 <HAL_TIM_PWM_Start+0xd6>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2202      	movs	r2, #2
 80059ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f0:	e013      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	2b0c      	cmp	r3, #12
 80059f6:	d104      	bne.n	8005a02 <HAL_TIM_PWM_Start+0xe6>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2202      	movs	r2, #2
 80059fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a00:	e00b      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b10      	cmp	r3, #16
 8005a06:	d104      	bne.n	8005a12 <HAL_TIM_PWM_Start+0xf6>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2202      	movs	r2, #2
 8005a0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a10:	e003      	b.n	8005a1a <HAL_TIM_PWM_Start+0xfe>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2202      	movs	r2, #2
 8005a16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	6839      	ldr	r1, [r7, #0]
 8005a22:	4618      	mov	r0, r3
 8005a24:	f001 f9dc 	bl	8006de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a3a      	ldr	r2, [pc, #232]	; (8005b18 <HAL_TIM_PWM_Start+0x1fc>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d018      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x148>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4a39      	ldr	r2, [pc, #228]	; (8005b1c <HAL_TIM_PWM_Start+0x200>)
 8005a38:	4293      	cmp	r3, r2
 8005a3a:	d013      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x148>
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	4a37      	ldr	r2, [pc, #220]	; (8005b20 <HAL_TIM_PWM_Start+0x204>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d00e      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x148>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	4a36      	ldr	r2, [pc, #216]	; (8005b24 <HAL_TIM_PWM_Start+0x208>)
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d009      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x148>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a34      	ldr	r2, [pc, #208]	; (8005b28 <HAL_TIM_PWM_Start+0x20c>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d004      	beq.n	8005a64 <HAL_TIM_PWM_Start+0x148>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a33      	ldr	r2, [pc, #204]	; (8005b2c <HAL_TIM_PWM_Start+0x210>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d101      	bne.n	8005a68 <HAL_TIM_PWM_Start+0x14c>
 8005a64:	2301      	movs	r3, #1
 8005a66:	e000      	b.n	8005a6a <HAL_TIM_PWM_Start+0x14e>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d007      	beq.n	8005a7e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005a7c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	4a25      	ldr	r2, [pc, #148]	; (8005b18 <HAL_TIM_PWM_Start+0x1fc>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d022      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a90:	d01d      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4a26      	ldr	r2, [pc, #152]	; (8005b30 <HAL_TIM_PWM_Start+0x214>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d018      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a24      	ldr	r2, [pc, #144]	; (8005b34 <HAL_TIM_PWM_Start+0x218>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d013      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a23      	ldr	r2, [pc, #140]	; (8005b38 <HAL_TIM_PWM_Start+0x21c>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00e      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a19      	ldr	r2, [pc, #100]	; (8005b1c <HAL_TIM_PWM_Start+0x200>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d009      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a18      	ldr	r2, [pc, #96]	; (8005b20 <HAL_TIM_PWM_Start+0x204>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d004      	beq.n	8005ace <HAL_TIM_PWM_Start+0x1b2>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a18      	ldr	r2, [pc, #96]	; (8005b2c <HAL_TIM_PWM_Start+0x210>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d115      	bne.n	8005afa <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	689a      	ldr	r2, [r3, #8]
 8005ad4:	4b19      	ldr	r3, [pc, #100]	; (8005b3c <HAL_TIM_PWM_Start+0x220>)
 8005ad6:	4013      	ands	r3, r2
 8005ad8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2b06      	cmp	r3, #6
 8005ade:	d015      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x1f0>
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ae6:	d011      	beq.n	8005b0c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005af8:	e008      	b.n	8005b0c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0201 	orr.w	r2, r2, #1
 8005b08:	601a      	str	r2, [r3, #0]
 8005b0a:	e000      	b.n	8005b0e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b0c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3710      	adds	r7, #16
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	40012c00 	.word	0x40012c00
 8005b1c:	40013400 	.word	0x40013400
 8005b20:	40014000 	.word	0x40014000
 8005b24:	40014400 	.word	0x40014400
 8005b28:	40014800 	.word	0x40014800
 8005b2c:	40015000 	.word	0x40015000
 8005b30:	40000400 	.word	0x40000400
 8005b34:	40000800 	.word	0x40000800
 8005b38:	40000c00 	.word	0x40000c00
 8005b3c:	00010007 	.word	0x00010007

08005b40 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b082      	sub	sp, #8
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	6839      	ldr	r1, [r7, #0]
 8005b52:	4618      	mov	r0, r3
 8005b54:	f001 f944 	bl	8006de0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a40      	ldr	r2, [pc, #256]	; (8005c60 <HAL_TIM_PWM_Stop+0x120>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d018      	beq.n	8005b94 <HAL_TIM_PWM_Stop+0x54>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a3f      	ldr	r2, [pc, #252]	; (8005c64 <HAL_TIM_PWM_Stop+0x124>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d013      	beq.n	8005b94 <HAL_TIM_PWM_Stop+0x54>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a3d      	ldr	r2, [pc, #244]	; (8005c68 <HAL_TIM_PWM_Stop+0x128>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00e      	beq.n	8005b94 <HAL_TIM_PWM_Stop+0x54>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3c      	ldr	r2, [pc, #240]	; (8005c6c <HAL_TIM_PWM_Stop+0x12c>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d009      	beq.n	8005b94 <HAL_TIM_PWM_Stop+0x54>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a3a      	ldr	r2, [pc, #232]	; (8005c70 <HAL_TIM_PWM_Stop+0x130>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d004      	beq.n	8005b94 <HAL_TIM_PWM_Stop+0x54>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a39      	ldr	r2, [pc, #228]	; (8005c74 <HAL_TIM_PWM_Stop+0x134>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d101      	bne.n	8005b98 <HAL_TIM_PWM_Stop+0x58>
 8005b94:	2301      	movs	r3, #1
 8005b96:	e000      	b.n	8005b9a <HAL_TIM_PWM_Stop+0x5a>
 8005b98:	2300      	movs	r3, #0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d017      	beq.n	8005bce <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	6a1a      	ldr	r2, [r3, #32]
 8005ba4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005ba8:	4013      	ands	r3, r2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10f      	bne.n	8005bce <HAL_TIM_PWM_Stop+0x8e>
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	6a1a      	ldr	r2, [r3, #32]
 8005bb4:	f244 4344 	movw	r3, #17476	; 0x4444
 8005bb8:	4013      	ands	r3, r2
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d107      	bne.n	8005bce <HAL_TIM_PWM_Stop+0x8e>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005bcc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	6a1a      	ldr	r2, [r3, #32]
 8005bd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d10f      	bne.n	8005bfe <HAL_TIM_PWM_Stop+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	6a1a      	ldr	r2, [r3, #32]
 8005be4:	f244 4344 	movw	r3, #17476	; 0x4444
 8005be8:	4013      	ands	r3, r2
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_PWM_Stop+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	681a      	ldr	r2, [r3, #0]
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f022 0201 	bic.w	r2, r2, #1
 8005bfc:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d104      	bne.n	8005c0e <HAL_TIM_PWM_Stop+0xce>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c0c:	e023      	b.n	8005c56 <HAL_TIM_PWM_Stop+0x116>
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b04      	cmp	r3, #4
 8005c12:	d104      	bne.n	8005c1e <HAL_TIM_PWM_Stop+0xde>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c1c:	e01b      	b.n	8005c56 <HAL_TIM_PWM_Stop+0x116>
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	2b08      	cmp	r3, #8
 8005c22:	d104      	bne.n	8005c2e <HAL_TIM_PWM_Stop+0xee>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c2c:	e013      	b.n	8005c56 <HAL_TIM_PWM_Stop+0x116>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b0c      	cmp	r3, #12
 8005c32:	d104      	bne.n	8005c3e <HAL_TIM_PWM_Stop+0xfe>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c3c:	e00b      	b.n	8005c56 <HAL_TIM_PWM_Stop+0x116>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d104      	bne.n	8005c4e <HAL_TIM_PWM_Stop+0x10e>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c4c:	e003      	b.n	8005c56 <HAL_TIM_PWM_Stop+0x116>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8005c56:	2300      	movs	r3, #0
}
 8005c58:	4618      	mov	r0, r3
 8005c5a:	3708      	adds	r7, #8
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40012c00 	.word	0x40012c00
 8005c64:	40013400 	.word	0x40013400
 8005c68:	40014000 	.word	0x40014000
 8005c6c:	40014400 	.word	0x40014400
 8005c70:	40014800 	.word	0x40014800
 8005c74:	40015000 	.word	0x40015000

08005c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b082      	sub	sp, #8
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	691b      	ldr	r3, [r3, #16]
 8005c86:	f003 0302 	and.w	r3, r3, #2
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d122      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	f003 0302 	and.w	r3, r3, #2
 8005c98:	2b02      	cmp	r3, #2
 8005c9a:	d11b      	bne.n	8005cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f06f 0202 	mvn.w	r2, #2
 8005ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	f003 0303 	and.w	r3, r3, #3
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d003      	beq.n	8005cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 fb90 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005cc0:	e005      	b.n	8005cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fb82 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fb93 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b04      	cmp	r3, #4
 8005ce0:	d122      	bne.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f003 0304 	and.w	r3, r3, #4
 8005cec:	2b04      	cmp	r3, #4
 8005cee:	d11b      	bne.n	8005d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f06f 0204 	mvn.w	r2, #4
 8005cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2202      	movs	r2, #2
 8005cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	699b      	ldr	r3, [r3, #24]
 8005d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d003      	beq.n	8005d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d0e:	6878      	ldr	r0, [r7, #4]
 8005d10:	f000 fb66 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005d14:	e005      	b.n	8005d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb58 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fb69 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f003 0308 	and.w	r3, r3, #8
 8005d32:	2b08      	cmp	r3, #8
 8005d34:	d122      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	68db      	ldr	r3, [r3, #12]
 8005d3c:	f003 0308 	and.w	r3, r3, #8
 8005d40:	2b08      	cmp	r3, #8
 8005d42:	d11b      	bne.n	8005d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f06f 0208 	mvn.w	r2, #8
 8005d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2204      	movs	r2, #4
 8005d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	69db      	ldr	r3, [r3, #28]
 8005d5a:	f003 0303 	and.w	r3, r3, #3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d62:	6878      	ldr	r0, [r7, #4]
 8005d64:	f000 fb3c 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005d68:	e005      	b.n	8005d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d6a:	6878      	ldr	r0, [r7, #4]
 8005d6c:	f000 fb2e 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f000 fb3f 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	f003 0310 	and.w	r3, r3, #16
 8005d86:	2b10      	cmp	r3, #16
 8005d88:	d122      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	f003 0310 	and.w	r3, r3, #16
 8005d94:	2b10      	cmp	r3, #16
 8005d96:	d11b      	bne.n	8005dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f06f 0210 	mvn.w	r2, #16
 8005da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	2208      	movs	r2, #8
 8005da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	69db      	ldr	r3, [r3, #28]
 8005dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d003      	beq.n	8005dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f000 fb12 	bl	80063e0 <HAL_TIM_IC_CaptureCallback>
 8005dbc:	e005      	b.n	8005dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	f000 fb04 	bl	80063cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dc4:	6878      	ldr	r0, [r7, #4]
 8005dc6:	f000 fb15 	bl	80063f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d10e      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68db      	ldr	r3, [r3, #12]
 8005de4:	f003 0301 	and.w	r3, r3, #1
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d107      	bne.n	8005dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f06f 0201 	mvn.w	r2, #1
 8005df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7fb fbb0 	bl	800155c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691b      	ldr	r3, [r3, #16]
 8005e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e06:	2b80      	cmp	r3, #128	; 0x80
 8005e08:	d10e      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e14:	2b80      	cmp	r3, #128	; 0x80
 8005e16:	d107      	bne.n	8005e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f001 fb22 	bl	800746c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	691b      	ldr	r3, [r3, #16]
 8005e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e36:	d10e      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e42:	2b80      	cmp	r3, #128	; 0x80
 8005e44:	d107      	bne.n	8005e56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005e4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f001 fb15 	bl	8007480 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e60:	2b40      	cmp	r3, #64	; 0x40
 8005e62:	d10e      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	68db      	ldr	r3, [r3, #12]
 8005e6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6e:	2b40      	cmp	r3, #64	; 0x40
 8005e70:	d107      	bne.n	8005e82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005e7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f000 fac3 	bl	8006408 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f003 0320 	and.w	r3, r3, #32
 8005e8c:	2b20      	cmp	r3, #32
 8005e8e:	d10e      	bne.n	8005eae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68db      	ldr	r3, [r3, #12]
 8005e96:	f003 0320 	and.w	r3, r3, #32
 8005e9a:	2b20      	cmp	r3, #32
 8005e9c:	d107      	bne.n	8005eae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f06f 0220 	mvn.w	r2, #32
 8005ea6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f001 fad5 	bl	8007458 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ebc:	d10f      	bne.n	8005ede <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ec8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005ecc:	d107      	bne.n	8005ede <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8005ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005ed8:	6878      	ldr	r0, [r7, #4]
 8005eda:	f001 fadb 	bl	8007494 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	691b      	ldr	r3, [r3, #16]
 8005ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005eec:	d10f      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	68db      	ldr	r3, [r3, #12]
 8005ef4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005efc:	d107      	bne.n	8005f0e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f001 facd 	bl	80074a8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f1c:	d10f      	bne.n	8005f3e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f2c:	d107      	bne.n	8005f3e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f001 fabf 	bl	80074bc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	691b      	ldr	r3, [r3, #16]
 8005f44:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f48:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f4c:	d10f      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	68db      	ldr	r3, [r3, #12]
 8005f54:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f58:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005f5c:	d107      	bne.n	8005f6e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005f66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f001 fab1 	bl	80074d0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f6e:	bf00      	nop
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}
	...

08005f78 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b086      	sub	sp, #24
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	60f8      	str	r0, [r7, #12]
 8005f80:	60b9      	str	r1, [r7, #8]
 8005f82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f84:	2300      	movs	r3, #0
 8005f86:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005f92:	2302      	movs	r3, #2
 8005f94:	e0ff      	b.n	8006196 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	2b14      	cmp	r3, #20
 8005fa2:	f200 80f0 	bhi.w	8006186 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005fa6:	a201      	add	r2, pc, #4	; (adr r2, 8005fac <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fac:	08006001 	.word	0x08006001
 8005fb0:	08006187 	.word	0x08006187
 8005fb4:	08006187 	.word	0x08006187
 8005fb8:	08006187 	.word	0x08006187
 8005fbc:	08006041 	.word	0x08006041
 8005fc0:	08006187 	.word	0x08006187
 8005fc4:	08006187 	.word	0x08006187
 8005fc8:	08006187 	.word	0x08006187
 8005fcc:	08006083 	.word	0x08006083
 8005fd0:	08006187 	.word	0x08006187
 8005fd4:	08006187 	.word	0x08006187
 8005fd8:	08006187 	.word	0x08006187
 8005fdc:	080060c3 	.word	0x080060c3
 8005fe0:	08006187 	.word	0x08006187
 8005fe4:	08006187 	.word	0x08006187
 8005fe8:	08006187 	.word	0x08006187
 8005fec:	08006105 	.word	0x08006105
 8005ff0:	08006187 	.word	0x08006187
 8005ff4:	08006187 	.word	0x08006187
 8005ff8:	08006187 	.word	0x08006187
 8005ffc:	08006145 	.word	0x08006145
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	4618      	mov	r0, r3
 8006008:	f000 fab0 	bl	800656c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	699a      	ldr	r2, [r3, #24]
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f042 0208 	orr.w	r2, r2, #8
 800601a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	699a      	ldr	r2, [r3, #24]
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f022 0204 	bic.w	r2, r2, #4
 800602a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6999      	ldr	r1, [r3, #24]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	691a      	ldr	r2, [r3, #16]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	430a      	orrs	r2, r1
 800603c:	619a      	str	r2, [r3, #24]
      break;
 800603e:	e0a5      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68b9      	ldr	r1, [r7, #8]
 8006046:	4618      	mov	r0, r3
 8006048:	f000 fb2a 	bl	80066a0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	699a      	ldr	r2, [r3, #24]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800605a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	699a      	ldr	r2, [r3, #24]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800606a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6999      	ldr	r1, [r3, #24]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	021a      	lsls	r2, r3, #8
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	430a      	orrs	r2, r1
 800607e:	619a      	str	r2, [r3, #24]
      break;
 8006080:	e084      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	4618      	mov	r0, r3
 800608a:	f000 fb9d 	bl	80067c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	69da      	ldr	r2, [r3, #28]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f042 0208 	orr.w	r2, r2, #8
 800609c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	69da      	ldr	r2, [r3, #28]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0204 	bic.w	r2, r2, #4
 80060ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	69d9      	ldr	r1, [r3, #28]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	430a      	orrs	r2, r1
 80060be:	61da      	str	r2, [r3, #28]
      break;
 80060c0:	e064      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68b9      	ldr	r1, [r7, #8]
 80060c8:	4618      	mov	r0, r3
 80060ca:	f000 fc0f 	bl	80068ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	69da      	ldr	r2, [r3, #28]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	69da      	ldr	r2, [r3, #28]
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69d9      	ldr	r1, [r3, #28]
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	691b      	ldr	r3, [r3, #16]
 80060f8:	021a      	lsls	r2, r3, #8
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	430a      	orrs	r2, r1
 8006100:	61da      	str	r2, [r3, #28]
      break;
 8006102:	e043      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	4618      	mov	r0, r3
 800610c:	f000 fc82 	bl	8006a14 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f042 0208 	orr.w	r2, r2, #8
 800611e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f022 0204 	bic.w	r2, r2, #4
 800612e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	691a      	ldr	r2, [r3, #16]
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	430a      	orrs	r2, r1
 8006140:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006142:	e023      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68b9      	ldr	r1, [r7, #8]
 800614a:	4618      	mov	r0, r3
 800614c:	f000 fccc 	bl	8006ae8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800615e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800616e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	691b      	ldr	r3, [r3, #16]
 800617a:	021a      	lsls	r2, r3, #8
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	430a      	orrs	r2, r1
 8006182:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006184:	e002      	b.n	800618c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	75fb      	strb	r3, [r7, #23]
      break;
 800618a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2200      	movs	r2, #0
 8006190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006194:	7dfb      	ldrb	r3, [r7, #23]
}
 8006196:	4618      	mov	r0, r3
 8006198:	3718      	adds	r7, #24
 800619a:	46bd      	mov	sp, r7
 800619c:	bd80      	pop	{r7, pc}
 800619e:	bf00      	nop

080061a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	d101      	bne.n	80061bc <HAL_TIM_ConfigClockSource+0x1c>
 80061b8:	2302      	movs	r3, #2
 80061ba:	e0f6      	b.n	80063aa <HAL_TIM_ConfigClockSource+0x20a>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2202      	movs	r2, #2
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80061da:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	68ba      	ldr	r2, [r7, #8]
 80061ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a6f      	ldr	r2, [pc, #444]	; (80063b4 <HAL_TIM_ConfigClockSource+0x214>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	f000 80c1 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 80061fc:	4a6d      	ldr	r2, [pc, #436]	; (80063b4 <HAL_TIM_ConfigClockSource+0x214>)
 80061fe:	4293      	cmp	r3, r2
 8006200:	f200 80c6 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006204:	4a6c      	ldr	r2, [pc, #432]	; (80063b8 <HAL_TIM_ConfigClockSource+0x218>)
 8006206:	4293      	cmp	r3, r2
 8006208:	f000 80b9 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800620c:	4a6a      	ldr	r2, [pc, #424]	; (80063b8 <HAL_TIM_ConfigClockSource+0x218>)
 800620e:	4293      	cmp	r3, r2
 8006210:	f200 80be 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006214:	4a69      	ldr	r2, [pc, #420]	; (80063bc <HAL_TIM_ConfigClockSource+0x21c>)
 8006216:	4293      	cmp	r3, r2
 8006218:	f000 80b1 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800621c:	4a67      	ldr	r2, [pc, #412]	; (80063bc <HAL_TIM_ConfigClockSource+0x21c>)
 800621e:	4293      	cmp	r3, r2
 8006220:	f200 80b6 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006224:	4a66      	ldr	r2, [pc, #408]	; (80063c0 <HAL_TIM_ConfigClockSource+0x220>)
 8006226:	4293      	cmp	r3, r2
 8006228:	f000 80a9 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800622c:	4a64      	ldr	r2, [pc, #400]	; (80063c0 <HAL_TIM_ConfigClockSource+0x220>)
 800622e:	4293      	cmp	r3, r2
 8006230:	f200 80ae 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006234:	4a63      	ldr	r2, [pc, #396]	; (80063c4 <HAL_TIM_ConfigClockSource+0x224>)
 8006236:	4293      	cmp	r3, r2
 8006238:	f000 80a1 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800623c:	4a61      	ldr	r2, [pc, #388]	; (80063c4 <HAL_TIM_ConfigClockSource+0x224>)
 800623e:	4293      	cmp	r3, r2
 8006240:	f200 80a6 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006244:	4a60      	ldr	r2, [pc, #384]	; (80063c8 <HAL_TIM_ConfigClockSource+0x228>)
 8006246:	4293      	cmp	r3, r2
 8006248:	f000 8099 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800624c:	4a5e      	ldr	r2, [pc, #376]	; (80063c8 <HAL_TIM_ConfigClockSource+0x228>)
 800624e:	4293      	cmp	r3, r2
 8006250:	f200 809e 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006254:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006258:	f000 8091 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800625c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006260:	f200 8096 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006264:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006268:	f000 8089 	beq.w	800637e <HAL_TIM_ConfigClockSource+0x1de>
 800626c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006270:	f200 808e 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006274:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006278:	d03e      	beq.n	80062f8 <HAL_TIM_ConfigClockSource+0x158>
 800627a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800627e:	f200 8087 	bhi.w	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006286:	f000 8086 	beq.w	8006396 <HAL_TIM_ConfigClockSource+0x1f6>
 800628a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800628e:	d87f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006290:	2b70      	cmp	r3, #112	; 0x70
 8006292:	d01a      	beq.n	80062ca <HAL_TIM_ConfigClockSource+0x12a>
 8006294:	2b70      	cmp	r3, #112	; 0x70
 8006296:	d87b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 8006298:	2b60      	cmp	r3, #96	; 0x60
 800629a:	d050      	beq.n	800633e <HAL_TIM_ConfigClockSource+0x19e>
 800629c:	2b60      	cmp	r3, #96	; 0x60
 800629e:	d877      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 80062a0:	2b50      	cmp	r3, #80	; 0x50
 80062a2:	d03c      	beq.n	800631e <HAL_TIM_ConfigClockSource+0x17e>
 80062a4:	2b50      	cmp	r3, #80	; 0x50
 80062a6:	d873      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 80062a8:	2b40      	cmp	r3, #64	; 0x40
 80062aa:	d058      	beq.n	800635e <HAL_TIM_ConfigClockSource+0x1be>
 80062ac:	2b40      	cmp	r3, #64	; 0x40
 80062ae:	d86f      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 80062b0:	2b30      	cmp	r3, #48	; 0x30
 80062b2:	d064      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x1de>
 80062b4:	2b30      	cmp	r3, #48	; 0x30
 80062b6:	d86b      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d060      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x1de>
 80062bc:	2b20      	cmp	r3, #32
 80062be:	d867      	bhi.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d05c      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x1de>
 80062c4:	2b10      	cmp	r3, #16
 80062c6:	d05a      	beq.n	800637e <HAL_TIM_ConfigClockSource+0x1de>
 80062c8:	e062      	b.n	8006390 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6818      	ldr	r0, [r3, #0]
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	6899      	ldr	r1, [r3, #8]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	68db      	ldr	r3, [r3, #12]
 80062da:	f000 fd61 	bl	8006da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80062e6:	68bb      	ldr	r3, [r7, #8]
 80062e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80062ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	68ba      	ldr	r2, [r7, #8]
 80062f4:	609a      	str	r2, [r3, #8]
      break;
 80062f6:	e04f      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6818      	ldr	r0, [r3, #0]
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	6899      	ldr	r1, [r3, #8]
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	683b      	ldr	r3, [r7, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f000 fd4a 	bl	8006da0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	689a      	ldr	r2, [r3, #8]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800631a:	609a      	str	r2, [r3, #8]
      break;
 800631c:	e03c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6818      	ldr	r0, [r3, #0]
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	6859      	ldr	r1, [r3, #4]
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	461a      	mov	r2, r3
 800632c:	f000 fcbc 	bl	8006ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2150      	movs	r1, #80	; 0x50
 8006336:	4618      	mov	r0, r3
 8006338:	f000 fd15 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800633c:	e02c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6818      	ldr	r0, [r3, #0]
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6859      	ldr	r1, [r3, #4]
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	461a      	mov	r2, r3
 800634c:	f000 fcdb 	bl	8006d06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2160      	movs	r1, #96	; 0x60
 8006356:	4618      	mov	r0, r3
 8006358:	f000 fd05 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800635c:	e01c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	6859      	ldr	r1, [r3, #4]
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	461a      	mov	r2, r3
 800636c:	f000 fc9c 	bl	8006ca8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	2140      	movs	r1, #64	; 0x40
 8006376:	4618      	mov	r0, r3
 8006378:	f000 fcf5 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800637c:	e00c      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681a      	ldr	r2, [r3, #0]
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	4610      	mov	r0, r2
 800638a:	f000 fcec 	bl	8006d66 <TIM_ITRx_SetConfig>
      break;
 800638e:	e003      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
      break;
 8006394:	e000      	b.n	8006398 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006396:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3710      	adds	r7, #16
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
 80063b2:	bf00      	nop
 80063b4:	00100070 	.word	0x00100070
 80063b8:	00100060 	.word	0x00100060
 80063bc:	00100050 	.word	0x00100050
 80063c0:	00100040 	.word	0x00100040
 80063c4:	00100030 	.word	0x00100030
 80063c8:	00100020 	.word	0x00100020

080063cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80063d4:	bf00      	nop
 80063d6:	370c      	adds	r7, #12
 80063d8:	46bd      	mov	sp, r7
 80063da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063de:	4770      	bx	lr

080063e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80063e0:	b480      	push	{r7}
 80063e2:	b083      	sub	sp, #12
 80063e4:	af00      	add	r7, sp, #0
 80063e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80063e8:	bf00      	nop
 80063ea:	370c      	adds	r7, #12
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr

080063f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b083      	sub	sp, #12
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80063fc:	bf00      	nop
 80063fe:	370c      	adds	r7, #12
 8006400:	46bd      	mov	sp, r7
 8006402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006406:	4770      	bx	lr

08006408 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006408:	b480      	push	{r7}
 800640a:	b083      	sub	sp, #12
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	4a46      	ldr	r2, [pc, #280]	; (8006548 <TIM_Base_SetConfig+0x12c>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d017      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643a:	d013      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a43      	ldr	r2, [pc, #268]	; (800654c <TIM_Base_SetConfig+0x130>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00f      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a42      	ldr	r2, [pc, #264]	; (8006550 <TIM_Base_SetConfig+0x134>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d00b      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a41      	ldr	r2, [pc, #260]	; (8006554 <TIM_Base_SetConfig+0x138>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d007      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a40      	ldr	r2, [pc, #256]	; (8006558 <TIM_Base_SetConfig+0x13c>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d003      	beq.n	8006464 <TIM_Base_SetConfig+0x48>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a3f      	ldr	r2, [pc, #252]	; (800655c <TIM_Base_SetConfig+0x140>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d108      	bne.n	8006476 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800646a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	685b      	ldr	r3, [r3, #4]
 8006470:	68fa      	ldr	r2, [r7, #12]
 8006472:	4313      	orrs	r3, r2
 8006474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a33      	ldr	r2, [pc, #204]	; (8006548 <TIM_Base_SetConfig+0x12c>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d023      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d01f      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a30      	ldr	r2, [pc, #192]	; (800654c <TIM_Base_SetConfig+0x130>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d01b      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a2f      	ldr	r2, [pc, #188]	; (8006550 <TIM_Base_SetConfig+0x134>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d017      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a2e      	ldr	r2, [pc, #184]	; (8006554 <TIM_Base_SetConfig+0x138>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d013      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2d      	ldr	r2, [pc, #180]	; (8006558 <TIM_Base_SetConfig+0x13c>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d00f      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	4a2d      	ldr	r2, [pc, #180]	; (8006560 <TIM_Base_SetConfig+0x144>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d00b      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a2c      	ldr	r2, [pc, #176]	; (8006564 <TIM_Base_SetConfig+0x148>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d007      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a2b      	ldr	r2, [pc, #172]	; (8006568 <TIM_Base_SetConfig+0x14c>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d003      	beq.n	80064c6 <TIM_Base_SetConfig+0xaa>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <TIM_Base_SetConfig+0x140>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d108      	bne.n	80064d8 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	68fa      	ldr	r2, [r7, #12]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	695b      	ldr	r3, [r3, #20]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	689a      	ldr	r2, [r3, #8]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a12      	ldr	r2, [pc, #72]	; (8006548 <TIM_Base_SetConfig+0x12c>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d013      	beq.n	800652c <TIM_Base_SetConfig+0x110>
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	4a14      	ldr	r2, [pc, #80]	; (8006558 <TIM_Base_SetConfig+0x13c>)
 8006508:	4293      	cmp	r3, r2
 800650a:	d00f      	beq.n	800652c <TIM_Base_SetConfig+0x110>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <TIM_Base_SetConfig+0x144>)
 8006510:	4293      	cmp	r3, r2
 8006512:	d00b      	beq.n	800652c <TIM_Base_SetConfig+0x110>
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a13      	ldr	r2, [pc, #76]	; (8006564 <TIM_Base_SetConfig+0x148>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d007      	beq.n	800652c <TIM_Base_SetConfig+0x110>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a12      	ldr	r2, [pc, #72]	; (8006568 <TIM_Base_SetConfig+0x14c>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d003      	beq.n	800652c <TIM_Base_SetConfig+0x110>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	4a0d      	ldr	r2, [pc, #52]	; (800655c <TIM_Base_SetConfig+0x140>)
 8006528:	4293      	cmp	r3, r2
 800652a:	d103      	bne.n	8006534 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800652c:	683b      	ldr	r3, [r7, #0]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	615a      	str	r2, [r3, #20]
}
 800653a:	bf00      	nop
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	40012c00 	.word	0x40012c00
 800654c:	40000400 	.word	0x40000400
 8006550:	40000800 	.word	0x40000800
 8006554:	40000c00 	.word	0x40000c00
 8006558:	40013400 	.word	0x40013400
 800655c:	40015000 	.word	0x40015000
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800

0800656c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800656c:	b480      	push	{r7}
 800656e:	b087      	sub	sp, #28
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
 8006574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	6a1b      	ldr	r3, [r3, #32]
 800657a:	f023 0201 	bic.w	r2, r3, #1
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6a1b      	ldr	r3, [r3, #32]
 8006586:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800659a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800659e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f023 0303 	bic.w	r3, r3, #3
 80065a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68fa      	ldr	r2, [r7, #12]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f023 0302 	bic.w	r3, r3, #2
 80065b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4a30      	ldr	r2, [pc, #192]	; (8006688 <TIM_OC1_SetConfig+0x11c>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d013      	beq.n	80065f4 <TIM_OC1_SetConfig+0x88>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	4a2f      	ldr	r2, [pc, #188]	; (800668c <TIM_OC1_SetConfig+0x120>)
 80065d0:	4293      	cmp	r3, r2
 80065d2:	d00f      	beq.n	80065f4 <TIM_OC1_SetConfig+0x88>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	4a2e      	ldr	r2, [pc, #184]	; (8006690 <TIM_OC1_SetConfig+0x124>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00b      	beq.n	80065f4 <TIM_OC1_SetConfig+0x88>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	4a2d      	ldr	r2, [pc, #180]	; (8006694 <TIM_OC1_SetConfig+0x128>)
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d007      	beq.n	80065f4 <TIM_OC1_SetConfig+0x88>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4a2c      	ldr	r2, [pc, #176]	; (8006698 <TIM_OC1_SetConfig+0x12c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d003      	beq.n	80065f4 <TIM_OC1_SetConfig+0x88>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a2b      	ldr	r2, [pc, #172]	; (800669c <TIM_OC1_SetConfig+0x130>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d10c      	bne.n	800660e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f023 0308 	bic.w	r3, r3, #8
 80065fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	68db      	ldr	r3, [r3, #12]
 8006600:	697a      	ldr	r2, [r7, #20]
 8006602:	4313      	orrs	r3, r2
 8006604:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f023 0304 	bic.w	r3, r3, #4
 800660c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	4a1d      	ldr	r2, [pc, #116]	; (8006688 <TIM_OC1_SetConfig+0x11c>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d013      	beq.n	800663e <TIM_OC1_SetConfig+0xd2>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	4a1c      	ldr	r2, [pc, #112]	; (800668c <TIM_OC1_SetConfig+0x120>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d00f      	beq.n	800663e <TIM_OC1_SetConfig+0xd2>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	4a1b      	ldr	r2, [pc, #108]	; (8006690 <TIM_OC1_SetConfig+0x124>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d00b      	beq.n	800663e <TIM_OC1_SetConfig+0xd2>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	4a1a      	ldr	r2, [pc, #104]	; (8006694 <TIM_OC1_SetConfig+0x128>)
 800662a:	4293      	cmp	r3, r2
 800662c:	d007      	beq.n	800663e <TIM_OC1_SetConfig+0xd2>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	4a19      	ldr	r2, [pc, #100]	; (8006698 <TIM_OC1_SetConfig+0x12c>)
 8006632:	4293      	cmp	r3, r2
 8006634:	d003      	beq.n	800663e <TIM_OC1_SetConfig+0xd2>
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	4a18      	ldr	r2, [pc, #96]	; (800669c <TIM_OC1_SetConfig+0x130>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d111      	bne.n	8006662 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800663e:	693b      	ldr	r3, [r7, #16]
 8006640:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006644:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800664c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	4313      	orrs	r3, r2
 8006656:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	693a      	ldr	r2, [r7, #16]
 800665e:	4313      	orrs	r3, r2
 8006660:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	693a      	ldr	r2, [r7, #16]
 8006666:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	68fa      	ldr	r2, [r7, #12]
 800666c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	685a      	ldr	r2, [r3, #4]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	621a      	str	r2, [r3, #32]
}
 800667c:	bf00      	nop
 800667e:	371c      	adds	r7, #28
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr
 8006688:	40012c00 	.word	0x40012c00
 800668c:	40013400 	.word	0x40013400
 8006690:	40014000 	.word	0x40014000
 8006694:	40014400 	.word	0x40014400
 8006698:	40014800 	.word	0x40014800
 800669c:	40015000 	.word	0x40015000

080066a0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066a0:	b480      	push	{r7}
 80066a2:	b087      	sub	sp, #28
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
 80066a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	6a1b      	ldr	r3, [r3, #32]
 80066ae:	f023 0210 	bic.w	r2, r3, #16
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a1b      	ldr	r3, [r3, #32]
 80066ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	699b      	ldr	r3, [r3, #24]
 80066c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80066d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	021b      	lsls	r3, r3, #8
 80066e2:	68fa      	ldr	r2, [r7, #12]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80066e8:	697b      	ldr	r3, [r7, #20]
 80066ea:	f023 0320 	bic.w	r3, r3, #32
 80066ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	689b      	ldr	r3, [r3, #8]
 80066f4:	011b      	lsls	r3, r3, #4
 80066f6:	697a      	ldr	r2, [r7, #20]
 80066f8:	4313      	orrs	r3, r2
 80066fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	4a2c      	ldr	r2, [pc, #176]	; (80067b0 <TIM_OC2_SetConfig+0x110>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d007      	beq.n	8006714 <TIM_OC2_SetConfig+0x74>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	4a2b      	ldr	r2, [pc, #172]	; (80067b4 <TIM_OC2_SetConfig+0x114>)
 8006708:	4293      	cmp	r3, r2
 800670a:	d003      	beq.n	8006714 <TIM_OC2_SetConfig+0x74>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	4a2a      	ldr	r2, [pc, #168]	; (80067b8 <TIM_OC2_SetConfig+0x118>)
 8006710:	4293      	cmp	r3, r2
 8006712:	d10d      	bne.n	8006730 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800671a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	68db      	ldr	r3, [r3, #12]
 8006720:	011b      	lsls	r3, r3, #4
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	4313      	orrs	r3, r2
 8006726:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800672e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	4a1f      	ldr	r2, [pc, #124]	; (80067b0 <TIM_OC2_SetConfig+0x110>)
 8006734:	4293      	cmp	r3, r2
 8006736:	d013      	beq.n	8006760 <TIM_OC2_SetConfig+0xc0>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	4a1e      	ldr	r2, [pc, #120]	; (80067b4 <TIM_OC2_SetConfig+0x114>)
 800673c:	4293      	cmp	r3, r2
 800673e:	d00f      	beq.n	8006760 <TIM_OC2_SetConfig+0xc0>
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <TIM_OC2_SetConfig+0x11c>)
 8006744:	4293      	cmp	r3, r2
 8006746:	d00b      	beq.n	8006760 <TIM_OC2_SetConfig+0xc0>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	4a1d      	ldr	r2, [pc, #116]	; (80067c0 <TIM_OC2_SetConfig+0x120>)
 800674c:	4293      	cmp	r3, r2
 800674e:	d007      	beq.n	8006760 <TIM_OC2_SetConfig+0xc0>
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4a1c      	ldr	r2, [pc, #112]	; (80067c4 <TIM_OC2_SetConfig+0x124>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d003      	beq.n	8006760 <TIM_OC2_SetConfig+0xc0>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4a17      	ldr	r2, [pc, #92]	; (80067b8 <TIM_OC2_SetConfig+0x118>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d113      	bne.n	8006788 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006760:	693b      	ldr	r3, [r7, #16]
 8006762:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006766:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800676e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	695b      	ldr	r3, [r3, #20]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	693a      	ldr	r2, [r7, #16]
 8006778:	4313      	orrs	r3, r2
 800677a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	693a      	ldr	r2, [r7, #16]
 8006784:	4313      	orrs	r3, r2
 8006786:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	693a      	ldr	r2, [r7, #16]
 800678c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	685a      	ldr	r2, [r3, #4]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	697a      	ldr	r2, [r7, #20]
 80067a0:	621a      	str	r2, [r3, #32]
}
 80067a2:	bf00      	nop
 80067a4:	371c      	adds	r7, #28
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
 80067ae:	bf00      	nop
 80067b0:	40012c00 	.word	0x40012c00
 80067b4:	40013400 	.word	0x40013400
 80067b8:	40015000 	.word	0x40015000
 80067bc:	40014000 	.word	0x40014000
 80067c0:	40014400 	.word	0x40014400
 80067c4:	40014800 	.word	0x40014800

080067c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b087      	sub	sp, #28
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
 80067d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
 80067d6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	69db      	ldr	r3, [r3, #28]
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0303 	bic.w	r3, r3, #3
 8006802:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	68fa      	ldr	r2, [r7, #12]
 800680a:	4313      	orrs	r3, r2
 800680c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006814:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	689b      	ldr	r3, [r3, #8]
 800681a:	021b      	lsls	r3, r3, #8
 800681c:	697a      	ldr	r2, [r7, #20]
 800681e:	4313      	orrs	r3, r2
 8006820:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a2b      	ldr	r2, [pc, #172]	; (80068d4 <TIM_OC3_SetConfig+0x10c>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d007      	beq.n	800683a <TIM_OC3_SetConfig+0x72>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a2a      	ldr	r2, [pc, #168]	; (80068d8 <TIM_OC3_SetConfig+0x110>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC3_SetConfig+0x72>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a29      	ldr	r2, [pc, #164]	; (80068dc <TIM_OC3_SetConfig+0x114>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10d      	bne.n	8006856 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a1e      	ldr	r2, [pc, #120]	; (80068d4 <TIM_OC3_SetConfig+0x10c>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d013      	beq.n	8006886 <TIM_OC3_SetConfig+0xbe>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a1d      	ldr	r2, [pc, #116]	; (80068d8 <TIM_OC3_SetConfig+0x110>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d00f      	beq.n	8006886 <TIM_OC3_SetConfig+0xbe>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a1d      	ldr	r2, [pc, #116]	; (80068e0 <TIM_OC3_SetConfig+0x118>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d00b      	beq.n	8006886 <TIM_OC3_SetConfig+0xbe>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a1c      	ldr	r2, [pc, #112]	; (80068e4 <TIM_OC3_SetConfig+0x11c>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d007      	beq.n	8006886 <TIM_OC3_SetConfig+0xbe>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a1b      	ldr	r2, [pc, #108]	; (80068e8 <TIM_OC3_SetConfig+0x120>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d003      	beq.n	8006886 <TIM_OC3_SetConfig+0xbe>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a16      	ldr	r2, [pc, #88]	; (80068dc <TIM_OC3_SetConfig+0x114>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d113      	bne.n	80068ae <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800688c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006894:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	695b      	ldr	r3, [r3, #20]
 800689a:	011b      	lsls	r3, r3, #4
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	4313      	orrs	r3, r2
 80068a0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	699b      	ldr	r3, [r3, #24]
 80068a6:	011b      	lsls	r3, r3, #4
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	68fa      	ldr	r2, [r7, #12]
 80068b8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	685a      	ldr	r2, [r3, #4]
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	697a      	ldr	r2, [r7, #20]
 80068c6:	621a      	str	r2, [r3, #32]
}
 80068c8:	bf00      	nop
 80068ca:	371c      	adds	r7, #28
 80068cc:	46bd      	mov	sp, r7
 80068ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d2:	4770      	bx	lr
 80068d4:	40012c00 	.word	0x40012c00
 80068d8:	40013400 	.word	0x40013400
 80068dc:	40015000 	.word	0x40015000
 80068e0:	40014000 	.word	0x40014000
 80068e4:	40014400 	.word	0x40014400
 80068e8:	40014800 	.word	0x40014800

080068ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
 80068f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	6a1b      	ldr	r3, [r3, #32]
 80068fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	69db      	ldr	r3, [r3, #28]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800691a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800691e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	68fa      	ldr	r2, [r7, #12]
 8006930:	4313      	orrs	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800693a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	689b      	ldr	r3, [r3, #8]
 8006940:	031b      	lsls	r3, r3, #12
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	4313      	orrs	r3, r2
 8006946:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	4a2c      	ldr	r2, [pc, #176]	; (80069fc <TIM_OC4_SetConfig+0x110>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d007      	beq.n	8006960 <TIM_OC4_SetConfig+0x74>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4a2b      	ldr	r2, [pc, #172]	; (8006a00 <TIM_OC4_SetConfig+0x114>)
 8006954:	4293      	cmp	r3, r2
 8006956:	d003      	beq.n	8006960 <TIM_OC4_SetConfig+0x74>
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	4a2a      	ldr	r2, [pc, #168]	; (8006a04 <TIM_OC4_SetConfig+0x118>)
 800695c:	4293      	cmp	r3, r2
 800695e:	d10d      	bne.n	800697c <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006966:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	031b      	lsls	r3, r3, #12
 800696e:	697a      	ldr	r2, [r7, #20]
 8006970:	4313      	orrs	r3, r2
 8006972:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006974:	697b      	ldr	r3, [r7, #20]
 8006976:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800697a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a1f      	ldr	r2, [pc, #124]	; (80069fc <TIM_OC4_SetConfig+0x110>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d013      	beq.n	80069ac <TIM_OC4_SetConfig+0xc0>
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	4a1e      	ldr	r2, [pc, #120]	; (8006a00 <TIM_OC4_SetConfig+0x114>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d00f      	beq.n	80069ac <TIM_OC4_SetConfig+0xc0>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	4a1e      	ldr	r2, [pc, #120]	; (8006a08 <TIM_OC4_SetConfig+0x11c>)
 8006990:	4293      	cmp	r3, r2
 8006992:	d00b      	beq.n	80069ac <TIM_OC4_SetConfig+0xc0>
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	4a1d      	ldr	r2, [pc, #116]	; (8006a0c <TIM_OC4_SetConfig+0x120>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d007      	beq.n	80069ac <TIM_OC4_SetConfig+0xc0>
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	4a1c      	ldr	r2, [pc, #112]	; (8006a10 <TIM_OC4_SetConfig+0x124>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d003      	beq.n	80069ac <TIM_OC4_SetConfig+0xc0>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	4a17      	ldr	r2, [pc, #92]	; (8006a04 <TIM_OC4_SetConfig+0x118>)
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d113      	bne.n	80069d4 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80069b2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80069ba:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	695b      	ldr	r3, [r3, #20]
 80069c0:	019b      	lsls	r3, r3, #6
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	019b      	lsls	r3, r3, #6
 80069ce:	693a      	ldr	r2, [r7, #16]
 80069d0:	4313      	orrs	r3, r2
 80069d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	693a      	ldr	r2, [r7, #16]
 80069d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	68fa      	ldr	r2, [r7, #12]
 80069de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685a      	ldr	r2, [r3, #4]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	697a      	ldr	r2, [r7, #20]
 80069ec:	621a      	str	r2, [r3, #32]
}
 80069ee:	bf00      	nop
 80069f0:	371c      	adds	r7, #28
 80069f2:	46bd      	mov	sp, r7
 80069f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f8:	4770      	bx	lr
 80069fa:	bf00      	nop
 80069fc:	40012c00 	.word	0x40012c00
 8006a00:	40013400 	.word	0x40013400
 8006a04:	40015000 	.word	0x40015000
 8006a08:	40014000 	.word	0x40014000
 8006a0c:	40014400 	.word	0x40014400
 8006a10:	40014800 	.word	0x40014800

08006a14 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68fa      	ldr	r2, [r7, #12]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006a58:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	041b      	lsls	r3, r3, #16
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	4a19      	ldr	r2, [pc, #100]	; (8006ad0 <TIM_OC5_SetConfig+0xbc>)
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d013      	beq.n	8006a96 <TIM_OC5_SetConfig+0x82>
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	4a18      	ldr	r2, [pc, #96]	; (8006ad4 <TIM_OC5_SetConfig+0xc0>)
 8006a72:	4293      	cmp	r3, r2
 8006a74:	d00f      	beq.n	8006a96 <TIM_OC5_SetConfig+0x82>
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	4a17      	ldr	r2, [pc, #92]	; (8006ad8 <TIM_OC5_SetConfig+0xc4>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d00b      	beq.n	8006a96 <TIM_OC5_SetConfig+0x82>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	4a16      	ldr	r2, [pc, #88]	; (8006adc <TIM_OC5_SetConfig+0xc8>)
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d007      	beq.n	8006a96 <TIM_OC5_SetConfig+0x82>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC5_SetConfig+0xcc>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC5_SetConfig+0x82>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <TIM_OC5_SetConfig+0xd0>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d109      	bne.n	8006aaa <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006a9c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	695b      	ldr	r3, [r3, #20]
 8006aa2:	021b      	lsls	r3, r3, #8
 8006aa4:	697a      	ldr	r2, [r7, #20]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	697a      	ldr	r2, [r7, #20]
 8006aae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	68fa      	ldr	r2, [r7, #12]
 8006ab4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685a      	ldr	r2, [r3, #4]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	621a      	str	r2, [r3, #32]
}
 8006ac4:	bf00      	nop
 8006ac6:	371c      	adds	r7, #28
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr
 8006ad0:	40012c00 	.word	0x40012c00
 8006ad4:	40013400 	.word	0x40013400
 8006ad8:	40014000 	.word	0x40014000
 8006adc:	40014400 	.word	0x40014400
 8006ae0:	40014800 	.word	0x40014800
 8006ae4:	40015000 	.word	0x40015000

08006ae8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	021b      	lsls	r3, r3, #8
 8006b22:	68fa      	ldr	r2, [r7, #12]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006b2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	051b      	lsls	r3, r3, #20
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	4313      	orrs	r3, r2
 8006b3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	4a1a      	ldr	r2, [pc, #104]	; (8006ba8 <TIM_OC6_SetConfig+0xc0>)
 8006b40:	4293      	cmp	r3, r2
 8006b42:	d013      	beq.n	8006b6c <TIM_OC6_SetConfig+0x84>
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a19      	ldr	r2, [pc, #100]	; (8006bac <TIM_OC6_SetConfig+0xc4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00f      	beq.n	8006b6c <TIM_OC6_SetConfig+0x84>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a18      	ldr	r2, [pc, #96]	; (8006bb0 <TIM_OC6_SetConfig+0xc8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d00b      	beq.n	8006b6c <TIM_OC6_SetConfig+0x84>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a17      	ldr	r2, [pc, #92]	; (8006bb4 <TIM_OC6_SetConfig+0xcc>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d007      	beq.n	8006b6c <TIM_OC6_SetConfig+0x84>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	4a16      	ldr	r2, [pc, #88]	; (8006bb8 <TIM_OC6_SetConfig+0xd0>)
 8006b60:	4293      	cmp	r3, r2
 8006b62:	d003      	beq.n	8006b6c <TIM_OC6_SetConfig+0x84>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	4a15      	ldr	r2, [pc, #84]	; (8006bbc <TIM_OC6_SetConfig+0xd4>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d109      	bne.n	8006b80 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006b72:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	029b      	lsls	r3, r3, #10
 8006b7a:	697a      	ldr	r2, [r7, #20]
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	697a      	ldr	r2, [r7, #20]
 8006b84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685a      	ldr	r2, [r3, #4]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	621a      	str	r2, [r3, #32]
}
 8006b9a:	bf00      	nop
 8006b9c:	371c      	adds	r7, #28
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba4:	4770      	bx	lr
 8006ba6:	bf00      	nop
 8006ba8:	40012c00 	.word	0x40012c00
 8006bac:	40013400 	.word	0x40013400
 8006bb0:	40014000 	.word	0x40014000
 8006bb4:	40014400 	.word	0x40014400
 8006bb8:	40014800 	.word	0x40014800
 8006bbc:	40015000 	.word	0x40015000

08006bc0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
 8006bcc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	f023 0201 	bic.w	r2, r3, #1
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	699b      	ldr	r3, [r3, #24]
 8006bde:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6a1b      	ldr	r3, [r3, #32]
 8006be4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4a28      	ldr	r2, [pc, #160]	; (8006c8c <TIM_TI1_SetConfig+0xcc>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d01b      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bf4:	d017      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4a25      	ldr	r2, [pc, #148]	; (8006c90 <TIM_TI1_SetConfig+0xd0>)
 8006bfa:	4293      	cmp	r3, r2
 8006bfc:	d013      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	4a24      	ldr	r2, [pc, #144]	; (8006c94 <TIM_TI1_SetConfig+0xd4>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d00f      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	4a23      	ldr	r2, [pc, #140]	; (8006c98 <TIM_TI1_SetConfig+0xd8>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d00b      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	4a22      	ldr	r2, [pc, #136]	; (8006c9c <TIM_TI1_SetConfig+0xdc>)
 8006c12:	4293      	cmp	r3, r2
 8006c14:	d007      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	4a21      	ldr	r2, [pc, #132]	; (8006ca0 <TIM_TI1_SetConfig+0xe0>)
 8006c1a:	4293      	cmp	r3, r2
 8006c1c:	d003      	beq.n	8006c26 <TIM_TI1_SetConfig+0x66>
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4a20      	ldr	r2, [pc, #128]	; (8006ca4 <TIM_TI1_SetConfig+0xe4>)
 8006c22:	4293      	cmp	r3, r2
 8006c24:	d101      	bne.n	8006c2a <TIM_TI1_SetConfig+0x6a>
 8006c26:	2301      	movs	r3, #1
 8006c28:	e000      	b.n	8006c2c <TIM_TI1_SetConfig+0x6c>
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d008      	beq.n	8006c42 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006c30:	697b      	ldr	r3, [r7, #20]
 8006c32:	f023 0303 	bic.w	r3, r3, #3
 8006c36:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006c38:	697a      	ldr	r2, [r7, #20]
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e003      	b.n	8006c4a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006c42:	697b      	ldr	r3, [r7, #20]
 8006c44:	f043 0301 	orr.w	r3, r3, #1
 8006c48:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	011b      	lsls	r3, r3, #4
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	697a      	ldr	r2, [r7, #20]
 8006c5a:	4313      	orrs	r3, r2
 8006c5c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c5e:	693b      	ldr	r3, [r7, #16]
 8006c60:	f023 030a 	bic.w	r3, r3, #10
 8006c64:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	f003 030a 	and.w	r3, r3, #10
 8006c6c:	693a      	ldr	r2, [r7, #16]
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	697a      	ldr	r2, [r7, #20]
 8006c76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	621a      	str	r2, [r3, #32]
}
 8006c7e:	bf00      	nop
 8006c80:	371c      	adds	r7, #28
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	40012c00 	.word	0x40012c00
 8006c90:	40000400 	.word	0x40000400
 8006c94:	40000800 	.word	0x40000800
 8006c98:	40000c00 	.word	0x40000c00
 8006c9c:	40013400 	.word	0x40013400
 8006ca0:	40014000 	.word	0x40014000
 8006ca4:	40015000 	.word	0x40015000

08006ca8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ca8:	b480      	push	{r7}
 8006caa:	b087      	sub	sp, #28
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	6a1b      	ldr	r3, [r3, #32]
 8006cb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	f023 0201 	bic.w	r2, r3, #1
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	011b      	lsls	r3, r3, #4
 8006cd8:	693a      	ldr	r2, [r7, #16]
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	f023 030a 	bic.w	r3, r3, #10
 8006ce4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ce6:	697a      	ldr	r2, [r7, #20]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	693a      	ldr	r2, [r7, #16]
 8006cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	697a      	ldr	r2, [r7, #20]
 8006cf8:	621a      	str	r2, [r3, #32]
}
 8006cfa:	bf00      	nop
 8006cfc:	371c      	adds	r7, #28
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d04:	4770      	bx	lr

08006d06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d06:	b480      	push	{r7}
 8006d08:	b087      	sub	sp, #28
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	6a1b      	ldr	r3, [r3, #32]
 8006d16:	f023 0210 	bic.w	r2, r3, #16
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	699b      	ldr	r3, [r3, #24]
 8006d22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	6a1b      	ldr	r3, [r3, #32]
 8006d28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	031b      	lsls	r3, r3, #12
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	011b      	lsls	r3, r3, #4
 8006d48:	693a      	ldr	r2, [r7, #16]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	697a      	ldr	r2, [r7, #20]
 8006d52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	693a      	ldr	r2, [r7, #16]
 8006d58:	621a      	str	r2, [r3, #32]
}
 8006d5a:	bf00      	nop
 8006d5c:	371c      	adds	r7, #28
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d66:	b480      	push	{r7}
 8006d68:	b085      	sub	sp, #20
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d7c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d82:	683a      	ldr	r2, [r7, #0]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	f043 0307 	orr.w	r3, r3, #7
 8006d8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	68fa      	ldr	r2, [r7, #12]
 8006d92:	609a      	str	r2, [r3, #8]
}
 8006d94:	bf00      	nop
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006da0:	b480      	push	{r7}
 8006da2:	b087      	sub	sp, #28
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	607a      	str	r2, [r7, #4]
 8006dac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006db4:	697b      	ldr	r3, [r7, #20]
 8006db6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006dba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	021a      	lsls	r2, r3, #8
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	431a      	orrs	r2, r3
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	697a      	ldr	r2, [r7, #20]
 8006dd2:	609a      	str	r2, [r3, #8]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr

08006de0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006de0:	b480      	push	{r7}
 8006de2:	b087      	sub	sp, #28
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	60f8      	str	r0, [r7, #12]
 8006de8:	60b9      	str	r1, [r7, #8]
 8006dea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	f003 031f 	and.w	r3, r3, #31
 8006df2:	2201      	movs	r2, #1
 8006df4:	fa02 f303 	lsl.w	r3, r2, r3
 8006df8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	6a1a      	ldr	r2, [r3, #32]
 8006dfe:	697b      	ldr	r3, [r7, #20]
 8006e00:	43db      	mvns	r3, r3
 8006e02:	401a      	ands	r2, r3
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a1a      	ldr	r2, [r3, #32]
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	f003 031f 	and.w	r3, r3, #31
 8006e12:	6879      	ldr	r1, [r7, #4]
 8006e14:	fa01 f303 	lsl.w	r3, r1, r3
 8006e18:	431a      	orrs	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 8006e2a:	b580      	push	{r7, lr}
 8006e2c:	b08a      	sub	sp, #40	; 0x28
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d101      	bne.n	8006e3e <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e0a0      	b.n	8006f80 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d106      	bne.n	8006e58 <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7fb f88e 	bl	8001f74 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	3304      	adds	r3, #4
 8006e68:	4619      	mov	r1, r3
 8006e6a:	4610      	mov	r0, r2
 8006e6c:	f7ff fad6 	bl	800641c <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6818      	ldr	r0, [r3, #0]
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	6819      	ldr	r1, [r3, #0]
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	689b      	ldr	r3, [r3, #8]
 8006e7c:	2203      	movs	r2, #3
 8006e7e:	f7ff fe9f 	bl	8006bc0 <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	699a      	ldr	r2, [r3, #24]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f022 020c 	bic.w	r2, r2, #12
 8006e90:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	6999      	ldr	r1, [r3, #24]
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685a      	ldr	r2, [r3, #4]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	430a      	orrs	r2, r1
 8006ea2:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	685a      	ldr	r2, [r3, #4]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006eb2:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	689b      	ldr	r3, [r3, #8]
 8006eba:	687a      	ldr	r2, [r7, #4]
 8006ebc:	6812      	ldr	r2, [r2, #0]
 8006ebe:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ec6:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ed6:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	687a      	ldr	r2, [r7, #4]
 8006ee0:	6812      	ldr	r2, [r2, #0]
 8006ee2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ee6:	f023 0307 	bic.w	r3, r3, #7
 8006eea:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	689a      	ldr	r2, [r3, #8]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f042 0204 	orr.w	r2, r2, #4
 8006efa:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8006efc:	2300      	movs	r3, #0
 8006efe:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8006f00:	2300      	movs	r3, #0
 8006f02:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8006f04:	2370      	movs	r3, #112	; 0x70
 8006f06:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006f10:	2300      	movs	r3, #0
 8006f12:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	68db      	ldr	r3, [r3, #12]
 8006f18:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f107 020c 	add.w	r2, r7, #12
 8006f22:	4611      	mov	r1, r2
 8006f24:	4618      	mov	r0, r3
 8006f26:	f7ff fbbb 	bl	80066a0 <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	685b      	ldr	r3, [r3, #4]
 8006f30:	687a      	ldr	r2, [r7, #4]
 8006f32:	6812      	ldr	r2, [r2, #0]
 8006f34:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f3c:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8006f4c:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2201      	movs	r2, #1
 8006f52:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	2201      	movs	r2, #1
 8006f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2201      	movs	r2, #1
 8006f62:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2201      	movs	r2, #1
 8006f72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2201      	movs	r2, #1
 8006f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006f7e:	2300      	movs	r3, #0
}
 8006f80:	4618      	mov	r0, r3
 8006f82:	3728      	adds	r7, #40	; 0x28
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d109      	bne.n	8006fac <HAL_TIMEx_PWMN_Start+0x24>
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	bf14      	ite	ne
 8006fa4:	2301      	movne	r3, #1
 8006fa6:	2300      	moveq	r3, #0
 8006fa8:	b2db      	uxtb	r3, r3
 8006faa:	e022      	b.n	8006ff2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	2b04      	cmp	r3, #4
 8006fb0:	d109      	bne.n	8006fc6 <HAL_TIMEx_PWMN_Start+0x3e>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006fb8:	b2db      	uxtb	r3, r3
 8006fba:	2b01      	cmp	r3, #1
 8006fbc:	bf14      	ite	ne
 8006fbe:	2301      	movne	r3, #1
 8006fc0:	2300      	moveq	r3, #0
 8006fc2:	b2db      	uxtb	r3, r3
 8006fc4:	e015      	b.n	8006ff2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	2b08      	cmp	r3, #8
 8006fca:	d109      	bne.n	8006fe0 <HAL_TIMEx_PWMN_Start+0x58>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8006fd2:	b2db      	uxtb	r3, r3
 8006fd4:	2b01      	cmp	r3, #1
 8006fd6:	bf14      	ite	ne
 8006fd8:	2301      	movne	r3, #1
 8006fda:	2300      	moveq	r3, #0
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	e008      	b.n	8006ff2 <HAL_TIMEx_PWMN_Start+0x6a>
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b01      	cmp	r3, #1
 8006fea:	bf14      	ite	ne
 8006fec:	2301      	movne	r3, #1
 8006fee:	2300      	moveq	r3, #0
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d001      	beq.n	8006ffa <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e073      	b.n	80070e2 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d104      	bne.n	800700a <HAL_TIMEx_PWMN_Start+0x82>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2202      	movs	r2, #2
 8007004:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007008:	e013      	b.n	8007032 <HAL_TIMEx_PWMN_Start+0xaa>
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	2b04      	cmp	r3, #4
 800700e:	d104      	bne.n	800701a <HAL_TIMEx_PWMN_Start+0x92>
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2202      	movs	r2, #2
 8007014:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007018:	e00b      	b.n	8007032 <HAL_TIMEx_PWMN_Start+0xaa>
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	2b08      	cmp	r3, #8
 800701e:	d104      	bne.n	800702a <HAL_TIMEx_PWMN_Start+0xa2>
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2202      	movs	r2, #2
 8007024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007028:	e003      	b.n	8007032 <HAL_TIMEx_PWMN_Start+0xaa>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2202      	movs	r2, #2
 800702e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	2204      	movs	r2, #4
 8007038:	6839      	ldr	r1, [r7, #0]
 800703a:	4618      	mov	r0, r3
 800703c:	f000 fa52 	bl	80074e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800704e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a25      	ldr	r2, [pc, #148]	; (80070ec <HAL_TIMEx_PWMN_Start+0x164>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d022      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007062:	d01d      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a21      	ldr	r2, [pc, #132]	; (80070f0 <HAL_TIMEx_PWMN_Start+0x168>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d018      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a20      	ldr	r2, [pc, #128]	; (80070f4 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d013      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1e      	ldr	r2, [pc, #120]	; (80070f8 <HAL_TIMEx_PWMN_Start+0x170>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00e      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a1d      	ldr	r2, [pc, #116]	; (80070fc <HAL_TIMEx_PWMN_Start+0x174>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a1b      	ldr	r2, [pc, #108]	; (8007100 <HAL_TIMEx_PWMN_Start+0x178>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_TIMEx_PWMN_Start+0x118>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <HAL_TIMEx_PWMN_Start+0x17c>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d115      	bne.n	80070cc <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689a      	ldr	r2, [r3, #8]
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <HAL_TIMEx_PWMN_Start+0x180>)
 80070a8:	4013      	ands	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d015      	beq.n	80070de <HAL_TIMEx_PWMN_Start+0x156>
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070b8:	d011      	beq.n	80070de <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f042 0201 	orr.w	r2, r2, #1
 80070c8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ca:	e008      	b.n	80070de <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	681a      	ldr	r2, [r3, #0]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	f042 0201 	orr.w	r2, r2, #1
 80070da:	601a      	str	r2, [r3, #0]
 80070dc:	e000      	b.n	80070e0 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070de:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	40012c00 	.word	0x40012c00
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40013400 	.word	0x40013400
 8007100:	40014000 	.word	0x40014000
 8007104:	40015000 	.word	0x40015000
 8007108:	00010007 	.word	0x00010007

0800710c <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	2200      	movs	r2, #0
 800711c:	6839      	ldr	r1, [r7, #0]
 800711e:	4618      	mov	r0, r3
 8007120:	f000 f9e0 	bl	80074e4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	6a1a      	ldr	r2, [r3, #32]
 800712a:	f241 1311 	movw	r3, #4369	; 0x1111
 800712e:	4013      	ands	r3, r2
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10f      	bne.n	8007154 <HAL_TIMEx_PWMN_Stop+0x48>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6a1a      	ldr	r2, [r3, #32]
 800713a:	f244 4344 	movw	r3, #17476	; 0x4444
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d107      	bne.n	8007154 <HAL_TIMEx_PWMN_Stop+0x48>
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007152:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	6a1a      	ldr	r2, [r3, #32]
 800715a:	f241 1311 	movw	r3, #4369	; 0x1111
 800715e:	4013      	ands	r3, r2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d10f      	bne.n	8007184 <HAL_TIMEx_PWMN_Stop+0x78>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6a1a      	ldr	r2, [r3, #32]
 800716a:	f244 4344 	movw	r3, #17476	; 0x4444
 800716e:	4013      	ands	r3, r2
 8007170:	2b00      	cmp	r3, #0
 8007172:	d107      	bne.n	8007184 <HAL_TIMEx_PWMN_Stop+0x78>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f022 0201 	bic.w	r2, r2, #1
 8007182:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <HAL_TIMEx_PWMN_Stop+0x88>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007192:	e013      	b.n	80071bc <HAL_TIMEx_PWMN_Stop+0xb0>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	2b04      	cmp	r3, #4
 8007198:	d104      	bne.n	80071a4 <HAL_TIMEx_PWMN_Stop+0x98>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071a2:	e00b      	b.n	80071bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	d104      	bne.n	80071b4 <HAL_TIMEx_PWMN_Stop+0xa8>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2201      	movs	r2, #1
 80071ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071b2:	e003      	b.n	80071bc <HAL_TIMEx_PWMN_Stop+0xb0>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80071bc:	2300      	movs	r3, #0
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
	...

080071c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
 80071d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d101      	bne.n	80071e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80071dc:	2302      	movs	r3, #2
 80071de:	e074      	b.n	80072ca <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2201      	movs	r2, #1
 80071e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	685b      	ldr	r3, [r3, #4]
 80071f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689b      	ldr	r3, [r3, #8]
 80071fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4a34      	ldr	r2, [pc, #208]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d009      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a33      	ldr	r2, [pc, #204]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d004      	beq.n	800721e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a31      	ldr	r2, [pc, #196]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d108      	bne.n	8007230 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007224:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	4313      	orrs	r3, r2
 800722e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8007236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800723a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68fa      	ldr	r2, [r7, #12]
 8007242:	4313      	orrs	r3, r2
 8007244:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a21      	ldr	r2, [pc, #132]	; (80072d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d022      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007260:	d01d      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	4a1f      	ldr	r2, [pc, #124]	; (80072e4 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007268:	4293      	cmp	r3, r2
 800726a:	d018      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a1d      	ldr	r2, [pc, #116]	; (80072e8 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007272:	4293      	cmp	r3, r2
 8007274:	d013      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	4a1c      	ldr	r2, [pc, #112]	; (80072ec <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800727c:	4293      	cmp	r3, r2
 800727e:	d00e      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	4a15      	ldr	r2, [pc, #84]	; (80072dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007286:	4293      	cmp	r3, r2
 8007288:	d009      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a18      	ldr	r2, [pc, #96]	; (80072f0 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d004      	beq.n	800729e <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	4a11      	ldr	r2, [pc, #68]	; (80072e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800729a:	4293      	cmp	r3, r2
 800729c:	d10c      	bne.n	80072b8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80072a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	68ba      	ldr	r2, [r7, #8]
 80072ac:	4313      	orrs	r3, r2
 80072ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	68ba      	ldr	r2, [r7, #8]
 80072b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2201      	movs	r2, #1
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072c8:	2300      	movs	r3, #0
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3714      	adds	r7, #20
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
 80072d6:	bf00      	nop
 80072d8:	40012c00 	.word	0x40012c00
 80072dc:	40013400 	.word	0x40013400
 80072e0:	40015000 	.word	0x40015000
 80072e4:	40000400 	.word	0x40000400
 80072e8:	40000800 	.word	0x40000800
 80072ec:	40000c00 	.word	0x40000c00
 80072f0:	40014000 	.word	0x40014000

080072f4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b085      	sub	sp, #20
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007308:	2b01      	cmp	r3, #1
 800730a:	d101      	bne.n	8007310 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800730c:	2302      	movs	r3, #2
 800730e:	e096      	b.n	800743e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	68db      	ldr	r3, [r3, #12]
 8007322:	4313      	orrs	r3, r2
 8007324:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	4313      	orrs	r3, r2
 8007332:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	4313      	orrs	r3, r2
 8007340:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	4313      	orrs	r3, r2
 800734e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	691b      	ldr	r3, [r3, #16]
 800735a:	4313      	orrs	r3, r2
 800735c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	4313      	orrs	r3, r2
 800736a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007376:	4313      	orrs	r3, r2
 8007378:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	041b      	lsls	r3, r3, #16
 8007386:	4313      	orrs	r3, r2
 8007388:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	4a2f      	ldr	r2, [pc, #188]	; (800744c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d009      	beq.n	80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	4a2d      	ldr	r2, [pc, #180]	; (8007450 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d004      	beq.n	80073a8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	4a2c      	ldr	r2, [pc, #176]	; (8007454 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073a4:	4293      	cmp	r3, r2
 80073a6:	d106      	bne.n	80073b6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80073ae:	683b      	ldr	r3, [r7, #0]
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	4313      	orrs	r3, r2
 80073b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	4a24      	ldr	r2, [pc, #144]	; (800744c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80073bc:	4293      	cmp	r3, r2
 80073be:	d009      	beq.n	80073d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a22      	ldr	r2, [pc, #136]	; (8007450 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80073c6:	4293      	cmp	r3, r2
 80073c8:	d004      	beq.n	80073d4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	4a21      	ldr	r2, [pc, #132]	; (8007454 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80073d0:	4293      	cmp	r3, r2
 80073d2:	d12b      	bne.n	800742c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073de:	051b      	lsls	r3, r3, #20
 80073e0:	4313      	orrs	r3, r2
 80073e2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	6a1b      	ldr	r3, [r3, #32]
 80073ee:	4313      	orrs	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80073f8:	683b      	ldr	r3, [r7, #0]
 80073fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fc:	4313      	orrs	r3, r2
 80073fe:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a11      	ldr	r2, [pc, #68]	; (800744c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007406:	4293      	cmp	r3, r2
 8007408:	d009      	beq.n	800741e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a10      	ldr	r2, [pc, #64]	; (8007450 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d004      	beq.n	800741e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a0e      	ldr	r2, [pc, #56]	; (8007454 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d106      	bne.n	800742c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007428:	4313      	orrs	r3, r2
 800742a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2200      	movs	r2, #0
 8007438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
 800744a:	bf00      	nop
 800744c:	40012c00 	.word	0x40012c00
 8007450:	40013400 	.word	0x40013400
 8007454:	40015000 	.word	0x40015000

08007458 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007458:	b480      	push	{r7}
 800745a:	b083      	sub	sp, #12
 800745c:	af00      	add	r7, sp, #0
 800745e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007460:	bf00      	nop
 8007462:	370c      	adds	r7, #12
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800746c:	b480      	push	{r7}
 800746e:	b083      	sub	sp, #12
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007474:	bf00      	nop
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747e:	4770      	bx	lr

08007480 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007480:	b480      	push	{r7}
 8007482:	b083      	sub	sp, #12
 8007484:	af00      	add	r7, sp, #0
 8007486:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007488:	bf00      	nop
 800748a:	370c      	adds	r7, #12
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007494:	b480      	push	{r7}
 8007496:	b083      	sub	sp, #12
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800749c:	bf00      	nop
 800749e:	370c      	adds	r7, #12
 80074a0:	46bd      	mov	sp, r7
 80074a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a6:	4770      	bx	lr

080074a8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80074a8:	b480      	push	{r7}
 80074aa:	b083      	sub	sp, #12
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr

080074bc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80074bc:	b480      	push	{r7}
 80074be:	b083      	sub	sp, #12
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80074c4:	bf00      	nop
 80074c6:	370c      	adds	r7, #12
 80074c8:	46bd      	mov	sp, r7
 80074ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ce:	4770      	bx	lr

080074d0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b083      	sub	sp, #12
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80074d8:	bf00      	nop
 80074da:	370c      	adds	r7, #12
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80074e4:	b480      	push	{r7}
 80074e6:	b087      	sub	sp, #28
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	f003 031f 	and.w	r3, r3, #31
 80074f6:	2204      	movs	r2, #4
 80074f8:	fa02 f303 	lsl.w	r3, r2, r3
 80074fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6a1a      	ldr	r2, [r3, #32]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	43db      	mvns	r3, r3
 8007506:	401a      	ands	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	6a1a      	ldr	r2, [r3, #32]
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	f003 031f 	and.w	r3, r3, #31
 8007516:	6879      	ldr	r1, [r7, #4]
 8007518:	fa01 f303 	lsl.w	r3, r1, r3
 800751c:	431a      	orrs	r2, r3
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	621a      	str	r2, [r3, #32]
}
 8007522:	bf00      	nop
 8007524:	371c      	adds	r7, #28
 8007526:	46bd      	mov	sp, r7
 8007528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752c:	4770      	bx	lr

0800752e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d101      	bne.n	8007540 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800753c:	2301      	movs	r3, #1
 800753e:	e042      	b.n	80075c6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007546:	2b00      	cmp	r3, #0
 8007548:	d106      	bne.n	8007558 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f7fa fe70 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2224      	movs	r2, #36	; 0x24
 800755c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0201 	bic.w	r2, r2, #1
 800756e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fc51 	bl	8007e18 <UART_SetConfig>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d101      	bne.n	8007580 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e022      	b.n	80075c6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f000 ff41 	bl	8008410 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	685a      	ldr	r2, [r3, #4]
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800759c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689a      	ldr	r2, [r3, #8]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80075ac:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f042 0201 	orr.w	r2, r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 ffc8 	bl	8008554 <UART_CheckIdleState>
 80075c4:	4603      	mov	r3, r0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3708      	adds	r7, #8
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b08a      	sub	sp, #40	; 0x28
 80075d2:	af02      	add	r7, sp, #8
 80075d4:	60f8      	str	r0, [r7, #12]
 80075d6:	60b9      	str	r1, [r7, #8]
 80075d8:	603b      	str	r3, [r7, #0]
 80075da:	4613      	mov	r3, r2
 80075dc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80075e4:	2b20      	cmp	r3, #32
 80075e6:	f040 8083 	bne.w	80076f0 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d002      	beq.n	80075f6 <HAL_UART_Transmit+0x28>
 80075f0:	88fb      	ldrh	r3, [r7, #6]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d101      	bne.n	80075fa <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 80075f6:	2301      	movs	r3, #1
 80075f8:	e07b      	b.n	80076f2 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <HAL_UART_Transmit+0x3a>
 8007604:	2302      	movs	r3, #2
 8007606:	e074      	b.n	80076f2 <HAL_UART_Transmit+0x124>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	2221      	movs	r2, #33	; 0x21
 800761c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007620:	f7fa fefe 	bl	8002420 <HAL_GetTick>
 8007624:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	88fa      	ldrh	r2, [r7, #6]
 800762a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	88fa      	ldrh	r2, [r7, #6]
 8007632:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800763e:	d108      	bne.n	8007652 <HAL_UART_Transmit+0x84>
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007648:	2300      	movs	r3, #0
 800764a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e003      	b.n	800765a <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007656:	2300      	movs	r3, #0
 8007658:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007662:	e02c      	b.n	80076be <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	9300      	str	r3, [sp, #0]
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2200      	movs	r2, #0
 800766c:	2180      	movs	r1, #128	; 0x80
 800766e:	68f8      	ldr	r0, [r7, #12]
 8007670:	f000 ffbb 	bl	80085ea <UART_WaitOnFlagUntilTimeout>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d001      	beq.n	800767e <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800767a:	2303      	movs	r3, #3
 800767c:	e039      	b.n	80076f2 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800767e:	69fb      	ldr	r3, [r7, #28]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d10b      	bne.n	800769c <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	881b      	ldrh	r3, [r3, #0]
 8007688:	461a      	mov	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007692:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	3302      	adds	r3, #2
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	e007      	b.n	80076ac <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	3301      	adds	r3, #1
 80076aa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076b2:	b29b      	uxth	r3, r3
 80076b4:	3b01      	subs	r3, #1
 80076b6:	b29a      	uxth	r2, r3
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1cc      	bne.n	8007664 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2140      	movs	r1, #64	; 0x40
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 ff88 	bl	80085ea <UART_WaitOnFlagUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d001      	beq.n	80076e4 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80076e0:	2303      	movs	r3, #3
 80076e2:	e006      	b.n	80076f2 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2220      	movs	r2, #32
 80076e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80076ec:	2300      	movs	r3, #0
 80076ee:	e000      	b.n	80076f2 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 80076f0:	2302      	movs	r3, #2
  }
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3720      	adds	r7, #32
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}
	...

080076fc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b08a      	sub	sp, #40	; 0x28
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007710:	2b20      	cmp	r3, #32
 8007712:	d142      	bne.n	800779a <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d002      	beq.n	8007720 <HAL_UART_Receive_IT+0x24>
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d101      	bne.n	8007724 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e03b      	b.n	800779c <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800772a:	2b01      	cmp	r3, #1
 800772c:	d101      	bne.n	8007732 <HAL_UART_Receive_IT+0x36>
 800772e:	2302      	movs	r3, #2
 8007730:	e034      	b.n	800779c <HAL_UART_Receive_IT+0xa0>
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	2201      	movs	r2, #1
 8007736:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	2200      	movs	r2, #0
 800773e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a17      	ldr	r2, [pc, #92]	; (80077a4 <HAL_UART_Receive_IT+0xa8>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d01f      	beq.n	800778a <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007754:	2b00      	cmp	r3, #0
 8007756:	d018      	beq.n	800778a <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	e853 3f00 	ldrex	r3, [r3]
 8007764:	613b      	str	r3, [r7, #16]
   return(result);
 8007766:	693b      	ldr	r3, [r7, #16]
 8007768:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800776c:	627b      	str	r3, [r7, #36]	; 0x24
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	461a      	mov	r2, r3
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	623b      	str	r3, [r7, #32]
 8007778:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	69f9      	ldr	r1, [r7, #28]
 800777c:	6a3a      	ldr	r2, [r7, #32]
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	61bb      	str	r3, [r7, #24]
   return(result);
 8007784:	69bb      	ldr	r3, [r7, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e6      	bne.n	8007758 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800778a:	88fb      	ldrh	r3, [r7, #6]
 800778c:	461a      	mov	r2, r3
 800778e:	68b9      	ldr	r1, [r7, #8]
 8007790:	68f8      	ldr	r0, [r7, #12]
 8007792:	f000 fff3 	bl	800877c <UART_Start_Receive_IT>
 8007796:	4603      	mov	r3, r0
 8007798:	e000      	b.n	800779c <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800779a:	2302      	movs	r3, #2
  }
}
 800779c:	4618      	mov	r0, r3
 800779e:	3728      	adds	r7, #40	; 0x28
 80077a0:	46bd      	mov	sp, r7
 80077a2:	bd80      	pop	{r7, pc}
 80077a4:	40008000 	.word	0x40008000

080077a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b0ba      	sub	sp, #232	; 0xe8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	69db      	ldr	r3, [r3, #28]
 80077b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	689b      	ldr	r3, [r3, #8]
 80077ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80077ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80077d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80077d6:	4013      	ands	r3, r2
 80077d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80077dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d11b      	bne.n	800781c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077e8:	f003 0320 	and.w	r3, r3, #32
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d015      	beq.n	800781c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d105      	bne.n	8007808 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007800:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d009      	beq.n	800781c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800780c:	2b00      	cmp	r3, #0
 800780e:	f000 82d6 	beq.w	8007dbe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
      }
      return;
 800781a:	e2d0      	b.n	8007dbe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800781c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007820:	2b00      	cmp	r3, #0
 8007822:	f000 811f 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007826:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800782a:	4b8b      	ldr	r3, [pc, #556]	; (8007a58 <HAL_UART_IRQHandler+0x2b0>)
 800782c:	4013      	ands	r3, r2
 800782e:	2b00      	cmp	r3, #0
 8007830:	d106      	bne.n	8007840 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007832:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007836:	4b89      	ldr	r3, [pc, #548]	; (8007a5c <HAL_UART_IRQHandler+0x2b4>)
 8007838:	4013      	ands	r3, r2
 800783a:	2b00      	cmp	r3, #0
 800783c:	f000 8112 	beq.w	8007a64 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007844:	f003 0301 	and.w	r3, r3, #1
 8007848:	2b00      	cmp	r3, #0
 800784a:	d011      	beq.n	8007870 <HAL_UART_IRQHandler+0xc8>
 800784c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007850:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00b      	beq.n	8007870 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	2201      	movs	r2, #1
 800785e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007866:	f043 0201 	orr.w	r2, r3, #1
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007870:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007874:	f003 0302 	and.w	r3, r3, #2
 8007878:	2b00      	cmp	r3, #0
 800787a:	d011      	beq.n	80078a0 <HAL_UART_IRQHandler+0xf8>
 800787c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	2b00      	cmp	r3, #0
 8007886:	d00b      	beq.n	80078a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	2202      	movs	r2, #2
 800788e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007896:	f043 0204 	orr.w	r2, r3, #4
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078a4:	f003 0304 	and.w	r3, r3, #4
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d011      	beq.n	80078d0 <HAL_UART_IRQHandler+0x128>
 80078ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80078b0:	f003 0301 	and.w	r3, r3, #1
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d00b      	beq.n	80078d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	2204      	movs	r2, #4
 80078be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078c6:	f043 0202 	orr.w	r2, r3, #2
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80078d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078d4:	f003 0308 	and.w	r3, r3, #8
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d017      	beq.n	800790c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078e0:	f003 0320 	and.w	r3, r3, #32
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d105      	bne.n	80078f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80078e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80078ec:	4b5a      	ldr	r3, [pc, #360]	; (8007a58 <HAL_UART_IRQHandler+0x2b0>)
 80078ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d00b      	beq.n	800790c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	2208      	movs	r2, #8
 80078fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007902:	f043 0208 	orr.w	r2, r3, #8
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800790c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007910:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007914:	2b00      	cmp	r3, #0
 8007916:	d012      	beq.n	800793e <HAL_UART_IRQHandler+0x196>
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800791c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00c      	beq.n	800793e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800792c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007934:	f043 0220 	orr.w	r2, r3, #32
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 823c 	beq.w	8007dc2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800794a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800794e:	f003 0320 	and.w	r3, r3, #32
 8007952:	2b00      	cmp	r3, #0
 8007954:	d013      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800795a:	f003 0320 	and.w	r3, r3, #32
 800795e:	2b00      	cmp	r3, #0
 8007960:	d105      	bne.n	800796e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d007      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007972:	2b00      	cmp	r3, #0
 8007974:	d003      	beq.n	800797e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007984:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007992:	2b40      	cmp	r3, #64	; 0x40
 8007994:	d005      	beq.n	80079a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800799a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d04f      	beq.n	8007a42 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f001 f814 	bl	80089d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	689b      	ldr	r3, [r3, #8]
 80079ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079b2:	2b40      	cmp	r3, #64	; 0x40
 80079b4:	d141      	bne.n	8007a3a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	3308      	adds	r3, #8
 80079bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079c4:	e853 3f00 	ldrex	r3, [r3]
 80079c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80079cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80079d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80079d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	3308      	adds	r3, #8
 80079de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80079e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80079ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80079f2:	e841 2300 	strex	r3, r2, [r1]
 80079f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80079fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1d9      	bne.n	80079b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d013      	beq.n	8007a32 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a0e:	4a14      	ldr	r2, [pc, #80]	; (8007a60 <HAL_UART_IRQHandler+0x2b8>)
 8007a10:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fc fbc1 	bl	800419e <HAL_DMA_Abort_IT>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d017      	beq.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	687a      	ldr	r2, [r7, #4]
 8007a2a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007a2c:	4610      	mov	r0, r2
 8007a2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a30:	e00f      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 f9da 	bl	8007dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a38:	e00b      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 f9d6 	bl	8007dec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a40:	e007      	b.n	8007a52 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007a42:	6878      	ldr	r0, [r7, #4]
 8007a44:	f000 f9d2 	bl	8007dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007a50:	e1b7      	b.n	8007dc2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a52:	bf00      	nop
    return;
 8007a54:	e1b5      	b.n	8007dc2 <HAL_UART_IRQHandler+0x61a>
 8007a56:	bf00      	nop
 8007a58:	10000001 	.word	0x10000001
 8007a5c:	04000120 	.word	0x04000120
 8007a60:	08008a9d 	.word	0x08008a9d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a68:	2b01      	cmp	r3, #1
 8007a6a:	f040 814a 	bne.w	8007d02 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007a6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	f000 8143 	beq.w	8007d02 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 813c 	beq.w	8007d02 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	2210      	movs	r2, #16
 8007a90:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	689b      	ldr	r3, [r3, #8]
 8007a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a9c:	2b40      	cmp	r3, #64	; 0x40
 8007a9e:	f040 80b5 	bne.w	8007c0c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007aae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	f000 8187 	beq.w	8007dc6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007abe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ac2:	429a      	cmp	r2, r3
 8007ac4:	f080 817f 	bcs.w	8007dc6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ace:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f003 0320 	and.w	r3, r3, #32
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	f040 8086 	bne.w	8007bf0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007af0:	e853 3f00 	ldrex	r3, [r3]
 8007af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007af8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	461a      	mov	r2, r3
 8007b0a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007b12:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007b1a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007b26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d1da      	bne.n	8007ae4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	3308      	adds	r3, #8
 8007b34:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007b38:	e853 3f00 	ldrex	r3, [r3]
 8007b3c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007b3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b40:	f023 0301 	bic.w	r3, r3, #1
 8007b44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	3308      	adds	r3, #8
 8007b4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007b52:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007b56:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007b5a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007b5e:	e841 2300 	strex	r3, r2, [r1]
 8007b62:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007b64:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d1e1      	bne.n	8007b2e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007b74:	e853 3f00 	ldrex	r3, [r3]
 8007b78:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007b7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	3308      	adds	r3, #8
 8007b8a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007b8e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007b90:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b92:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007b94:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007b96:	e841 2300 	strex	r3, r2, [r1]
 8007b9a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007b9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d1e3      	bne.n	8007b6a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2220      	movs	r2, #32
 8007ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2200      	movs	r2, #0
 8007bae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bb8:	e853 3f00 	ldrex	r3, [r3]
 8007bbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bc0:	f023 0310 	bic.w	r3, r3, #16
 8007bc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007bd2:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bd4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007bd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007be0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e4      	bne.n	8007bb0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bea:	4618      	mov	r0, r3
 8007bec:	f7fc fa7e 	bl	80040ec <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007bfc:	b29b      	uxth	r3, r3
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	b29b      	uxth	r3, r3
 8007c02:	4619      	mov	r1, r3
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 f8fb 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c0a:	e0dc      	b.n	8007dc6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c18:	b29b      	uxth	r3, r3
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f000 80ce 	beq.w	8007dca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007c2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	f000 80c9 	beq.w	8007dca <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c40:	e853 3f00 	ldrex	r3, [r3]
 8007c44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	461a      	mov	r2, r3
 8007c56:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c62:	e841 2300 	strex	r3, r2, [r1]
 8007c66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1e4      	bne.n	8007c38 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	3308      	adds	r3, #8
 8007c74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c78:	e853 3f00 	ldrex	r3, [r3]
 8007c7c:	623b      	str	r3, [r7, #32]
   return(result);
 8007c7e:	6a3b      	ldr	r3, [r7, #32]
 8007c80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c84:	f023 0301 	bic.w	r3, r3, #1
 8007c88:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	3308      	adds	r3, #8
 8007c92:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007c96:	633a      	str	r2, [r7, #48]	; 0x30
 8007c98:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c9a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c9e:	e841 2300 	strex	r3, r2, [r1]
 8007ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d1e1      	bne.n	8007c6e <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2220      	movs	r2, #32
 8007cae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2200      	movs	r2, #0
 8007cbc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	e853 3f00 	ldrex	r3, [r3]
 8007cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0310 	bic.w	r3, r3, #16
 8007cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	461a      	mov	r2, r3
 8007cdc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ce0:	61fb      	str	r3, [r7, #28]
 8007ce2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ce4:	69b9      	ldr	r1, [r7, #24]
 8007ce6:	69fa      	ldr	r2, [r7, #28]
 8007ce8:	e841 2300 	strex	r3, r2, [r1]
 8007cec:	617b      	str	r3, [r7, #20]
   return(result);
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d1e4      	bne.n	8007cbe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cf4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007cf8:	4619      	mov	r1, r3
 8007cfa:	6878      	ldr	r0, [r7, #4]
 8007cfc:	f000 f880 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007d00:	e063      	b.n	8007dca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007d02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d00e      	beq.n	8007d2c <HAL_UART_IRQHandler+0x584>
 8007d0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d008      	beq.n	8007d2c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007d22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fb57 	bl	80093d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d2a:	e051      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d014      	beq.n	8007d62 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d105      	bne.n	8007d50 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d48:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d03a      	beq.n	8007dce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	4798      	blx	r3
    }
    return;
 8007d60:	e035      	b.n	8007dce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d009      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5da>
 8007d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d003      	beq.n	8007d82 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f000 fea4 	bl	8008ac8 <UART_EndTransmit_IT>
    return;
 8007d80:	e026      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d009      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5fa>
 8007d8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d003      	beq.n	8007da2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f001 fb30 	bl	8009400 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007da0:	e016      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007da2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007da6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d010      	beq.n	8007dd0 <HAL_UART_IRQHandler+0x628>
 8007dae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da0c      	bge.n	8007dd0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007db6:	6878      	ldr	r0, [r7, #4]
 8007db8:	f001 fb18 	bl	80093ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007dbc:	e008      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dbe:	bf00      	nop
 8007dc0:	e006      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8007dc2:	bf00      	nop
 8007dc4:	e004      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dc6:	bf00      	nop
 8007dc8:	e002      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
      return;
 8007dca:	bf00      	nop
 8007dcc:	e000      	b.n	8007dd0 <HAL_UART_IRQHandler+0x628>
    return;
 8007dce:	bf00      	nop
  }
}
 8007dd0:	37e8      	adds	r7, #232	; 0xe8
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
 8007dd6:	bf00      	nop

08007dd8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd8:	b480      	push	{r7}
 8007dda:	b083      	sub	sp, #12
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007de0:	bf00      	nop
 8007de2:	370c      	adds	r7, #12
 8007de4:	46bd      	mov	sp, r7
 8007de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dea:	4770      	bx	lr

08007dec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b083      	sub	sp, #12
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007df4:	bf00      	nop
 8007df6:	370c      	adds	r7, #12
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfe:	4770      	bx	lr

08007e00 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007e00:	b480      	push	{r7}
 8007e02:	b083      	sub	sp, #12
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	460b      	mov	r3, r1
 8007e0a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e0c:	bf00      	nop
 8007e0e:	370c      	adds	r7, #12
 8007e10:	46bd      	mov	sp, r7
 8007e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e16:	4770      	bx	lr

08007e18 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e1c:	b08c      	sub	sp, #48	; 0x30
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	691b      	ldr	r3, [r3, #16]
 8007e30:	431a      	orrs	r2, r3
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	695b      	ldr	r3, [r3, #20]
 8007e36:	431a      	orrs	r2, r3
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	4313      	orrs	r3, r2
 8007e3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	681a      	ldr	r2, [r3, #0]
 8007e46:	4baa      	ldr	r3, [pc, #680]	; (80080f0 <UART_SetConfig+0x2d8>)
 8007e48:	4013      	ands	r3, r2
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	6812      	ldr	r2, [r2, #0]
 8007e4e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e50:	430b      	orrs	r3, r1
 8007e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	68da      	ldr	r2, [r3, #12]
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	430a      	orrs	r2, r1
 8007e68:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e6a:	697b      	ldr	r3, [r7, #20]
 8007e6c:	699b      	ldr	r3, [r3, #24]
 8007e6e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a9f      	ldr	r2, [pc, #636]	; (80080f4 <UART_SetConfig+0x2dc>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
 8007e7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e80:	4313      	orrs	r3, r2
 8007e82:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	689b      	ldr	r3, [r3, #8]
 8007e8a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8007e8e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	6812      	ldr	r2, [r2, #0]
 8007e96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007e98:	430b      	orrs	r3, r1
 8007e9a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e9c:	697b      	ldr	r3, [r7, #20]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ea2:	f023 010f 	bic.w	r1, r3, #15
 8007ea6:	697b      	ldr	r3, [r7, #20]
 8007ea8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a90      	ldr	r2, [pc, #576]	; (80080f8 <UART_SetConfig+0x2e0>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d125      	bne.n	8007f08 <UART_SetConfig+0xf0>
 8007ebc:	4b8f      	ldr	r3, [pc, #572]	; (80080fc <UART_SetConfig+0x2e4>)
 8007ebe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ec2:	f003 0303 	and.w	r3, r3, #3
 8007ec6:	2b03      	cmp	r3, #3
 8007ec8:	d81a      	bhi.n	8007f00 <UART_SetConfig+0xe8>
 8007eca:	a201      	add	r2, pc, #4	; (adr r2, 8007ed0 <UART_SetConfig+0xb8>)
 8007ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ed0:	08007ee1 	.word	0x08007ee1
 8007ed4:	08007ef1 	.word	0x08007ef1
 8007ed8:	08007ee9 	.word	0x08007ee9
 8007edc:	08007ef9 	.word	0x08007ef9
 8007ee0:	2301      	movs	r3, #1
 8007ee2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ee6:	e116      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007ee8:	2302      	movs	r3, #2
 8007eea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007eee:	e112      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007ef0:	2304      	movs	r3, #4
 8007ef2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007ef6:	e10e      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007ef8:	2308      	movs	r3, #8
 8007efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007efe:	e10a      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f00:	2310      	movs	r3, #16
 8007f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f06:	e106      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	4a7c      	ldr	r2, [pc, #496]	; (8008100 <UART_SetConfig+0x2e8>)
 8007f0e:	4293      	cmp	r3, r2
 8007f10:	d138      	bne.n	8007f84 <UART_SetConfig+0x16c>
 8007f12:	4b7a      	ldr	r3, [pc, #488]	; (80080fc <UART_SetConfig+0x2e4>)
 8007f14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f18:	f003 030c 	and.w	r3, r3, #12
 8007f1c:	2b0c      	cmp	r3, #12
 8007f1e:	d82d      	bhi.n	8007f7c <UART_SetConfig+0x164>
 8007f20:	a201      	add	r2, pc, #4	; (adr r2, 8007f28 <UART_SetConfig+0x110>)
 8007f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f26:	bf00      	nop
 8007f28:	08007f5d 	.word	0x08007f5d
 8007f2c:	08007f7d 	.word	0x08007f7d
 8007f30:	08007f7d 	.word	0x08007f7d
 8007f34:	08007f7d 	.word	0x08007f7d
 8007f38:	08007f6d 	.word	0x08007f6d
 8007f3c:	08007f7d 	.word	0x08007f7d
 8007f40:	08007f7d 	.word	0x08007f7d
 8007f44:	08007f7d 	.word	0x08007f7d
 8007f48:	08007f65 	.word	0x08007f65
 8007f4c:	08007f7d 	.word	0x08007f7d
 8007f50:	08007f7d 	.word	0x08007f7d
 8007f54:	08007f7d 	.word	0x08007f7d
 8007f58:	08007f75 	.word	0x08007f75
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f62:	e0d8      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f64:	2302      	movs	r3, #2
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f6a:	e0d4      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f6c:	2304      	movs	r3, #4
 8007f6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f72:	e0d0      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f74:	2308      	movs	r3, #8
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f7a:	e0cc      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f7c:	2310      	movs	r3, #16
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007f82:	e0c8      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a5e      	ldr	r2, [pc, #376]	; (8008104 <UART_SetConfig+0x2ec>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d125      	bne.n	8007fda <UART_SetConfig+0x1c2>
 8007f8e:	4b5b      	ldr	r3, [pc, #364]	; (80080fc <UART_SetConfig+0x2e4>)
 8007f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007f98:	2b30      	cmp	r3, #48	; 0x30
 8007f9a:	d016      	beq.n	8007fca <UART_SetConfig+0x1b2>
 8007f9c:	2b30      	cmp	r3, #48	; 0x30
 8007f9e:	d818      	bhi.n	8007fd2 <UART_SetConfig+0x1ba>
 8007fa0:	2b20      	cmp	r3, #32
 8007fa2:	d00a      	beq.n	8007fba <UART_SetConfig+0x1a2>
 8007fa4:	2b20      	cmp	r3, #32
 8007fa6:	d814      	bhi.n	8007fd2 <UART_SetConfig+0x1ba>
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d002      	beq.n	8007fb2 <UART_SetConfig+0x19a>
 8007fac:	2b10      	cmp	r3, #16
 8007fae:	d008      	beq.n	8007fc2 <UART_SetConfig+0x1aa>
 8007fb0:	e00f      	b.n	8007fd2 <UART_SetConfig+0x1ba>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fb8:	e0ad      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007fba:	2302      	movs	r3, #2
 8007fbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc0:	e0a9      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007fc2:	2304      	movs	r3, #4
 8007fc4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fc8:	e0a5      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007fca:	2308      	movs	r3, #8
 8007fcc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd0:	e0a1      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007fd2:	2310      	movs	r3, #16
 8007fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8007fd8:	e09d      	b.n	8008116 <UART_SetConfig+0x2fe>
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	4a4a      	ldr	r2, [pc, #296]	; (8008108 <UART_SetConfig+0x2f0>)
 8007fe0:	4293      	cmp	r3, r2
 8007fe2:	d125      	bne.n	8008030 <UART_SetConfig+0x218>
 8007fe4:	4b45      	ldr	r3, [pc, #276]	; (80080fc <UART_SetConfig+0x2e4>)
 8007fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007fea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007fee:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff0:	d016      	beq.n	8008020 <UART_SetConfig+0x208>
 8007ff2:	2bc0      	cmp	r3, #192	; 0xc0
 8007ff4:	d818      	bhi.n	8008028 <UART_SetConfig+0x210>
 8007ff6:	2b80      	cmp	r3, #128	; 0x80
 8007ff8:	d00a      	beq.n	8008010 <UART_SetConfig+0x1f8>
 8007ffa:	2b80      	cmp	r3, #128	; 0x80
 8007ffc:	d814      	bhi.n	8008028 <UART_SetConfig+0x210>
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d002      	beq.n	8008008 <UART_SetConfig+0x1f0>
 8008002:	2b40      	cmp	r3, #64	; 0x40
 8008004:	d008      	beq.n	8008018 <UART_SetConfig+0x200>
 8008006:	e00f      	b.n	8008028 <UART_SetConfig+0x210>
 8008008:	2300      	movs	r3, #0
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800800e:	e082      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008010:	2302      	movs	r3, #2
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008016:	e07e      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008018:	2304      	movs	r3, #4
 800801a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800801e:	e07a      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008020:	2308      	movs	r3, #8
 8008022:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008026:	e076      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008028:	2310      	movs	r3, #16
 800802a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800802e:	e072      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008030:	697b      	ldr	r3, [r7, #20]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	4a35      	ldr	r2, [pc, #212]	; (800810c <UART_SetConfig+0x2f4>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d12a      	bne.n	8008090 <UART_SetConfig+0x278>
 800803a:	4b30      	ldr	r3, [pc, #192]	; (80080fc <UART_SetConfig+0x2e4>)
 800803c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008040:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008044:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008048:	d01a      	beq.n	8008080 <UART_SetConfig+0x268>
 800804a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800804e:	d81b      	bhi.n	8008088 <UART_SetConfig+0x270>
 8008050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008054:	d00c      	beq.n	8008070 <UART_SetConfig+0x258>
 8008056:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800805a:	d815      	bhi.n	8008088 <UART_SetConfig+0x270>
 800805c:	2b00      	cmp	r3, #0
 800805e:	d003      	beq.n	8008068 <UART_SetConfig+0x250>
 8008060:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008064:	d008      	beq.n	8008078 <UART_SetConfig+0x260>
 8008066:	e00f      	b.n	8008088 <UART_SetConfig+0x270>
 8008068:	2300      	movs	r3, #0
 800806a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800806e:	e052      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008070:	2302      	movs	r3, #2
 8008072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008076:	e04e      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008078:	2304      	movs	r3, #4
 800807a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800807e:	e04a      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008080:	2308      	movs	r3, #8
 8008082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008086:	e046      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008088:	2310      	movs	r3, #16
 800808a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800808e:	e042      	b.n	8008116 <UART_SetConfig+0x2fe>
 8008090:	697b      	ldr	r3, [r7, #20]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a17      	ldr	r2, [pc, #92]	; (80080f4 <UART_SetConfig+0x2dc>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d13a      	bne.n	8008110 <UART_SetConfig+0x2f8>
 800809a:	4b18      	ldr	r3, [pc, #96]	; (80080fc <UART_SetConfig+0x2e4>)
 800809c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80080a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080a8:	d01a      	beq.n	80080e0 <UART_SetConfig+0x2c8>
 80080aa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80080ae:	d81b      	bhi.n	80080e8 <UART_SetConfig+0x2d0>
 80080b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080b4:	d00c      	beq.n	80080d0 <UART_SetConfig+0x2b8>
 80080b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080ba:	d815      	bhi.n	80080e8 <UART_SetConfig+0x2d0>
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d003      	beq.n	80080c8 <UART_SetConfig+0x2b0>
 80080c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080c4:	d008      	beq.n	80080d8 <UART_SetConfig+0x2c0>
 80080c6:	e00f      	b.n	80080e8 <UART_SetConfig+0x2d0>
 80080c8:	2300      	movs	r3, #0
 80080ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ce:	e022      	b.n	8008116 <UART_SetConfig+0x2fe>
 80080d0:	2302      	movs	r3, #2
 80080d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080d6:	e01e      	b.n	8008116 <UART_SetConfig+0x2fe>
 80080d8:	2304      	movs	r3, #4
 80080da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080de:	e01a      	b.n	8008116 <UART_SetConfig+0x2fe>
 80080e0:	2308      	movs	r3, #8
 80080e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080e6:	e016      	b.n	8008116 <UART_SetConfig+0x2fe>
 80080e8:	2310      	movs	r3, #16
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080ee:	e012      	b.n	8008116 <UART_SetConfig+0x2fe>
 80080f0:	cfff69f3 	.word	0xcfff69f3
 80080f4:	40008000 	.word	0x40008000
 80080f8:	40013800 	.word	0x40013800
 80080fc:	40021000 	.word	0x40021000
 8008100:	40004400 	.word	0x40004400
 8008104:	40004800 	.word	0x40004800
 8008108:	40004c00 	.word	0x40004c00
 800810c:	40005000 	.word	0x40005000
 8008110:	2310      	movs	r3, #16
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008116:	697b      	ldr	r3, [r7, #20]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4aae      	ldr	r2, [pc, #696]	; (80083d4 <UART_SetConfig+0x5bc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	f040 8097 	bne.w	8008250 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008122:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008126:	2b08      	cmp	r3, #8
 8008128:	d823      	bhi.n	8008172 <UART_SetConfig+0x35a>
 800812a:	a201      	add	r2, pc, #4	; (adr r2, 8008130 <UART_SetConfig+0x318>)
 800812c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008130:	08008155 	.word	0x08008155
 8008134:	08008173 	.word	0x08008173
 8008138:	0800815d 	.word	0x0800815d
 800813c:	08008173 	.word	0x08008173
 8008140:	08008163 	.word	0x08008163
 8008144:	08008173 	.word	0x08008173
 8008148:	08008173 	.word	0x08008173
 800814c:	08008173 	.word	0x08008173
 8008150:	0800816b 	.word	0x0800816b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008154:	f7fc ffbe 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8008158:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800815a:	e010      	b.n	800817e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800815c:	4b9e      	ldr	r3, [pc, #632]	; (80083d8 <UART_SetConfig+0x5c0>)
 800815e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008160:	e00d      	b.n	800817e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008162:	f7fc ff49 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8008166:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008168:	e009      	b.n	800817e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800816a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800816e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008170:	e005      	b.n	800817e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008176:	2301      	movs	r3, #1
 8008178:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800817c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800817e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008180:	2b00      	cmp	r3, #0
 8008182:	f000 8130 	beq.w	80083e6 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	4a94      	ldr	r2, [pc, #592]	; (80083dc <UART_SetConfig+0x5c4>)
 800818c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008190:	461a      	mov	r2, r3
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	fbb3 f3f2 	udiv	r3, r3, r2
 8008198:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	685a      	ldr	r2, [r3, #4]
 800819e:	4613      	mov	r3, r2
 80081a0:	005b      	lsls	r3, r3, #1
 80081a2:	4413      	add	r3, r2
 80081a4:	69ba      	ldr	r2, [r7, #24]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d305      	bcc.n	80081b6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081b0:	69ba      	ldr	r2, [r7, #24]
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d903      	bls.n	80081be <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80081b6:	2301      	movs	r3, #1
 80081b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80081bc:	e113      	b.n	80083e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c0:	2200      	movs	r2, #0
 80081c2:	60bb      	str	r3, [r7, #8]
 80081c4:	60fa      	str	r2, [r7, #12]
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ca:	4a84      	ldr	r2, [pc, #528]	; (80083dc <UART_SetConfig+0x5c4>)
 80081cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081d0:	b29b      	uxth	r3, r3
 80081d2:	2200      	movs	r2, #0
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	607a      	str	r2, [r7, #4]
 80081d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081dc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081e0:	f7f8 fd1a 	bl	8000c18 <__aeabi_uldivmod>
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4610      	mov	r0, r2
 80081ea:	4619      	mov	r1, r3
 80081ec:	f04f 0200 	mov.w	r2, #0
 80081f0:	f04f 0300 	mov.w	r3, #0
 80081f4:	020b      	lsls	r3, r1, #8
 80081f6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081fa:	0202      	lsls	r2, r0, #8
 80081fc:	6979      	ldr	r1, [r7, #20]
 80081fe:	6849      	ldr	r1, [r1, #4]
 8008200:	0849      	lsrs	r1, r1, #1
 8008202:	2000      	movs	r0, #0
 8008204:	460c      	mov	r4, r1
 8008206:	4605      	mov	r5, r0
 8008208:	eb12 0804 	adds.w	r8, r2, r4
 800820c:	eb43 0905 	adc.w	r9, r3, r5
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	685b      	ldr	r3, [r3, #4]
 8008214:	2200      	movs	r2, #0
 8008216:	469a      	mov	sl, r3
 8008218:	4693      	mov	fp, r2
 800821a:	4652      	mov	r2, sl
 800821c:	465b      	mov	r3, fp
 800821e:	4640      	mov	r0, r8
 8008220:	4649      	mov	r1, r9
 8008222:	f7f8 fcf9 	bl	8000c18 <__aeabi_uldivmod>
 8008226:	4602      	mov	r2, r0
 8008228:	460b      	mov	r3, r1
 800822a:	4613      	mov	r3, r2
 800822c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800822e:	6a3b      	ldr	r3, [r7, #32]
 8008230:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008234:	d308      	bcc.n	8008248 <UART_SetConfig+0x430>
 8008236:	6a3b      	ldr	r3, [r7, #32]
 8008238:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800823c:	d204      	bcs.n	8008248 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	6a3a      	ldr	r2, [r7, #32]
 8008244:	60da      	str	r2, [r3, #12]
 8008246:	e0ce      	b.n	80083e6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8008248:	2301      	movs	r3, #1
 800824a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800824e:	e0ca      	b.n	80083e6 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	69db      	ldr	r3, [r3, #28]
 8008254:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008258:	d166      	bne.n	8008328 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800825a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800825e:	2b08      	cmp	r3, #8
 8008260:	d827      	bhi.n	80082b2 <UART_SetConfig+0x49a>
 8008262:	a201      	add	r2, pc, #4	; (adr r2, 8008268 <UART_SetConfig+0x450>)
 8008264:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008268:	0800828d 	.word	0x0800828d
 800826c:	08008295 	.word	0x08008295
 8008270:	0800829d 	.word	0x0800829d
 8008274:	080082b3 	.word	0x080082b3
 8008278:	080082a3 	.word	0x080082a3
 800827c:	080082b3 	.word	0x080082b3
 8008280:	080082b3 	.word	0x080082b3
 8008284:	080082b3 	.word	0x080082b3
 8008288:	080082ab 	.word	0x080082ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800828c:	f7fc ff22 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8008290:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008292:	e014      	b.n	80082be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008294:	f7fc ff34 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8008298:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800829a:	e010      	b.n	80082be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800829c:	4b4e      	ldr	r3, [pc, #312]	; (80083d8 <UART_SetConfig+0x5c0>)
 800829e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082a0:	e00d      	b.n	80082be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80082a2:	f7fc fea9 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 80082a6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80082a8:	e009      	b.n	80082be <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80082b0:	e005      	b.n	80082be <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80082b2:	2300      	movs	r3, #0
 80082b4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80082b6:	2301      	movs	r3, #1
 80082b8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80082bc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	f000 8090 	beq.w	80083e6 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ca:	4a44      	ldr	r2, [pc, #272]	; (80083dc <UART_SetConfig+0x5c4>)
 80082cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082d0:	461a      	mov	r2, r3
 80082d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80082d8:	005a      	lsls	r2, r3, #1
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	685b      	ldr	r3, [r3, #4]
 80082de:	085b      	lsrs	r3, r3, #1
 80082e0:	441a      	add	r2, r3
 80082e2:	697b      	ldr	r3, [r7, #20]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ea:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80082ec:	6a3b      	ldr	r3, [r7, #32]
 80082ee:	2b0f      	cmp	r3, #15
 80082f0:	d916      	bls.n	8008320 <UART_SetConfig+0x508>
 80082f2:	6a3b      	ldr	r3, [r7, #32]
 80082f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082f8:	d212      	bcs.n	8008320 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80082fa:	6a3b      	ldr	r3, [r7, #32]
 80082fc:	b29b      	uxth	r3, r3
 80082fe:	f023 030f 	bic.w	r3, r3, #15
 8008302:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008304:	6a3b      	ldr	r3, [r7, #32]
 8008306:	085b      	lsrs	r3, r3, #1
 8008308:	b29b      	uxth	r3, r3
 800830a:	f003 0307 	and.w	r3, r3, #7
 800830e:	b29a      	uxth	r2, r3
 8008310:	8bfb      	ldrh	r3, [r7, #30]
 8008312:	4313      	orrs	r3, r2
 8008314:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	8bfa      	ldrh	r2, [r7, #30]
 800831c:	60da      	str	r2, [r3, #12]
 800831e:	e062      	b.n	80083e6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008320:	2301      	movs	r3, #1
 8008322:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008326:	e05e      	b.n	80083e6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008328:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800832c:	2b08      	cmp	r3, #8
 800832e:	d828      	bhi.n	8008382 <UART_SetConfig+0x56a>
 8008330:	a201      	add	r2, pc, #4	; (adr r2, 8008338 <UART_SetConfig+0x520>)
 8008332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008336:	bf00      	nop
 8008338:	0800835d 	.word	0x0800835d
 800833c:	08008365 	.word	0x08008365
 8008340:	0800836d 	.word	0x0800836d
 8008344:	08008383 	.word	0x08008383
 8008348:	08008373 	.word	0x08008373
 800834c:	08008383 	.word	0x08008383
 8008350:	08008383 	.word	0x08008383
 8008354:	08008383 	.word	0x08008383
 8008358:	0800837b 	.word	0x0800837b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800835c:	f7fc feba 	bl	80050d4 <HAL_RCC_GetPCLK1Freq>
 8008360:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008362:	e014      	b.n	800838e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008364:	f7fc fecc 	bl	8005100 <HAL_RCC_GetPCLK2Freq>
 8008368:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800836a:	e010      	b.n	800838e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800836c:	4b1a      	ldr	r3, [pc, #104]	; (80083d8 <UART_SetConfig+0x5c0>)
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008370:	e00d      	b.n	800838e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008372:	f7fc fe41 	bl	8004ff8 <HAL_RCC_GetSysClockFreq>
 8008376:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008378:	e009      	b.n	800838e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800837e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008380:	e005      	b.n	800838e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008382:	2300      	movs	r3, #0
 8008384:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800838c:	bf00      	nop
    }

    if (pclk != 0U)
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	2b00      	cmp	r3, #0
 8008392:	d028      	beq.n	80083e6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008398:	4a10      	ldr	r2, [pc, #64]	; (80083dc <UART_SetConfig+0x5c4>)
 800839a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800839e:	461a      	mov	r2, r3
 80083a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a2:	fbb3 f2f2 	udiv	r2, r3, r2
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	685b      	ldr	r3, [r3, #4]
 80083aa:	085b      	lsrs	r3, r3, #1
 80083ac:	441a      	add	r2, r3
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	685b      	ldr	r3, [r3, #4]
 80083b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	2b0f      	cmp	r3, #15
 80083bc:	d910      	bls.n	80083e0 <UART_SetConfig+0x5c8>
 80083be:	6a3b      	ldr	r3, [r7, #32]
 80083c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083c4:	d20c      	bcs.n	80083e0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	b29a      	uxth	r2, r3
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	60da      	str	r2, [r3, #12]
 80083d0:	e009      	b.n	80083e6 <UART_SetConfig+0x5ce>
 80083d2:	bf00      	nop
 80083d4:	40008000 	.word	0x40008000
 80083d8:	00f42400 	.word	0x00f42400
 80083dc:	0800c5f4 	.word	0x0800c5f4
      }
      else
      {
        ret = HAL_ERROR;
 80083e0:	2301      	movs	r3, #1
 80083e2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80083ee:	697b      	ldr	r3, [r7, #20]
 80083f0:	2201      	movs	r2, #1
 80083f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083f6:	697b      	ldr	r3, [r7, #20]
 80083f8:	2200      	movs	r2, #0
 80083fa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008402:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008406:	4618      	mov	r0, r3
 8008408:	3730      	adds	r7, #48	; 0x30
 800840a:	46bd      	mov	sp, r7
 800840c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008410:	b480      	push	{r7}
 8008412:	b083      	sub	sp, #12
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800841c:	f003 0301 	and.w	r3, r3, #1
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	430a      	orrs	r2, r1
 8008438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b00      	cmp	r3, #0
 8008444:	d00a      	beq.n	800845c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	685b      	ldr	r3, [r3, #4]
 800844c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	430a      	orrs	r2, r1
 800845a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008460:	f003 0304 	and.w	r3, r3, #4
 8008464:	2b00      	cmp	r3, #0
 8008466:	d00a      	beq.n	800847e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	685b      	ldr	r3, [r3, #4]
 800846e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	430a      	orrs	r2, r1
 800847c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008482:	f003 0308 	and.w	r3, r3, #8
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685b      	ldr	r3, [r3, #4]
 8008490:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	430a      	orrs	r2, r1
 800849e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a4:	f003 0310 	and.w	r3, r3, #16
 80084a8:	2b00      	cmp	r3, #0
 80084aa:	d00a      	beq.n	80084c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c6:	f003 0320 	and.w	r3, r3, #32
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00a      	beq.n	80084e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	430a      	orrs	r2, r1
 80084e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d01a      	beq.n	8008526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	685b      	ldr	r3, [r3, #4]
 80084f6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	430a      	orrs	r2, r1
 8008504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800850a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800850e:	d10a      	bne.n	8008526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685b      	ldr	r3, [r3, #4]
 8008516:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	430a      	orrs	r2, r1
 8008524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800852a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	685b      	ldr	r3, [r3, #4]
 8008538:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	430a      	orrs	r2, r1
 8008546:	605a      	str	r2, [r3, #4]
  }
}
 8008548:	bf00      	nop
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr

08008554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af02      	add	r7, sp, #8
 800855a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2200      	movs	r2, #0
 8008560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008564:	f7f9 ff5c 	bl	8002420 <HAL_GetTick>
 8008568:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f003 0308 	and.w	r3, r3, #8
 8008574:	2b08      	cmp	r3, #8
 8008576:	d10e      	bne.n	8008596 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008578:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800857c:	9300      	str	r3, [sp, #0]
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008586:	6878      	ldr	r0, [r7, #4]
 8008588:	f000 f82f 	bl	80085ea <UART_WaitOnFlagUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d001      	beq.n	8008596 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008592:	2303      	movs	r3, #3
 8008594:	e025      	b.n	80085e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f003 0304 	and.w	r3, r3, #4
 80085a0:	2b04      	cmp	r3, #4
 80085a2:	d10e      	bne.n	80085c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80085a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2200      	movs	r2, #0
 80085ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f000 f819 	bl	80085ea <UART_WaitOnFlagUntilTimeout>
 80085b8:	4603      	mov	r3, r0
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80085be:	2303      	movs	r3, #3
 80085c0:	e00f      	b.n	80085e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2220      	movs	r2, #32
 80085c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2220      	movs	r2, #32
 80085ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2200      	movs	r2, #0
 80085d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80085e0:	2300      	movs	r3, #0
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3710      	adds	r7, #16
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}

080085ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80085ea:	b580      	push	{r7, lr}
 80085ec:	b09c      	sub	sp, #112	; 0x70
 80085ee:	af00      	add	r7, sp, #0
 80085f0:	60f8      	str	r0, [r7, #12]
 80085f2:	60b9      	str	r1, [r7, #8]
 80085f4:	603b      	str	r3, [r7, #0]
 80085f6:	4613      	mov	r3, r2
 80085f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80085fa:	e0a9      	b.n	8008750 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80085fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008602:	f000 80a5 	beq.w	8008750 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008606:	f7f9 ff0b 	bl	8002420 <HAL_GetTick>
 800860a:	4602      	mov	r2, r0
 800860c:	683b      	ldr	r3, [r7, #0]
 800860e:	1ad3      	subs	r3, r2, r3
 8008610:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008612:	429a      	cmp	r2, r3
 8008614:	d302      	bcc.n	800861c <UART_WaitOnFlagUntilTimeout+0x32>
 8008616:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008618:	2b00      	cmp	r3, #0
 800861a:	d140      	bne.n	800869e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008622:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008624:	e853 3f00 	ldrex	r3, [r3]
 8008628:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800862a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800862c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008630:	667b      	str	r3, [r7, #100]	; 0x64
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800863a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800863c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800863e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008640:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008642:	e841 2300 	strex	r3, r2, [r1]
 8008646:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008648:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800864a:	2b00      	cmp	r3, #0
 800864c:	d1e6      	bne.n	800861c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	3308      	adds	r3, #8
 8008654:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008658:	e853 3f00 	ldrex	r3, [r3]
 800865c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800865e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008660:	f023 0301 	bic.w	r3, r3, #1
 8008664:	663b      	str	r3, [r7, #96]	; 0x60
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	3308      	adds	r3, #8
 800866c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800866e:	64ba      	str	r2, [r7, #72]	; 0x48
 8008670:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008672:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008676:	e841 2300 	strex	r3, r2, [r1]
 800867a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800867c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867e:	2b00      	cmp	r3, #0
 8008680:	d1e5      	bne.n	800864e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	2220      	movs	r2, #32
 8008686:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800869a:	2303      	movs	r3, #3
 800869c:	e069      	b.n	8008772 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	f003 0304 	and.w	r3, r3, #4
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d051      	beq.n	8008750 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80086ba:	d149      	bne.n	8008750 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80086c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ce:	e853 3f00 	ldrex	r3, [r3]
 80086d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80086d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80086da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	461a      	mov	r2, r3
 80086e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80086e4:	637b      	str	r3, [r7, #52]	; 0x34
 80086e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80086ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086ec:	e841 2300 	strex	r3, r2, [r1]
 80086f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80086f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d1e6      	bne.n	80086c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	3308      	adds	r3, #8
 80086fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008700:	697b      	ldr	r3, [r7, #20]
 8008702:	e853 3f00 	ldrex	r3, [r3]
 8008706:	613b      	str	r3, [r7, #16]
   return(result);
 8008708:	693b      	ldr	r3, [r7, #16]
 800870a:	f023 0301 	bic.w	r3, r3, #1
 800870e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3308      	adds	r3, #8
 8008716:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008718:	623a      	str	r2, [r7, #32]
 800871a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800871c:	69f9      	ldr	r1, [r7, #28]
 800871e:	6a3a      	ldr	r2, [r7, #32]
 8008720:	e841 2300 	strex	r3, r2, [r1]
 8008724:	61bb      	str	r3, [r7, #24]
   return(result);
 8008726:	69bb      	ldr	r3, [r7, #24]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d1e5      	bne.n	80086f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	2220      	movs	r2, #32
 8008730:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	2220      	movs	r2, #32
 8008738:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2220      	movs	r2, #32
 8008740:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2200      	movs	r2, #0
 8008748:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800874c:	2303      	movs	r3, #3
 800874e:	e010      	b.n	8008772 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	69da      	ldr	r2, [r3, #28]
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	4013      	ands	r3, r2
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	429a      	cmp	r2, r3
 800875e:	bf0c      	ite	eq
 8008760:	2301      	moveq	r3, #1
 8008762:	2300      	movne	r3, #0
 8008764:	b2db      	uxtb	r3, r3
 8008766:	461a      	mov	r2, r3
 8008768:	79fb      	ldrb	r3, [r7, #7]
 800876a:	429a      	cmp	r2, r3
 800876c:	f43f af46 	beq.w	80085fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008770:	2300      	movs	r3, #0
}
 8008772:	4618      	mov	r0, r3
 8008774:	3770      	adds	r7, #112	; 0x70
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
	...

0800877c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800877c:	b480      	push	{r7}
 800877e:	b0a3      	sub	sp, #140	; 0x8c
 8008780:	af00      	add	r7, sp, #0
 8008782:	60f8      	str	r0, [r7, #12]
 8008784:	60b9      	str	r1, [r7, #8]
 8008786:	4613      	mov	r3, r2
 8008788:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	68ba      	ldr	r2, [r7, #8]
 800878e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	88fa      	ldrh	r2, [r7, #6]
 8008794:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	88fa      	ldrh	r2, [r7, #6]
 800879c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2200      	movs	r2, #0
 80087a4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80087ae:	d10e      	bne.n	80087ce <UART_Start_Receive_IT+0x52>
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	691b      	ldr	r3, [r3, #16]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d105      	bne.n	80087c4 <UART_Start_Receive_IT+0x48>
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	f240 12ff 	movw	r2, #511	; 0x1ff
 80087be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087c2:	e02d      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	22ff      	movs	r2, #255	; 0xff
 80087c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087cc:	e028      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10d      	bne.n	80087f2 <UART_Start_Receive_IT+0x76>
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	691b      	ldr	r3, [r3, #16]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d104      	bne.n	80087e8 <UART_Start_Receive_IT+0x6c>
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	22ff      	movs	r2, #255	; 0xff
 80087e2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087e6:	e01b      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	227f      	movs	r2, #127	; 0x7f
 80087ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80087f0:	e016      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087fa:	d10d      	bne.n	8008818 <UART_Start_Receive_IT+0x9c>
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	691b      	ldr	r3, [r3, #16]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d104      	bne.n	800880e <UART_Start_Receive_IT+0x92>
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	227f      	movs	r2, #127	; 0x7f
 8008808:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800880c:	e008      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	223f      	movs	r2, #63	; 0x3f
 8008812:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008816:	e003      	b.n	8008820 <UART_Start_Receive_IT+0xa4>
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	2200      	movs	r2, #0
 800881c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	2200      	movs	r2, #0
 8008824:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	2222      	movs	r2, #34	; 0x22
 800882c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	3308      	adds	r3, #8
 8008836:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008838:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800883a:	e853 3f00 	ldrex	r3, [r3]
 800883e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	3308      	adds	r3, #8
 8008850:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008854:	673a      	str	r2, [r7, #112]	; 0x70
 8008856:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008858:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800885a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800885c:	e841 2300 	strex	r3, r2, [r1]
 8008860:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008862:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008864:	2b00      	cmp	r3, #0
 8008866:	d1e3      	bne.n	8008830 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800886c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008870:	d153      	bne.n	800891a <UART_Start_Receive_IT+0x19e>
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008878:	88fa      	ldrh	r2, [r7, #6]
 800887a:	429a      	cmp	r2, r3
 800887c:	d34d      	bcc.n	800891a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	689b      	ldr	r3, [r3, #8]
 8008882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008886:	d107      	bne.n	8008898 <UART_Start_Receive_IT+0x11c>
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	691b      	ldr	r3, [r3, #16]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d103      	bne.n	8008898 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	4a4b      	ldr	r2, [pc, #300]	; (80089c0 <UART_Start_Receive_IT+0x244>)
 8008894:	671a      	str	r2, [r3, #112]	; 0x70
 8008896:	e002      	b.n	800889e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	4a4a      	ldr	r2, [pc, #296]	; (80089c4 <UART_Start_Receive_IT+0x248>)
 800889c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2200      	movs	r2, #0
 80088a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d01a      	beq.n	80088e4 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80088b6:	e853 3f00 	ldrex	r3, [r3]
 80088ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80088bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80088c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	461a      	mov	r2, r3
 80088cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80088d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088d2:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088d4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80088d6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80088d8:	e841 2300 	strex	r3, r2, [r1]
 80088dc:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80088de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d1e4      	bne.n	80088ae <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	3308      	adds	r3, #8
 80088ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80088ee:	e853 3f00 	ldrex	r3, [r3]
 80088f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80088f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80088fa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	3308      	adds	r3, #8
 8008902:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008904:	64ba      	str	r2, [r7, #72]	; 0x48
 8008906:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008908:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800890a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800890c:	e841 2300 	strex	r3, r2, [r1]
 8008910:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008914:	2b00      	cmp	r3, #0
 8008916:	d1e5      	bne.n	80088e4 <UART_Start_Receive_IT+0x168>
 8008918:	e04a      	b.n	80089b0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	689b      	ldr	r3, [r3, #8]
 800891e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008922:	d107      	bne.n	8008934 <UART_Start_Receive_IT+0x1b8>
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	691b      	ldr	r3, [r3, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d103      	bne.n	8008934 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	4a26      	ldr	r2, [pc, #152]	; (80089c8 <UART_Start_Receive_IT+0x24c>)
 8008930:	671a      	str	r2, [r3, #112]	; 0x70
 8008932:	e002      	b.n	800893a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	4a25      	ldr	r2, [pc, #148]	; (80089cc <UART_Start_Receive_IT+0x250>)
 8008938:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	691b      	ldr	r3, [r3, #16]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d019      	beq.n	800897e <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008952:	e853 3f00 	ldrex	r3, [r3]
 8008956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800895a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800895e:	677b      	str	r3, [r7, #116]	; 0x74
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	461a      	mov	r2, r3
 8008966:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008968:	637b      	str	r3, [r7, #52]	; 0x34
 800896a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800896c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800896e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008970:	e841 2300 	strex	r3, r2, [r1]
 8008974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008978:	2b00      	cmp	r3, #0
 800897a:	d1e6      	bne.n	800894a <UART_Start_Receive_IT+0x1ce>
 800897c:	e018      	b.n	80089b0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	e853 3f00 	ldrex	r3, [r3]
 800898a:	613b      	str	r3, [r7, #16]
   return(result);
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f043 0320 	orr.w	r3, r3, #32
 8008992:	67bb      	str	r3, [r7, #120]	; 0x78
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	461a      	mov	r2, r3
 800899a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800899c:	623b      	str	r3, [r7, #32]
 800899e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089a0:	69f9      	ldr	r1, [r7, #28]
 80089a2:	6a3a      	ldr	r2, [r7, #32]
 80089a4:	e841 2300 	strex	r3, r2, [r1]
 80089a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d1e6      	bne.n	800897e <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 80089b0:	2300      	movs	r3, #0
}
 80089b2:	4618      	mov	r0, r3
 80089b4:	378c      	adds	r7, #140	; 0x8c
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	080090d9 	.word	0x080090d9
 80089c4:	08008de1 	.word	0x08008de1
 80089c8:	08008c7f 	.word	0x08008c7f
 80089cc:	08008b1f 	.word	0x08008b1f

080089d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b095      	sub	sp, #84	; 0x54
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089e0:	e853 3f00 	ldrex	r3, [r3]
 80089e4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80089e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80089ec:	64fb      	str	r3, [r7, #76]	; 0x4c
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	461a      	mov	r2, r3
 80089f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80089f6:	643b      	str	r3, [r7, #64]	; 0x40
 80089f8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80089fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80089fe:	e841 2300 	strex	r3, r2, [r1]
 8008a02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d1e6      	bne.n	80089d8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	3308      	adds	r3, #8
 8008a10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a12:	6a3b      	ldr	r3, [r7, #32]
 8008a14:	e853 3f00 	ldrex	r3, [r3]
 8008a18:	61fb      	str	r3, [r7, #28]
   return(result);
 8008a1a:	69fb      	ldr	r3, [r7, #28]
 8008a1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a20:	f023 0301 	bic.w	r3, r3, #1
 8008a24:	64bb      	str	r3, [r7, #72]	; 0x48
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3308      	adds	r3, #8
 8008a2c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008a2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008a30:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008a34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a36:	e841 2300 	strex	r3, r2, [r1]
 8008a3a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d1e3      	bne.n	8008a0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	d118      	bne.n	8008a7c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	e853 3f00 	ldrex	r3, [r3]
 8008a56:	60bb      	str	r3, [r7, #8]
   return(result);
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	f023 0310 	bic.w	r3, r3, #16
 8008a5e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	461a      	mov	r2, r3
 8008a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a68:	61bb      	str	r3, [r7, #24]
 8008a6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6979      	ldr	r1, [r7, #20]
 8008a6e:	69ba      	ldr	r2, [r7, #24]
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	613b      	str	r3, [r7, #16]
   return(result);
 8008a76:	693b      	ldr	r3, [r7, #16]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e6      	bne.n	8008a4a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2200      	movs	r2, #0
 8008a88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008a90:	bf00      	nop
 8008a92:	3754      	adds	r7, #84	; 0x54
 8008a94:	46bd      	mov	sp, r7
 8008a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9a:	4770      	bx	lr

08008a9c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b084      	sub	sp, #16
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008aa8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	2200      	movs	r2, #0
 8008aae:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008aba:	68f8      	ldr	r0, [r7, #12]
 8008abc:	f7ff f996 	bl	8007dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008ac0:	bf00      	nop
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008ac8:	b580      	push	{r7, lr}
 8008aca:	b088      	sub	sp, #32
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	e853 3f00 	ldrex	r3, [r3]
 8008adc:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ade:	68bb      	ldr	r3, [r7, #8]
 8008ae0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ae4:	61fb      	str	r3, [r7, #28]
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	461a      	mov	r2, r3
 8008aec:	69fb      	ldr	r3, [r7, #28]
 8008aee:	61bb      	str	r3, [r7, #24]
 8008af0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008af2:	6979      	ldr	r1, [r7, #20]
 8008af4:	69ba      	ldr	r2, [r7, #24]
 8008af6:	e841 2300 	strex	r3, r2, [r1]
 8008afa:	613b      	str	r3, [r7, #16]
   return(result);
 8008afc:	693b      	ldr	r3, [r7, #16]
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d1e6      	bne.n	8008ad0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	2220      	movs	r2, #32
 8008b06:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2200      	movs	r2, #0
 8008b0e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008b10:	6878      	ldr	r0, [r7, #4]
 8008b12:	f7ff f961 	bl	8007dd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b16:	bf00      	nop
 8008b18:	3720      	adds	r7, #32
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b096      	sub	sp, #88	; 0x58
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008b2c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b36:	2b22      	cmp	r3, #34	; 0x22
 8008b38:	f040 8095 	bne.w	8008c66 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b42:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008b46:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008b4a:	b2d9      	uxtb	r1, r3
 8008b4c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008b50:	b2da      	uxtb	r2, r3
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b56:	400a      	ands	r2, r1
 8008b58:	b2d2      	uxtb	r2, r2
 8008b5a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b29a      	uxth	r2, r3
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b7e:	b29b      	uxth	r3, r3
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d178      	bne.n	8008c76 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b94:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008b98:	653b      	str	r3, [r7, #80]	; 0x50
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	461a      	mov	r2, r3
 8008ba0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ba2:	647b      	str	r3, [r7, #68]	; 0x44
 8008ba4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008ba8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e6      	bne.n	8008b84 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3308      	adds	r3, #8
 8008bbc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bc0:	e853 3f00 	ldrex	r3, [r3]
 8008bc4:	623b      	str	r3, [r7, #32]
   return(result);
 8008bc6:	6a3b      	ldr	r3, [r7, #32]
 8008bc8:	f023 0301 	bic.w	r3, r3, #1
 8008bcc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	3308      	adds	r3, #8
 8008bd4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008bd6:	633a      	str	r2, [r7, #48]	; 0x30
 8008bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bde:	e841 2300 	strex	r3, r2, [r1]
 8008be2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d1e5      	bne.n	8008bb6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2220      	movs	r2, #32
 8008bee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d12e      	bne.n	8008c5e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	2200      	movs	r2, #0
 8008c04:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	e853 3f00 	ldrex	r3, [r3]
 8008c12:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	f023 0310 	bic.w	r3, r3, #16
 8008c1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	461a      	mov	r2, r3
 8008c22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008c24:	61fb      	str	r3, [r7, #28]
 8008c26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c28:	69b9      	ldr	r1, [r7, #24]
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	e841 2300 	strex	r3, r2, [r1]
 8008c30:	617b      	str	r3, [r7, #20]
   return(result);
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d1e6      	bne.n	8008c06 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	69db      	ldr	r3, [r3, #28]
 8008c3e:	f003 0310 	and.w	r3, r3, #16
 8008c42:	2b10      	cmp	r3, #16
 8008c44:	d103      	bne.n	8008c4e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2210      	movs	r2, #16
 8008c4c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008c54:	4619      	mov	r1, r3
 8008c56:	6878      	ldr	r0, [r7, #4]
 8008c58:	f7ff f8d2 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008c5c:	e00b      	b.n	8008c76 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008c5e:	6878      	ldr	r0, [r7, #4]
 8008c60:	f7f8 fe8c 	bl	800197c <HAL_UART_RxCpltCallback>
}
 8008c64:	e007      	b.n	8008c76 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	699a      	ldr	r2, [r3, #24]
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f042 0208 	orr.w	r2, r2, #8
 8008c74:	619a      	str	r2, [r3, #24]
}
 8008c76:	bf00      	nop
 8008c78:	3758      	adds	r7, #88	; 0x58
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	bd80      	pop	{r7, pc}

08008c7e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008c7e:	b580      	push	{r7, lr}
 8008c80:	b096      	sub	sp, #88	; 0x58
 8008c82:	af00      	add	r7, sp, #0
 8008c84:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008c8c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008c96:	2b22      	cmp	r3, #34	; 0x22
 8008c98:	f040 8095 	bne.w	8008dc6 <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ca2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008caa:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008cac:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008cb0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008cb4:	4013      	ands	r3, r2
 8008cb6:	b29a      	uxth	r2, r3
 8008cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cba:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008cc0:	1c9a      	adds	r2, r3, #2
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ccc:	b29b      	uxth	r3, r3
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	b29a      	uxth	r2, r3
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d178      	bne.n	8008dd6 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cf4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d02:	643b      	str	r3, [r7, #64]	; 0x40
 8008d04:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008d08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3308      	adds	r3, #8
 8008d1c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d1e:	6a3b      	ldr	r3, [r7, #32]
 8008d20:	e853 3f00 	ldrex	r3, [r3]
 8008d24:	61fb      	str	r3, [r7, #28]
   return(result);
 8008d26:	69fb      	ldr	r3, [r7, #28]
 8008d28:	f023 0301 	bic.w	r3, r3, #1
 8008d2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d38:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d3a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008d3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008d3e:	e841 2300 	strex	r3, r2, [r1]
 8008d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1e5      	bne.n	8008d16 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2220      	movs	r2, #32
 8008d4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	2200      	movs	r2, #0
 8008d56:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d5c:	2b01      	cmp	r3, #1
 8008d5e:	d12e      	bne.n	8008dbe <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2200      	movs	r2, #0
 8008d64:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	e853 3f00 	ldrex	r3, [r3]
 8008d72:	60bb      	str	r3, [r7, #8]
   return(result);
 8008d74:	68bb      	ldr	r3, [r7, #8]
 8008d76:	f023 0310 	bic.w	r3, r3, #16
 8008d7a:	647b      	str	r3, [r7, #68]	; 0x44
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	461a      	mov	r2, r3
 8008d82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d84:	61bb      	str	r3, [r7, #24]
 8008d86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d88:	6979      	ldr	r1, [r7, #20]
 8008d8a:	69ba      	ldr	r2, [r7, #24]
 8008d8c:	e841 2300 	strex	r3, r2, [r1]
 8008d90:	613b      	str	r3, [r7, #16]
   return(result);
 8008d92:	693b      	ldr	r3, [r7, #16]
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d1e6      	bne.n	8008d66 <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	69db      	ldr	r3, [r3, #28]
 8008d9e:	f003 0310 	and.w	r3, r3, #16
 8008da2:	2b10      	cmp	r3, #16
 8008da4:	d103      	bne.n	8008dae <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2210      	movs	r2, #16
 8008dac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff f822 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008dbc:	e00b      	b.n	8008dd6 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7f8 fddc 	bl	800197c <HAL_UART_RxCpltCallback>
}
 8008dc4:	e007      	b.n	8008dd6 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	699a      	ldr	r2, [r3, #24]
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	f042 0208 	orr.w	r2, r2, #8
 8008dd4:	619a      	str	r2, [r3, #24]
}
 8008dd6:	bf00      	nop
 8008dd8:	3758      	adds	r7, #88	; 0x58
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd80      	pop	{r7, pc}
	...

08008de0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b0a6      	sub	sp, #152	; 0x98
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008dee:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	69db      	ldr	r3, [r3, #28]
 8008df8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	689b      	ldr	r3, [r3, #8]
 8008e0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008e16:	2b22      	cmp	r3, #34	; 0x22
 8008e18:	f040 814f 	bne.w	80090ba <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008e22:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008e26:	e0f6      	b.n	8009016 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e2e:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e32:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8008e36:	b2d9      	uxtb	r1, r3
 8008e38:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e42:	400a      	ands	r2, r1
 8008e44:	b2d2      	uxtb	r2, r2
 8008e46:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e4c:	1c5a      	adds	r2, r3, #1
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008e58:	b29b      	uxth	r3, r3
 8008e5a:	3b01      	subs	r3, #1
 8008e5c:	b29a      	uxth	r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	69db      	ldr	r3, [r3, #28]
 8008e6a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8008e6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e72:	f003 0307 	and.w	r3, r3, #7
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d053      	beq.n	8008f22 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008e7a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008e7e:	f003 0301 	and.w	r3, r3, #1
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d011      	beq.n	8008eaa <UART_RxISR_8BIT_FIFOEN+0xca>
 8008e86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d00b      	beq.n	8008eaa <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2201      	movs	r2, #1
 8008e98:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ea0:	f043 0201 	orr.w	r2, r3, #1
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eaa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d011      	beq.n	8008eda <UART_RxISR_8BIT_FIFOEN+0xfa>
 8008eb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008eba:	f003 0301 	and.w	r3, r3, #1
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d00b      	beq.n	8008eda <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008ed0:	f043 0204 	orr.w	r2, r3, #4
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008eda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8008ede:	f003 0304 	and.w	r3, r3, #4
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d011      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x12a>
 8008ee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008eea:	f003 0301 	and.w	r3, r3, #1
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00b      	beq.n	8008f0a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f00:	f043 0202 	orr.w	r2, r3, #2
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d006      	beq.n	8008f22 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f7fe ff69 	bl	8007dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008f28:	b29b      	uxth	r3, r3
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d173      	bne.n	8009016 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8008f3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008f3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008f42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008f50:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f52:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f54:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8008f56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008f58:	e841 2300 	strex	r3, r2, [r1]
 8008f5c:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008f5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d1e4      	bne.n	8008f2e <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	3308      	adds	r3, #8
 8008f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f6e:	e853 3f00 	ldrex	r3, [r3]
 8008f72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8008f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f76:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f7a:	f023 0301 	bic.w	r3, r3, #1
 8008f7e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	3308      	adds	r3, #8
 8008f86:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008f88:	657a      	str	r2, [r7, #84]	; 0x54
 8008f8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f8c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8008f8e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008f90:	e841 2300 	strex	r3, r2, [r1]
 8008f94:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008f96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d1e3      	bne.n	8008f64 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2220      	movs	r2, #32
 8008fa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008fae:	2b01      	cmp	r3, #1
 8008fb0:	d12e      	bne.n	8009010 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fc8:	f023 0310 	bic.w	r3, r3, #16
 8008fcc:	67bb      	str	r3, [r7, #120]	; 0x78
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	461a      	mov	r2, r3
 8008fd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008fd6:	643b      	str	r3, [r7, #64]	; 0x40
 8008fd8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008fdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008fde:	e841 2300 	strex	r3, r2, [r1]
 8008fe2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1e6      	bne.n	8008fb8 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	69db      	ldr	r3, [r3, #28]
 8008ff0:	f003 0310 	and.w	r3, r3, #16
 8008ff4:	2b10      	cmp	r3, #16
 8008ff6:	d103      	bne.n	8009000 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	2210      	movs	r2, #16
 8008ffe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f7fe fef9 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
 800900e:	e002      	b.n	8009016 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7f8 fcb3 	bl	800197c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009016:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800901a:	2b00      	cmp	r3, #0
 800901c:	d006      	beq.n	800902c <UART_RxISR_8BIT_FIFOEN+0x24c>
 800901e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009022:	f003 0320 	and.w	r3, r3, #32
 8009026:	2b00      	cmp	r3, #0
 8009028:	f47f aefe 	bne.w	8008e28 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009032:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009036:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800903a:	2b00      	cmp	r3, #0
 800903c:	d045      	beq.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009044:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8009048:	429a      	cmp	r2, r3
 800904a:	d23e      	bcs.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	3308      	adds	r3, #8
 8009052:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009054:	6a3b      	ldr	r3, [r7, #32]
 8009056:	e853 3f00 	ldrex	r3, [r3]
 800905a:	61fb      	str	r3, [r7, #28]
   return(result);
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009062:	673b      	str	r3, [r7, #112]	; 0x70
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	3308      	adds	r3, #8
 800906a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800906c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800906e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009070:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009074:	e841 2300 	strex	r3, r2, [r1]
 8009078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800907a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907c:	2b00      	cmp	r3, #0
 800907e:	d1e5      	bne.n	800904c <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	4a14      	ldr	r2, [pc, #80]	; (80090d4 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009084:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	e853 3f00 	ldrex	r3, [r3]
 8009092:	60bb      	str	r3, [r7, #8]
   return(result);
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	f043 0320 	orr.w	r3, r3, #32
 800909a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	461a      	mov	r2, r3
 80090a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090a4:	61bb      	str	r3, [r7, #24]
 80090a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090a8:	6979      	ldr	r1, [r7, #20]
 80090aa:	69ba      	ldr	r2, [r7, #24]
 80090ac:	e841 2300 	strex	r3, r2, [r1]
 80090b0:	613b      	str	r3, [r7, #16]
   return(result);
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1e6      	bne.n	8009086 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80090b8:	e007      	b.n	80090ca <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	699a      	ldr	r2, [r3, #24]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0208 	orr.w	r2, r2, #8
 80090c8:	619a      	str	r2, [r3, #24]
}
 80090ca:	bf00      	nop
 80090cc:	3798      	adds	r7, #152	; 0x98
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}
 80090d2:	bf00      	nop
 80090d4:	08008b1f 	.word	0x08008b1f

080090d8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b0a8      	sub	sp, #160	; 0xa0
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80090e6:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800910e:	2b22      	cmp	r3, #34	; 0x22
 8009110:	f040 8153 	bne.w	80093ba <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800911a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800911e:	e0fa      	b.n	8009316 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009126:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800912e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009132:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8009136:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800913a:	4013      	ands	r3, r2
 800913c:	b29a      	uxth	r2, r3
 800913e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009142:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009148:	1c9a      	adds	r2, r3, #2
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009154:	b29b      	uxth	r3, r3
 8009156:	3b01      	subs	r3, #1
 8009158:	b29a      	uxth	r2, r3
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	69db      	ldr	r3, [r3, #28]
 8009166:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800916a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800916e:	f003 0307 	and.w	r3, r3, #7
 8009172:	2b00      	cmp	r3, #0
 8009174:	d053      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009176:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800917a:	f003 0301 	and.w	r3, r3, #1
 800917e:	2b00      	cmp	r3, #0
 8009180:	d011      	beq.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8009182:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800918a:	2b00      	cmp	r3, #0
 800918c:	d00b      	beq.n	80091a6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2201      	movs	r2, #1
 8009194:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800919c:	f043 0201 	orr.w	r2, r3, #1
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091a6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091aa:	f003 0302 	and.w	r3, r3, #2
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d011      	beq.n	80091d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80091b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d00b      	beq.n	80091d6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	2202      	movs	r2, #2
 80091c4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091cc:	f043 0204 	orr.w	r2, r3, #4
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80091d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091da:	f003 0304 	and.w	r3, r3, #4
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d011      	beq.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80091e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d00b      	beq.n	8009206 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2204      	movs	r2, #4
 80091f4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fc:	f043 0202 	orr.w	r2, r3, #2
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800920c:	2b00      	cmp	r3, #0
 800920e:	d006      	beq.n	800921e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009210:	6878      	ldr	r0, [r7, #4]
 8009212:	f7fe fdeb 	bl	8007dec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2200      	movs	r2, #0
 800921a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009224:	b29b      	uxth	r3, r3
 8009226:	2b00      	cmp	r3, #0
 8009228:	d175      	bne.n	8009316 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009230:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009232:	e853 3f00 	ldrex	r3, [r3]
 8009236:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009238:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800923a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800923e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	461a      	mov	r2, r3
 8009248:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800924c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800924e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009250:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009252:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009254:	e841 2300 	strex	r3, r2, [r1]
 8009258:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800925a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800925c:	2b00      	cmp	r3, #0
 800925e:	d1e4      	bne.n	800922a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009270:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009276:	f023 0301 	bic.w	r3, r3, #1
 800927a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	3308      	adds	r3, #8
 8009284:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009288:	65ba      	str	r2, [r7, #88]	; 0x58
 800928a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800928c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800928e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009290:	e841 2300 	strex	r3, r2, [r1]
 8009294:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009296:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1e1      	bne.n	8009260 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2220      	movs	r2, #32
 80092a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2200      	movs	r2, #0
 80092a8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d12e      	bne.n	8009310 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092c8:	f023 0310 	bic.w	r3, r3, #16
 80092cc:	67fb      	str	r3, [r7, #124]	; 0x7c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092d6:	647b      	str	r3, [r7, #68]	; 0x44
 80092d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80092dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092de:	e841 2300 	strex	r3, r2, [r1]
 80092e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80092e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d1e6      	bne.n	80092b8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f003 0310 	and.w	r3, r3, #16
 80092f4:	2b10      	cmp	r3, #16
 80092f6:	d103      	bne.n	8009300 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2210      	movs	r2, #16
 80092fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009306:	4619      	mov	r1, r3
 8009308:	6878      	ldr	r0, [r7, #4]
 800930a:	f7fe fd79 	bl	8007e00 <HAL_UARTEx_RxEventCallback>
 800930e:	e002      	b.n	8009316 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009310:	6878      	ldr	r0, [r7, #4]
 8009312:	f7f8 fb33 	bl	800197c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009316:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800931a:	2b00      	cmp	r3, #0
 800931c:	d006      	beq.n	800932c <UART_RxISR_16BIT_FIFOEN+0x254>
 800931e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009322:	f003 0320 	and.w	r3, r3, #32
 8009326:	2b00      	cmp	r3, #0
 8009328:	f47f aefa 	bne.w	8009120 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009332:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009336:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800933a:	2b00      	cmp	r3, #0
 800933c:	d045      	beq.n	80093ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009344:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009348:	429a      	cmp	r2, r3
 800934a:	d23e      	bcs.n	80093ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3308      	adds	r3, #8
 8009352:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009356:	e853 3f00 	ldrex	r3, [r3]
 800935a:	623b      	str	r3, [r7, #32]
   return(result);
 800935c:	6a3b      	ldr	r3, [r7, #32]
 800935e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009362:	677b      	str	r3, [r7, #116]	; 0x74
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	3308      	adds	r3, #8
 800936a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800936c:	633a      	str	r2, [r7, #48]	; 0x30
 800936e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009370:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009372:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009374:	e841 2300 	strex	r3, r2, [r1]
 8009378:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800937a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800937c:	2b00      	cmp	r3, #0
 800937e:	d1e5      	bne.n	800934c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	4a14      	ldr	r2, [pc, #80]	; (80093d4 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009384:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800938c:	693b      	ldr	r3, [r7, #16]
 800938e:	e853 3f00 	ldrex	r3, [r3]
 8009392:	60fb      	str	r3, [r7, #12]
   return(result);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	f043 0320 	orr.w	r3, r3, #32
 800939a:	673b      	str	r3, [r7, #112]	; 0x70
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	461a      	mov	r2, r3
 80093a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80093a4:	61fb      	str	r3, [r7, #28]
 80093a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a8:	69b9      	ldr	r1, [r7, #24]
 80093aa:	69fa      	ldr	r2, [r7, #28]
 80093ac:	e841 2300 	strex	r3, r2, [r1]
 80093b0:	617b      	str	r3, [r7, #20]
   return(result);
 80093b2:	697b      	ldr	r3, [r7, #20]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1e6      	bne.n	8009386 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093b8:	e007      	b.n	80093ca <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	699a      	ldr	r2, [r3, #24]
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	f042 0208 	orr.w	r2, r2, #8
 80093c8:	619a      	str	r2, [r3, #24]
}
 80093ca:	bf00      	nop
 80093cc:	37a0      	adds	r7, #160	; 0xa0
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bd80      	pop	{r7, pc}
 80093d2:	bf00      	nop
 80093d4:	08008c7f 	.word	0x08008c7f

080093d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093d8:	b480      	push	{r7}
 80093da:	b083      	sub	sp, #12
 80093dc:	af00      	add	r7, sp, #0
 80093de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093e0:	bf00      	nop
 80093e2:	370c      	adds	r7, #12
 80093e4:	46bd      	mov	sp, r7
 80093e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ea:	4770      	bx	lr

080093ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093ec:	b480      	push	{r7}
 80093ee:	b083      	sub	sp, #12
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093f4:	bf00      	nop
 80093f6:	370c      	adds	r7, #12
 80093f8:	46bd      	mov	sp, r7
 80093fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fe:	4770      	bx	lr

08009400 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009400:	b480      	push	{r7}
 8009402:	b083      	sub	sp, #12
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009408:	bf00      	nop
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr

08009414 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009414:	b480      	push	{r7}
 8009416:	b085      	sub	sp, #20
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009422:	2b01      	cmp	r3, #1
 8009424:	d101      	bne.n	800942a <HAL_UARTEx_DisableFifoMode+0x16>
 8009426:	2302      	movs	r3, #2
 8009428:	e027      	b.n	800947a <HAL_UARTEx_DisableFifoMode+0x66>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2201      	movs	r2, #1
 800942e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	2224      	movs	r2, #36	; 0x24
 8009436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	681a      	ldr	r2, [r3, #0]
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f022 0201 	bic.w	r2, r2, #1
 8009450:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009458:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	2200      	movs	r2, #0
 800945e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	68fa      	ldr	r2, [r7, #12]
 8009466:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2220      	movs	r2, #32
 800946c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2200      	movs	r2, #0
 8009474:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3714      	adds	r7, #20
 800947e:	46bd      	mov	sp, r7
 8009480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009484:	4770      	bx	lr

08009486 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009486:	b580      	push	{r7, lr}
 8009488:	b084      	sub	sp, #16
 800948a:	af00      	add	r7, sp, #0
 800948c:	6078      	str	r0, [r7, #4]
 800948e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009496:	2b01      	cmp	r3, #1
 8009498:	d101      	bne.n	800949e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800949a:	2302      	movs	r3, #2
 800949c:	e02d      	b.n	80094fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2201      	movs	r2, #1
 80094a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2224      	movs	r2, #36	; 0x24
 80094aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f022 0201 	bic.w	r2, r2, #1
 80094c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	689b      	ldr	r3, [r3, #8]
 80094cc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	430a      	orrs	r2, r1
 80094d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 f850 	bl	8009580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80094f8:	2300      	movs	r3, #0
}
 80094fa:	4618      	mov	r0, r3
 80094fc:	3710      	adds	r7, #16
 80094fe:	46bd      	mov	sp, r7
 8009500:	bd80      	pop	{r7, pc}

08009502 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009502:	b580      	push	{r7, lr}
 8009504:	b084      	sub	sp, #16
 8009506:	af00      	add	r7, sp, #0
 8009508:	6078      	str	r0, [r7, #4]
 800950a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009512:	2b01      	cmp	r3, #1
 8009514:	d101      	bne.n	800951a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009516:	2302      	movs	r3, #2
 8009518:	e02d      	b.n	8009576 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2224      	movs	r2, #36	; 0x24
 8009526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	f022 0201 	bic.w	r2, r2, #1
 8009540:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	683a      	ldr	r2, [r7, #0]
 8009552:	430a      	orrs	r2, r1
 8009554:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f812 	bl	8009580 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68fa      	ldr	r2, [r7, #12]
 8009562:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2220      	movs	r2, #32
 8009568:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	2200      	movs	r2, #0
 8009570:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009574:	2300      	movs	r3, #0
}
 8009576:	4618      	mov	r0, r3
 8009578:	3710      	adds	r7, #16
 800957a:	46bd      	mov	sp, r7
 800957c:	bd80      	pop	{r7, pc}
	...

08009580 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800958c:	2b00      	cmp	r3, #0
 800958e:	d108      	bne.n	80095a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2201      	movs	r2, #1
 800959c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095a0:	e031      	b.n	8009606 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095a2:	2308      	movs	r3, #8
 80095a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095a6:	2308      	movs	r3, #8
 80095a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	0e5b      	lsrs	r3, r3, #25
 80095b2:	b2db      	uxtb	r3, r3
 80095b4:	f003 0307 	and.w	r3, r3, #7
 80095b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	689b      	ldr	r3, [r3, #8]
 80095c0:	0f5b      	lsrs	r3, r3, #29
 80095c2:	b2db      	uxtb	r3, r3
 80095c4:	f003 0307 	and.w	r3, r3, #7
 80095c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095ca:	7bbb      	ldrb	r3, [r7, #14]
 80095cc:	7b3a      	ldrb	r2, [r7, #12]
 80095ce:	4911      	ldr	r1, [pc, #68]	; (8009614 <UARTEx_SetNbDataToProcess+0x94>)
 80095d0:	5c8a      	ldrb	r2, [r1, r2]
 80095d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095d6:	7b3a      	ldrb	r2, [r7, #12]
 80095d8:	490f      	ldr	r1, [pc, #60]	; (8009618 <UARTEx_SetNbDataToProcess+0x98>)
 80095da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80095e0:	b29a      	uxth	r2, r3
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095e8:	7bfb      	ldrb	r3, [r7, #15]
 80095ea:	7b7a      	ldrb	r2, [r7, #13]
 80095ec:	4909      	ldr	r1, [pc, #36]	; (8009614 <UARTEx_SetNbDataToProcess+0x94>)
 80095ee:	5c8a      	ldrb	r2, [r1, r2]
 80095f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095f4:	7b7a      	ldrb	r2, [r7, #13]
 80095f6:	4908      	ldr	r1, [pc, #32]	; (8009618 <UARTEx_SetNbDataToProcess+0x98>)
 80095f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80095fe:	b29a      	uxth	r2, r3
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009606:	bf00      	nop
 8009608:	3714      	adds	r7, #20
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	0800c60c 	.word	0x0800c60c
 8009618:	0800c614 	.word	0x0800c614

0800961c <atoi>:
 800961c:	220a      	movs	r2, #10
 800961e:	2100      	movs	r1, #0
 8009620:	f000 b882 	b.w	8009728 <strtol>

08009624 <_strtol_l.constprop.0>:
 8009624:	2b01      	cmp	r3, #1
 8009626:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800962a:	d001      	beq.n	8009630 <_strtol_l.constprop.0+0xc>
 800962c:	2b24      	cmp	r3, #36	; 0x24
 800962e:	d906      	bls.n	800963e <_strtol_l.constprop.0+0x1a>
 8009630:	f000 fee0 	bl	800a3f4 <__errno>
 8009634:	2316      	movs	r3, #22
 8009636:	6003      	str	r3, [r0, #0]
 8009638:	2000      	movs	r0, #0
 800963a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800963e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009724 <_strtol_l.constprop.0+0x100>
 8009642:	460d      	mov	r5, r1
 8009644:	462e      	mov	r6, r5
 8009646:	f815 4b01 	ldrb.w	r4, [r5], #1
 800964a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800964e:	f017 0708 	ands.w	r7, r7, #8
 8009652:	d1f7      	bne.n	8009644 <_strtol_l.constprop.0+0x20>
 8009654:	2c2d      	cmp	r4, #45	; 0x2d
 8009656:	d132      	bne.n	80096be <_strtol_l.constprop.0+0x9a>
 8009658:	782c      	ldrb	r4, [r5, #0]
 800965a:	2701      	movs	r7, #1
 800965c:	1cb5      	adds	r5, r6, #2
 800965e:	2b00      	cmp	r3, #0
 8009660:	d05b      	beq.n	800971a <_strtol_l.constprop.0+0xf6>
 8009662:	2b10      	cmp	r3, #16
 8009664:	d109      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 8009666:	2c30      	cmp	r4, #48	; 0x30
 8009668:	d107      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 800966a:	782c      	ldrb	r4, [r5, #0]
 800966c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009670:	2c58      	cmp	r4, #88	; 0x58
 8009672:	d14d      	bne.n	8009710 <_strtol_l.constprop.0+0xec>
 8009674:	786c      	ldrb	r4, [r5, #1]
 8009676:	2310      	movs	r3, #16
 8009678:	3502      	adds	r5, #2
 800967a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800967e:	f108 38ff 	add.w	r8, r8, #4294967295
 8009682:	f04f 0e00 	mov.w	lr, #0
 8009686:	fbb8 f9f3 	udiv	r9, r8, r3
 800968a:	4676      	mov	r6, lr
 800968c:	fb03 8a19 	mls	sl, r3, r9, r8
 8009690:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009694:	f1bc 0f09 	cmp.w	ip, #9
 8009698:	d816      	bhi.n	80096c8 <_strtol_l.constprop.0+0xa4>
 800969a:	4664      	mov	r4, ip
 800969c:	42a3      	cmp	r3, r4
 800969e:	dd24      	ble.n	80096ea <_strtol_l.constprop.0+0xc6>
 80096a0:	f1be 3fff 	cmp.w	lr, #4294967295
 80096a4:	d008      	beq.n	80096b8 <_strtol_l.constprop.0+0x94>
 80096a6:	45b1      	cmp	r9, r6
 80096a8:	d31c      	bcc.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096aa:	d101      	bne.n	80096b0 <_strtol_l.constprop.0+0x8c>
 80096ac:	45a2      	cmp	sl, r4
 80096ae:	db19      	blt.n	80096e4 <_strtol_l.constprop.0+0xc0>
 80096b0:	fb06 4603 	mla	r6, r6, r3, r4
 80096b4:	f04f 0e01 	mov.w	lr, #1
 80096b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096bc:	e7e8      	b.n	8009690 <_strtol_l.constprop.0+0x6c>
 80096be:	2c2b      	cmp	r4, #43	; 0x2b
 80096c0:	bf04      	itt	eq
 80096c2:	782c      	ldrbeq	r4, [r5, #0]
 80096c4:	1cb5      	addeq	r5, r6, #2
 80096c6:	e7ca      	b.n	800965e <_strtol_l.constprop.0+0x3a>
 80096c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80096cc:	f1bc 0f19 	cmp.w	ip, #25
 80096d0:	d801      	bhi.n	80096d6 <_strtol_l.constprop.0+0xb2>
 80096d2:	3c37      	subs	r4, #55	; 0x37
 80096d4:	e7e2      	b.n	800969c <_strtol_l.constprop.0+0x78>
 80096d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80096da:	f1bc 0f19 	cmp.w	ip, #25
 80096de:	d804      	bhi.n	80096ea <_strtol_l.constprop.0+0xc6>
 80096e0:	3c57      	subs	r4, #87	; 0x57
 80096e2:	e7db      	b.n	800969c <_strtol_l.constprop.0+0x78>
 80096e4:	f04f 3eff 	mov.w	lr, #4294967295
 80096e8:	e7e6      	b.n	80096b8 <_strtol_l.constprop.0+0x94>
 80096ea:	f1be 3fff 	cmp.w	lr, #4294967295
 80096ee:	d105      	bne.n	80096fc <_strtol_l.constprop.0+0xd8>
 80096f0:	2322      	movs	r3, #34	; 0x22
 80096f2:	6003      	str	r3, [r0, #0]
 80096f4:	4646      	mov	r6, r8
 80096f6:	b942      	cbnz	r2, 800970a <_strtol_l.constprop.0+0xe6>
 80096f8:	4630      	mov	r0, r6
 80096fa:	e79e      	b.n	800963a <_strtol_l.constprop.0+0x16>
 80096fc:	b107      	cbz	r7, 8009700 <_strtol_l.constprop.0+0xdc>
 80096fe:	4276      	negs	r6, r6
 8009700:	2a00      	cmp	r2, #0
 8009702:	d0f9      	beq.n	80096f8 <_strtol_l.constprop.0+0xd4>
 8009704:	f1be 0f00 	cmp.w	lr, #0
 8009708:	d000      	beq.n	800970c <_strtol_l.constprop.0+0xe8>
 800970a:	1e69      	subs	r1, r5, #1
 800970c:	6011      	str	r1, [r2, #0]
 800970e:	e7f3      	b.n	80096f8 <_strtol_l.constprop.0+0xd4>
 8009710:	2430      	movs	r4, #48	; 0x30
 8009712:	2b00      	cmp	r3, #0
 8009714:	d1b1      	bne.n	800967a <_strtol_l.constprop.0+0x56>
 8009716:	2308      	movs	r3, #8
 8009718:	e7af      	b.n	800967a <_strtol_l.constprop.0+0x56>
 800971a:	2c30      	cmp	r4, #48	; 0x30
 800971c:	d0a5      	beq.n	800966a <_strtol_l.constprop.0+0x46>
 800971e:	230a      	movs	r3, #10
 8009720:	e7ab      	b.n	800967a <_strtol_l.constprop.0+0x56>
 8009722:	bf00      	nop
 8009724:	0800c61d 	.word	0x0800c61d

08009728 <strtol>:
 8009728:	4613      	mov	r3, r2
 800972a:	460a      	mov	r2, r1
 800972c:	4601      	mov	r1, r0
 800972e:	4802      	ldr	r0, [pc, #8]	; (8009738 <strtol+0x10>)
 8009730:	6800      	ldr	r0, [r0, #0]
 8009732:	f7ff bf77 	b.w	8009624 <_strtol_l.constprop.0>
 8009736:	bf00      	nop
 8009738:	20000134 	.word	0x20000134

0800973c <__cvt>:
 800973c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009740:	ec55 4b10 	vmov	r4, r5, d0
 8009744:	2d00      	cmp	r5, #0
 8009746:	460e      	mov	r6, r1
 8009748:	4619      	mov	r1, r3
 800974a:	462b      	mov	r3, r5
 800974c:	bfbb      	ittet	lt
 800974e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009752:	461d      	movlt	r5, r3
 8009754:	2300      	movge	r3, #0
 8009756:	232d      	movlt	r3, #45	; 0x2d
 8009758:	700b      	strb	r3, [r1, #0]
 800975a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800975c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009760:	4691      	mov	r9, r2
 8009762:	f023 0820 	bic.w	r8, r3, #32
 8009766:	bfbc      	itt	lt
 8009768:	4622      	movlt	r2, r4
 800976a:	4614      	movlt	r4, r2
 800976c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009770:	d005      	beq.n	800977e <__cvt+0x42>
 8009772:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009776:	d100      	bne.n	800977a <__cvt+0x3e>
 8009778:	3601      	adds	r6, #1
 800977a:	2102      	movs	r1, #2
 800977c:	e000      	b.n	8009780 <__cvt+0x44>
 800977e:	2103      	movs	r1, #3
 8009780:	ab03      	add	r3, sp, #12
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	ab02      	add	r3, sp, #8
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	ec45 4b10 	vmov	d0, r4, r5
 800978c:	4653      	mov	r3, sl
 800978e:	4632      	mov	r2, r6
 8009790:	f000 ff02 	bl	800a598 <_dtoa_r>
 8009794:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009798:	4607      	mov	r7, r0
 800979a:	d102      	bne.n	80097a2 <__cvt+0x66>
 800979c:	f019 0f01 	tst.w	r9, #1
 80097a0:	d022      	beq.n	80097e8 <__cvt+0xac>
 80097a2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097a6:	eb07 0906 	add.w	r9, r7, r6
 80097aa:	d110      	bne.n	80097ce <__cvt+0x92>
 80097ac:	783b      	ldrb	r3, [r7, #0]
 80097ae:	2b30      	cmp	r3, #48	; 0x30
 80097b0:	d10a      	bne.n	80097c8 <__cvt+0x8c>
 80097b2:	2200      	movs	r2, #0
 80097b4:	2300      	movs	r3, #0
 80097b6:	4620      	mov	r0, r4
 80097b8:	4629      	mov	r1, r5
 80097ba:	f7f7 f9bd 	bl	8000b38 <__aeabi_dcmpeq>
 80097be:	b918      	cbnz	r0, 80097c8 <__cvt+0x8c>
 80097c0:	f1c6 0601 	rsb	r6, r6, #1
 80097c4:	f8ca 6000 	str.w	r6, [sl]
 80097c8:	f8da 3000 	ldr.w	r3, [sl]
 80097cc:	4499      	add	r9, r3
 80097ce:	2200      	movs	r2, #0
 80097d0:	2300      	movs	r3, #0
 80097d2:	4620      	mov	r0, r4
 80097d4:	4629      	mov	r1, r5
 80097d6:	f7f7 f9af 	bl	8000b38 <__aeabi_dcmpeq>
 80097da:	b108      	cbz	r0, 80097e0 <__cvt+0xa4>
 80097dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80097e0:	2230      	movs	r2, #48	; 0x30
 80097e2:	9b03      	ldr	r3, [sp, #12]
 80097e4:	454b      	cmp	r3, r9
 80097e6:	d307      	bcc.n	80097f8 <__cvt+0xbc>
 80097e8:	9b03      	ldr	r3, [sp, #12]
 80097ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80097ec:	1bdb      	subs	r3, r3, r7
 80097ee:	4638      	mov	r0, r7
 80097f0:	6013      	str	r3, [r2, #0]
 80097f2:	b004      	add	sp, #16
 80097f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f8:	1c59      	adds	r1, r3, #1
 80097fa:	9103      	str	r1, [sp, #12]
 80097fc:	701a      	strb	r2, [r3, #0]
 80097fe:	e7f0      	b.n	80097e2 <__cvt+0xa6>

08009800 <__exponent>:
 8009800:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009802:	4603      	mov	r3, r0
 8009804:	2900      	cmp	r1, #0
 8009806:	bfb8      	it	lt
 8009808:	4249      	neglt	r1, r1
 800980a:	f803 2b02 	strb.w	r2, [r3], #2
 800980e:	bfb4      	ite	lt
 8009810:	222d      	movlt	r2, #45	; 0x2d
 8009812:	222b      	movge	r2, #43	; 0x2b
 8009814:	2909      	cmp	r1, #9
 8009816:	7042      	strb	r2, [r0, #1]
 8009818:	dd2a      	ble.n	8009870 <__exponent+0x70>
 800981a:	f10d 0207 	add.w	r2, sp, #7
 800981e:	4617      	mov	r7, r2
 8009820:	260a      	movs	r6, #10
 8009822:	4694      	mov	ip, r2
 8009824:	fb91 f5f6 	sdiv	r5, r1, r6
 8009828:	fb06 1415 	mls	r4, r6, r5, r1
 800982c:	3430      	adds	r4, #48	; 0x30
 800982e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009832:	460c      	mov	r4, r1
 8009834:	2c63      	cmp	r4, #99	; 0x63
 8009836:	f102 32ff 	add.w	r2, r2, #4294967295
 800983a:	4629      	mov	r1, r5
 800983c:	dcf1      	bgt.n	8009822 <__exponent+0x22>
 800983e:	3130      	adds	r1, #48	; 0x30
 8009840:	f1ac 0402 	sub.w	r4, ip, #2
 8009844:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009848:	1c41      	adds	r1, r0, #1
 800984a:	4622      	mov	r2, r4
 800984c:	42ba      	cmp	r2, r7
 800984e:	d30a      	bcc.n	8009866 <__exponent+0x66>
 8009850:	f10d 0209 	add.w	r2, sp, #9
 8009854:	eba2 020c 	sub.w	r2, r2, ip
 8009858:	42bc      	cmp	r4, r7
 800985a:	bf88      	it	hi
 800985c:	2200      	movhi	r2, #0
 800985e:	4413      	add	r3, r2
 8009860:	1a18      	subs	r0, r3, r0
 8009862:	b003      	add	sp, #12
 8009864:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009866:	f812 5b01 	ldrb.w	r5, [r2], #1
 800986a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800986e:	e7ed      	b.n	800984c <__exponent+0x4c>
 8009870:	2330      	movs	r3, #48	; 0x30
 8009872:	3130      	adds	r1, #48	; 0x30
 8009874:	7083      	strb	r3, [r0, #2]
 8009876:	70c1      	strb	r1, [r0, #3]
 8009878:	1d03      	adds	r3, r0, #4
 800987a:	e7f1      	b.n	8009860 <__exponent+0x60>

0800987c <_printf_float>:
 800987c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009880:	ed2d 8b02 	vpush	{d8}
 8009884:	b08d      	sub	sp, #52	; 0x34
 8009886:	460c      	mov	r4, r1
 8009888:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800988c:	4616      	mov	r6, r2
 800988e:	461f      	mov	r7, r3
 8009890:	4605      	mov	r5, r0
 8009892:	f000 fd65 	bl	800a360 <_localeconv_r>
 8009896:	f8d0 a000 	ldr.w	sl, [r0]
 800989a:	4650      	mov	r0, sl
 800989c:	f7f6 fd20 	bl	80002e0 <strlen>
 80098a0:	2300      	movs	r3, #0
 80098a2:	930a      	str	r3, [sp, #40]	; 0x28
 80098a4:	6823      	ldr	r3, [r4, #0]
 80098a6:	9305      	str	r3, [sp, #20]
 80098a8:	f8d8 3000 	ldr.w	r3, [r8]
 80098ac:	f894 b018 	ldrb.w	fp, [r4, #24]
 80098b0:	3307      	adds	r3, #7
 80098b2:	f023 0307 	bic.w	r3, r3, #7
 80098b6:	f103 0208 	add.w	r2, r3, #8
 80098ba:	f8c8 2000 	str.w	r2, [r8]
 80098be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80098c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80098c6:	9307      	str	r3, [sp, #28]
 80098c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80098cc:	ee08 0a10 	vmov	s16, r0
 80098d0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80098d4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098d8:	4b9e      	ldr	r3, [pc, #632]	; (8009b54 <_printf_float+0x2d8>)
 80098da:	f04f 32ff 	mov.w	r2, #4294967295
 80098de:	f7f7 f95d 	bl	8000b9c <__aeabi_dcmpun>
 80098e2:	bb88      	cbnz	r0, 8009948 <_printf_float+0xcc>
 80098e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80098e8:	4b9a      	ldr	r3, [pc, #616]	; (8009b54 <_printf_float+0x2d8>)
 80098ea:	f04f 32ff 	mov.w	r2, #4294967295
 80098ee:	f7f7 f937 	bl	8000b60 <__aeabi_dcmple>
 80098f2:	bb48      	cbnz	r0, 8009948 <_printf_float+0xcc>
 80098f4:	2200      	movs	r2, #0
 80098f6:	2300      	movs	r3, #0
 80098f8:	4640      	mov	r0, r8
 80098fa:	4649      	mov	r1, r9
 80098fc:	f7f7 f926 	bl	8000b4c <__aeabi_dcmplt>
 8009900:	b110      	cbz	r0, 8009908 <_printf_float+0x8c>
 8009902:	232d      	movs	r3, #45	; 0x2d
 8009904:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009908:	4a93      	ldr	r2, [pc, #588]	; (8009b58 <_printf_float+0x2dc>)
 800990a:	4b94      	ldr	r3, [pc, #592]	; (8009b5c <_printf_float+0x2e0>)
 800990c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009910:	bf94      	ite	ls
 8009912:	4690      	movls	r8, r2
 8009914:	4698      	movhi	r8, r3
 8009916:	2303      	movs	r3, #3
 8009918:	6123      	str	r3, [r4, #16]
 800991a:	9b05      	ldr	r3, [sp, #20]
 800991c:	f023 0304 	bic.w	r3, r3, #4
 8009920:	6023      	str	r3, [r4, #0]
 8009922:	f04f 0900 	mov.w	r9, #0
 8009926:	9700      	str	r7, [sp, #0]
 8009928:	4633      	mov	r3, r6
 800992a:	aa0b      	add	r2, sp, #44	; 0x2c
 800992c:	4621      	mov	r1, r4
 800992e:	4628      	mov	r0, r5
 8009930:	f000 f9da 	bl	8009ce8 <_printf_common>
 8009934:	3001      	adds	r0, #1
 8009936:	f040 8090 	bne.w	8009a5a <_printf_float+0x1de>
 800993a:	f04f 30ff 	mov.w	r0, #4294967295
 800993e:	b00d      	add	sp, #52	; 0x34
 8009940:	ecbd 8b02 	vpop	{d8}
 8009944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009948:	4642      	mov	r2, r8
 800994a:	464b      	mov	r3, r9
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f7 f924 	bl	8000b9c <__aeabi_dcmpun>
 8009954:	b140      	cbz	r0, 8009968 <_printf_float+0xec>
 8009956:	464b      	mov	r3, r9
 8009958:	2b00      	cmp	r3, #0
 800995a:	bfbc      	itt	lt
 800995c:	232d      	movlt	r3, #45	; 0x2d
 800995e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009962:	4a7f      	ldr	r2, [pc, #508]	; (8009b60 <_printf_float+0x2e4>)
 8009964:	4b7f      	ldr	r3, [pc, #508]	; (8009b64 <_printf_float+0x2e8>)
 8009966:	e7d1      	b.n	800990c <_printf_float+0x90>
 8009968:	6863      	ldr	r3, [r4, #4]
 800996a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800996e:	9206      	str	r2, [sp, #24]
 8009970:	1c5a      	adds	r2, r3, #1
 8009972:	d13f      	bne.n	80099f4 <_printf_float+0x178>
 8009974:	2306      	movs	r3, #6
 8009976:	6063      	str	r3, [r4, #4]
 8009978:	9b05      	ldr	r3, [sp, #20]
 800997a:	6861      	ldr	r1, [r4, #4]
 800997c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009980:	2300      	movs	r3, #0
 8009982:	9303      	str	r3, [sp, #12]
 8009984:	ab0a      	add	r3, sp, #40	; 0x28
 8009986:	e9cd b301 	strd	fp, r3, [sp, #4]
 800998a:	ab09      	add	r3, sp, #36	; 0x24
 800998c:	ec49 8b10 	vmov	d0, r8, r9
 8009990:	9300      	str	r3, [sp, #0]
 8009992:	6022      	str	r2, [r4, #0]
 8009994:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009998:	4628      	mov	r0, r5
 800999a:	f7ff fecf 	bl	800973c <__cvt>
 800999e:	9b06      	ldr	r3, [sp, #24]
 80099a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099a2:	2b47      	cmp	r3, #71	; 0x47
 80099a4:	4680      	mov	r8, r0
 80099a6:	d108      	bne.n	80099ba <_printf_float+0x13e>
 80099a8:	1cc8      	adds	r0, r1, #3
 80099aa:	db02      	blt.n	80099b2 <_printf_float+0x136>
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	4299      	cmp	r1, r3
 80099b0:	dd41      	ble.n	8009a36 <_printf_float+0x1ba>
 80099b2:	f1ab 0302 	sub.w	r3, fp, #2
 80099b6:	fa5f fb83 	uxtb.w	fp, r3
 80099ba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80099be:	d820      	bhi.n	8009a02 <_printf_float+0x186>
 80099c0:	3901      	subs	r1, #1
 80099c2:	465a      	mov	r2, fp
 80099c4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80099c8:	9109      	str	r1, [sp, #36]	; 0x24
 80099ca:	f7ff ff19 	bl	8009800 <__exponent>
 80099ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80099d0:	1813      	adds	r3, r2, r0
 80099d2:	2a01      	cmp	r2, #1
 80099d4:	4681      	mov	r9, r0
 80099d6:	6123      	str	r3, [r4, #16]
 80099d8:	dc02      	bgt.n	80099e0 <_printf_float+0x164>
 80099da:	6822      	ldr	r2, [r4, #0]
 80099dc:	07d2      	lsls	r2, r2, #31
 80099de:	d501      	bpl.n	80099e4 <_printf_float+0x168>
 80099e0:	3301      	adds	r3, #1
 80099e2:	6123      	str	r3, [r4, #16]
 80099e4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d09c      	beq.n	8009926 <_printf_float+0xaa>
 80099ec:	232d      	movs	r3, #45	; 0x2d
 80099ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80099f2:	e798      	b.n	8009926 <_printf_float+0xaa>
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	2a47      	cmp	r2, #71	; 0x47
 80099f8:	d1be      	bne.n	8009978 <_printf_float+0xfc>
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1bc      	bne.n	8009978 <_printf_float+0xfc>
 80099fe:	2301      	movs	r3, #1
 8009a00:	e7b9      	b.n	8009976 <_printf_float+0xfa>
 8009a02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a06:	d118      	bne.n	8009a3a <_printf_float+0x1be>
 8009a08:	2900      	cmp	r1, #0
 8009a0a:	6863      	ldr	r3, [r4, #4]
 8009a0c:	dd0b      	ble.n	8009a26 <_printf_float+0x1aa>
 8009a0e:	6121      	str	r1, [r4, #16]
 8009a10:	b913      	cbnz	r3, 8009a18 <_printf_float+0x19c>
 8009a12:	6822      	ldr	r2, [r4, #0]
 8009a14:	07d0      	lsls	r0, r2, #31
 8009a16:	d502      	bpl.n	8009a1e <_printf_float+0x1a2>
 8009a18:	3301      	adds	r3, #1
 8009a1a:	440b      	add	r3, r1
 8009a1c:	6123      	str	r3, [r4, #16]
 8009a1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a20:	f04f 0900 	mov.w	r9, #0
 8009a24:	e7de      	b.n	80099e4 <_printf_float+0x168>
 8009a26:	b913      	cbnz	r3, 8009a2e <_printf_float+0x1b2>
 8009a28:	6822      	ldr	r2, [r4, #0]
 8009a2a:	07d2      	lsls	r2, r2, #31
 8009a2c:	d501      	bpl.n	8009a32 <_printf_float+0x1b6>
 8009a2e:	3302      	adds	r3, #2
 8009a30:	e7f4      	b.n	8009a1c <_printf_float+0x1a0>
 8009a32:	2301      	movs	r3, #1
 8009a34:	e7f2      	b.n	8009a1c <_printf_float+0x1a0>
 8009a36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a3c:	4299      	cmp	r1, r3
 8009a3e:	db05      	blt.n	8009a4c <_printf_float+0x1d0>
 8009a40:	6823      	ldr	r3, [r4, #0]
 8009a42:	6121      	str	r1, [r4, #16]
 8009a44:	07d8      	lsls	r0, r3, #31
 8009a46:	d5ea      	bpl.n	8009a1e <_printf_float+0x1a2>
 8009a48:	1c4b      	adds	r3, r1, #1
 8009a4a:	e7e7      	b.n	8009a1c <_printf_float+0x1a0>
 8009a4c:	2900      	cmp	r1, #0
 8009a4e:	bfd4      	ite	le
 8009a50:	f1c1 0202 	rsble	r2, r1, #2
 8009a54:	2201      	movgt	r2, #1
 8009a56:	4413      	add	r3, r2
 8009a58:	e7e0      	b.n	8009a1c <_printf_float+0x1a0>
 8009a5a:	6823      	ldr	r3, [r4, #0]
 8009a5c:	055a      	lsls	r2, r3, #21
 8009a5e:	d407      	bmi.n	8009a70 <_printf_float+0x1f4>
 8009a60:	6923      	ldr	r3, [r4, #16]
 8009a62:	4642      	mov	r2, r8
 8009a64:	4631      	mov	r1, r6
 8009a66:	4628      	mov	r0, r5
 8009a68:	47b8      	blx	r7
 8009a6a:	3001      	adds	r0, #1
 8009a6c:	d12c      	bne.n	8009ac8 <_printf_float+0x24c>
 8009a6e:	e764      	b.n	800993a <_printf_float+0xbe>
 8009a70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a74:	f240 80e0 	bls.w	8009c38 <_printf_float+0x3bc>
 8009a78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	2300      	movs	r3, #0
 8009a80:	f7f7 f85a 	bl	8000b38 <__aeabi_dcmpeq>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	d034      	beq.n	8009af2 <_printf_float+0x276>
 8009a88:	4a37      	ldr	r2, [pc, #220]	; (8009b68 <_printf_float+0x2ec>)
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	4631      	mov	r1, r6
 8009a8e:	4628      	mov	r0, r5
 8009a90:	47b8      	blx	r7
 8009a92:	3001      	adds	r0, #1
 8009a94:	f43f af51 	beq.w	800993a <_printf_float+0xbe>
 8009a98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	db02      	blt.n	8009aa6 <_printf_float+0x22a>
 8009aa0:	6823      	ldr	r3, [r4, #0]
 8009aa2:	07d8      	lsls	r0, r3, #31
 8009aa4:	d510      	bpl.n	8009ac8 <_printf_float+0x24c>
 8009aa6:	ee18 3a10 	vmov	r3, s16
 8009aaa:	4652      	mov	r2, sl
 8009aac:	4631      	mov	r1, r6
 8009aae:	4628      	mov	r0, r5
 8009ab0:	47b8      	blx	r7
 8009ab2:	3001      	adds	r0, #1
 8009ab4:	f43f af41 	beq.w	800993a <_printf_float+0xbe>
 8009ab8:	f04f 0800 	mov.w	r8, #0
 8009abc:	f104 091a 	add.w	r9, r4, #26
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	4543      	cmp	r3, r8
 8009ac6:	dc09      	bgt.n	8009adc <_printf_float+0x260>
 8009ac8:	6823      	ldr	r3, [r4, #0]
 8009aca:	079b      	lsls	r3, r3, #30
 8009acc:	f100 8107 	bmi.w	8009cde <_printf_float+0x462>
 8009ad0:	68e0      	ldr	r0, [r4, #12]
 8009ad2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ad4:	4298      	cmp	r0, r3
 8009ad6:	bfb8      	it	lt
 8009ad8:	4618      	movlt	r0, r3
 8009ada:	e730      	b.n	800993e <_printf_float+0xc2>
 8009adc:	2301      	movs	r3, #1
 8009ade:	464a      	mov	r2, r9
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f af27 	beq.w	800993a <_printf_float+0xbe>
 8009aec:	f108 0801 	add.w	r8, r8, #1
 8009af0:	e7e6      	b.n	8009ac0 <_printf_float+0x244>
 8009af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	dc39      	bgt.n	8009b6c <_printf_float+0x2f0>
 8009af8:	4a1b      	ldr	r2, [pc, #108]	; (8009b68 <_printf_float+0x2ec>)
 8009afa:	2301      	movs	r3, #1
 8009afc:	4631      	mov	r1, r6
 8009afe:	4628      	mov	r0, r5
 8009b00:	47b8      	blx	r7
 8009b02:	3001      	adds	r0, #1
 8009b04:	f43f af19 	beq.w	800993a <_printf_float+0xbe>
 8009b08:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	d102      	bne.n	8009b16 <_printf_float+0x29a>
 8009b10:	6823      	ldr	r3, [r4, #0]
 8009b12:	07d9      	lsls	r1, r3, #31
 8009b14:	d5d8      	bpl.n	8009ac8 <_printf_float+0x24c>
 8009b16:	ee18 3a10 	vmov	r3, s16
 8009b1a:	4652      	mov	r2, sl
 8009b1c:	4631      	mov	r1, r6
 8009b1e:	4628      	mov	r0, r5
 8009b20:	47b8      	blx	r7
 8009b22:	3001      	adds	r0, #1
 8009b24:	f43f af09 	beq.w	800993a <_printf_float+0xbe>
 8009b28:	f04f 0900 	mov.w	r9, #0
 8009b2c:	f104 0a1a 	add.w	sl, r4, #26
 8009b30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b32:	425b      	negs	r3, r3
 8009b34:	454b      	cmp	r3, r9
 8009b36:	dc01      	bgt.n	8009b3c <_printf_float+0x2c0>
 8009b38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b3a:	e792      	b.n	8009a62 <_printf_float+0x1e6>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	4652      	mov	r2, sl
 8009b40:	4631      	mov	r1, r6
 8009b42:	4628      	mov	r0, r5
 8009b44:	47b8      	blx	r7
 8009b46:	3001      	adds	r0, #1
 8009b48:	f43f aef7 	beq.w	800993a <_printf_float+0xbe>
 8009b4c:	f109 0901 	add.w	r9, r9, #1
 8009b50:	e7ee      	b.n	8009b30 <_printf_float+0x2b4>
 8009b52:	bf00      	nop
 8009b54:	7fefffff 	.word	0x7fefffff
 8009b58:	0800c71d 	.word	0x0800c71d
 8009b5c:	0800c721 	.word	0x0800c721
 8009b60:	0800c725 	.word	0x0800c725
 8009b64:	0800c729 	.word	0x0800c729
 8009b68:	0800c72d 	.word	0x0800c72d
 8009b6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009b6e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b70:	429a      	cmp	r2, r3
 8009b72:	bfa8      	it	ge
 8009b74:	461a      	movge	r2, r3
 8009b76:	2a00      	cmp	r2, #0
 8009b78:	4691      	mov	r9, r2
 8009b7a:	dc37      	bgt.n	8009bec <_printf_float+0x370>
 8009b7c:	f04f 0b00 	mov.w	fp, #0
 8009b80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009b84:	f104 021a 	add.w	r2, r4, #26
 8009b88:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009b8a:	9305      	str	r3, [sp, #20]
 8009b8c:	eba3 0309 	sub.w	r3, r3, r9
 8009b90:	455b      	cmp	r3, fp
 8009b92:	dc33      	bgt.n	8009bfc <_printf_float+0x380>
 8009b94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	db3b      	blt.n	8009c14 <_printf_float+0x398>
 8009b9c:	6823      	ldr	r3, [r4, #0]
 8009b9e:	07da      	lsls	r2, r3, #31
 8009ba0:	d438      	bmi.n	8009c14 <_printf_float+0x398>
 8009ba2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009ba6:	eba2 0903 	sub.w	r9, r2, r3
 8009baa:	9b05      	ldr	r3, [sp, #20]
 8009bac:	1ad2      	subs	r2, r2, r3
 8009bae:	4591      	cmp	r9, r2
 8009bb0:	bfa8      	it	ge
 8009bb2:	4691      	movge	r9, r2
 8009bb4:	f1b9 0f00 	cmp.w	r9, #0
 8009bb8:	dc35      	bgt.n	8009c26 <_printf_float+0x3aa>
 8009bba:	f04f 0800 	mov.w	r8, #0
 8009bbe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bc2:	f104 0a1a 	add.w	sl, r4, #26
 8009bc6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	eba3 0309 	sub.w	r3, r3, r9
 8009bd0:	4543      	cmp	r3, r8
 8009bd2:	f77f af79 	ble.w	8009ac8 <_printf_float+0x24c>
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	4652      	mov	r2, sl
 8009bda:	4631      	mov	r1, r6
 8009bdc:	4628      	mov	r0, r5
 8009bde:	47b8      	blx	r7
 8009be0:	3001      	adds	r0, #1
 8009be2:	f43f aeaa 	beq.w	800993a <_printf_float+0xbe>
 8009be6:	f108 0801 	add.w	r8, r8, #1
 8009bea:	e7ec      	b.n	8009bc6 <_printf_float+0x34a>
 8009bec:	4613      	mov	r3, r2
 8009bee:	4631      	mov	r1, r6
 8009bf0:	4642      	mov	r2, r8
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b8      	blx	r7
 8009bf6:	3001      	adds	r0, #1
 8009bf8:	d1c0      	bne.n	8009b7c <_printf_float+0x300>
 8009bfa:	e69e      	b.n	800993a <_printf_float+0xbe>
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	4631      	mov	r1, r6
 8009c00:	4628      	mov	r0, r5
 8009c02:	9205      	str	r2, [sp, #20]
 8009c04:	47b8      	blx	r7
 8009c06:	3001      	adds	r0, #1
 8009c08:	f43f ae97 	beq.w	800993a <_printf_float+0xbe>
 8009c0c:	9a05      	ldr	r2, [sp, #20]
 8009c0e:	f10b 0b01 	add.w	fp, fp, #1
 8009c12:	e7b9      	b.n	8009b88 <_printf_float+0x30c>
 8009c14:	ee18 3a10 	vmov	r3, s16
 8009c18:	4652      	mov	r2, sl
 8009c1a:	4631      	mov	r1, r6
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	47b8      	blx	r7
 8009c20:	3001      	adds	r0, #1
 8009c22:	d1be      	bne.n	8009ba2 <_printf_float+0x326>
 8009c24:	e689      	b.n	800993a <_printf_float+0xbe>
 8009c26:	9a05      	ldr	r2, [sp, #20]
 8009c28:	464b      	mov	r3, r9
 8009c2a:	4442      	add	r2, r8
 8009c2c:	4631      	mov	r1, r6
 8009c2e:	4628      	mov	r0, r5
 8009c30:	47b8      	blx	r7
 8009c32:	3001      	adds	r0, #1
 8009c34:	d1c1      	bne.n	8009bba <_printf_float+0x33e>
 8009c36:	e680      	b.n	800993a <_printf_float+0xbe>
 8009c38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c3a:	2a01      	cmp	r2, #1
 8009c3c:	dc01      	bgt.n	8009c42 <_printf_float+0x3c6>
 8009c3e:	07db      	lsls	r3, r3, #31
 8009c40:	d53a      	bpl.n	8009cb8 <_printf_float+0x43c>
 8009c42:	2301      	movs	r3, #1
 8009c44:	4642      	mov	r2, r8
 8009c46:	4631      	mov	r1, r6
 8009c48:	4628      	mov	r0, r5
 8009c4a:	47b8      	blx	r7
 8009c4c:	3001      	adds	r0, #1
 8009c4e:	f43f ae74 	beq.w	800993a <_printf_float+0xbe>
 8009c52:	ee18 3a10 	vmov	r3, s16
 8009c56:	4652      	mov	r2, sl
 8009c58:	4631      	mov	r1, r6
 8009c5a:	4628      	mov	r0, r5
 8009c5c:	47b8      	blx	r7
 8009c5e:	3001      	adds	r0, #1
 8009c60:	f43f ae6b 	beq.w	800993a <_printf_float+0xbe>
 8009c64:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c68:	2200      	movs	r2, #0
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009c70:	f7f6 ff62 	bl	8000b38 <__aeabi_dcmpeq>
 8009c74:	b9d8      	cbnz	r0, 8009cae <_printf_float+0x432>
 8009c76:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009c7a:	f108 0201 	add.w	r2, r8, #1
 8009c7e:	4631      	mov	r1, r6
 8009c80:	4628      	mov	r0, r5
 8009c82:	47b8      	blx	r7
 8009c84:	3001      	adds	r0, #1
 8009c86:	d10e      	bne.n	8009ca6 <_printf_float+0x42a>
 8009c88:	e657      	b.n	800993a <_printf_float+0xbe>
 8009c8a:	2301      	movs	r3, #1
 8009c8c:	4652      	mov	r2, sl
 8009c8e:	4631      	mov	r1, r6
 8009c90:	4628      	mov	r0, r5
 8009c92:	47b8      	blx	r7
 8009c94:	3001      	adds	r0, #1
 8009c96:	f43f ae50 	beq.w	800993a <_printf_float+0xbe>
 8009c9a:	f108 0801 	add.w	r8, r8, #1
 8009c9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ca0:	3b01      	subs	r3, #1
 8009ca2:	4543      	cmp	r3, r8
 8009ca4:	dcf1      	bgt.n	8009c8a <_printf_float+0x40e>
 8009ca6:	464b      	mov	r3, r9
 8009ca8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cac:	e6da      	b.n	8009a64 <_printf_float+0x1e8>
 8009cae:	f04f 0800 	mov.w	r8, #0
 8009cb2:	f104 0a1a 	add.w	sl, r4, #26
 8009cb6:	e7f2      	b.n	8009c9e <_printf_float+0x422>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	4642      	mov	r2, r8
 8009cbc:	e7df      	b.n	8009c7e <_printf_float+0x402>
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	464a      	mov	r2, r9
 8009cc2:	4631      	mov	r1, r6
 8009cc4:	4628      	mov	r0, r5
 8009cc6:	47b8      	blx	r7
 8009cc8:	3001      	adds	r0, #1
 8009cca:	f43f ae36 	beq.w	800993a <_printf_float+0xbe>
 8009cce:	f108 0801 	add.w	r8, r8, #1
 8009cd2:	68e3      	ldr	r3, [r4, #12]
 8009cd4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009cd6:	1a5b      	subs	r3, r3, r1
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	dcf0      	bgt.n	8009cbe <_printf_float+0x442>
 8009cdc:	e6f8      	b.n	8009ad0 <_printf_float+0x254>
 8009cde:	f04f 0800 	mov.w	r8, #0
 8009ce2:	f104 0919 	add.w	r9, r4, #25
 8009ce6:	e7f4      	b.n	8009cd2 <_printf_float+0x456>

08009ce8 <_printf_common>:
 8009ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cec:	4616      	mov	r6, r2
 8009cee:	4699      	mov	r9, r3
 8009cf0:	688a      	ldr	r2, [r1, #8]
 8009cf2:	690b      	ldr	r3, [r1, #16]
 8009cf4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	bfb8      	it	lt
 8009cfc:	4613      	movlt	r3, r2
 8009cfe:	6033      	str	r3, [r6, #0]
 8009d00:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d04:	4607      	mov	r7, r0
 8009d06:	460c      	mov	r4, r1
 8009d08:	b10a      	cbz	r2, 8009d0e <_printf_common+0x26>
 8009d0a:	3301      	adds	r3, #1
 8009d0c:	6033      	str	r3, [r6, #0]
 8009d0e:	6823      	ldr	r3, [r4, #0]
 8009d10:	0699      	lsls	r1, r3, #26
 8009d12:	bf42      	ittt	mi
 8009d14:	6833      	ldrmi	r3, [r6, #0]
 8009d16:	3302      	addmi	r3, #2
 8009d18:	6033      	strmi	r3, [r6, #0]
 8009d1a:	6825      	ldr	r5, [r4, #0]
 8009d1c:	f015 0506 	ands.w	r5, r5, #6
 8009d20:	d106      	bne.n	8009d30 <_printf_common+0x48>
 8009d22:	f104 0a19 	add.w	sl, r4, #25
 8009d26:	68e3      	ldr	r3, [r4, #12]
 8009d28:	6832      	ldr	r2, [r6, #0]
 8009d2a:	1a9b      	subs	r3, r3, r2
 8009d2c:	42ab      	cmp	r3, r5
 8009d2e:	dc26      	bgt.n	8009d7e <_printf_common+0x96>
 8009d30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d34:	1e13      	subs	r3, r2, #0
 8009d36:	6822      	ldr	r2, [r4, #0]
 8009d38:	bf18      	it	ne
 8009d3a:	2301      	movne	r3, #1
 8009d3c:	0692      	lsls	r2, r2, #26
 8009d3e:	d42b      	bmi.n	8009d98 <_printf_common+0xb0>
 8009d40:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d44:	4649      	mov	r1, r9
 8009d46:	4638      	mov	r0, r7
 8009d48:	47c0      	blx	r8
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	d01e      	beq.n	8009d8c <_printf_common+0xa4>
 8009d4e:	6823      	ldr	r3, [r4, #0]
 8009d50:	6922      	ldr	r2, [r4, #16]
 8009d52:	f003 0306 	and.w	r3, r3, #6
 8009d56:	2b04      	cmp	r3, #4
 8009d58:	bf02      	ittt	eq
 8009d5a:	68e5      	ldreq	r5, [r4, #12]
 8009d5c:	6833      	ldreq	r3, [r6, #0]
 8009d5e:	1aed      	subeq	r5, r5, r3
 8009d60:	68a3      	ldr	r3, [r4, #8]
 8009d62:	bf0c      	ite	eq
 8009d64:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009d68:	2500      	movne	r5, #0
 8009d6a:	4293      	cmp	r3, r2
 8009d6c:	bfc4      	itt	gt
 8009d6e:	1a9b      	subgt	r3, r3, r2
 8009d70:	18ed      	addgt	r5, r5, r3
 8009d72:	2600      	movs	r6, #0
 8009d74:	341a      	adds	r4, #26
 8009d76:	42b5      	cmp	r5, r6
 8009d78:	d11a      	bne.n	8009db0 <_printf_common+0xc8>
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	e008      	b.n	8009d90 <_printf_common+0xa8>
 8009d7e:	2301      	movs	r3, #1
 8009d80:	4652      	mov	r2, sl
 8009d82:	4649      	mov	r1, r9
 8009d84:	4638      	mov	r0, r7
 8009d86:	47c0      	blx	r8
 8009d88:	3001      	adds	r0, #1
 8009d8a:	d103      	bne.n	8009d94 <_printf_common+0xac>
 8009d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d94:	3501      	adds	r5, #1
 8009d96:	e7c6      	b.n	8009d26 <_printf_common+0x3e>
 8009d98:	18e1      	adds	r1, r4, r3
 8009d9a:	1c5a      	adds	r2, r3, #1
 8009d9c:	2030      	movs	r0, #48	; 0x30
 8009d9e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009da2:	4422      	add	r2, r4
 8009da4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009da8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dac:	3302      	adds	r3, #2
 8009dae:	e7c7      	b.n	8009d40 <_printf_common+0x58>
 8009db0:	2301      	movs	r3, #1
 8009db2:	4622      	mov	r2, r4
 8009db4:	4649      	mov	r1, r9
 8009db6:	4638      	mov	r0, r7
 8009db8:	47c0      	blx	r8
 8009dba:	3001      	adds	r0, #1
 8009dbc:	d0e6      	beq.n	8009d8c <_printf_common+0xa4>
 8009dbe:	3601      	adds	r6, #1
 8009dc0:	e7d9      	b.n	8009d76 <_printf_common+0x8e>
	...

08009dc4 <_printf_i>:
 8009dc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009dc8:	7e0f      	ldrb	r7, [r1, #24]
 8009dca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009dcc:	2f78      	cmp	r7, #120	; 0x78
 8009dce:	4691      	mov	r9, r2
 8009dd0:	4680      	mov	r8, r0
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	469a      	mov	sl, r3
 8009dd6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009dda:	d807      	bhi.n	8009dec <_printf_i+0x28>
 8009ddc:	2f62      	cmp	r7, #98	; 0x62
 8009dde:	d80a      	bhi.n	8009df6 <_printf_i+0x32>
 8009de0:	2f00      	cmp	r7, #0
 8009de2:	f000 80d4 	beq.w	8009f8e <_printf_i+0x1ca>
 8009de6:	2f58      	cmp	r7, #88	; 0x58
 8009de8:	f000 80c0 	beq.w	8009f6c <_printf_i+0x1a8>
 8009dec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009df0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009df4:	e03a      	b.n	8009e6c <_printf_i+0xa8>
 8009df6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009dfa:	2b15      	cmp	r3, #21
 8009dfc:	d8f6      	bhi.n	8009dec <_printf_i+0x28>
 8009dfe:	a101      	add	r1, pc, #4	; (adr r1, 8009e04 <_printf_i+0x40>)
 8009e00:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e04:	08009e5d 	.word	0x08009e5d
 8009e08:	08009e71 	.word	0x08009e71
 8009e0c:	08009ded 	.word	0x08009ded
 8009e10:	08009ded 	.word	0x08009ded
 8009e14:	08009ded 	.word	0x08009ded
 8009e18:	08009ded 	.word	0x08009ded
 8009e1c:	08009e71 	.word	0x08009e71
 8009e20:	08009ded 	.word	0x08009ded
 8009e24:	08009ded 	.word	0x08009ded
 8009e28:	08009ded 	.word	0x08009ded
 8009e2c:	08009ded 	.word	0x08009ded
 8009e30:	08009f75 	.word	0x08009f75
 8009e34:	08009e9d 	.word	0x08009e9d
 8009e38:	08009f2f 	.word	0x08009f2f
 8009e3c:	08009ded 	.word	0x08009ded
 8009e40:	08009ded 	.word	0x08009ded
 8009e44:	08009f97 	.word	0x08009f97
 8009e48:	08009ded 	.word	0x08009ded
 8009e4c:	08009e9d 	.word	0x08009e9d
 8009e50:	08009ded 	.word	0x08009ded
 8009e54:	08009ded 	.word	0x08009ded
 8009e58:	08009f37 	.word	0x08009f37
 8009e5c:	682b      	ldr	r3, [r5, #0]
 8009e5e:	1d1a      	adds	r2, r3, #4
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	602a      	str	r2, [r5, #0]
 8009e64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e68:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	e09f      	b.n	8009fb0 <_printf_i+0x1ec>
 8009e70:	6820      	ldr	r0, [r4, #0]
 8009e72:	682b      	ldr	r3, [r5, #0]
 8009e74:	0607      	lsls	r7, r0, #24
 8009e76:	f103 0104 	add.w	r1, r3, #4
 8009e7a:	6029      	str	r1, [r5, #0]
 8009e7c:	d501      	bpl.n	8009e82 <_printf_i+0xbe>
 8009e7e:	681e      	ldr	r6, [r3, #0]
 8009e80:	e003      	b.n	8009e8a <_printf_i+0xc6>
 8009e82:	0646      	lsls	r6, r0, #25
 8009e84:	d5fb      	bpl.n	8009e7e <_printf_i+0xba>
 8009e86:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009e8a:	2e00      	cmp	r6, #0
 8009e8c:	da03      	bge.n	8009e96 <_printf_i+0xd2>
 8009e8e:	232d      	movs	r3, #45	; 0x2d
 8009e90:	4276      	negs	r6, r6
 8009e92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009e96:	485a      	ldr	r0, [pc, #360]	; (800a000 <_printf_i+0x23c>)
 8009e98:	230a      	movs	r3, #10
 8009e9a:	e012      	b.n	8009ec2 <_printf_i+0xfe>
 8009e9c:	682b      	ldr	r3, [r5, #0]
 8009e9e:	6820      	ldr	r0, [r4, #0]
 8009ea0:	1d19      	adds	r1, r3, #4
 8009ea2:	6029      	str	r1, [r5, #0]
 8009ea4:	0605      	lsls	r5, r0, #24
 8009ea6:	d501      	bpl.n	8009eac <_printf_i+0xe8>
 8009ea8:	681e      	ldr	r6, [r3, #0]
 8009eaa:	e002      	b.n	8009eb2 <_printf_i+0xee>
 8009eac:	0641      	lsls	r1, r0, #25
 8009eae:	d5fb      	bpl.n	8009ea8 <_printf_i+0xe4>
 8009eb0:	881e      	ldrh	r6, [r3, #0]
 8009eb2:	4853      	ldr	r0, [pc, #332]	; (800a000 <_printf_i+0x23c>)
 8009eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8009eb6:	bf0c      	ite	eq
 8009eb8:	2308      	moveq	r3, #8
 8009eba:	230a      	movne	r3, #10
 8009ebc:	2100      	movs	r1, #0
 8009ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ec2:	6865      	ldr	r5, [r4, #4]
 8009ec4:	60a5      	str	r5, [r4, #8]
 8009ec6:	2d00      	cmp	r5, #0
 8009ec8:	bfa2      	ittt	ge
 8009eca:	6821      	ldrge	r1, [r4, #0]
 8009ecc:	f021 0104 	bicge.w	r1, r1, #4
 8009ed0:	6021      	strge	r1, [r4, #0]
 8009ed2:	b90e      	cbnz	r6, 8009ed8 <_printf_i+0x114>
 8009ed4:	2d00      	cmp	r5, #0
 8009ed6:	d04b      	beq.n	8009f70 <_printf_i+0x1ac>
 8009ed8:	4615      	mov	r5, r2
 8009eda:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ede:	fb03 6711 	mls	r7, r3, r1, r6
 8009ee2:	5dc7      	ldrb	r7, [r0, r7]
 8009ee4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ee8:	4637      	mov	r7, r6
 8009eea:	42bb      	cmp	r3, r7
 8009eec:	460e      	mov	r6, r1
 8009eee:	d9f4      	bls.n	8009eda <_printf_i+0x116>
 8009ef0:	2b08      	cmp	r3, #8
 8009ef2:	d10b      	bne.n	8009f0c <_printf_i+0x148>
 8009ef4:	6823      	ldr	r3, [r4, #0]
 8009ef6:	07de      	lsls	r6, r3, #31
 8009ef8:	d508      	bpl.n	8009f0c <_printf_i+0x148>
 8009efa:	6923      	ldr	r3, [r4, #16]
 8009efc:	6861      	ldr	r1, [r4, #4]
 8009efe:	4299      	cmp	r1, r3
 8009f00:	bfde      	ittt	le
 8009f02:	2330      	movle	r3, #48	; 0x30
 8009f04:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f08:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f0c:	1b52      	subs	r2, r2, r5
 8009f0e:	6122      	str	r2, [r4, #16]
 8009f10:	f8cd a000 	str.w	sl, [sp]
 8009f14:	464b      	mov	r3, r9
 8009f16:	aa03      	add	r2, sp, #12
 8009f18:	4621      	mov	r1, r4
 8009f1a:	4640      	mov	r0, r8
 8009f1c:	f7ff fee4 	bl	8009ce8 <_printf_common>
 8009f20:	3001      	adds	r0, #1
 8009f22:	d14a      	bne.n	8009fba <_printf_i+0x1f6>
 8009f24:	f04f 30ff 	mov.w	r0, #4294967295
 8009f28:	b004      	add	sp, #16
 8009f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f2e:	6823      	ldr	r3, [r4, #0]
 8009f30:	f043 0320 	orr.w	r3, r3, #32
 8009f34:	6023      	str	r3, [r4, #0]
 8009f36:	4833      	ldr	r0, [pc, #204]	; (800a004 <_printf_i+0x240>)
 8009f38:	2778      	movs	r7, #120	; 0x78
 8009f3a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009f3e:	6823      	ldr	r3, [r4, #0]
 8009f40:	6829      	ldr	r1, [r5, #0]
 8009f42:	061f      	lsls	r7, r3, #24
 8009f44:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f48:	d402      	bmi.n	8009f50 <_printf_i+0x18c>
 8009f4a:	065f      	lsls	r7, r3, #25
 8009f4c:	bf48      	it	mi
 8009f4e:	b2b6      	uxthmi	r6, r6
 8009f50:	07df      	lsls	r7, r3, #31
 8009f52:	bf48      	it	mi
 8009f54:	f043 0320 	orrmi.w	r3, r3, #32
 8009f58:	6029      	str	r1, [r5, #0]
 8009f5a:	bf48      	it	mi
 8009f5c:	6023      	strmi	r3, [r4, #0]
 8009f5e:	b91e      	cbnz	r6, 8009f68 <_printf_i+0x1a4>
 8009f60:	6823      	ldr	r3, [r4, #0]
 8009f62:	f023 0320 	bic.w	r3, r3, #32
 8009f66:	6023      	str	r3, [r4, #0]
 8009f68:	2310      	movs	r3, #16
 8009f6a:	e7a7      	b.n	8009ebc <_printf_i+0xf8>
 8009f6c:	4824      	ldr	r0, [pc, #144]	; (800a000 <_printf_i+0x23c>)
 8009f6e:	e7e4      	b.n	8009f3a <_printf_i+0x176>
 8009f70:	4615      	mov	r5, r2
 8009f72:	e7bd      	b.n	8009ef0 <_printf_i+0x12c>
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	6826      	ldr	r6, [r4, #0]
 8009f78:	6961      	ldr	r1, [r4, #20]
 8009f7a:	1d18      	adds	r0, r3, #4
 8009f7c:	6028      	str	r0, [r5, #0]
 8009f7e:	0635      	lsls	r5, r6, #24
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	d501      	bpl.n	8009f88 <_printf_i+0x1c4>
 8009f84:	6019      	str	r1, [r3, #0]
 8009f86:	e002      	b.n	8009f8e <_printf_i+0x1ca>
 8009f88:	0670      	lsls	r0, r6, #25
 8009f8a:	d5fb      	bpl.n	8009f84 <_printf_i+0x1c0>
 8009f8c:	8019      	strh	r1, [r3, #0]
 8009f8e:	2300      	movs	r3, #0
 8009f90:	6123      	str	r3, [r4, #16]
 8009f92:	4615      	mov	r5, r2
 8009f94:	e7bc      	b.n	8009f10 <_printf_i+0x14c>
 8009f96:	682b      	ldr	r3, [r5, #0]
 8009f98:	1d1a      	adds	r2, r3, #4
 8009f9a:	602a      	str	r2, [r5, #0]
 8009f9c:	681d      	ldr	r5, [r3, #0]
 8009f9e:	6862      	ldr	r2, [r4, #4]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	4628      	mov	r0, r5
 8009fa4:	f7f6 f94c 	bl	8000240 <memchr>
 8009fa8:	b108      	cbz	r0, 8009fae <_printf_i+0x1ea>
 8009faa:	1b40      	subs	r0, r0, r5
 8009fac:	6060      	str	r0, [r4, #4]
 8009fae:	6863      	ldr	r3, [r4, #4]
 8009fb0:	6123      	str	r3, [r4, #16]
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009fb8:	e7aa      	b.n	8009f10 <_printf_i+0x14c>
 8009fba:	6923      	ldr	r3, [r4, #16]
 8009fbc:	462a      	mov	r2, r5
 8009fbe:	4649      	mov	r1, r9
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	47d0      	blx	sl
 8009fc4:	3001      	adds	r0, #1
 8009fc6:	d0ad      	beq.n	8009f24 <_printf_i+0x160>
 8009fc8:	6823      	ldr	r3, [r4, #0]
 8009fca:	079b      	lsls	r3, r3, #30
 8009fcc:	d413      	bmi.n	8009ff6 <_printf_i+0x232>
 8009fce:	68e0      	ldr	r0, [r4, #12]
 8009fd0:	9b03      	ldr	r3, [sp, #12]
 8009fd2:	4298      	cmp	r0, r3
 8009fd4:	bfb8      	it	lt
 8009fd6:	4618      	movlt	r0, r3
 8009fd8:	e7a6      	b.n	8009f28 <_printf_i+0x164>
 8009fda:	2301      	movs	r3, #1
 8009fdc:	4632      	mov	r2, r6
 8009fde:	4649      	mov	r1, r9
 8009fe0:	4640      	mov	r0, r8
 8009fe2:	47d0      	blx	sl
 8009fe4:	3001      	adds	r0, #1
 8009fe6:	d09d      	beq.n	8009f24 <_printf_i+0x160>
 8009fe8:	3501      	adds	r5, #1
 8009fea:	68e3      	ldr	r3, [r4, #12]
 8009fec:	9903      	ldr	r1, [sp, #12]
 8009fee:	1a5b      	subs	r3, r3, r1
 8009ff0:	42ab      	cmp	r3, r5
 8009ff2:	dcf2      	bgt.n	8009fda <_printf_i+0x216>
 8009ff4:	e7eb      	b.n	8009fce <_printf_i+0x20a>
 8009ff6:	2500      	movs	r5, #0
 8009ff8:	f104 0619 	add.w	r6, r4, #25
 8009ffc:	e7f5      	b.n	8009fea <_printf_i+0x226>
 8009ffe:	bf00      	nop
 800a000:	0800c72f 	.word	0x0800c72f
 800a004:	0800c740 	.word	0x0800c740

0800a008 <std>:
 800a008:	2300      	movs	r3, #0
 800a00a:	b510      	push	{r4, lr}
 800a00c:	4604      	mov	r4, r0
 800a00e:	e9c0 3300 	strd	r3, r3, [r0]
 800a012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a016:	6083      	str	r3, [r0, #8]
 800a018:	8181      	strh	r1, [r0, #12]
 800a01a:	6643      	str	r3, [r0, #100]	; 0x64
 800a01c:	81c2      	strh	r2, [r0, #14]
 800a01e:	6183      	str	r3, [r0, #24]
 800a020:	4619      	mov	r1, r3
 800a022:	2208      	movs	r2, #8
 800a024:	305c      	adds	r0, #92	; 0x5c
 800a026:	f000 f936 	bl	800a296 <memset>
 800a02a:	4b05      	ldr	r3, [pc, #20]	; (800a040 <std+0x38>)
 800a02c:	6263      	str	r3, [r4, #36]	; 0x24
 800a02e:	4b05      	ldr	r3, [pc, #20]	; (800a044 <std+0x3c>)
 800a030:	62a3      	str	r3, [r4, #40]	; 0x28
 800a032:	4b05      	ldr	r3, [pc, #20]	; (800a048 <std+0x40>)
 800a034:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a036:	4b05      	ldr	r3, [pc, #20]	; (800a04c <std+0x44>)
 800a038:	6224      	str	r4, [r4, #32]
 800a03a:	6323      	str	r3, [r4, #48]	; 0x30
 800a03c:	bd10      	pop	{r4, pc}
 800a03e:	bf00      	nop
 800a040:	0800a211 	.word	0x0800a211
 800a044:	0800a233 	.word	0x0800a233
 800a048:	0800a26b 	.word	0x0800a26b
 800a04c:	0800a28f 	.word	0x0800a28f

0800a050 <stdio_exit_handler>:
 800a050:	4a02      	ldr	r2, [pc, #8]	; (800a05c <stdio_exit_handler+0xc>)
 800a052:	4903      	ldr	r1, [pc, #12]	; (800a060 <stdio_exit_handler+0x10>)
 800a054:	4803      	ldr	r0, [pc, #12]	; (800a064 <stdio_exit_handler+0x14>)
 800a056:	f000 b869 	b.w	800a12c <_fwalk_sglue>
 800a05a:	bf00      	nop
 800a05c:	200000dc 	.word	0x200000dc
 800a060:	0800be31 	.word	0x0800be31
 800a064:	200000e8 	.word	0x200000e8

0800a068 <cleanup_stdio>:
 800a068:	6841      	ldr	r1, [r0, #4]
 800a06a:	4b0c      	ldr	r3, [pc, #48]	; (800a09c <cleanup_stdio+0x34>)
 800a06c:	4299      	cmp	r1, r3
 800a06e:	b510      	push	{r4, lr}
 800a070:	4604      	mov	r4, r0
 800a072:	d001      	beq.n	800a078 <cleanup_stdio+0x10>
 800a074:	f001 fedc 	bl	800be30 <_fflush_r>
 800a078:	68a1      	ldr	r1, [r4, #8]
 800a07a:	4b09      	ldr	r3, [pc, #36]	; (800a0a0 <cleanup_stdio+0x38>)
 800a07c:	4299      	cmp	r1, r3
 800a07e:	d002      	beq.n	800a086 <cleanup_stdio+0x1e>
 800a080:	4620      	mov	r0, r4
 800a082:	f001 fed5 	bl	800be30 <_fflush_r>
 800a086:	68e1      	ldr	r1, [r4, #12]
 800a088:	4b06      	ldr	r3, [pc, #24]	; (800a0a4 <cleanup_stdio+0x3c>)
 800a08a:	4299      	cmp	r1, r3
 800a08c:	d004      	beq.n	800a098 <cleanup_stdio+0x30>
 800a08e:	4620      	mov	r0, r4
 800a090:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a094:	f001 becc 	b.w	800be30 <_fflush_r>
 800a098:	bd10      	pop	{r4, pc}
 800a09a:	bf00      	nop
 800a09c:	20000664 	.word	0x20000664
 800a0a0:	200006cc 	.word	0x200006cc
 800a0a4:	20000734 	.word	0x20000734

0800a0a8 <global_stdio_init.part.0>:
 800a0a8:	b510      	push	{r4, lr}
 800a0aa:	4b0b      	ldr	r3, [pc, #44]	; (800a0d8 <global_stdio_init.part.0+0x30>)
 800a0ac:	4c0b      	ldr	r4, [pc, #44]	; (800a0dc <global_stdio_init.part.0+0x34>)
 800a0ae:	4a0c      	ldr	r2, [pc, #48]	; (800a0e0 <global_stdio_init.part.0+0x38>)
 800a0b0:	601a      	str	r2, [r3, #0]
 800a0b2:	4620      	mov	r0, r4
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	2104      	movs	r1, #4
 800a0b8:	f7ff ffa6 	bl	800a008 <std>
 800a0bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	2109      	movs	r1, #9
 800a0c4:	f7ff ffa0 	bl	800a008 <std>
 800a0c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a0cc:	2202      	movs	r2, #2
 800a0ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a0d2:	2112      	movs	r1, #18
 800a0d4:	f7ff bf98 	b.w	800a008 <std>
 800a0d8:	2000079c 	.word	0x2000079c
 800a0dc:	20000664 	.word	0x20000664
 800a0e0:	0800a051 	.word	0x0800a051

0800a0e4 <__sfp_lock_acquire>:
 800a0e4:	4801      	ldr	r0, [pc, #4]	; (800a0ec <__sfp_lock_acquire+0x8>)
 800a0e6:	f000 b9af 	b.w	800a448 <__retarget_lock_acquire_recursive>
 800a0ea:	bf00      	nop
 800a0ec:	200007a5 	.word	0x200007a5

0800a0f0 <__sfp_lock_release>:
 800a0f0:	4801      	ldr	r0, [pc, #4]	; (800a0f8 <__sfp_lock_release+0x8>)
 800a0f2:	f000 b9aa 	b.w	800a44a <__retarget_lock_release_recursive>
 800a0f6:	bf00      	nop
 800a0f8:	200007a5 	.word	0x200007a5

0800a0fc <__sinit>:
 800a0fc:	b510      	push	{r4, lr}
 800a0fe:	4604      	mov	r4, r0
 800a100:	f7ff fff0 	bl	800a0e4 <__sfp_lock_acquire>
 800a104:	6a23      	ldr	r3, [r4, #32]
 800a106:	b11b      	cbz	r3, 800a110 <__sinit+0x14>
 800a108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a10c:	f7ff bff0 	b.w	800a0f0 <__sfp_lock_release>
 800a110:	4b04      	ldr	r3, [pc, #16]	; (800a124 <__sinit+0x28>)
 800a112:	6223      	str	r3, [r4, #32]
 800a114:	4b04      	ldr	r3, [pc, #16]	; (800a128 <__sinit+0x2c>)
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d1f5      	bne.n	800a108 <__sinit+0xc>
 800a11c:	f7ff ffc4 	bl	800a0a8 <global_stdio_init.part.0>
 800a120:	e7f2      	b.n	800a108 <__sinit+0xc>
 800a122:	bf00      	nop
 800a124:	0800a069 	.word	0x0800a069
 800a128:	2000079c 	.word	0x2000079c

0800a12c <_fwalk_sglue>:
 800a12c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a130:	4607      	mov	r7, r0
 800a132:	4688      	mov	r8, r1
 800a134:	4614      	mov	r4, r2
 800a136:	2600      	movs	r6, #0
 800a138:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a13c:	f1b9 0901 	subs.w	r9, r9, #1
 800a140:	d505      	bpl.n	800a14e <_fwalk_sglue+0x22>
 800a142:	6824      	ldr	r4, [r4, #0]
 800a144:	2c00      	cmp	r4, #0
 800a146:	d1f7      	bne.n	800a138 <_fwalk_sglue+0xc>
 800a148:	4630      	mov	r0, r6
 800a14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a14e:	89ab      	ldrh	r3, [r5, #12]
 800a150:	2b01      	cmp	r3, #1
 800a152:	d907      	bls.n	800a164 <_fwalk_sglue+0x38>
 800a154:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a158:	3301      	adds	r3, #1
 800a15a:	d003      	beq.n	800a164 <_fwalk_sglue+0x38>
 800a15c:	4629      	mov	r1, r5
 800a15e:	4638      	mov	r0, r7
 800a160:	47c0      	blx	r8
 800a162:	4306      	orrs	r6, r0
 800a164:	3568      	adds	r5, #104	; 0x68
 800a166:	e7e9      	b.n	800a13c <_fwalk_sglue+0x10>

0800a168 <sniprintf>:
 800a168:	b40c      	push	{r2, r3}
 800a16a:	b530      	push	{r4, r5, lr}
 800a16c:	4b17      	ldr	r3, [pc, #92]	; (800a1cc <sniprintf+0x64>)
 800a16e:	1e0c      	subs	r4, r1, #0
 800a170:	681d      	ldr	r5, [r3, #0]
 800a172:	b09d      	sub	sp, #116	; 0x74
 800a174:	da08      	bge.n	800a188 <sniprintf+0x20>
 800a176:	238b      	movs	r3, #139	; 0x8b
 800a178:	602b      	str	r3, [r5, #0]
 800a17a:	f04f 30ff 	mov.w	r0, #4294967295
 800a17e:	b01d      	add	sp, #116	; 0x74
 800a180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a184:	b002      	add	sp, #8
 800a186:	4770      	bx	lr
 800a188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a18c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a190:	bf14      	ite	ne
 800a192:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a196:	4623      	moveq	r3, r4
 800a198:	9304      	str	r3, [sp, #16]
 800a19a:	9307      	str	r3, [sp, #28]
 800a19c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1a0:	9002      	str	r0, [sp, #8]
 800a1a2:	9006      	str	r0, [sp, #24]
 800a1a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a1aa:	ab21      	add	r3, sp, #132	; 0x84
 800a1ac:	a902      	add	r1, sp, #8
 800a1ae:	4628      	mov	r0, r5
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	f001 fcb9 	bl	800bb28 <_svfiprintf_r>
 800a1b6:	1c43      	adds	r3, r0, #1
 800a1b8:	bfbc      	itt	lt
 800a1ba:	238b      	movlt	r3, #139	; 0x8b
 800a1bc:	602b      	strlt	r3, [r5, #0]
 800a1be:	2c00      	cmp	r4, #0
 800a1c0:	d0dd      	beq.n	800a17e <sniprintf+0x16>
 800a1c2:	9b02      	ldr	r3, [sp, #8]
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	701a      	strb	r2, [r3, #0]
 800a1c8:	e7d9      	b.n	800a17e <sniprintf+0x16>
 800a1ca:	bf00      	nop
 800a1cc:	20000134 	.word	0x20000134

0800a1d0 <siprintf>:
 800a1d0:	b40e      	push	{r1, r2, r3}
 800a1d2:	b500      	push	{lr}
 800a1d4:	b09c      	sub	sp, #112	; 0x70
 800a1d6:	ab1d      	add	r3, sp, #116	; 0x74
 800a1d8:	9002      	str	r0, [sp, #8]
 800a1da:	9006      	str	r0, [sp, #24]
 800a1dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a1e0:	4809      	ldr	r0, [pc, #36]	; (800a208 <siprintf+0x38>)
 800a1e2:	9107      	str	r1, [sp, #28]
 800a1e4:	9104      	str	r1, [sp, #16]
 800a1e6:	4909      	ldr	r1, [pc, #36]	; (800a20c <siprintf+0x3c>)
 800a1e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1ec:	9105      	str	r1, [sp, #20]
 800a1ee:	6800      	ldr	r0, [r0, #0]
 800a1f0:	9301      	str	r3, [sp, #4]
 800a1f2:	a902      	add	r1, sp, #8
 800a1f4:	f001 fc98 	bl	800bb28 <_svfiprintf_r>
 800a1f8:	9b02      	ldr	r3, [sp, #8]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	701a      	strb	r2, [r3, #0]
 800a1fe:	b01c      	add	sp, #112	; 0x70
 800a200:	f85d eb04 	ldr.w	lr, [sp], #4
 800a204:	b003      	add	sp, #12
 800a206:	4770      	bx	lr
 800a208:	20000134 	.word	0x20000134
 800a20c:	ffff0208 	.word	0xffff0208

0800a210 <__sread>:
 800a210:	b510      	push	{r4, lr}
 800a212:	460c      	mov	r4, r1
 800a214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a218:	f000 f8c8 	bl	800a3ac <_read_r>
 800a21c:	2800      	cmp	r0, #0
 800a21e:	bfab      	itete	ge
 800a220:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a222:	89a3      	ldrhlt	r3, [r4, #12]
 800a224:	181b      	addge	r3, r3, r0
 800a226:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a22a:	bfac      	ite	ge
 800a22c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a22e:	81a3      	strhlt	r3, [r4, #12]
 800a230:	bd10      	pop	{r4, pc}

0800a232 <__swrite>:
 800a232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a236:	461f      	mov	r7, r3
 800a238:	898b      	ldrh	r3, [r1, #12]
 800a23a:	05db      	lsls	r3, r3, #23
 800a23c:	4605      	mov	r5, r0
 800a23e:	460c      	mov	r4, r1
 800a240:	4616      	mov	r6, r2
 800a242:	d505      	bpl.n	800a250 <__swrite+0x1e>
 800a244:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a248:	2302      	movs	r3, #2
 800a24a:	2200      	movs	r2, #0
 800a24c:	f000 f89c 	bl	800a388 <_lseek_r>
 800a250:	89a3      	ldrh	r3, [r4, #12]
 800a252:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a25a:	81a3      	strh	r3, [r4, #12]
 800a25c:	4632      	mov	r2, r6
 800a25e:	463b      	mov	r3, r7
 800a260:	4628      	mov	r0, r5
 800a262:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a266:	f000 b8b3 	b.w	800a3d0 <_write_r>

0800a26a <__sseek>:
 800a26a:	b510      	push	{r4, lr}
 800a26c:	460c      	mov	r4, r1
 800a26e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a272:	f000 f889 	bl	800a388 <_lseek_r>
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	bf15      	itete	ne
 800a27c:	6560      	strne	r0, [r4, #84]	; 0x54
 800a27e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a282:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a286:	81a3      	strheq	r3, [r4, #12]
 800a288:	bf18      	it	ne
 800a28a:	81a3      	strhne	r3, [r4, #12]
 800a28c:	bd10      	pop	{r4, pc}

0800a28e <__sclose>:
 800a28e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a292:	f000 b869 	b.w	800a368 <_close_r>

0800a296 <memset>:
 800a296:	4402      	add	r2, r0
 800a298:	4603      	mov	r3, r0
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d100      	bne.n	800a2a0 <memset+0xa>
 800a29e:	4770      	bx	lr
 800a2a0:	f803 1b01 	strb.w	r1, [r3], #1
 800a2a4:	e7f9      	b.n	800a29a <memset+0x4>
	...

0800a2a8 <strtok>:
 800a2a8:	4b16      	ldr	r3, [pc, #88]	; (800a304 <strtok+0x5c>)
 800a2aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a2ac:	681e      	ldr	r6, [r3, #0]
 800a2ae:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	b9fc      	cbnz	r4, 800a2f4 <strtok+0x4c>
 800a2b4:	2050      	movs	r0, #80	; 0x50
 800a2b6:	9101      	str	r1, [sp, #4]
 800a2b8:	f000 ffac 	bl	800b214 <malloc>
 800a2bc:	9901      	ldr	r1, [sp, #4]
 800a2be:	6470      	str	r0, [r6, #68]	; 0x44
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	b920      	cbnz	r0, 800a2ce <strtok+0x26>
 800a2c4:	4b10      	ldr	r3, [pc, #64]	; (800a308 <strtok+0x60>)
 800a2c6:	4811      	ldr	r0, [pc, #68]	; (800a30c <strtok+0x64>)
 800a2c8:	215b      	movs	r1, #91	; 0x5b
 800a2ca:	f000 f8bf 	bl	800a44c <__assert_func>
 800a2ce:	e9c0 4400 	strd	r4, r4, [r0]
 800a2d2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a2d6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a2da:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a2de:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a2e2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a2e6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a2ea:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a2ee:	6184      	str	r4, [r0, #24]
 800a2f0:	7704      	strb	r4, [r0, #28]
 800a2f2:	6244      	str	r4, [r0, #36]	; 0x24
 800a2f4:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4628      	mov	r0, r5
 800a2fa:	b002      	add	sp, #8
 800a2fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a300:	f000 b806 	b.w	800a310 <__strtok_r>
 800a304:	20000134 	.word	0x20000134
 800a308:	0800c751 	.word	0x0800c751
 800a30c:	0800c768 	.word	0x0800c768

0800a310 <__strtok_r>:
 800a310:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a312:	b908      	cbnz	r0, 800a318 <__strtok_r+0x8>
 800a314:	6810      	ldr	r0, [r2, #0]
 800a316:	b188      	cbz	r0, 800a33c <__strtok_r+0x2c>
 800a318:	4604      	mov	r4, r0
 800a31a:	4620      	mov	r0, r4
 800a31c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a320:	460f      	mov	r7, r1
 800a322:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a326:	b91e      	cbnz	r6, 800a330 <__strtok_r+0x20>
 800a328:	b965      	cbnz	r5, 800a344 <__strtok_r+0x34>
 800a32a:	6015      	str	r5, [r2, #0]
 800a32c:	4628      	mov	r0, r5
 800a32e:	e005      	b.n	800a33c <__strtok_r+0x2c>
 800a330:	42b5      	cmp	r5, r6
 800a332:	d1f6      	bne.n	800a322 <__strtok_r+0x12>
 800a334:	2b00      	cmp	r3, #0
 800a336:	d1f0      	bne.n	800a31a <__strtok_r+0xa>
 800a338:	6014      	str	r4, [r2, #0]
 800a33a:	7003      	strb	r3, [r0, #0]
 800a33c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a33e:	461c      	mov	r4, r3
 800a340:	e00c      	b.n	800a35c <__strtok_r+0x4c>
 800a342:	b915      	cbnz	r5, 800a34a <__strtok_r+0x3a>
 800a344:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a348:	460e      	mov	r6, r1
 800a34a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a34e:	42ab      	cmp	r3, r5
 800a350:	d1f7      	bne.n	800a342 <__strtok_r+0x32>
 800a352:	2b00      	cmp	r3, #0
 800a354:	d0f3      	beq.n	800a33e <__strtok_r+0x2e>
 800a356:	2300      	movs	r3, #0
 800a358:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a35c:	6014      	str	r4, [r2, #0]
 800a35e:	e7ed      	b.n	800a33c <__strtok_r+0x2c>

0800a360 <_localeconv_r>:
 800a360:	4800      	ldr	r0, [pc, #0]	; (800a364 <_localeconv_r+0x4>)
 800a362:	4770      	bx	lr
 800a364:	20000228 	.word	0x20000228

0800a368 <_close_r>:
 800a368:	b538      	push	{r3, r4, r5, lr}
 800a36a:	4d06      	ldr	r5, [pc, #24]	; (800a384 <_close_r+0x1c>)
 800a36c:	2300      	movs	r3, #0
 800a36e:	4604      	mov	r4, r0
 800a370:	4608      	mov	r0, r1
 800a372:	602b      	str	r3, [r5, #0]
 800a374:	f7f7 fc4b 	bl	8001c0e <_close>
 800a378:	1c43      	adds	r3, r0, #1
 800a37a:	d102      	bne.n	800a382 <_close_r+0x1a>
 800a37c:	682b      	ldr	r3, [r5, #0]
 800a37e:	b103      	cbz	r3, 800a382 <_close_r+0x1a>
 800a380:	6023      	str	r3, [r4, #0]
 800a382:	bd38      	pop	{r3, r4, r5, pc}
 800a384:	200007a0 	.word	0x200007a0

0800a388 <_lseek_r>:
 800a388:	b538      	push	{r3, r4, r5, lr}
 800a38a:	4d07      	ldr	r5, [pc, #28]	; (800a3a8 <_lseek_r+0x20>)
 800a38c:	4604      	mov	r4, r0
 800a38e:	4608      	mov	r0, r1
 800a390:	4611      	mov	r1, r2
 800a392:	2200      	movs	r2, #0
 800a394:	602a      	str	r2, [r5, #0]
 800a396:	461a      	mov	r2, r3
 800a398:	f7f7 fc60 	bl	8001c5c <_lseek>
 800a39c:	1c43      	adds	r3, r0, #1
 800a39e:	d102      	bne.n	800a3a6 <_lseek_r+0x1e>
 800a3a0:	682b      	ldr	r3, [r5, #0]
 800a3a2:	b103      	cbz	r3, 800a3a6 <_lseek_r+0x1e>
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	bd38      	pop	{r3, r4, r5, pc}
 800a3a8:	200007a0 	.word	0x200007a0

0800a3ac <_read_r>:
 800a3ac:	b538      	push	{r3, r4, r5, lr}
 800a3ae:	4d07      	ldr	r5, [pc, #28]	; (800a3cc <_read_r+0x20>)
 800a3b0:	4604      	mov	r4, r0
 800a3b2:	4608      	mov	r0, r1
 800a3b4:	4611      	mov	r1, r2
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	602a      	str	r2, [r5, #0]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	f7f7 fbee 	bl	8001b9c <_read>
 800a3c0:	1c43      	adds	r3, r0, #1
 800a3c2:	d102      	bne.n	800a3ca <_read_r+0x1e>
 800a3c4:	682b      	ldr	r3, [r5, #0]
 800a3c6:	b103      	cbz	r3, 800a3ca <_read_r+0x1e>
 800a3c8:	6023      	str	r3, [r4, #0]
 800a3ca:	bd38      	pop	{r3, r4, r5, pc}
 800a3cc:	200007a0 	.word	0x200007a0

0800a3d0 <_write_r>:
 800a3d0:	b538      	push	{r3, r4, r5, lr}
 800a3d2:	4d07      	ldr	r5, [pc, #28]	; (800a3f0 <_write_r+0x20>)
 800a3d4:	4604      	mov	r4, r0
 800a3d6:	4608      	mov	r0, r1
 800a3d8:	4611      	mov	r1, r2
 800a3da:	2200      	movs	r2, #0
 800a3dc:	602a      	str	r2, [r5, #0]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f7f7 fbf9 	bl	8001bd6 <_write>
 800a3e4:	1c43      	adds	r3, r0, #1
 800a3e6:	d102      	bne.n	800a3ee <_write_r+0x1e>
 800a3e8:	682b      	ldr	r3, [r5, #0]
 800a3ea:	b103      	cbz	r3, 800a3ee <_write_r+0x1e>
 800a3ec:	6023      	str	r3, [r4, #0]
 800a3ee:	bd38      	pop	{r3, r4, r5, pc}
 800a3f0:	200007a0 	.word	0x200007a0

0800a3f4 <__errno>:
 800a3f4:	4b01      	ldr	r3, [pc, #4]	; (800a3fc <__errno+0x8>)
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	4770      	bx	lr
 800a3fa:	bf00      	nop
 800a3fc:	20000134 	.word	0x20000134

0800a400 <__libc_init_array>:
 800a400:	b570      	push	{r4, r5, r6, lr}
 800a402:	4d0d      	ldr	r5, [pc, #52]	; (800a438 <__libc_init_array+0x38>)
 800a404:	4c0d      	ldr	r4, [pc, #52]	; (800a43c <__libc_init_array+0x3c>)
 800a406:	1b64      	subs	r4, r4, r5
 800a408:	10a4      	asrs	r4, r4, #2
 800a40a:	2600      	movs	r6, #0
 800a40c:	42a6      	cmp	r6, r4
 800a40e:	d109      	bne.n	800a424 <__libc_init_array+0x24>
 800a410:	4d0b      	ldr	r5, [pc, #44]	; (800a440 <__libc_init_array+0x40>)
 800a412:	4c0c      	ldr	r4, [pc, #48]	; (800a444 <__libc_init_array+0x44>)
 800a414:	f002 f892 	bl	800c53c <_init>
 800a418:	1b64      	subs	r4, r4, r5
 800a41a:	10a4      	asrs	r4, r4, #2
 800a41c:	2600      	movs	r6, #0
 800a41e:	42a6      	cmp	r6, r4
 800a420:	d105      	bne.n	800a42e <__libc_init_array+0x2e>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	f855 3b04 	ldr.w	r3, [r5], #4
 800a428:	4798      	blx	r3
 800a42a:	3601      	adds	r6, #1
 800a42c:	e7ee      	b.n	800a40c <__libc_init_array+0xc>
 800a42e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a432:	4798      	blx	r3
 800a434:	3601      	adds	r6, #1
 800a436:	e7f2      	b.n	800a41e <__libc_init_array+0x1e>
 800a438:	0800c9f0 	.word	0x0800c9f0
 800a43c:	0800c9f0 	.word	0x0800c9f0
 800a440:	0800c9f0 	.word	0x0800c9f0
 800a444:	0800c9f4 	.word	0x0800c9f4

0800a448 <__retarget_lock_acquire_recursive>:
 800a448:	4770      	bx	lr

0800a44a <__retarget_lock_release_recursive>:
 800a44a:	4770      	bx	lr

0800a44c <__assert_func>:
 800a44c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a44e:	4614      	mov	r4, r2
 800a450:	461a      	mov	r2, r3
 800a452:	4b09      	ldr	r3, [pc, #36]	; (800a478 <__assert_func+0x2c>)
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	4605      	mov	r5, r0
 800a458:	68d8      	ldr	r0, [r3, #12]
 800a45a:	b14c      	cbz	r4, 800a470 <__assert_func+0x24>
 800a45c:	4b07      	ldr	r3, [pc, #28]	; (800a47c <__assert_func+0x30>)
 800a45e:	9100      	str	r1, [sp, #0]
 800a460:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a464:	4906      	ldr	r1, [pc, #24]	; (800a480 <__assert_func+0x34>)
 800a466:	462b      	mov	r3, r5
 800a468:	f001 fd0a 	bl	800be80 <fiprintf>
 800a46c:	f001 fd52 	bl	800bf14 <abort>
 800a470:	4b04      	ldr	r3, [pc, #16]	; (800a484 <__assert_func+0x38>)
 800a472:	461c      	mov	r4, r3
 800a474:	e7f3      	b.n	800a45e <__assert_func+0x12>
 800a476:	bf00      	nop
 800a478:	20000134 	.word	0x20000134
 800a47c:	0800c7c2 	.word	0x0800c7c2
 800a480:	0800c7cf 	.word	0x0800c7cf
 800a484:	0800c7fd 	.word	0x0800c7fd

0800a488 <quorem>:
 800a488:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a48c:	6903      	ldr	r3, [r0, #16]
 800a48e:	690c      	ldr	r4, [r1, #16]
 800a490:	42a3      	cmp	r3, r4
 800a492:	4607      	mov	r7, r0
 800a494:	db7e      	blt.n	800a594 <quorem+0x10c>
 800a496:	3c01      	subs	r4, #1
 800a498:	f101 0814 	add.w	r8, r1, #20
 800a49c:	f100 0514 	add.w	r5, r0, #20
 800a4a0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a4a4:	9301      	str	r3, [sp, #4]
 800a4a6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a4aa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a4ae:	3301      	adds	r3, #1
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a4b6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a4ba:	fbb2 f6f3 	udiv	r6, r2, r3
 800a4be:	d331      	bcc.n	800a524 <quorem+0x9c>
 800a4c0:	f04f 0e00 	mov.w	lr, #0
 800a4c4:	4640      	mov	r0, r8
 800a4c6:	46ac      	mov	ip, r5
 800a4c8:	46f2      	mov	sl, lr
 800a4ca:	f850 2b04 	ldr.w	r2, [r0], #4
 800a4ce:	b293      	uxth	r3, r2
 800a4d0:	fb06 e303 	mla	r3, r6, r3, lr
 800a4d4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4d8:	0c1a      	lsrs	r2, r3, #16
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	ebaa 0303 	sub.w	r3, sl, r3
 800a4e0:	f8dc a000 	ldr.w	sl, [ip]
 800a4e4:	fa13 f38a 	uxtah	r3, r3, sl
 800a4e8:	fb06 220e 	mla	r2, r6, lr, r2
 800a4ec:	9300      	str	r3, [sp, #0]
 800a4ee:	9b00      	ldr	r3, [sp, #0]
 800a4f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a4f4:	b292      	uxth	r2, r2
 800a4f6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a4fa:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a4fe:	f8bd 3000 	ldrh.w	r3, [sp]
 800a502:	4581      	cmp	r9, r0
 800a504:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a508:	f84c 3b04 	str.w	r3, [ip], #4
 800a50c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a510:	d2db      	bcs.n	800a4ca <quorem+0x42>
 800a512:	f855 300b 	ldr.w	r3, [r5, fp]
 800a516:	b92b      	cbnz	r3, 800a524 <quorem+0x9c>
 800a518:	9b01      	ldr	r3, [sp, #4]
 800a51a:	3b04      	subs	r3, #4
 800a51c:	429d      	cmp	r5, r3
 800a51e:	461a      	mov	r2, r3
 800a520:	d32c      	bcc.n	800a57c <quorem+0xf4>
 800a522:	613c      	str	r4, [r7, #16]
 800a524:	4638      	mov	r0, r7
 800a526:	f001 f9a5 	bl	800b874 <__mcmp>
 800a52a:	2800      	cmp	r0, #0
 800a52c:	db22      	blt.n	800a574 <quorem+0xec>
 800a52e:	3601      	adds	r6, #1
 800a530:	4629      	mov	r1, r5
 800a532:	2000      	movs	r0, #0
 800a534:	f858 2b04 	ldr.w	r2, [r8], #4
 800a538:	f8d1 c000 	ldr.w	ip, [r1]
 800a53c:	b293      	uxth	r3, r2
 800a53e:	1ac3      	subs	r3, r0, r3
 800a540:	0c12      	lsrs	r2, r2, #16
 800a542:	fa13 f38c 	uxtah	r3, r3, ip
 800a546:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a54a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a54e:	b29b      	uxth	r3, r3
 800a550:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a554:	45c1      	cmp	r9, r8
 800a556:	f841 3b04 	str.w	r3, [r1], #4
 800a55a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a55e:	d2e9      	bcs.n	800a534 <quorem+0xac>
 800a560:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a564:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a568:	b922      	cbnz	r2, 800a574 <quorem+0xec>
 800a56a:	3b04      	subs	r3, #4
 800a56c:	429d      	cmp	r5, r3
 800a56e:	461a      	mov	r2, r3
 800a570:	d30a      	bcc.n	800a588 <quorem+0x100>
 800a572:	613c      	str	r4, [r7, #16]
 800a574:	4630      	mov	r0, r6
 800a576:	b003      	add	sp, #12
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	6812      	ldr	r2, [r2, #0]
 800a57e:	3b04      	subs	r3, #4
 800a580:	2a00      	cmp	r2, #0
 800a582:	d1ce      	bne.n	800a522 <quorem+0x9a>
 800a584:	3c01      	subs	r4, #1
 800a586:	e7c9      	b.n	800a51c <quorem+0x94>
 800a588:	6812      	ldr	r2, [r2, #0]
 800a58a:	3b04      	subs	r3, #4
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	d1f0      	bne.n	800a572 <quorem+0xea>
 800a590:	3c01      	subs	r4, #1
 800a592:	e7eb      	b.n	800a56c <quorem+0xe4>
 800a594:	2000      	movs	r0, #0
 800a596:	e7ee      	b.n	800a576 <quorem+0xee>

0800a598 <_dtoa_r>:
 800a598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a59c:	ed2d 8b04 	vpush	{d8-d9}
 800a5a0:	69c5      	ldr	r5, [r0, #28]
 800a5a2:	b093      	sub	sp, #76	; 0x4c
 800a5a4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a5a8:	ec57 6b10 	vmov	r6, r7, d0
 800a5ac:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a5b0:	9107      	str	r1, [sp, #28]
 800a5b2:	4604      	mov	r4, r0
 800a5b4:	920a      	str	r2, [sp, #40]	; 0x28
 800a5b6:	930d      	str	r3, [sp, #52]	; 0x34
 800a5b8:	b975      	cbnz	r5, 800a5d8 <_dtoa_r+0x40>
 800a5ba:	2010      	movs	r0, #16
 800a5bc:	f000 fe2a 	bl	800b214 <malloc>
 800a5c0:	4602      	mov	r2, r0
 800a5c2:	61e0      	str	r0, [r4, #28]
 800a5c4:	b920      	cbnz	r0, 800a5d0 <_dtoa_r+0x38>
 800a5c6:	4bae      	ldr	r3, [pc, #696]	; (800a880 <_dtoa_r+0x2e8>)
 800a5c8:	21ef      	movs	r1, #239	; 0xef
 800a5ca:	48ae      	ldr	r0, [pc, #696]	; (800a884 <_dtoa_r+0x2ec>)
 800a5cc:	f7ff ff3e 	bl	800a44c <__assert_func>
 800a5d0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a5d4:	6005      	str	r5, [r0, #0]
 800a5d6:	60c5      	str	r5, [r0, #12]
 800a5d8:	69e3      	ldr	r3, [r4, #28]
 800a5da:	6819      	ldr	r1, [r3, #0]
 800a5dc:	b151      	cbz	r1, 800a5f4 <_dtoa_r+0x5c>
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	604a      	str	r2, [r1, #4]
 800a5e2:	2301      	movs	r3, #1
 800a5e4:	4093      	lsls	r3, r2
 800a5e6:	608b      	str	r3, [r1, #8]
 800a5e8:	4620      	mov	r0, r4
 800a5ea:	f000 ff07 	bl	800b3fc <_Bfree>
 800a5ee:	69e3      	ldr	r3, [r4, #28]
 800a5f0:	2200      	movs	r2, #0
 800a5f2:	601a      	str	r2, [r3, #0]
 800a5f4:	1e3b      	subs	r3, r7, #0
 800a5f6:	bfbb      	ittet	lt
 800a5f8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a5fc:	9303      	strlt	r3, [sp, #12]
 800a5fe:	2300      	movge	r3, #0
 800a600:	2201      	movlt	r2, #1
 800a602:	bfac      	ite	ge
 800a604:	f8c8 3000 	strge.w	r3, [r8]
 800a608:	f8c8 2000 	strlt.w	r2, [r8]
 800a60c:	4b9e      	ldr	r3, [pc, #632]	; (800a888 <_dtoa_r+0x2f0>)
 800a60e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a612:	ea33 0308 	bics.w	r3, r3, r8
 800a616:	d11b      	bne.n	800a650 <_dtoa_r+0xb8>
 800a618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a61a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a624:	4333      	orrs	r3, r6
 800a626:	f000 8593 	beq.w	800b150 <_dtoa_r+0xbb8>
 800a62a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a62c:	b963      	cbnz	r3, 800a648 <_dtoa_r+0xb0>
 800a62e:	4b97      	ldr	r3, [pc, #604]	; (800a88c <_dtoa_r+0x2f4>)
 800a630:	e027      	b.n	800a682 <_dtoa_r+0xea>
 800a632:	4b97      	ldr	r3, [pc, #604]	; (800a890 <_dtoa_r+0x2f8>)
 800a634:	9300      	str	r3, [sp, #0]
 800a636:	3308      	adds	r3, #8
 800a638:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a63a:	6013      	str	r3, [r2, #0]
 800a63c:	9800      	ldr	r0, [sp, #0]
 800a63e:	b013      	add	sp, #76	; 0x4c
 800a640:	ecbd 8b04 	vpop	{d8-d9}
 800a644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a648:	4b90      	ldr	r3, [pc, #576]	; (800a88c <_dtoa_r+0x2f4>)
 800a64a:	9300      	str	r3, [sp, #0]
 800a64c:	3303      	adds	r3, #3
 800a64e:	e7f3      	b.n	800a638 <_dtoa_r+0xa0>
 800a650:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a654:	2200      	movs	r2, #0
 800a656:	ec51 0b17 	vmov	r0, r1, d7
 800a65a:	eeb0 8a47 	vmov.f32	s16, s14
 800a65e:	eef0 8a67 	vmov.f32	s17, s15
 800a662:	2300      	movs	r3, #0
 800a664:	f7f6 fa68 	bl	8000b38 <__aeabi_dcmpeq>
 800a668:	4681      	mov	r9, r0
 800a66a:	b160      	cbz	r0, 800a686 <_dtoa_r+0xee>
 800a66c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a66e:	2301      	movs	r3, #1
 800a670:	6013      	str	r3, [r2, #0]
 800a672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a674:	2b00      	cmp	r3, #0
 800a676:	f000 8568 	beq.w	800b14a <_dtoa_r+0xbb2>
 800a67a:	4b86      	ldr	r3, [pc, #536]	; (800a894 <_dtoa_r+0x2fc>)
 800a67c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a67e:	6013      	str	r3, [r2, #0]
 800a680:	3b01      	subs	r3, #1
 800a682:	9300      	str	r3, [sp, #0]
 800a684:	e7da      	b.n	800a63c <_dtoa_r+0xa4>
 800a686:	aa10      	add	r2, sp, #64	; 0x40
 800a688:	a911      	add	r1, sp, #68	; 0x44
 800a68a:	4620      	mov	r0, r4
 800a68c:	eeb0 0a48 	vmov.f32	s0, s16
 800a690:	eef0 0a68 	vmov.f32	s1, s17
 800a694:	f001 f994 	bl	800b9c0 <__d2b>
 800a698:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a69c:	4682      	mov	sl, r0
 800a69e:	2d00      	cmp	r5, #0
 800a6a0:	d07f      	beq.n	800a7a2 <_dtoa_r+0x20a>
 800a6a2:	ee18 3a90 	vmov	r3, s17
 800a6a6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a6aa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a6ae:	ec51 0b18 	vmov	r0, r1, d8
 800a6b2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a6b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a6ba:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a6be:	4619      	mov	r1, r3
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	4b75      	ldr	r3, [pc, #468]	; (800a898 <_dtoa_r+0x300>)
 800a6c4:	f7f5 fe18 	bl	80002f8 <__aeabi_dsub>
 800a6c8:	a367      	add	r3, pc, #412	; (adr r3, 800a868 <_dtoa_r+0x2d0>)
 800a6ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ce:	f7f5 ffcb 	bl	8000668 <__aeabi_dmul>
 800a6d2:	a367      	add	r3, pc, #412	; (adr r3, 800a870 <_dtoa_r+0x2d8>)
 800a6d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6d8:	f7f5 fe10 	bl	80002fc <__adddf3>
 800a6dc:	4606      	mov	r6, r0
 800a6de:	4628      	mov	r0, r5
 800a6e0:	460f      	mov	r7, r1
 800a6e2:	f7f5 ff57 	bl	8000594 <__aeabi_i2d>
 800a6e6:	a364      	add	r3, pc, #400	; (adr r3, 800a878 <_dtoa_r+0x2e0>)
 800a6e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6ec:	f7f5 ffbc 	bl	8000668 <__aeabi_dmul>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	4639      	mov	r1, r7
 800a6f8:	f7f5 fe00 	bl	80002fc <__adddf3>
 800a6fc:	4606      	mov	r6, r0
 800a6fe:	460f      	mov	r7, r1
 800a700:	f7f6 fa62 	bl	8000bc8 <__aeabi_d2iz>
 800a704:	2200      	movs	r2, #0
 800a706:	4683      	mov	fp, r0
 800a708:	2300      	movs	r3, #0
 800a70a:	4630      	mov	r0, r6
 800a70c:	4639      	mov	r1, r7
 800a70e:	f7f6 fa1d 	bl	8000b4c <__aeabi_dcmplt>
 800a712:	b148      	cbz	r0, 800a728 <_dtoa_r+0x190>
 800a714:	4658      	mov	r0, fp
 800a716:	f7f5 ff3d 	bl	8000594 <__aeabi_i2d>
 800a71a:	4632      	mov	r2, r6
 800a71c:	463b      	mov	r3, r7
 800a71e:	f7f6 fa0b 	bl	8000b38 <__aeabi_dcmpeq>
 800a722:	b908      	cbnz	r0, 800a728 <_dtoa_r+0x190>
 800a724:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a728:	f1bb 0f16 	cmp.w	fp, #22
 800a72c:	d857      	bhi.n	800a7de <_dtoa_r+0x246>
 800a72e:	4b5b      	ldr	r3, [pc, #364]	; (800a89c <_dtoa_r+0x304>)
 800a730:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a738:	ec51 0b18 	vmov	r0, r1, d8
 800a73c:	f7f6 fa06 	bl	8000b4c <__aeabi_dcmplt>
 800a740:	2800      	cmp	r0, #0
 800a742:	d04e      	beq.n	800a7e2 <_dtoa_r+0x24a>
 800a744:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a748:	2300      	movs	r3, #0
 800a74a:	930c      	str	r3, [sp, #48]	; 0x30
 800a74c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a74e:	1b5b      	subs	r3, r3, r5
 800a750:	1e5a      	subs	r2, r3, #1
 800a752:	bf45      	ittet	mi
 800a754:	f1c3 0301 	rsbmi	r3, r3, #1
 800a758:	9305      	strmi	r3, [sp, #20]
 800a75a:	2300      	movpl	r3, #0
 800a75c:	2300      	movmi	r3, #0
 800a75e:	9206      	str	r2, [sp, #24]
 800a760:	bf54      	ite	pl
 800a762:	9305      	strpl	r3, [sp, #20]
 800a764:	9306      	strmi	r3, [sp, #24]
 800a766:	f1bb 0f00 	cmp.w	fp, #0
 800a76a:	db3c      	blt.n	800a7e6 <_dtoa_r+0x24e>
 800a76c:	9b06      	ldr	r3, [sp, #24]
 800a76e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a772:	445b      	add	r3, fp
 800a774:	9306      	str	r3, [sp, #24]
 800a776:	2300      	movs	r3, #0
 800a778:	9308      	str	r3, [sp, #32]
 800a77a:	9b07      	ldr	r3, [sp, #28]
 800a77c:	2b09      	cmp	r3, #9
 800a77e:	d868      	bhi.n	800a852 <_dtoa_r+0x2ba>
 800a780:	2b05      	cmp	r3, #5
 800a782:	bfc4      	itt	gt
 800a784:	3b04      	subgt	r3, #4
 800a786:	9307      	strgt	r3, [sp, #28]
 800a788:	9b07      	ldr	r3, [sp, #28]
 800a78a:	f1a3 0302 	sub.w	r3, r3, #2
 800a78e:	bfcc      	ite	gt
 800a790:	2500      	movgt	r5, #0
 800a792:	2501      	movle	r5, #1
 800a794:	2b03      	cmp	r3, #3
 800a796:	f200 8085 	bhi.w	800a8a4 <_dtoa_r+0x30c>
 800a79a:	e8df f003 	tbb	[pc, r3]
 800a79e:	3b2e      	.short	0x3b2e
 800a7a0:	5839      	.short	0x5839
 800a7a2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a7a6:	441d      	add	r5, r3
 800a7a8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a7ac:	2b20      	cmp	r3, #32
 800a7ae:	bfc1      	itttt	gt
 800a7b0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a7b4:	fa08 f803 	lslgt.w	r8, r8, r3
 800a7b8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a7bc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a7c0:	bfd6      	itet	le
 800a7c2:	f1c3 0320 	rsble	r3, r3, #32
 800a7c6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a7ca:	fa06 f003 	lslle.w	r0, r6, r3
 800a7ce:	f7f5 fed1 	bl	8000574 <__aeabi_ui2d>
 800a7d2:	2201      	movs	r2, #1
 800a7d4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a7d8:	3d01      	subs	r5, #1
 800a7da:	920e      	str	r2, [sp, #56]	; 0x38
 800a7dc:	e76f      	b.n	800a6be <_dtoa_r+0x126>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e7b3      	b.n	800a74a <_dtoa_r+0x1b2>
 800a7e2:	900c      	str	r0, [sp, #48]	; 0x30
 800a7e4:	e7b2      	b.n	800a74c <_dtoa_r+0x1b4>
 800a7e6:	9b05      	ldr	r3, [sp, #20]
 800a7e8:	eba3 030b 	sub.w	r3, r3, fp
 800a7ec:	9305      	str	r3, [sp, #20]
 800a7ee:	f1cb 0300 	rsb	r3, fp, #0
 800a7f2:	9308      	str	r3, [sp, #32]
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a7f8:	e7bf      	b.n	800a77a <_dtoa_r+0x1e2>
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	9309      	str	r3, [sp, #36]	; 0x24
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	2b00      	cmp	r3, #0
 800a802:	dc52      	bgt.n	800a8aa <_dtoa_r+0x312>
 800a804:	2301      	movs	r3, #1
 800a806:	9301      	str	r3, [sp, #4]
 800a808:	9304      	str	r3, [sp, #16]
 800a80a:	461a      	mov	r2, r3
 800a80c:	920a      	str	r2, [sp, #40]	; 0x28
 800a80e:	e00b      	b.n	800a828 <_dtoa_r+0x290>
 800a810:	2301      	movs	r3, #1
 800a812:	e7f3      	b.n	800a7fc <_dtoa_r+0x264>
 800a814:	2300      	movs	r3, #0
 800a816:	9309      	str	r3, [sp, #36]	; 0x24
 800a818:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a81a:	445b      	add	r3, fp
 800a81c:	9301      	str	r3, [sp, #4]
 800a81e:	3301      	adds	r3, #1
 800a820:	2b01      	cmp	r3, #1
 800a822:	9304      	str	r3, [sp, #16]
 800a824:	bfb8      	it	lt
 800a826:	2301      	movlt	r3, #1
 800a828:	69e0      	ldr	r0, [r4, #28]
 800a82a:	2100      	movs	r1, #0
 800a82c:	2204      	movs	r2, #4
 800a82e:	f102 0614 	add.w	r6, r2, #20
 800a832:	429e      	cmp	r6, r3
 800a834:	d93d      	bls.n	800a8b2 <_dtoa_r+0x31a>
 800a836:	6041      	str	r1, [r0, #4]
 800a838:	4620      	mov	r0, r4
 800a83a:	f000 fd9f 	bl	800b37c <_Balloc>
 800a83e:	9000      	str	r0, [sp, #0]
 800a840:	2800      	cmp	r0, #0
 800a842:	d139      	bne.n	800a8b8 <_dtoa_r+0x320>
 800a844:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <_dtoa_r+0x308>)
 800a846:	4602      	mov	r2, r0
 800a848:	f240 11af 	movw	r1, #431	; 0x1af
 800a84c:	e6bd      	b.n	800a5ca <_dtoa_r+0x32>
 800a84e:	2301      	movs	r3, #1
 800a850:	e7e1      	b.n	800a816 <_dtoa_r+0x27e>
 800a852:	2501      	movs	r5, #1
 800a854:	2300      	movs	r3, #0
 800a856:	9307      	str	r3, [sp, #28]
 800a858:	9509      	str	r5, [sp, #36]	; 0x24
 800a85a:	f04f 33ff 	mov.w	r3, #4294967295
 800a85e:	9301      	str	r3, [sp, #4]
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	2200      	movs	r2, #0
 800a864:	2312      	movs	r3, #18
 800a866:	e7d1      	b.n	800a80c <_dtoa_r+0x274>
 800a868:	636f4361 	.word	0x636f4361
 800a86c:	3fd287a7 	.word	0x3fd287a7
 800a870:	8b60c8b3 	.word	0x8b60c8b3
 800a874:	3fc68a28 	.word	0x3fc68a28
 800a878:	509f79fb 	.word	0x509f79fb
 800a87c:	3fd34413 	.word	0x3fd34413
 800a880:	0800c751 	.word	0x0800c751
 800a884:	0800c80b 	.word	0x0800c80b
 800a888:	7ff00000 	.word	0x7ff00000
 800a88c:	0800c807 	.word	0x0800c807
 800a890:	0800c7fe 	.word	0x0800c7fe
 800a894:	0800c72e 	.word	0x0800c72e
 800a898:	3ff80000 	.word	0x3ff80000
 800a89c:	0800c8f8 	.word	0x0800c8f8
 800a8a0:	0800c863 	.word	0x0800c863
 800a8a4:	2301      	movs	r3, #1
 800a8a6:	9309      	str	r3, [sp, #36]	; 0x24
 800a8a8:	e7d7      	b.n	800a85a <_dtoa_r+0x2c2>
 800a8aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8ac:	9301      	str	r3, [sp, #4]
 800a8ae:	9304      	str	r3, [sp, #16]
 800a8b0:	e7ba      	b.n	800a828 <_dtoa_r+0x290>
 800a8b2:	3101      	adds	r1, #1
 800a8b4:	0052      	lsls	r2, r2, #1
 800a8b6:	e7ba      	b.n	800a82e <_dtoa_r+0x296>
 800a8b8:	69e3      	ldr	r3, [r4, #28]
 800a8ba:	9a00      	ldr	r2, [sp, #0]
 800a8bc:	601a      	str	r2, [r3, #0]
 800a8be:	9b04      	ldr	r3, [sp, #16]
 800a8c0:	2b0e      	cmp	r3, #14
 800a8c2:	f200 80a8 	bhi.w	800aa16 <_dtoa_r+0x47e>
 800a8c6:	2d00      	cmp	r5, #0
 800a8c8:	f000 80a5 	beq.w	800aa16 <_dtoa_r+0x47e>
 800a8cc:	f1bb 0f00 	cmp.w	fp, #0
 800a8d0:	dd38      	ble.n	800a944 <_dtoa_r+0x3ac>
 800a8d2:	4bc0      	ldr	r3, [pc, #768]	; (800abd4 <_dtoa_r+0x63c>)
 800a8d4:	f00b 020f 	and.w	r2, fp, #15
 800a8d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a8dc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a8e0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a8e4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a8e8:	d019      	beq.n	800a91e <_dtoa_r+0x386>
 800a8ea:	4bbb      	ldr	r3, [pc, #748]	; (800abd8 <_dtoa_r+0x640>)
 800a8ec:	ec51 0b18 	vmov	r0, r1, d8
 800a8f0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a8f4:	f7f5 ffe2 	bl	80008bc <__aeabi_ddiv>
 800a8f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a8fc:	f008 080f 	and.w	r8, r8, #15
 800a900:	2503      	movs	r5, #3
 800a902:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800abd8 <_dtoa_r+0x640>
 800a906:	f1b8 0f00 	cmp.w	r8, #0
 800a90a:	d10a      	bne.n	800a922 <_dtoa_r+0x38a>
 800a90c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a910:	4632      	mov	r2, r6
 800a912:	463b      	mov	r3, r7
 800a914:	f7f5 ffd2 	bl	80008bc <__aeabi_ddiv>
 800a918:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a91c:	e02b      	b.n	800a976 <_dtoa_r+0x3de>
 800a91e:	2502      	movs	r5, #2
 800a920:	e7ef      	b.n	800a902 <_dtoa_r+0x36a>
 800a922:	f018 0f01 	tst.w	r8, #1
 800a926:	d008      	beq.n	800a93a <_dtoa_r+0x3a2>
 800a928:	4630      	mov	r0, r6
 800a92a:	4639      	mov	r1, r7
 800a92c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a930:	f7f5 fe9a 	bl	8000668 <__aeabi_dmul>
 800a934:	3501      	adds	r5, #1
 800a936:	4606      	mov	r6, r0
 800a938:	460f      	mov	r7, r1
 800a93a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a93e:	f109 0908 	add.w	r9, r9, #8
 800a942:	e7e0      	b.n	800a906 <_dtoa_r+0x36e>
 800a944:	f000 809f 	beq.w	800aa86 <_dtoa_r+0x4ee>
 800a948:	f1cb 0600 	rsb	r6, fp, #0
 800a94c:	4ba1      	ldr	r3, [pc, #644]	; (800abd4 <_dtoa_r+0x63c>)
 800a94e:	4fa2      	ldr	r7, [pc, #648]	; (800abd8 <_dtoa_r+0x640>)
 800a950:	f006 020f 	and.w	r2, r6, #15
 800a954:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a95c:	ec51 0b18 	vmov	r0, r1, d8
 800a960:	f7f5 fe82 	bl	8000668 <__aeabi_dmul>
 800a964:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a968:	1136      	asrs	r6, r6, #4
 800a96a:	2300      	movs	r3, #0
 800a96c:	2502      	movs	r5, #2
 800a96e:	2e00      	cmp	r6, #0
 800a970:	d17e      	bne.n	800aa70 <_dtoa_r+0x4d8>
 800a972:	2b00      	cmp	r3, #0
 800a974:	d1d0      	bne.n	800a918 <_dtoa_r+0x380>
 800a976:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a978:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	f000 8084 	beq.w	800aa8a <_dtoa_r+0x4f2>
 800a982:	4b96      	ldr	r3, [pc, #600]	; (800abdc <_dtoa_r+0x644>)
 800a984:	2200      	movs	r2, #0
 800a986:	4640      	mov	r0, r8
 800a988:	4649      	mov	r1, r9
 800a98a:	f7f6 f8df 	bl	8000b4c <__aeabi_dcmplt>
 800a98e:	2800      	cmp	r0, #0
 800a990:	d07b      	beq.n	800aa8a <_dtoa_r+0x4f2>
 800a992:	9b04      	ldr	r3, [sp, #16]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d078      	beq.n	800aa8a <_dtoa_r+0x4f2>
 800a998:	9b01      	ldr	r3, [sp, #4]
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	dd39      	ble.n	800aa12 <_dtoa_r+0x47a>
 800a99e:	4b90      	ldr	r3, [pc, #576]	; (800abe0 <_dtoa_r+0x648>)
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	4640      	mov	r0, r8
 800a9a4:	4649      	mov	r1, r9
 800a9a6:	f7f5 fe5f 	bl	8000668 <__aeabi_dmul>
 800a9aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9ae:	9e01      	ldr	r6, [sp, #4]
 800a9b0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a9b4:	3501      	adds	r5, #1
 800a9b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a9ba:	4628      	mov	r0, r5
 800a9bc:	f7f5 fdea 	bl	8000594 <__aeabi_i2d>
 800a9c0:	4642      	mov	r2, r8
 800a9c2:	464b      	mov	r3, r9
 800a9c4:	f7f5 fe50 	bl	8000668 <__aeabi_dmul>
 800a9c8:	4b86      	ldr	r3, [pc, #536]	; (800abe4 <_dtoa_r+0x64c>)
 800a9ca:	2200      	movs	r2, #0
 800a9cc:	f7f5 fc96 	bl	80002fc <__adddf3>
 800a9d0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a9d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a9d8:	9303      	str	r3, [sp, #12]
 800a9da:	2e00      	cmp	r6, #0
 800a9dc:	d158      	bne.n	800aa90 <_dtoa_r+0x4f8>
 800a9de:	4b82      	ldr	r3, [pc, #520]	; (800abe8 <_dtoa_r+0x650>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	4640      	mov	r0, r8
 800a9e4:	4649      	mov	r1, r9
 800a9e6:	f7f5 fc87 	bl	80002f8 <__aeabi_dsub>
 800a9ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a9ee:	4680      	mov	r8, r0
 800a9f0:	4689      	mov	r9, r1
 800a9f2:	f7f6 f8c9 	bl	8000b88 <__aeabi_dcmpgt>
 800a9f6:	2800      	cmp	r0, #0
 800a9f8:	f040 8296 	bne.w	800af28 <_dtoa_r+0x990>
 800a9fc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800aa00:	4640      	mov	r0, r8
 800aa02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa06:	4649      	mov	r1, r9
 800aa08:	f7f6 f8a0 	bl	8000b4c <__aeabi_dcmplt>
 800aa0c:	2800      	cmp	r0, #0
 800aa0e:	f040 8289 	bne.w	800af24 <_dtoa_r+0x98c>
 800aa12:	ed8d 8b02 	vstr	d8, [sp, #8]
 800aa16:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	f2c0 814e 	blt.w	800acba <_dtoa_r+0x722>
 800aa1e:	f1bb 0f0e 	cmp.w	fp, #14
 800aa22:	f300 814a 	bgt.w	800acba <_dtoa_r+0x722>
 800aa26:	4b6b      	ldr	r3, [pc, #428]	; (800abd4 <_dtoa_r+0x63c>)
 800aa28:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800aa2c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa30:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	f280 80dc 	bge.w	800abf0 <_dtoa_r+0x658>
 800aa38:	9b04      	ldr	r3, [sp, #16]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f300 80d8 	bgt.w	800abf0 <_dtoa_r+0x658>
 800aa40:	f040 826f 	bne.w	800af22 <_dtoa_r+0x98a>
 800aa44:	4b68      	ldr	r3, [pc, #416]	; (800abe8 <_dtoa_r+0x650>)
 800aa46:	2200      	movs	r2, #0
 800aa48:	4640      	mov	r0, r8
 800aa4a:	4649      	mov	r1, r9
 800aa4c:	f7f5 fe0c 	bl	8000668 <__aeabi_dmul>
 800aa50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800aa54:	f7f6 f88e 	bl	8000b74 <__aeabi_dcmpge>
 800aa58:	9e04      	ldr	r6, [sp, #16]
 800aa5a:	4637      	mov	r7, r6
 800aa5c:	2800      	cmp	r0, #0
 800aa5e:	f040 8245 	bne.w	800aeec <_dtoa_r+0x954>
 800aa62:	9d00      	ldr	r5, [sp, #0]
 800aa64:	2331      	movs	r3, #49	; 0x31
 800aa66:	f805 3b01 	strb.w	r3, [r5], #1
 800aa6a:	f10b 0b01 	add.w	fp, fp, #1
 800aa6e:	e241      	b.n	800aef4 <_dtoa_r+0x95c>
 800aa70:	07f2      	lsls	r2, r6, #31
 800aa72:	d505      	bpl.n	800aa80 <_dtoa_r+0x4e8>
 800aa74:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aa78:	f7f5 fdf6 	bl	8000668 <__aeabi_dmul>
 800aa7c:	3501      	adds	r5, #1
 800aa7e:	2301      	movs	r3, #1
 800aa80:	1076      	asrs	r6, r6, #1
 800aa82:	3708      	adds	r7, #8
 800aa84:	e773      	b.n	800a96e <_dtoa_r+0x3d6>
 800aa86:	2502      	movs	r5, #2
 800aa88:	e775      	b.n	800a976 <_dtoa_r+0x3de>
 800aa8a:	9e04      	ldr	r6, [sp, #16]
 800aa8c:	465f      	mov	r7, fp
 800aa8e:	e792      	b.n	800a9b6 <_dtoa_r+0x41e>
 800aa90:	9900      	ldr	r1, [sp, #0]
 800aa92:	4b50      	ldr	r3, [pc, #320]	; (800abd4 <_dtoa_r+0x63c>)
 800aa94:	ed9d 7b02 	vldr	d7, [sp, #8]
 800aa98:	4431      	add	r1, r6
 800aa9a:	9102      	str	r1, [sp, #8]
 800aa9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aa9e:	eeb0 9a47 	vmov.f32	s18, s14
 800aaa2:	eef0 9a67 	vmov.f32	s19, s15
 800aaa6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800aaaa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800aaae:	2900      	cmp	r1, #0
 800aab0:	d044      	beq.n	800ab3c <_dtoa_r+0x5a4>
 800aab2:	494e      	ldr	r1, [pc, #312]	; (800abec <_dtoa_r+0x654>)
 800aab4:	2000      	movs	r0, #0
 800aab6:	f7f5 ff01 	bl	80008bc <__aeabi_ddiv>
 800aaba:	ec53 2b19 	vmov	r2, r3, d9
 800aabe:	f7f5 fc1b 	bl	80002f8 <__aeabi_dsub>
 800aac2:	9d00      	ldr	r5, [sp, #0]
 800aac4:	ec41 0b19 	vmov	d9, r0, r1
 800aac8:	4649      	mov	r1, r9
 800aaca:	4640      	mov	r0, r8
 800aacc:	f7f6 f87c 	bl	8000bc8 <__aeabi_d2iz>
 800aad0:	4606      	mov	r6, r0
 800aad2:	f7f5 fd5f 	bl	8000594 <__aeabi_i2d>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	4640      	mov	r0, r8
 800aadc:	4649      	mov	r1, r9
 800aade:	f7f5 fc0b 	bl	80002f8 <__aeabi_dsub>
 800aae2:	3630      	adds	r6, #48	; 0x30
 800aae4:	f805 6b01 	strb.w	r6, [r5], #1
 800aae8:	ec53 2b19 	vmov	r2, r3, d9
 800aaec:	4680      	mov	r8, r0
 800aaee:	4689      	mov	r9, r1
 800aaf0:	f7f6 f82c 	bl	8000b4c <__aeabi_dcmplt>
 800aaf4:	2800      	cmp	r0, #0
 800aaf6:	d164      	bne.n	800abc2 <_dtoa_r+0x62a>
 800aaf8:	4642      	mov	r2, r8
 800aafa:	464b      	mov	r3, r9
 800aafc:	4937      	ldr	r1, [pc, #220]	; (800abdc <_dtoa_r+0x644>)
 800aafe:	2000      	movs	r0, #0
 800ab00:	f7f5 fbfa 	bl	80002f8 <__aeabi_dsub>
 800ab04:	ec53 2b19 	vmov	r2, r3, d9
 800ab08:	f7f6 f820 	bl	8000b4c <__aeabi_dcmplt>
 800ab0c:	2800      	cmp	r0, #0
 800ab0e:	f040 80b6 	bne.w	800ac7e <_dtoa_r+0x6e6>
 800ab12:	9b02      	ldr	r3, [sp, #8]
 800ab14:	429d      	cmp	r5, r3
 800ab16:	f43f af7c 	beq.w	800aa12 <_dtoa_r+0x47a>
 800ab1a:	4b31      	ldr	r3, [pc, #196]	; (800abe0 <_dtoa_r+0x648>)
 800ab1c:	ec51 0b19 	vmov	r0, r1, d9
 800ab20:	2200      	movs	r2, #0
 800ab22:	f7f5 fda1 	bl	8000668 <__aeabi_dmul>
 800ab26:	4b2e      	ldr	r3, [pc, #184]	; (800abe0 <_dtoa_r+0x648>)
 800ab28:	ec41 0b19 	vmov	d9, r0, r1
 800ab2c:	2200      	movs	r2, #0
 800ab2e:	4640      	mov	r0, r8
 800ab30:	4649      	mov	r1, r9
 800ab32:	f7f5 fd99 	bl	8000668 <__aeabi_dmul>
 800ab36:	4680      	mov	r8, r0
 800ab38:	4689      	mov	r9, r1
 800ab3a:	e7c5      	b.n	800aac8 <_dtoa_r+0x530>
 800ab3c:	ec51 0b17 	vmov	r0, r1, d7
 800ab40:	f7f5 fd92 	bl	8000668 <__aeabi_dmul>
 800ab44:	9b02      	ldr	r3, [sp, #8]
 800ab46:	9d00      	ldr	r5, [sp, #0]
 800ab48:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab4a:	ec41 0b19 	vmov	d9, r0, r1
 800ab4e:	4649      	mov	r1, r9
 800ab50:	4640      	mov	r0, r8
 800ab52:	f7f6 f839 	bl	8000bc8 <__aeabi_d2iz>
 800ab56:	4606      	mov	r6, r0
 800ab58:	f7f5 fd1c 	bl	8000594 <__aeabi_i2d>
 800ab5c:	3630      	adds	r6, #48	; 0x30
 800ab5e:	4602      	mov	r2, r0
 800ab60:	460b      	mov	r3, r1
 800ab62:	4640      	mov	r0, r8
 800ab64:	4649      	mov	r1, r9
 800ab66:	f7f5 fbc7 	bl	80002f8 <__aeabi_dsub>
 800ab6a:	f805 6b01 	strb.w	r6, [r5], #1
 800ab6e:	9b02      	ldr	r3, [sp, #8]
 800ab70:	429d      	cmp	r5, r3
 800ab72:	4680      	mov	r8, r0
 800ab74:	4689      	mov	r9, r1
 800ab76:	f04f 0200 	mov.w	r2, #0
 800ab7a:	d124      	bne.n	800abc6 <_dtoa_r+0x62e>
 800ab7c:	4b1b      	ldr	r3, [pc, #108]	; (800abec <_dtoa_r+0x654>)
 800ab7e:	ec51 0b19 	vmov	r0, r1, d9
 800ab82:	f7f5 fbbb 	bl	80002fc <__adddf3>
 800ab86:	4602      	mov	r2, r0
 800ab88:	460b      	mov	r3, r1
 800ab8a:	4640      	mov	r0, r8
 800ab8c:	4649      	mov	r1, r9
 800ab8e:	f7f5 fffb 	bl	8000b88 <__aeabi_dcmpgt>
 800ab92:	2800      	cmp	r0, #0
 800ab94:	d173      	bne.n	800ac7e <_dtoa_r+0x6e6>
 800ab96:	ec53 2b19 	vmov	r2, r3, d9
 800ab9a:	4914      	ldr	r1, [pc, #80]	; (800abec <_dtoa_r+0x654>)
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	f7f5 fbab 	bl	80002f8 <__aeabi_dsub>
 800aba2:	4602      	mov	r2, r0
 800aba4:	460b      	mov	r3, r1
 800aba6:	4640      	mov	r0, r8
 800aba8:	4649      	mov	r1, r9
 800abaa:	f7f5 ffcf 	bl	8000b4c <__aeabi_dcmplt>
 800abae:	2800      	cmp	r0, #0
 800abb0:	f43f af2f 	beq.w	800aa12 <_dtoa_r+0x47a>
 800abb4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800abb6:	1e6b      	subs	r3, r5, #1
 800abb8:	930f      	str	r3, [sp, #60]	; 0x3c
 800abba:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800abbe:	2b30      	cmp	r3, #48	; 0x30
 800abc0:	d0f8      	beq.n	800abb4 <_dtoa_r+0x61c>
 800abc2:	46bb      	mov	fp, r7
 800abc4:	e04a      	b.n	800ac5c <_dtoa_r+0x6c4>
 800abc6:	4b06      	ldr	r3, [pc, #24]	; (800abe0 <_dtoa_r+0x648>)
 800abc8:	f7f5 fd4e 	bl	8000668 <__aeabi_dmul>
 800abcc:	4680      	mov	r8, r0
 800abce:	4689      	mov	r9, r1
 800abd0:	e7bd      	b.n	800ab4e <_dtoa_r+0x5b6>
 800abd2:	bf00      	nop
 800abd4:	0800c8f8 	.word	0x0800c8f8
 800abd8:	0800c8d0 	.word	0x0800c8d0
 800abdc:	3ff00000 	.word	0x3ff00000
 800abe0:	40240000 	.word	0x40240000
 800abe4:	401c0000 	.word	0x401c0000
 800abe8:	40140000 	.word	0x40140000
 800abec:	3fe00000 	.word	0x3fe00000
 800abf0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800abf4:	9d00      	ldr	r5, [sp, #0]
 800abf6:	4642      	mov	r2, r8
 800abf8:	464b      	mov	r3, r9
 800abfa:	4630      	mov	r0, r6
 800abfc:	4639      	mov	r1, r7
 800abfe:	f7f5 fe5d 	bl	80008bc <__aeabi_ddiv>
 800ac02:	f7f5 ffe1 	bl	8000bc8 <__aeabi_d2iz>
 800ac06:	9001      	str	r0, [sp, #4]
 800ac08:	f7f5 fcc4 	bl	8000594 <__aeabi_i2d>
 800ac0c:	4642      	mov	r2, r8
 800ac0e:	464b      	mov	r3, r9
 800ac10:	f7f5 fd2a 	bl	8000668 <__aeabi_dmul>
 800ac14:	4602      	mov	r2, r0
 800ac16:	460b      	mov	r3, r1
 800ac18:	4630      	mov	r0, r6
 800ac1a:	4639      	mov	r1, r7
 800ac1c:	f7f5 fb6c 	bl	80002f8 <__aeabi_dsub>
 800ac20:	9e01      	ldr	r6, [sp, #4]
 800ac22:	9f04      	ldr	r7, [sp, #16]
 800ac24:	3630      	adds	r6, #48	; 0x30
 800ac26:	f805 6b01 	strb.w	r6, [r5], #1
 800ac2a:	9e00      	ldr	r6, [sp, #0]
 800ac2c:	1bae      	subs	r6, r5, r6
 800ac2e:	42b7      	cmp	r7, r6
 800ac30:	4602      	mov	r2, r0
 800ac32:	460b      	mov	r3, r1
 800ac34:	d134      	bne.n	800aca0 <_dtoa_r+0x708>
 800ac36:	f7f5 fb61 	bl	80002fc <__adddf3>
 800ac3a:	4642      	mov	r2, r8
 800ac3c:	464b      	mov	r3, r9
 800ac3e:	4606      	mov	r6, r0
 800ac40:	460f      	mov	r7, r1
 800ac42:	f7f5 ffa1 	bl	8000b88 <__aeabi_dcmpgt>
 800ac46:	b9c8      	cbnz	r0, 800ac7c <_dtoa_r+0x6e4>
 800ac48:	4642      	mov	r2, r8
 800ac4a:	464b      	mov	r3, r9
 800ac4c:	4630      	mov	r0, r6
 800ac4e:	4639      	mov	r1, r7
 800ac50:	f7f5 ff72 	bl	8000b38 <__aeabi_dcmpeq>
 800ac54:	b110      	cbz	r0, 800ac5c <_dtoa_r+0x6c4>
 800ac56:	9b01      	ldr	r3, [sp, #4]
 800ac58:	07db      	lsls	r3, r3, #31
 800ac5a:	d40f      	bmi.n	800ac7c <_dtoa_r+0x6e4>
 800ac5c:	4651      	mov	r1, sl
 800ac5e:	4620      	mov	r0, r4
 800ac60:	f000 fbcc 	bl	800b3fc <_Bfree>
 800ac64:	2300      	movs	r3, #0
 800ac66:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac68:	702b      	strb	r3, [r5, #0]
 800ac6a:	f10b 0301 	add.w	r3, fp, #1
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	f43f ace2 	beq.w	800a63c <_dtoa_r+0xa4>
 800ac78:	601d      	str	r5, [r3, #0]
 800ac7a:	e4df      	b.n	800a63c <_dtoa_r+0xa4>
 800ac7c:	465f      	mov	r7, fp
 800ac7e:	462b      	mov	r3, r5
 800ac80:	461d      	mov	r5, r3
 800ac82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac86:	2a39      	cmp	r2, #57	; 0x39
 800ac88:	d106      	bne.n	800ac98 <_dtoa_r+0x700>
 800ac8a:	9a00      	ldr	r2, [sp, #0]
 800ac8c:	429a      	cmp	r2, r3
 800ac8e:	d1f7      	bne.n	800ac80 <_dtoa_r+0x6e8>
 800ac90:	9900      	ldr	r1, [sp, #0]
 800ac92:	2230      	movs	r2, #48	; 0x30
 800ac94:	3701      	adds	r7, #1
 800ac96:	700a      	strb	r2, [r1, #0]
 800ac98:	781a      	ldrb	r2, [r3, #0]
 800ac9a:	3201      	adds	r2, #1
 800ac9c:	701a      	strb	r2, [r3, #0]
 800ac9e:	e790      	b.n	800abc2 <_dtoa_r+0x62a>
 800aca0:	4ba3      	ldr	r3, [pc, #652]	; (800af30 <_dtoa_r+0x998>)
 800aca2:	2200      	movs	r2, #0
 800aca4:	f7f5 fce0 	bl	8000668 <__aeabi_dmul>
 800aca8:	2200      	movs	r2, #0
 800acaa:	2300      	movs	r3, #0
 800acac:	4606      	mov	r6, r0
 800acae:	460f      	mov	r7, r1
 800acb0:	f7f5 ff42 	bl	8000b38 <__aeabi_dcmpeq>
 800acb4:	2800      	cmp	r0, #0
 800acb6:	d09e      	beq.n	800abf6 <_dtoa_r+0x65e>
 800acb8:	e7d0      	b.n	800ac5c <_dtoa_r+0x6c4>
 800acba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acbc:	2a00      	cmp	r2, #0
 800acbe:	f000 80ca 	beq.w	800ae56 <_dtoa_r+0x8be>
 800acc2:	9a07      	ldr	r2, [sp, #28]
 800acc4:	2a01      	cmp	r2, #1
 800acc6:	f300 80ad 	bgt.w	800ae24 <_dtoa_r+0x88c>
 800acca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800accc:	2a00      	cmp	r2, #0
 800acce:	f000 80a5 	beq.w	800ae1c <_dtoa_r+0x884>
 800acd2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800acd6:	9e08      	ldr	r6, [sp, #32]
 800acd8:	9d05      	ldr	r5, [sp, #20]
 800acda:	9a05      	ldr	r2, [sp, #20]
 800acdc:	441a      	add	r2, r3
 800acde:	9205      	str	r2, [sp, #20]
 800ace0:	9a06      	ldr	r2, [sp, #24]
 800ace2:	2101      	movs	r1, #1
 800ace4:	441a      	add	r2, r3
 800ace6:	4620      	mov	r0, r4
 800ace8:	9206      	str	r2, [sp, #24]
 800acea:	f000 fc3d 	bl	800b568 <__i2b>
 800acee:	4607      	mov	r7, r0
 800acf0:	b165      	cbz	r5, 800ad0c <_dtoa_r+0x774>
 800acf2:	9b06      	ldr	r3, [sp, #24]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	dd09      	ble.n	800ad0c <_dtoa_r+0x774>
 800acf8:	42ab      	cmp	r3, r5
 800acfa:	9a05      	ldr	r2, [sp, #20]
 800acfc:	bfa8      	it	ge
 800acfe:	462b      	movge	r3, r5
 800ad00:	1ad2      	subs	r2, r2, r3
 800ad02:	9205      	str	r2, [sp, #20]
 800ad04:	9a06      	ldr	r2, [sp, #24]
 800ad06:	1aed      	subs	r5, r5, r3
 800ad08:	1ad3      	subs	r3, r2, r3
 800ad0a:	9306      	str	r3, [sp, #24]
 800ad0c:	9b08      	ldr	r3, [sp, #32]
 800ad0e:	b1f3      	cbz	r3, 800ad4e <_dtoa_r+0x7b6>
 800ad10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	f000 80a3 	beq.w	800ae5e <_dtoa_r+0x8c6>
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	dd10      	ble.n	800ad3e <_dtoa_r+0x7a6>
 800ad1c:	4639      	mov	r1, r7
 800ad1e:	4632      	mov	r2, r6
 800ad20:	4620      	mov	r0, r4
 800ad22:	f000 fce1 	bl	800b6e8 <__pow5mult>
 800ad26:	4652      	mov	r2, sl
 800ad28:	4601      	mov	r1, r0
 800ad2a:	4607      	mov	r7, r0
 800ad2c:	4620      	mov	r0, r4
 800ad2e:	f000 fc31 	bl	800b594 <__multiply>
 800ad32:	4651      	mov	r1, sl
 800ad34:	4680      	mov	r8, r0
 800ad36:	4620      	mov	r0, r4
 800ad38:	f000 fb60 	bl	800b3fc <_Bfree>
 800ad3c:	46c2      	mov	sl, r8
 800ad3e:	9b08      	ldr	r3, [sp, #32]
 800ad40:	1b9a      	subs	r2, r3, r6
 800ad42:	d004      	beq.n	800ad4e <_dtoa_r+0x7b6>
 800ad44:	4651      	mov	r1, sl
 800ad46:	4620      	mov	r0, r4
 800ad48:	f000 fcce 	bl	800b6e8 <__pow5mult>
 800ad4c:	4682      	mov	sl, r0
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fc09 	bl	800b568 <__i2b>
 800ad56:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	4606      	mov	r6, r0
 800ad5c:	f340 8081 	ble.w	800ae62 <_dtoa_r+0x8ca>
 800ad60:	461a      	mov	r2, r3
 800ad62:	4601      	mov	r1, r0
 800ad64:	4620      	mov	r0, r4
 800ad66:	f000 fcbf 	bl	800b6e8 <__pow5mult>
 800ad6a:	9b07      	ldr	r3, [sp, #28]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	4606      	mov	r6, r0
 800ad70:	dd7a      	ble.n	800ae68 <_dtoa_r+0x8d0>
 800ad72:	f04f 0800 	mov.w	r8, #0
 800ad76:	6933      	ldr	r3, [r6, #16]
 800ad78:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ad7c:	6918      	ldr	r0, [r3, #16]
 800ad7e:	f000 fba5 	bl	800b4cc <__hi0bits>
 800ad82:	f1c0 0020 	rsb	r0, r0, #32
 800ad86:	9b06      	ldr	r3, [sp, #24]
 800ad88:	4418      	add	r0, r3
 800ad8a:	f010 001f 	ands.w	r0, r0, #31
 800ad8e:	f000 8094 	beq.w	800aeba <_dtoa_r+0x922>
 800ad92:	f1c0 0320 	rsb	r3, r0, #32
 800ad96:	2b04      	cmp	r3, #4
 800ad98:	f340 8085 	ble.w	800aea6 <_dtoa_r+0x90e>
 800ad9c:	9b05      	ldr	r3, [sp, #20]
 800ad9e:	f1c0 001c 	rsb	r0, r0, #28
 800ada2:	4403      	add	r3, r0
 800ada4:	9305      	str	r3, [sp, #20]
 800ada6:	9b06      	ldr	r3, [sp, #24]
 800ada8:	4403      	add	r3, r0
 800adaa:	4405      	add	r5, r0
 800adac:	9306      	str	r3, [sp, #24]
 800adae:	9b05      	ldr	r3, [sp, #20]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	dd05      	ble.n	800adc0 <_dtoa_r+0x828>
 800adb4:	4651      	mov	r1, sl
 800adb6:	461a      	mov	r2, r3
 800adb8:	4620      	mov	r0, r4
 800adba:	f000 fcef 	bl	800b79c <__lshift>
 800adbe:	4682      	mov	sl, r0
 800adc0:	9b06      	ldr	r3, [sp, #24]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	dd05      	ble.n	800add2 <_dtoa_r+0x83a>
 800adc6:	4631      	mov	r1, r6
 800adc8:	461a      	mov	r2, r3
 800adca:	4620      	mov	r0, r4
 800adcc:	f000 fce6 	bl	800b79c <__lshift>
 800add0:	4606      	mov	r6, r0
 800add2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800add4:	2b00      	cmp	r3, #0
 800add6:	d072      	beq.n	800aebe <_dtoa_r+0x926>
 800add8:	4631      	mov	r1, r6
 800adda:	4650      	mov	r0, sl
 800addc:	f000 fd4a 	bl	800b874 <__mcmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	da6c      	bge.n	800aebe <_dtoa_r+0x926>
 800ade4:	2300      	movs	r3, #0
 800ade6:	4651      	mov	r1, sl
 800ade8:	220a      	movs	r2, #10
 800adea:	4620      	mov	r0, r4
 800adec:	f000 fb28 	bl	800b440 <__multadd>
 800adf0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800adf2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800adf6:	4682      	mov	sl, r0
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	f000 81b0 	beq.w	800b15e <_dtoa_r+0xbc6>
 800adfe:	2300      	movs	r3, #0
 800ae00:	4639      	mov	r1, r7
 800ae02:	220a      	movs	r2, #10
 800ae04:	4620      	mov	r0, r4
 800ae06:	f000 fb1b 	bl	800b440 <__multadd>
 800ae0a:	9b01      	ldr	r3, [sp, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	4607      	mov	r7, r0
 800ae10:	f300 8096 	bgt.w	800af40 <_dtoa_r+0x9a8>
 800ae14:	9b07      	ldr	r3, [sp, #28]
 800ae16:	2b02      	cmp	r3, #2
 800ae18:	dc59      	bgt.n	800aece <_dtoa_r+0x936>
 800ae1a:	e091      	b.n	800af40 <_dtoa_r+0x9a8>
 800ae1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ae22:	e758      	b.n	800acd6 <_dtoa_r+0x73e>
 800ae24:	9b04      	ldr	r3, [sp, #16]
 800ae26:	1e5e      	subs	r6, r3, #1
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	42b3      	cmp	r3, r6
 800ae2c:	bfbf      	itttt	lt
 800ae2e:	9b08      	ldrlt	r3, [sp, #32]
 800ae30:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800ae32:	9608      	strlt	r6, [sp, #32]
 800ae34:	1af3      	sublt	r3, r6, r3
 800ae36:	bfb4      	ite	lt
 800ae38:	18d2      	addlt	r2, r2, r3
 800ae3a:	1b9e      	subge	r6, r3, r6
 800ae3c:	9b04      	ldr	r3, [sp, #16]
 800ae3e:	bfbc      	itt	lt
 800ae40:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800ae42:	2600      	movlt	r6, #0
 800ae44:	2b00      	cmp	r3, #0
 800ae46:	bfb7      	itett	lt
 800ae48:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800ae4c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800ae50:	1a9d      	sublt	r5, r3, r2
 800ae52:	2300      	movlt	r3, #0
 800ae54:	e741      	b.n	800acda <_dtoa_r+0x742>
 800ae56:	9e08      	ldr	r6, [sp, #32]
 800ae58:	9d05      	ldr	r5, [sp, #20]
 800ae5a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ae5c:	e748      	b.n	800acf0 <_dtoa_r+0x758>
 800ae5e:	9a08      	ldr	r2, [sp, #32]
 800ae60:	e770      	b.n	800ad44 <_dtoa_r+0x7ac>
 800ae62:	9b07      	ldr	r3, [sp, #28]
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	dc19      	bgt.n	800ae9c <_dtoa_r+0x904>
 800ae68:	9b02      	ldr	r3, [sp, #8]
 800ae6a:	b9bb      	cbnz	r3, 800ae9c <_dtoa_r+0x904>
 800ae6c:	9b03      	ldr	r3, [sp, #12]
 800ae6e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae72:	b99b      	cbnz	r3, 800ae9c <_dtoa_r+0x904>
 800ae74:	9b03      	ldr	r3, [sp, #12]
 800ae76:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ae7a:	0d1b      	lsrs	r3, r3, #20
 800ae7c:	051b      	lsls	r3, r3, #20
 800ae7e:	b183      	cbz	r3, 800aea2 <_dtoa_r+0x90a>
 800ae80:	9b05      	ldr	r3, [sp, #20]
 800ae82:	3301      	adds	r3, #1
 800ae84:	9305      	str	r3, [sp, #20]
 800ae86:	9b06      	ldr	r3, [sp, #24]
 800ae88:	3301      	adds	r3, #1
 800ae8a:	9306      	str	r3, [sp, #24]
 800ae8c:	f04f 0801 	mov.w	r8, #1
 800ae90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	f47f af6f 	bne.w	800ad76 <_dtoa_r+0x7de>
 800ae98:	2001      	movs	r0, #1
 800ae9a:	e774      	b.n	800ad86 <_dtoa_r+0x7ee>
 800ae9c:	f04f 0800 	mov.w	r8, #0
 800aea0:	e7f6      	b.n	800ae90 <_dtoa_r+0x8f8>
 800aea2:	4698      	mov	r8, r3
 800aea4:	e7f4      	b.n	800ae90 <_dtoa_r+0x8f8>
 800aea6:	d082      	beq.n	800adae <_dtoa_r+0x816>
 800aea8:	9a05      	ldr	r2, [sp, #20]
 800aeaa:	331c      	adds	r3, #28
 800aeac:	441a      	add	r2, r3
 800aeae:	9205      	str	r2, [sp, #20]
 800aeb0:	9a06      	ldr	r2, [sp, #24]
 800aeb2:	441a      	add	r2, r3
 800aeb4:	441d      	add	r5, r3
 800aeb6:	9206      	str	r2, [sp, #24]
 800aeb8:	e779      	b.n	800adae <_dtoa_r+0x816>
 800aeba:	4603      	mov	r3, r0
 800aebc:	e7f4      	b.n	800aea8 <_dtoa_r+0x910>
 800aebe:	9b04      	ldr	r3, [sp, #16]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	dc37      	bgt.n	800af34 <_dtoa_r+0x99c>
 800aec4:	9b07      	ldr	r3, [sp, #28]
 800aec6:	2b02      	cmp	r3, #2
 800aec8:	dd34      	ble.n	800af34 <_dtoa_r+0x99c>
 800aeca:	9b04      	ldr	r3, [sp, #16]
 800aecc:	9301      	str	r3, [sp, #4]
 800aece:	9b01      	ldr	r3, [sp, #4]
 800aed0:	b963      	cbnz	r3, 800aeec <_dtoa_r+0x954>
 800aed2:	4631      	mov	r1, r6
 800aed4:	2205      	movs	r2, #5
 800aed6:	4620      	mov	r0, r4
 800aed8:	f000 fab2 	bl	800b440 <__multadd>
 800aedc:	4601      	mov	r1, r0
 800aede:	4606      	mov	r6, r0
 800aee0:	4650      	mov	r0, sl
 800aee2:	f000 fcc7 	bl	800b874 <__mcmp>
 800aee6:	2800      	cmp	r0, #0
 800aee8:	f73f adbb 	bgt.w	800aa62 <_dtoa_r+0x4ca>
 800aeec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aeee:	9d00      	ldr	r5, [sp, #0]
 800aef0:	ea6f 0b03 	mvn.w	fp, r3
 800aef4:	f04f 0800 	mov.w	r8, #0
 800aef8:	4631      	mov	r1, r6
 800aefa:	4620      	mov	r0, r4
 800aefc:	f000 fa7e 	bl	800b3fc <_Bfree>
 800af00:	2f00      	cmp	r7, #0
 800af02:	f43f aeab 	beq.w	800ac5c <_dtoa_r+0x6c4>
 800af06:	f1b8 0f00 	cmp.w	r8, #0
 800af0a:	d005      	beq.n	800af18 <_dtoa_r+0x980>
 800af0c:	45b8      	cmp	r8, r7
 800af0e:	d003      	beq.n	800af18 <_dtoa_r+0x980>
 800af10:	4641      	mov	r1, r8
 800af12:	4620      	mov	r0, r4
 800af14:	f000 fa72 	bl	800b3fc <_Bfree>
 800af18:	4639      	mov	r1, r7
 800af1a:	4620      	mov	r0, r4
 800af1c:	f000 fa6e 	bl	800b3fc <_Bfree>
 800af20:	e69c      	b.n	800ac5c <_dtoa_r+0x6c4>
 800af22:	2600      	movs	r6, #0
 800af24:	4637      	mov	r7, r6
 800af26:	e7e1      	b.n	800aeec <_dtoa_r+0x954>
 800af28:	46bb      	mov	fp, r7
 800af2a:	4637      	mov	r7, r6
 800af2c:	e599      	b.n	800aa62 <_dtoa_r+0x4ca>
 800af2e:	bf00      	nop
 800af30:	40240000 	.word	0x40240000
 800af34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af36:	2b00      	cmp	r3, #0
 800af38:	f000 80c8 	beq.w	800b0cc <_dtoa_r+0xb34>
 800af3c:	9b04      	ldr	r3, [sp, #16]
 800af3e:	9301      	str	r3, [sp, #4]
 800af40:	2d00      	cmp	r5, #0
 800af42:	dd05      	ble.n	800af50 <_dtoa_r+0x9b8>
 800af44:	4639      	mov	r1, r7
 800af46:	462a      	mov	r2, r5
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 fc27 	bl	800b79c <__lshift>
 800af4e:	4607      	mov	r7, r0
 800af50:	f1b8 0f00 	cmp.w	r8, #0
 800af54:	d05b      	beq.n	800b00e <_dtoa_r+0xa76>
 800af56:	6879      	ldr	r1, [r7, #4]
 800af58:	4620      	mov	r0, r4
 800af5a:	f000 fa0f 	bl	800b37c <_Balloc>
 800af5e:	4605      	mov	r5, r0
 800af60:	b928      	cbnz	r0, 800af6e <_dtoa_r+0x9d6>
 800af62:	4b83      	ldr	r3, [pc, #524]	; (800b170 <_dtoa_r+0xbd8>)
 800af64:	4602      	mov	r2, r0
 800af66:	f240 21ef 	movw	r1, #751	; 0x2ef
 800af6a:	f7ff bb2e 	b.w	800a5ca <_dtoa_r+0x32>
 800af6e:	693a      	ldr	r2, [r7, #16]
 800af70:	3202      	adds	r2, #2
 800af72:	0092      	lsls	r2, r2, #2
 800af74:	f107 010c 	add.w	r1, r7, #12
 800af78:	300c      	adds	r0, #12
 800af7a:	f000 ffbd 	bl	800bef8 <memcpy>
 800af7e:	2201      	movs	r2, #1
 800af80:	4629      	mov	r1, r5
 800af82:	4620      	mov	r0, r4
 800af84:	f000 fc0a 	bl	800b79c <__lshift>
 800af88:	9b00      	ldr	r3, [sp, #0]
 800af8a:	3301      	adds	r3, #1
 800af8c:	9304      	str	r3, [sp, #16]
 800af8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800af92:	4413      	add	r3, r2
 800af94:	9308      	str	r3, [sp, #32]
 800af96:	9b02      	ldr	r3, [sp, #8]
 800af98:	f003 0301 	and.w	r3, r3, #1
 800af9c:	46b8      	mov	r8, r7
 800af9e:	9306      	str	r3, [sp, #24]
 800afa0:	4607      	mov	r7, r0
 800afa2:	9b04      	ldr	r3, [sp, #16]
 800afa4:	4631      	mov	r1, r6
 800afa6:	3b01      	subs	r3, #1
 800afa8:	4650      	mov	r0, sl
 800afaa:	9301      	str	r3, [sp, #4]
 800afac:	f7ff fa6c 	bl	800a488 <quorem>
 800afb0:	4641      	mov	r1, r8
 800afb2:	9002      	str	r0, [sp, #8]
 800afb4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800afb8:	4650      	mov	r0, sl
 800afba:	f000 fc5b 	bl	800b874 <__mcmp>
 800afbe:	463a      	mov	r2, r7
 800afc0:	9005      	str	r0, [sp, #20]
 800afc2:	4631      	mov	r1, r6
 800afc4:	4620      	mov	r0, r4
 800afc6:	f000 fc71 	bl	800b8ac <__mdiff>
 800afca:	68c2      	ldr	r2, [r0, #12]
 800afcc:	4605      	mov	r5, r0
 800afce:	bb02      	cbnz	r2, 800b012 <_dtoa_r+0xa7a>
 800afd0:	4601      	mov	r1, r0
 800afd2:	4650      	mov	r0, sl
 800afd4:	f000 fc4e 	bl	800b874 <__mcmp>
 800afd8:	4602      	mov	r2, r0
 800afda:	4629      	mov	r1, r5
 800afdc:	4620      	mov	r0, r4
 800afde:	9209      	str	r2, [sp, #36]	; 0x24
 800afe0:	f000 fa0c 	bl	800b3fc <_Bfree>
 800afe4:	9b07      	ldr	r3, [sp, #28]
 800afe6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afe8:	9d04      	ldr	r5, [sp, #16]
 800afea:	ea43 0102 	orr.w	r1, r3, r2
 800afee:	9b06      	ldr	r3, [sp, #24]
 800aff0:	4319      	orrs	r1, r3
 800aff2:	d110      	bne.n	800b016 <_dtoa_r+0xa7e>
 800aff4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aff8:	d029      	beq.n	800b04e <_dtoa_r+0xab6>
 800affa:	9b05      	ldr	r3, [sp, #20]
 800affc:	2b00      	cmp	r3, #0
 800affe:	dd02      	ble.n	800b006 <_dtoa_r+0xa6e>
 800b000:	9b02      	ldr	r3, [sp, #8]
 800b002:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b006:	9b01      	ldr	r3, [sp, #4]
 800b008:	f883 9000 	strb.w	r9, [r3]
 800b00c:	e774      	b.n	800aef8 <_dtoa_r+0x960>
 800b00e:	4638      	mov	r0, r7
 800b010:	e7ba      	b.n	800af88 <_dtoa_r+0x9f0>
 800b012:	2201      	movs	r2, #1
 800b014:	e7e1      	b.n	800afda <_dtoa_r+0xa42>
 800b016:	9b05      	ldr	r3, [sp, #20]
 800b018:	2b00      	cmp	r3, #0
 800b01a:	db04      	blt.n	800b026 <_dtoa_r+0xa8e>
 800b01c:	9907      	ldr	r1, [sp, #28]
 800b01e:	430b      	orrs	r3, r1
 800b020:	9906      	ldr	r1, [sp, #24]
 800b022:	430b      	orrs	r3, r1
 800b024:	d120      	bne.n	800b068 <_dtoa_r+0xad0>
 800b026:	2a00      	cmp	r2, #0
 800b028:	dded      	ble.n	800b006 <_dtoa_r+0xa6e>
 800b02a:	4651      	mov	r1, sl
 800b02c:	2201      	movs	r2, #1
 800b02e:	4620      	mov	r0, r4
 800b030:	f000 fbb4 	bl	800b79c <__lshift>
 800b034:	4631      	mov	r1, r6
 800b036:	4682      	mov	sl, r0
 800b038:	f000 fc1c 	bl	800b874 <__mcmp>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	dc03      	bgt.n	800b048 <_dtoa_r+0xab0>
 800b040:	d1e1      	bne.n	800b006 <_dtoa_r+0xa6e>
 800b042:	f019 0f01 	tst.w	r9, #1
 800b046:	d0de      	beq.n	800b006 <_dtoa_r+0xa6e>
 800b048:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b04c:	d1d8      	bne.n	800b000 <_dtoa_r+0xa68>
 800b04e:	9a01      	ldr	r2, [sp, #4]
 800b050:	2339      	movs	r3, #57	; 0x39
 800b052:	7013      	strb	r3, [r2, #0]
 800b054:	462b      	mov	r3, r5
 800b056:	461d      	mov	r5, r3
 800b058:	3b01      	subs	r3, #1
 800b05a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b05e:	2a39      	cmp	r2, #57	; 0x39
 800b060:	d06c      	beq.n	800b13c <_dtoa_r+0xba4>
 800b062:	3201      	adds	r2, #1
 800b064:	701a      	strb	r2, [r3, #0]
 800b066:	e747      	b.n	800aef8 <_dtoa_r+0x960>
 800b068:	2a00      	cmp	r2, #0
 800b06a:	dd07      	ble.n	800b07c <_dtoa_r+0xae4>
 800b06c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b070:	d0ed      	beq.n	800b04e <_dtoa_r+0xab6>
 800b072:	9a01      	ldr	r2, [sp, #4]
 800b074:	f109 0301 	add.w	r3, r9, #1
 800b078:	7013      	strb	r3, [r2, #0]
 800b07a:	e73d      	b.n	800aef8 <_dtoa_r+0x960>
 800b07c:	9b04      	ldr	r3, [sp, #16]
 800b07e:	9a08      	ldr	r2, [sp, #32]
 800b080:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b084:	4293      	cmp	r3, r2
 800b086:	d043      	beq.n	800b110 <_dtoa_r+0xb78>
 800b088:	4651      	mov	r1, sl
 800b08a:	2300      	movs	r3, #0
 800b08c:	220a      	movs	r2, #10
 800b08e:	4620      	mov	r0, r4
 800b090:	f000 f9d6 	bl	800b440 <__multadd>
 800b094:	45b8      	cmp	r8, r7
 800b096:	4682      	mov	sl, r0
 800b098:	f04f 0300 	mov.w	r3, #0
 800b09c:	f04f 020a 	mov.w	r2, #10
 800b0a0:	4641      	mov	r1, r8
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	d107      	bne.n	800b0b6 <_dtoa_r+0xb1e>
 800b0a6:	f000 f9cb 	bl	800b440 <__multadd>
 800b0aa:	4680      	mov	r8, r0
 800b0ac:	4607      	mov	r7, r0
 800b0ae:	9b04      	ldr	r3, [sp, #16]
 800b0b0:	3301      	adds	r3, #1
 800b0b2:	9304      	str	r3, [sp, #16]
 800b0b4:	e775      	b.n	800afa2 <_dtoa_r+0xa0a>
 800b0b6:	f000 f9c3 	bl	800b440 <__multadd>
 800b0ba:	4639      	mov	r1, r7
 800b0bc:	4680      	mov	r8, r0
 800b0be:	2300      	movs	r3, #0
 800b0c0:	220a      	movs	r2, #10
 800b0c2:	4620      	mov	r0, r4
 800b0c4:	f000 f9bc 	bl	800b440 <__multadd>
 800b0c8:	4607      	mov	r7, r0
 800b0ca:	e7f0      	b.n	800b0ae <_dtoa_r+0xb16>
 800b0cc:	9b04      	ldr	r3, [sp, #16]
 800b0ce:	9301      	str	r3, [sp, #4]
 800b0d0:	9d00      	ldr	r5, [sp, #0]
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	4650      	mov	r0, sl
 800b0d6:	f7ff f9d7 	bl	800a488 <quorem>
 800b0da:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b0de:	9b00      	ldr	r3, [sp, #0]
 800b0e0:	f805 9b01 	strb.w	r9, [r5], #1
 800b0e4:	1aea      	subs	r2, r5, r3
 800b0e6:	9b01      	ldr	r3, [sp, #4]
 800b0e8:	4293      	cmp	r3, r2
 800b0ea:	dd07      	ble.n	800b0fc <_dtoa_r+0xb64>
 800b0ec:	4651      	mov	r1, sl
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	220a      	movs	r2, #10
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 f9a4 	bl	800b440 <__multadd>
 800b0f8:	4682      	mov	sl, r0
 800b0fa:	e7ea      	b.n	800b0d2 <_dtoa_r+0xb3a>
 800b0fc:	9b01      	ldr	r3, [sp, #4]
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	bfc8      	it	gt
 800b102:	461d      	movgt	r5, r3
 800b104:	9b00      	ldr	r3, [sp, #0]
 800b106:	bfd8      	it	le
 800b108:	2501      	movle	r5, #1
 800b10a:	441d      	add	r5, r3
 800b10c:	f04f 0800 	mov.w	r8, #0
 800b110:	4651      	mov	r1, sl
 800b112:	2201      	movs	r2, #1
 800b114:	4620      	mov	r0, r4
 800b116:	f000 fb41 	bl	800b79c <__lshift>
 800b11a:	4631      	mov	r1, r6
 800b11c:	4682      	mov	sl, r0
 800b11e:	f000 fba9 	bl	800b874 <__mcmp>
 800b122:	2800      	cmp	r0, #0
 800b124:	dc96      	bgt.n	800b054 <_dtoa_r+0xabc>
 800b126:	d102      	bne.n	800b12e <_dtoa_r+0xb96>
 800b128:	f019 0f01 	tst.w	r9, #1
 800b12c:	d192      	bne.n	800b054 <_dtoa_r+0xabc>
 800b12e:	462b      	mov	r3, r5
 800b130:	461d      	mov	r5, r3
 800b132:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b136:	2a30      	cmp	r2, #48	; 0x30
 800b138:	d0fa      	beq.n	800b130 <_dtoa_r+0xb98>
 800b13a:	e6dd      	b.n	800aef8 <_dtoa_r+0x960>
 800b13c:	9a00      	ldr	r2, [sp, #0]
 800b13e:	429a      	cmp	r2, r3
 800b140:	d189      	bne.n	800b056 <_dtoa_r+0xabe>
 800b142:	f10b 0b01 	add.w	fp, fp, #1
 800b146:	2331      	movs	r3, #49	; 0x31
 800b148:	e796      	b.n	800b078 <_dtoa_r+0xae0>
 800b14a:	4b0a      	ldr	r3, [pc, #40]	; (800b174 <_dtoa_r+0xbdc>)
 800b14c:	f7ff ba99 	b.w	800a682 <_dtoa_r+0xea>
 800b150:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b152:	2b00      	cmp	r3, #0
 800b154:	f47f aa6d 	bne.w	800a632 <_dtoa_r+0x9a>
 800b158:	4b07      	ldr	r3, [pc, #28]	; (800b178 <_dtoa_r+0xbe0>)
 800b15a:	f7ff ba92 	b.w	800a682 <_dtoa_r+0xea>
 800b15e:	9b01      	ldr	r3, [sp, #4]
 800b160:	2b00      	cmp	r3, #0
 800b162:	dcb5      	bgt.n	800b0d0 <_dtoa_r+0xb38>
 800b164:	9b07      	ldr	r3, [sp, #28]
 800b166:	2b02      	cmp	r3, #2
 800b168:	f73f aeb1 	bgt.w	800aece <_dtoa_r+0x936>
 800b16c:	e7b0      	b.n	800b0d0 <_dtoa_r+0xb38>
 800b16e:	bf00      	nop
 800b170:	0800c863 	.word	0x0800c863
 800b174:	0800c72d 	.word	0x0800c72d
 800b178:	0800c7fe 	.word	0x0800c7fe

0800b17c <_free_r>:
 800b17c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b17e:	2900      	cmp	r1, #0
 800b180:	d044      	beq.n	800b20c <_free_r+0x90>
 800b182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b186:	9001      	str	r0, [sp, #4]
 800b188:	2b00      	cmp	r3, #0
 800b18a:	f1a1 0404 	sub.w	r4, r1, #4
 800b18e:	bfb8      	it	lt
 800b190:	18e4      	addlt	r4, r4, r3
 800b192:	f000 f8e7 	bl	800b364 <__malloc_lock>
 800b196:	4a1e      	ldr	r2, [pc, #120]	; (800b210 <_free_r+0x94>)
 800b198:	9801      	ldr	r0, [sp, #4]
 800b19a:	6813      	ldr	r3, [r2, #0]
 800b19c:	b933      	cbnz	r3, 800b1ac <_free_r+0x30>
 800b19e:	6063      	str	r3, [r4, #4]
 800b1a0:	6014      	str	r4, [r2, #0]
 800b1a2:	b003      	add	sp, #12
 800b1a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1a8:	f000 b8e2 	b.w	800b370 <__malloc_unlock>
 800b1ac:	42a3      	cmp	r3, r4
 800b1ae:	d908      	bls.n	800b1c2 <_free_r+0x46>
 800b1b0:	6825      	ldr	r5, [r4, #0]
 800b1b2:	1961      	adds	r1, r4, r5
 800b1b4:	428b      	cmp	r3, r1
 800b1b6:	bf01      	itttt	eq
 800b1b8:	6819      	ldreq	r1, [r3, #0]
 800b1ba:	685b      	ldreq	r3, [r3, #4]
 800b1bc:	1949      	addeq	r1, r1, r5
 800b1be:	6021      	streq	r1, [r4, #0]
 800b1c0:	e7ed      	b.n	800b19e <_free_r+0x22>
 800b1c2:	461a      	mov	r2, r3
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	b10b      	cbz	r3, 800b1cc <_free_r+0x50>
 800b1c8:	42a3      	cmp	r3, r4
 800b1ca:	d9fa      	bls.n	800b1c2 <_free_r+0x46>
 800b1cc:	6811      	ldr	r1, [r2, #0]
 800b1ce:	1855      	adds	r5, r2, r1
 800b1d0:	42a5      	cmp	r5, r4
 800b1d2:	d10b      	bne.n	800b1ec <_free_r+0x70>
 800b1d4:	6824      	ldr	r4, [r4, #0]
 800b1d6:	4421      	add	r1, r4
 800b1d8:	1854      	adds	r4, r2, r1
 800b1da:	42a3      	cmp	r3, r4
 800b1dc:	6011      	str	r1, [r2, #0]
 800b1de:	d1e0      	bne.n	800b1a2 <_free_r+0x26>
 800b1e0:	681c      	ldr	r4, [r3, #0]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	6053      	str	r3, [r2, #4]
 800b1e6:	440c      	add	r4, r1
 800b1e8:	6014      	str	r4, [r2, #0]
 800b1ea:	e7da      	b.n	800b1a2 <_free_r+0x26>
 800b1ec:	d902      	bls.n	800b1f4 <_free_r+0x78>
 800b1ee:	230c      	movs	r3, #12
 800b1f0:	6003      	str	r3, [r0, #0]
 800b1f2:	e7d6      	b.n	800b1a2 <_free_r+0x26>
 800b1f4:	6825      	ldr	r5, [r4, #0]
 800b1f6:	1961      	adds	r1, r4, r5
 800b1f8:	428b      	cmp	r3, r1
 800b1fa:	bf04      	itt	eq
 800b1fc:	6819      	ldreq	r1, [r3, #0]
 800b1fe:	685b      	ldreq	r3, [r3, #4]
 800b200:	6063      	str	r3, [r4, #4]
 800b202:	bf04      	itt	eq
 800b204:	1949      	addeq	r1, r1, r5
 800b206:	6021      	streq	r1, [r4, #0]
 800b208:	6054      	str	r4, [r2, #4]
 800b20a:	e7ca      	b.n	800b1a2 <_free_r+0x26>
 800b20c:	b003      	add	sp, #12
 800b20e:	bd30      	pop	{r4, r5, pc}
 800b210:	200007a8 	.word	0x200007a8

0800b214 <malloc>:
 800b214:	4b02      	ldr	r3, [pc, #8]	; (800b220 <malloc+0xc>)
 800b216:	4601      	mov	r1, r0
 800b218:	6818      	ldr	r0, [r3, #0]
 800b21a:	f000 b823 	b.w	800b264 <_malloc_r>
 800b21e:	bf00      	nop
 800b220:	20000134 	.word	0x20000134

0800b224 <sbrk_aligned>:
 800b224:	b570      	push	{r4, r5, r6, lr}
 800b226:	4e0e      	ldr	r6, [pc, #56]	; (800b260 <sbrk_aligned+0x3c>)
 800b228:	460c      	mov	r4, r1
 800b22a:	6831      	ldr	r1, [r6, #0]
 800b22c:	4605      	mov	r5, r0
 800b22e:	b911      	cbnz	r1, 800b236 <sbrk_aligned+0x12>
 800b230:	f000 fe52 	bl	800bed8 <_sbrk_r>
 800b234:	6030      	str	r0, [r6, #0]
 800b236:	4621      	mov	r1, r4
 800b238:	4628      	mov	r0, r5
 800b23a:	f000 fe4d 	bl	800bed8 <_sbrk_r>
 800b23e:	1c43      	adds	r3, r0, #1
 800b240:	d00a      	beq.n	800b258 <sbrk_aligned+0x34>
 800b242:	1cc4      	adds	r4, r0, #3
 800b244:	f024 0403 	bic.w	r4, r4, #3
 800b248:	42a0      	cmp	r0, r4
 800b24a:	d007      	beq.n	800b25c <sbrk_aligned+0x38>
 800b24c:	1a21      	subs	r1, r4, r0
 800b24e:	4628      	mov	r0, r5
 800b250:	f000 fe42 	bl	800bed8 <_sbrk_r>
 800b254:	3001      	adds	r0, #1
 800b256:	d101      	bne.n	800b25c <sbrk_aligned+0x38>
 800b258:	f04f 34ff 	mov.w	r4, #4294967295
 800b25c:	4620      	mov	r0, r4
 800b25e:	bd70      	pop	{r4, r5, r6, pc}
 800b260:	200007ac 	.word	0x200007ac

0800b264 <_malloc_r>:
 800b264:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b268:	1ccd      	adds	r5, r1, #3
 800b26a:	f025 0503 	bic.w	r5, r5, #3
 800b26e:	3508      	adds	r5, #8
 800b270:	2d0c      	cmp	r5, #12
 800b272:	bf38      	it	cc
 800b274:	250c      	movcc	r5, #12
 800b276:	2d00      	cmp	r5, #0
 800b278:	4607      	mov	r7, r0
 800b27a:	db01      	blt.n	800b280 <_malloc_r+0x1c>
 800b27c:	42a9      	cmp	r1, r5
 800b27e:	d905      	bls.n	800b28c <_malloc_r+0x28>
 800b280:	230c      	movs	r3, #12
 800b282:	603b      	str	r3, [r7, #0]
 800b284:	2600      	movs	r6, #0
 800b286:	4630      	mov	r0, r6
 800b288:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b28c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b360 <_malloc_r+0xfc>
 800b290:	f000 f868 	bl	800b364 <__malloc_lock>
 800b294:	f8d8 3000 	ldr.w	r3, [r8]
 800b298:	461c      	mov	r4, r3
 800b29a:	bb5c      	cbnz	r4, 800b2f4 <_malloc_r+0x90>
 800b29c:	4629      	mov	r1, r5
 800b29e:	4638      	mov	r0, r7
 800b2a0:	f7ff ffc0 	bl	800b224 <sbrk_aligned>
 800b2a4:	1c43      	adds	r3, r0, #1
 800b2a6:	4604      	mov	r4, r0
 800b2a8:	d155      	bne.n	800b356 <_malloc_r+0xf2>
 800b2aa:	f8d8 4000 	ldr.w	r4, [r8]
 800b2ae:	4626      	mov	r6, r4
 800b2b0:	2e00      	cmp	r6, #0
 800b2b2:	d145      	bne.n	800b340 <_malloc_r+0xdc>
 800b2b4:	2c00      	cmp	r4, #0
 800b2b6:	d048      	beq.n	800b34a <_malloc_r+0xe6>
 800b2b8:	6823      	ldr	r3, [r4, #0]
 800b2ba:	4631      	mov	r1, r6
 800b2bc:	4638      	mov	r0, r7
 800b2be:	eb04 0903 	add.w	r9, r4, r3
 800b2c2:	f000 fe09 	bl	800bed8 <_sbrk_r>
 800b2c6:	4581      	cmp	r9, r0
 800b2c8:	d13f      	bne.n	800b34a <_malloc_r+0xe6>
 800b2ca:	6821      	ldr	r1, [r4, #0]
 800b2cc:	1a6d      	subs	r5, r5, r1
 800b2ce:	4629      	mov	r1, r5
 800b2d0:	4638      	mov	r0, r7
 800b2d2:	f7ff ffa7 	bl	800b224 <sbrk_aligned>
 800b2d6:	3001      	adds	r0, #1
 800b2d8:	d037      	beq.n	800b34a <_malloc_r+0xe6>
 800b2da:	6823      	ldr	r3, [r4, #0]
 800b2dc:	442b      	add	r3, r5
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	f8d8 3000 	ldr.w	r3, [r8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d038      	beq.n	800b35a <_malloc_r+0xf6>
 800b2e8:	685a      	ldr	r2, [r3, #4]
 800b2ea:	42a2      	cmp	r2, r4
 800b2ec:	d12b      	bne.n	800b346 <_malloc_r+0xe2>
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	605a      	str	r2, [r3, #4]
 800b2f2:	e00f      	b.n	800b314 <_malloc_r+0xb0>
 800b2f4:	6822      	ldr	r2, [r4, #0]
 800b2f6:	1b52      	subs	r2, r2, r5
 800b2f8:	d41f      	bmi.n	800b33a <_malloc_r+0xd6>
 800b2fa:	2a0b      	cmp	r2, #11
 800b2fc:	d917      	bls.n	800b32e <_malloc_r+0xca>
 800b2fe:	1961      	adds	r1, r4, r5
 800b300:	42a3      	cmp	r3, r4
 800b302:	6025      	str	r5, [r4, #0]
 800b304:	bf18      	it	ne
 800b306:	6059      	strne	r1, [r3, #4]
 800b308:	6863      	ldr	r3, [r4, #4]
 800b30a:	bf08      	it	eq
 800b30c:	f8c8 1000 	streq.w	r1, [r8]
 800b310:	5162      	str	r2, [r4, r5]
 800b312:	604b      	str	r3, [r1, #4]
 800b314:	4638      	mov	r0, r7
 800b316:	f104 060b 	add.w	r6, r4, #11
 800b31a:	f000 f829 	bl	800b370 <__malloc_unlock>
 800b31e:	f026 0607 	bic.w	r6, r6, #7
 800b322:	1d23      	adds	r3, r4, #4
 800b324:	1af2      	subs	r2, r6, r3
 800b326:	d0ae      	beq.n	800b286 <_malloc_r+0x22>
 800b328:	1b9b      	subs	r3, r3, r6
 800b32a:	50a3      	str	r3, [r4, r2]
 800b32c:	e7ab      	b.n	800b286 <_malloc_r+0x22>
 800b32e:	42a3      	cmp	r3, r4
 800b330:	6862      	ldr	r2, [r4, #4]
 800b332:	d1dd      	bne.n	800b2f0 <_malloc_r+0x8c>
 800b334:	f8c8 2000 	str.w	r2, [r8]
 800b338:	e7ec      	b.n	800b314 <_malloc_r+0xb0>
 800b33a:	4623      	mov	r3, r4
 800b33c:	6864      	ldr	r4, [r4, #4]
 800b33e:	e7ac      	b.n	800b29a <_malloc_r+0x36>
 800b340:	4634      	mov	r4, r6
 800b342:	6876      	ldr	r6, [r6, #4]
 800b344:	e7b4      	b.n	800b2b0 <_malloc_r+0x4c>
 800b346:	4613      	mov	r3, r2
 800b348:	e7cc      	b.n	800b2e4 <_malloc_r+0x80>
 800b34a:	230c      	movs	r3, #12
 800b34c:	603b      	str	r3, [r7, #0]
 800b34e:	4638      	mov	r0, r7
 800b350:	f000 f80e 	bl	800b370 <__malloc_unlock>
 800b354:	e797      	b.n	800b286 <_malloc_r+0x22>
 800b356:	6025      	str	r5, [r4, #0]
 800b358:	e7dc      	b.n	800b314 <_malloc_r+0xb0>
 800b35a:	605b      	str	r3, [r3, #4]
 800b35c:	deff      	udf	#255	; 0xff
 800b35e:	bf00      	nop
 800b360:	200007a8 	.word	0x200007a8

0800b364 <__malloc_lock>:
 800b364:	4801      	ldr	r0, [pc, #4]	; (800b36c <__malloc_lock+0x8>)
 800b366:	f7ff b86f 	b.w	800a448 <__retarget_lock_acquire_recursive>
 800b36a:	bf00      	nop
 800b36c:	200007a4 	.word	0x200007a4

0800b370 <__malloc_unlock>:
 800b370:	4801      	ldr	r0, [pc, #4]	; (800b378 <__malloc_unlock+0x8>)
 800b372:	f7ff b86a 	b.w	800a44a <__retarget_lock_release_recursive>
 800b376:	bf00      	nop
 800b378:	200007a4 	.word	0x200007a4

0800b37c <_Balloc>:
 800b37c:	b570      	push	{r4, r5, r6, lr}
 800b37e:	69c6      	ldr	r6, [r0, #28]
 800b380:	4604      	mov	r4, r0
 800b382:	460d      	mov	r5, r1
 800b384:	b976      	cbnz	r6, 800b3a4 <_Balloc+0x28>
 800b386:	2010      	movs	r0, #16
 800b388:	f7ff ff44 	bl	800b214 <malloc>
 800b38c:	4602      	mov	r2, r0
 800b38e:	61e0      	str	r0, [r4, #28]
 800b390:	b920      	cbnz	r0, 800b39c <_Balloc+0x20>
 800b392:	4b18      	ldr	r3, [pc, #96]	; (800b3f4 <_Balloc+0x78>)
 800b394:	4818      	ldr	r0, [pc, #96]	; (800b3f8 <_Balloc+0x7c>)
 800b396:	216b      	movs	r1, #107	; 0x6b
 800b398:	f7ff f858 	bl	800a44c <__assert_func>
 800b39c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b3a0:	6006      	str	r6, [r0, #0]
 800b3a2:	60c6      	str	r6, [r0, #12]
 800b3a4:	69e6      	ldr	r6, [r4, #28]
 800b3a6:	68f3      	ldr	r3, [r6, #12]
 800b3a8:	b183      	cbz	r3, 800b3cc <_Balloc+0x50>
 800b3aa:	69e3      	ldr	r3, [r4, #28]
 800b3ac:	68db      	ldr	r3, [r3, #12]
 800b3ae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b3b2:	b9b8      	cbnz	r0, 800b3e4 <_Balloc+0x68>
 800b3b4:	2101      	movs	r1, #1
 800b3b6:	fa01 f605 	lsl.w	r6, r1, r5
 800b3ba:	1d72      	adds	r2, r6, #5
 800b3bc:	0092      	lsls	r2, r2, #2
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f000 fdaf 	bl	800bf22 <_calloc_r>
 800b3c4:	b160      	cbz	r0, 800b3e0 <_Balloc+0x64>
 800b3c6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b3ca:	e00e      	b.n	800b3ea <_Balloc+0x6e>
 800b3cc:	2221      	movs	r2, #33	; 0x21
 800b3ce:	2104      	movs	r1, #4
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	f000 fda6 	bl	800bf22 <_calloc_r>
 800b3d6:	69e3      	ldr	r3, [r4, #28]
 800b3d8:	60f0      	str	r0, [r6, #12]
 800b3da:	68db      	ldr	r3, [r3, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1e4      	bne.n	800b3aa <_Balloc+0x2e>
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	bd70      	pop	{r4, r5, r6, pc}
 800b3e4:	6802      	ldr	r2, [r0, #0]
 800b3e6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b3f0:	e7f7      	b.n	800b3e2 <_Balloc+0x66>
 800b3f2:	bf00      	nop
 800b3f4:	0800c751 	.word	0x0800c751
 800b3f8:	0800c874 	.word	0x0800c874

0800b3fc <_Bfree>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	69c6      	ldr	r6, [r0, #28]
 800b400:	4605      	mov	r5, r0
 800b402:	460c      	mov	r4, r1
 800b404:	b976      	cbnz	r6, 800b424 <_Bfree+0x28>
 800b406:	2010      	movs	r0, #16
 800b408:	f7ff ff04 	bl	800b214 <malloc>
 800b40c:	4602      	mov	r2, r0
 800b40e:	61e8      	str	r0, [r5, #28]
 800b410:	b920      	cbnz	r0, 800b41c <_Bfree+0x20>
 800b412:	4b09      	ldr	r3, [pc, #36]	; (800b438 <_Bfree+0x3c>)
 800b414:	4809      	ldr	r0, [pc, #36]	; (800b43c <_Bfree+0x40>)
 800b416:	218f      	movs	r1, #143	; 0x8f
 800b418:	f7ff f818 	bl	800a44c <__assert_func>
 800b41c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b420:	6006      	str	r6, [r0, #0]
 800b422:	60c6      	str	r6, [r0, #12]
 800b424:	b13c      	cbz	r4, 800b436 <_Bfree+0x3a>
 800b426:	69eb      	ldr	r3, [r5, #28]
 800b428:	6862      	ldr	r2, [r4, #4]
 800b42a:	68db      	ldr	r3, [r3, #12]
 800b42c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b430:	6021      	str	r1, [r4, #0]
 800b432:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	0800c751 	.word	0x0800c751
 800b43c:	0800c874 	.word	0x0800c874

0800b440 <__multadd>:
 800b440:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b444:	690d      	ldr	r5, [r1, #16]
 800b446:	4607      	mov	r7, r0
 800b448:	460c      	mov	r4, r1
 800b44a:	461e      	mov	r6, r3
 800b44c:	f101 0c14 	add.w	ip, r1, #20
 800b450:	2000      	movs	r0, #0
 800b452:	f8dc 3000 	ldr.w	r3, [ip]
 800b456:	b299      	uxth	r1, r3
 800b458:	fb02 6101 	mla	r1, r2, r1, r6
 800b45c:	0c1e      	lsrs	r6, r3, #16
 800b45e:	0c0b      	lsrs	r3, r1, #16
 800b460:	fb02 3306 	mla	r3, r2, r6, r3
 800b464:	b289      	uxth	r1, r1
 800b466:	3001      	adds	r0, #1
 800b468:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b46c:	4285      	cmp	r5, r0
 800b46e:	f84c 1b04 	str.w	r1, [ip], #4
 800b472:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b476:	dcec      	bgt.n	800b452 <__multadd+0x12>
 800b478:	b30e      	cbz	r6, 800b4be <__multadd+0x7e>
 800b47a:	68a3      	ldr	r3, [r4, #8]
 800b47c:	42ab      	cmp	r3, r5
 800b47e:	dc19      	bgt.n	800b4b4 <__multadd+0x74>
 800b480:	6861      	ldr	r1, [r4, #4]
 800b482:	4638      	mov	r0, r7
 800b484:	3101      	adds	r1, #1
 800b486:	f7ff ff79 	bl	800b37c <_Balloc>
 800b48a:	4680      	mov	r8, r0
 800b48c:	b928      	cbnz	r0, 800b49a <__multadd+0x5a>
 800b48e:	4602      	mov	r2, r0
 800b490:	4b0c      	ldr	r3, [pc, #48]	; (800b4c4 <__multadd+0x84>)
 800b492:	480d      	ldr	r0, [pc, #52]	; (800b4c8 <__multadd+0x88>)
 800b494:	21ba      	movs	r1, #186	; 0xba
 800b496:	f7fe ffd9 	bl	800a44c <__assert_func>
 800b49a:	6922      	ldr	r2, [r4, #16]
 800b49c:	3202      	adds	r2, #2
 800b49e:	f104 010c 	add.w	r1, r4, #12
 800b4a2:	0092      	lsls	r2, r2, #2
 800b4a4:	300c      	adds	r0, #12
 800b4a6:	f000 fd27 	bl	800bef8 <memcpy>
 800b4aa:	4621      	mov	r1, r4
 800b4ac:	4638      	mov	r0, r7
 800b4ae:	f7ff ffa5 	bl	800b3fc <_Bfree>
 800b4b2:	4644      	mov	r4, r8
 800b4b4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b4b8:	3501      	adds	r5, #1
 800b4ba:	615e      	str	r6, [r3, #20]
 800b4bc:	6125      	str	r5, [r4, #16]
 800b4be:	4620      	mov	r0, r4
 800b4c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b4c4:	0800c863 	.word	0x0800c863
 800b4c8:	0800c874 	.word	0x0800c874

0800b4cc <__hi0bits>:
 800b4cc:	0c03      	lsrs	r3, r0, #16
 800b4ce:	041b      	lsls	r3, r3, #16
 800b4d0:	b9d3      	cbnz	r3, 800b508 <__hi0bits+0x3c>
 800b4d2:	0400      	lsls	r0, r0, #16
 800b4d4:	2310      	movs	r3, #16
 800b4d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b4da:	bf04      	itt	eq
 800b4dc:	0200      	lsleq	r0, r0, #8
 800b4de:	3308      	addeq	r3, #8
 800b4e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b4e4:	bf04      	itt	eq
 800b4e6:	0100      	lsleq	r0, r0, #4
 800b4e8:	3304      	addeq	r3, #4
 800b4ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b4ee:	bf04      	itt	eq
 800b4f0:	0080      	lsleq	r0, r0, #2
 800b4f2:	3302      	addeq	r3, #2
 800b4f4:	2800      	cmp	r0, #0
 800b4f6:	db05      	blt.n	800b504 <__hi0bits+0x38>
 800b4f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b4fc:	f103 0301 	add.w	r3, r3, #1
 800b500:	bf08      	it	eq
 800b502:	2320      	moveq	r3, #32
 800b504:	4618      	mov	r0, r3
 800b506:	4770      	bx	lr
 800b508:	2300      	movs	r3, #0
 800b50a:	e7e4      	b.n	800b4d6 <__hi0bits+0xa>

0800b50c <__lo0bits>:
 800b50c:	6803      	ldr	r3, [r0, #0]
 800b50e:	f013 0207 	ands.w	r2, r3, #7
 800b512:	d00c      	beq.n	800b52e <__lo0bits+0x22>
 800b514:	07d9      	lsls	r1, r3, #31
 800b516:	d422      	bmi.n	800b55e <__lo0bits+0x52>
 800b518:	079a      	lsls	r2, r3, #30
 800b51a:	bf49      	itett	mi
 800b51c:	085b      	lsrmi	r3, r3, #1
 800b51e:	089b      	lsrpl	r3, r3, #2
 800b520:	6003      	strmi	r3, [r0, #0]
 800b522:	2201      	movmi	r2, #1
 800b524:	bf5c      	itt	pl
 800b526:	6003      	strpl	r3, [r0, #0]
 800b528:	2202      	movpl	r2, #2
 800b52a:	4610      	mov	r0, r2
 800b52c:	4770      	bx	lr
 800b52e:	b299      	uxth	r1, r3
 800b530:	b909      	cbnz	r1, 800b536 <__lo0bits+0x2a>
 800b532:	0c1b      	lsrs	r3, r3, #16
 800b534:	2210      	movs	r2, #16
 800b536:	b2d9      	uxtb	r1, r3
 800b538:	b909      	cbnz	r1, 800b53e <__lo0bits+0x32>
 800b53a:	3208      	adds	r2, #8
 800b53c:	0a1b      	lsrs	r3, r3, #8
 800b53e:	0719      	lsls	r1, r3, #28
 800b540:	bf04      	itt	eq
 800b542:	091b      	lsreq	r3, r3, #4
 800b544:	3204      	addeq	r2, #4
 800b546:	0799      	lsls	r1, r3, #30
 800b548:	bf04      	itt	eq
 800b54a:	089b      	lsreq	r3, r3, #2
 800b54c:	3202      	addeq	r2, #2
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d403      	bmi.n	800b55a <__lo0bits+0x4e>
 800b552:	085b      	lsrs	r3, r3, #1
 800b554:	f102 0201 	add.w	r2, r2, #1
 800b558:	d003      	beq.n	800b562 <__lo0bits+0x56>
 800b55a:	6003      	str	r3, [r0, #0]
 800b55c:	e7e5      	b.n	800b52a <__lo0bits+0x1e>
 800b55e:	2200      	movs	r2, #0
 800b560:	e7e3      	b.n	800b52a <__lo0bits+0x1e>
 800b562:	2220      	movs	r2, #32
 800b564:	e7e1      	b.n	800b52a <__lo0bits+0x1e>
	...

0800b568 <__i2b>:
 800b568:	b510      	push	{r4, lr}
 800b56a:	460c      	mov	r4, r1
 800b56c:	2101      	movs	r1, #1
 800b56e:	f7ff ff05 	bl	800b37c <_Balloc>
 800b572:	4602      	mov	r2, r0
 800b574:	b928      	cbnz	r0, 800b582 <__i2b+0x1a>
 800b576:	4b05      	ldr	r3, [pc, #20]	; (800b58c <__i2b+0x24>)
 800b578:	4805      	ldr	r0, [pc, #20]	; (800b590 <__i2b+0x28>)
 800b57a:	f240 1145 	movw	r1, #325	; 0x145
 800b57e:	f7fe ff65 	bl	800a44c <__assert_func>
 800b582:	2301      	movs	r3, #1
 800b584:	6144      	str	r4, [r0, #20]
 800b586:	6103      	str	r3, [r0, #16]
 800b588:	bd10      	pop	{r4, pc}
 800b58a:	bf00      	nop
 800b58c:	0800c863 	.word	0x0800c863
 800b590:	0800c874 	.word	0x0800c874

0800b594 <__multiply>:
 800b594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b598:	4691      	mov	r9, r2
 800b59a:	690a      	ldr	r2, [r1, #16]
 800b59c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	bfb8      	it	lt
 800b5a4:	460b      	movlt	r3, r1
 800b5a6:	460c      	mov	r4, r1
 800b5a8:	bfbc      	itt	lt
 800b5aa:	464c      	movlt	r4, r9
 800b5ac:	4699      	movlt	r9, r3
 800b5ae:	6927      	ldr	r7, [r4, #16]
 800b5b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b5b4:	68a3      	ldr	r3, [r4, #8]
 800b5b6:	6861      	ldr	r1, [r4, #4]
 800b5b8:	eb07 060a 	add.w	r6, r7, sl
 800b5bc:	42b3      	cmp	r3, r6
 800b5be:	b085      	sub	sp, #20
 800b5c0:	bfb8      	it	lt
 800b5c2:	3101      	addlt	r1, #1
 800b5c4:	f7ff feda 	bl	800b37c <_Balloc>
 800b5c8:	b930      	cbnz	r0, 800b5d8 <__multiply+0x44>
 800b5ca:	4602      	mov	r2, r0
 800b5cc:	4b44      	ldr	r3, [pc, #272]	; (800b6e0 <__multiply+0x14c>)
 800b5ce:	4845      	ldr	r0, [pc, #276]	; (800b6e4 <__multiply+0x150>)
 800b5d0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b5d4:	f7fe ff3a 	bl	800a44c <__assert_func>
 800b5d8:	f100 0514 	add.w	r5, r0, #20
 800b5dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b5e0:	462b      	mov	r3, r5
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	4543      	cmp	r3, r8
 800b5e6:	d321      	bcc.n	800b62c <__multiply+0x98>
 800b5e8:	f104 0314 	add.w	r3, r4, #20
 800b5ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b5f0:	f109 0314 	add.w	r3, r9, #20
 800b5f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b5f8:	9202      	str	r2, [sp, #8]
 800b5fa:	1b3a      	subs	r2, r7, r4
 800b5fc:	3a15      	subs	r2, #21
 800b5fe:	f022 0203 	bic.w	r2, r2, #3
 800b602:	3204      	adds	r2, #4
 800b604:	f104 0115 	add.w	r1, r4, #21
 800b608:	428f      	cmp	r7, r1
 800b60a:	bf38      	it	cc
 800b60c:	2204      	movcc	r2, #4
 800b60e:	9201      	str	r2, [sp, #4]
 800b610:	9a02      	ldr	r2, [sp, #8]
 800b612:	9303      	str	r3, [sp, #12]
 800b614:	429a      	cmp	r2, r3
 800b616:	d80c      	bhi.n	800b632 <__multiply+0x9e>
 800b618:	2e00      	cmp	r6, #0
 800b61a:	dd03      	ble.n	800b624 <__multiply+0x90>
 800b61c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b620:	2b00      	cmp	r3, #0
 800b622:	d05b      	beq.n	800b6dc <__multiply+0x148>
 800b624:	6106      	str	r6, [r0, #16]
 800b626:	b005      	add	sp, #20
 800b628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b62c:	f843 2b04 	str.w	r2, [r3], #4
 800b630:	e7d8      	b.n	800b5e4 <__multiply+0x50>
 800b632:	f8b3 a000 	ldrh.w	sl, [r3]
 800b636:	f1ba 0f00 	cmp.w	sl, #0
 800b63a:	d024      	beq.n	800b686 <__multiply+0xf2>
 800b63c:	f104 0e14 	add.w	lr, r4, #20
 800b640:	46a9      	mov	r9, r5
 800b642:	f04f 0c00 	mov.w	ip, #0
 800b646:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b64a:	f8d9 1000 	ldr.w	r1, [r9]
 800b64e:	fa1f fb82 	uxth.w	fp, r2
 800b652:	b289      	uxth	r1, r1
 800b654:	fb0a 110b 	mla	r1, sl, fp, r1
 800b658:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b65c:	f8d9 2000 	ldr.w	r2, [r9]
 800b660:	4461      	add	r1, ip
 800b662:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b666:	fb0a c20b 	mla	r2, sl, fp, ip
 800b66a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b66e:	b289      	uxth	r1, r1
 800b670:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b674:	4577      	cmp	r7, lr
 800b676:	f849 1b04 	str.w	r1, [r9], #4
 800b67a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b67e:	d8e2      	bhi.n	800b646 <__multiply+0xb2>
 800b680:	9a01      	ldr	r2, [sp, #4]
 800b682:	f845 c002 	str.w	ip, [r5, r2]
 800b686:	9a03      	ldr	r2, [sp, #12]
 800b688:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b68c:	3304      	adds	r3, #4
 800b68e:	f1b9 0f00 	cmp.w	r9, #0
 800b692:	d021      	beq.n	800b6d8 <__multiply+0x144>
 800b694:	6829      	ldr	r1, [r5, #0]
 800b696:	f104 0c14 	add.w	ip, r4, #20
 800b69a:	46ae      	mov	lr, r5
 800b69c:	f04f 0a00 	mov.w	sl, #0
 800b6a0:	f8bc b000 	ldrh.w	fp, [ip]
 800b6a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b6a8:	fb09 220b 	mla	r2, r9, fp, r2
 800b6ac:	4452      	add	r2, sl
 800b6ae:	b289      	uxth	r1, r1
 800b6b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b6b4:	f84e 1b04 	str.w	r1, [lr], #4
 800b6b8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b6bc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6c0:	f8be 1000 	ldrh.w	r1, [lr]
 800b6c4:	fb09 110a 	mla	r1, r9, sl, r1
 800b6c8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b6cc:	4567      	cmp	r7, ip
 800b6ce:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b6d2:	d8e5      	bhi.n	800b6a0 <__multiply+0x10c>
 800b6d4:	9a01      	ldr	r2, [sp, #4]
 800b6d6:	50a9      	str	r1, [r5, r2]
 800b6d8:	3504      	adds	r5, #4
 800b6da:	e799      	b.n	800b610 <__multiply+0x7c>
 800b6dc:	3e01      	subs	r6, #1
 800b6de:	e79b      	b.n	800b618 <__multiply+0x84>
 800b6e0:	0800c863 	.word	0x0800c863
 800b6e4:	0800c874 	.word	0x0800c874

0800b6e8 <__pow5mult>:
 800b6e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6ec:	4615      	mov	r5, r2
 800b6ee:	f012 0203 	ands.w	r2, r2, #3
 800b6f2:	4606      	mov	r6, r0
 800b6f4:	460f      	mov	r7, r1
 800b6f6:	d007      	beq.n	800b708 <__pow5mult+0x20>
 800b6f8:	4c25      	ldr	r4, [pc, #148]	; (800b790 <__pow5mult+0xa8>)
 800b6fa:	3a01      	subs	r2, #1
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b702:	f7ff fe9d 	bl	800b440 <__multadd>
 800b706:	4607      	mov	r7, r0
 800b708:	10ad      	asrs	r5, r5, #2
 800b70a:	d03d      	beq.n	800b788 <__pow5mult+0xa0>
 800b70c:	69f4      	ldr	r4, [r6, #28]
 800b70e:	b97c      	cbnz	r4, 800b730 <__pow5mult+0x48>
 800b710:	2010      	movs	r0, #16
 800b712:	f7ff fd7f 	bl	800b214 <malloc>
 800b716:	4602      	mov	r2, r0
 800b718:	61f0      	str	r0, [r6, #28]
 800b71a:	b928      	cbnz	r0, 800b728 <__pow5mult+0x40>
 800b71c:	4b1d      	ldr	r3, [pc, #116]	; (800b794 <__pow5mult+0xac>)
 800b71e:	481e      	ldr	r0, [pc, #120]	; (800b798 <__pow5mult+0xb0>)
 800b720:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b724:	f7fe fe92 	bl	800a44c <__assert_func>
 800b728:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b72c:	6004      	str	r4, [r0, #0]
 800b72e:	60c4      	str	r4, [r0, #12]
 800b730:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b734:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b738:	b94c      	cbnz	r4, 800b74e <__pow5mult+0x66>
 800b73a:	f240 2171 	movw	r1, #625	; 0x271
 800b73e:	4630      	mov	r0, r6
 800b740:	f7ff ff12 	bl	800b568 <__i2b>
 800b744:	2300      	movs	r3, #0
 800b746:	f8c8 0008 	str.w	r0, [r8, #8]
 800b74a:	4604      	mov	r4, r0
 800b74c:	6003      	str	r3, [r0, #0]
 800b74e:	f04f 0900 	mov.w	r9, #0
 800b752:	07eb      	lsls	r3, r5, #31
 800b754:	d50a      	bpl.n	800b76c <__pow5mult+0x84>
 800b756:	4639      	mov	r1, r7
 800b758:	4622      	mov	r2, r4
 800b75a:	4630      	mov	r0, r6
 800b75c:	f7ff ff1a 	bl	800b594 <__multiply>
 800b760:	4639      	mov	r1, r7
 800b762:	4680      	mov	r8, r0
 800b764:	4630      	mov	r0, r6
 800b766:	f7ff fe49 	bl	800b3fc <_Bfree>
 800b76a:	4647      	mov	r7, r8
 800b76c:	106d      	asrs	r5, r5, #1
 800b76e:	d00b      	beq.n	800b788 <__pow5mult+0xa0>
 800b770:	6820      	ldr	r0, [r4, #0]
 800b772:	b938      	cbnz	r0, 800b784 <__pow5mult+0x9c>
 800b774:	4622      	mov	r2, r4
 800b776:	4621      	mov	r1, r4
 800b778:	4630      	mov	r0, r6
 800b77a:	f7ff ff0b 	bl	800b594 <__multiply>
 800b77e:	6020      	str	r0, [r4, #0]
 800b780:	f8c0 9000 	str.w	r9, [r0]
 800b784:	4604      	mov	r4, r0
 800b786:	e7e4      	b.n	800b752 <__pow5mult+0x6a>
 800b788:	4638      	mov	r0, r7
 800b78a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b78e:	bf00      	nop
 800b790:	0800c9c0 	.word	0x0800c9c0
 800b794:	0800c751 	.word	0x0800c751
 800b798:	0800c874 	.word	0x0800c874

0800b79c <__lshift>:
 800b79c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7a0:	460c      	mov	r4, r1
 800b7a2:	6849      	ldr	r1, [r1, #4]
 800b7a4:	6923      	ldr	r3, [r4, #16]
 800b7a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b7aa:	68a3      	ldr	r3, [r4, #8]
 800b7ac:	4607      	mov	r7, r0
 800b7ae:	4691      	mov	r9, r2
 800b7b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b7b4:	f108 0601 	add.w	r6, r8, #1
 800b7b8:	42b3      	cmp	r3, r6
 800b7ba:	db0b      	blt.n	800b7d4 <__lshift+0x38>
 800b7bc:	4638      	mov	r0, r7
 800b7be:	f7ff fddd 	bl	800b37c <_Balloc>
 800b7c2:	4605      	mov	r5, r0
 800b7c4:	b948      	cbnz	r0, 800b7da <__lshift+0x3e>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	4b28      	ldr	r3, [pc, #160]	; (800b86c <__lshift+0xd0>)
 800b7ca:	4829      	ldr	r0, [pc, #164]	; (800b870 <__lshift+0xd4>)
 800b7cc:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b7d0:	f7fe fe3c 	bl	800a44c <__assert_func>
 800b7d4:	3101      	adds	r1, #1
 800b7d6:	005b      	lsls	r3, r3, #1
 800b7d8:	e7ee      	b.n	800b7b8 <__lshift+0x1c>
 800b7da:	2300      	movs	r3, #0
 800b7dc:	f100 0114 	add.w	r1, r0, #20
 800b7e0:	f100 0210 	add.w	r2, r0, #16
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	4553      	cmp	r3, sl
 800b7e8:	db33      	blt.n	800b852 <__lshift+0xb6>
 800b7ea:	6920      	ldr	r0, [r4, #16]
 800b7ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b7f0:	f104 0314 	add.w	r3, r4, #20
 800b7f4:	f019 091f 	ands.w	r9, r9, #31
 800b7f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b7fc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b800:	d02b      	beq.n	800b85a <__lshift+0xbe>
 800b802:	f1c9 0e20 	rsb	lr, r9, #32
 800b806:	468a      	mov	sl, r1
 800b808:	2200      	movs	r2, #0
 800b80a:	6818      	ldr	r0, [r3, #0]
 800b80c:	fa00 f009 	lsl.w	r0, r0, r9
 800b810:	4310      	orrs	r0, r2
 800b812:	f84a 0b04 	str.w	r0, [sl], #4
 800b816:	f853 2b04 	ldr.w	r2, [r3], #4
 800b81a:	459c      	cmp	ip, r3
 800b81c:	fa22 f20e 	lsr.w	r2, r2, lr
 800b820:	d8f3      	bhi.n	800b80a <__lshift+0x6e>
 800b822:	ebac 0304 	sub.w	r3, ip, r4
 800b826:	3b15      	subs	r3, #21
 800b828:	f023 0303 	bic.w	r3, r3, #3
 800b82c:	3304      	adds	r3, #4
 800b82e:	f104 0015 	add.w	r0, r4, #21
 800b832:	4584      	cmp	ip, r0
 800b834:	bf38      	it	cc
 800b836:	2304      	movcc	r3, #4
 800b838:	50ca      	str	r2, [r1, r3]
 800b83a:	b10a      	cbz	r2, 800b840 <__lshift+0xa4>
 800b83c:	f108 0602 	add.w	r6, r8, #2
 800b840:	3e01      	subs	r6, #1
 800b842:	4638      	mov	r0, r7
 800b844:	612e      	str	r6, [r5, #16]
 800b846:	4621      	mov	r1, r4
 800b848:	f7ff fdd8 	bl	800b3fc <_Bfree>
 800b84c:	4628      	mov	r0, r5
 800b84e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b852:	f842 0f04 	str.w	r0, [r2, #4]!
 800b856:	3301      	adds	r3, #1
 800b858:	e7c5      	b.n	800b7e6 <__lshift+0x4a>
 800b85a:	3904      	subs	r1, #4
 800b85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b860:	f841 2f04 	str.w	r2, [r1, #4]!
 800b864:	459c      	cmp	ip, r3
 800b866:	d8f9      	bhi.n	800b85c <__lshift+0xc0>
 800b868:	e7ea      	b.n	800b840 <__lshift+0xa4>
 800b86a:	bf00      	nop
 800b86c:	0800c863 	.word	0x0800c863
 800b870:	0800c874 	.word	0x0800c874

0800b874 <__mcmp>:
 800b874:	b530      	push	{r4, r5, lr}
 800b876:	6902      	ldr	r2, [r0, #16]
 800b878:	690c      	ldr	r4, [r1, #16]
 800b87a:	1b12      	subs	r2, r2, r4
 800b87c:	d10e      	bne.n	800b89c <__mcmp+0x28>
 800b87e:	f100 0314 	add.w	r3, r0, #20
 800b882:	3114      	adds	r1, #20
 800b884:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b888:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b88c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b890:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b894:	42a5      	cmp	r5, r4
 800b896:	d003      	beq.n	800b8a0 <__mcmp+0x2c>
 800b898:	d305      	bcc.n	800b8a6 <__mcmp+0x32>
 800b89a:	2201      	movs	r2, #1
 800b89c:	4610      	mov	r0, r2
 800b89e:	bd30      	pop	{r4, r5, pc}
 800b8a0:	4283      	cmp	r3, r0
 800b8a2:	d3f3      	bcc.n	800b88c <__mcmp+0x18>
 800b8a4:	e7fa      	b.n	800b89c <__mcmp+0x28>
 800b8a6:	f04f 32ff 	mov.w	r2, #4294967295
 800b8aa:	e7f7      	b.n	800b89c <__mcmp+0x28>

0800b8ac <__mdiff>:
 800b8ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8b0:	460c      	mov	r4, r1
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	4611      	mov	r1, r2
 800b8b6:	4620      	mov	r0, r4
 800b8b8:	4690      	mov	r8, r2
 800b8ba:	f7ff ffdb 	bl	800b874 <__mcmp>
 800b8be:	1e05      	subs	r5, r0, #0
 800b8c0:	d110      	bne.n	800b8e4 <__mdiff+0x38>
 800b8c2:	4629      	mov	r1, r5
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	f7ff fd59 	bl	800b37c <_Balloc>
 800b8ca:	b930      	cbnz	r0, 800b8da <__mdiff+0x2e>
 800b8cc:	4b3a      	ldr	r3, [pc, #232]	; (800b9b8 <__mdiff+0x10c>)
 800b8ce:	4602      	mov	r2, r0
 800b8d0:	f240 2137 	movw	r1, #567	; 0x237
 800b8d4:	4839      	ldr	r0, [pc, #228]	; (800b9bc <__mdiff+0x110>)
 800b8d6:	f7fe fdb9 	bl	800a44c <__assert_func>
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b8e0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8e4:	bfa4      	itt	ge
 800b8e6:	4643      	movge	r3, r8
 800b8e8:	46a0      	movge	r8, r4
 800b8ea:	4630      	mov	r0, r6
 800b8ec:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b8f0:	bfa6      	itte	ge
 800b8f2:	461c      	movge	r4, r3
 800b8f4:	2500      	movge	r5, #0
 800b8f6:	2501      	movlt	r5, #1
 800b8f8:	f7ff fd40 	bl	800b37c <_Balloc>
 800b8fc:	b920      	cbnz	r0, 800b908 <__mdiff+0x5c>
 800b8fe:	4b2e      	ldr	r3, [pc, #184]	; (800b9b8 <__mdiff+0x10c>)
 800b900:	4602      	mov	r2, r0
 800b902:	f240 2145 	movw	r1, #581	; 0x245
 800b906:	e7e5      	b.n	800b8d4 <__mdiff+0x28>
 800b908:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b90c:	6926      	ldr	r6, [r4, #16]
 800b90e:	60c5      	str	r5, [r0, #12]
 800b910:	f104 0914 	add.w	r9, r4, #20
 800b914:	f108 0514 	add.w	r5, r8, #20
 800b918:	f100 0e14 	add.w	lr, r0, #20
 800b91c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b920:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b924:	f108 0210 	add.w	r2, r8, #16
 800b928:	46f2      	mov	sl, lr
 800b92a:	2100      	movs	r1, #0
 800b92c:	f859 3b04 	ldr.w	r3, [r9], #4
 800b930:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b934:	fa11 f88b 	uxtah	r8, r1, fp
 800b938:	b299      	uxth	r1, r3
 800b93a:	0c1b      	lsrs	r3, r3, #16
 800b93c:	eba8 0801 	sub.w	r8, r8, r1
 800b940:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b944:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b948:	fa1f f888 	uxth.w	r8, r8
 800b94c:	1419      	asrs	r1, r3, #16
 800b94e:	454e      	cmp	r6, r9
 800b950:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b954:	f84a 3b04 	str.w	r3, [sl], #4
 800b958:	d8e8      	bhi.n	800b92c <__mdiff+0x80>
 800b95a:	1b33      	subs	r3, r6, r4
 800b95c:	3b15      	subs	r3, #21
 800b95e:	f023 0303 	bic.w	r3, r3, #3
 800b962:	3304      	adds	r3, #4
 800b964:	3415      	adds	r4, #21
 800b966:	42a6      	cmp	r6, r4
 800b968:	bf38      	it	cc
 800b96a:	2304      	movcc	r3, #4
 800b96c:	441d      	add	r5, r3
 800b96e:	4473      	add	r3, lr
 800b970:	469e      	mov	lr, r3
 800b972:	462e      	mov	r6, r5
 800b974:	4566      	cmp	r6, ip
 800b976:	d30e      	bcc.n	800b996 <__mdiff+0xea>
 800b978:	f10c 0203 	add.w	r2, ip, #3
 800b97c:	1b52      	subs	r2, r2, r5
 800b97e:	f022 0203 	bic.w	r2, r2, #3
 800b982:	3d03      	subs	r5, #3
 800b984:	45ac      	cmp	ip, r5
 800b986:	bf38      	it	cc
 800b988:	2200      	movcc	r2, #0
 800b98a:	4413      	add	r3, r2
 800b98c:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b990:	b17a      	cbz	r2, 800b9b2 <__mdiff+0x106>
 800b992:	6107      	str	r7, [r0, #16]
 800b994:	e7a4      	b.n	800b8e0 <__mdiff+0x34>
 800b996:	f856 8b04 	ldr.w	r8, [r6], #4
 800b99a:	fa11 f288 	uxtah	r2, r1, r8
 800b99e:	1414      	asrs	r4, r2, #16
 800b9a0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b9a4:	b292      	uxth	r2, r2
 800b9a6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b9aa:	f84e 2b04 	str.w	r2, [lr], #4
 800b9ae:	1421      	asrs	r1, r4, #16
 800b9b0:	e7e0      	b.n	800b974 <__mdiff+0xc8>
 800b9b2:	3f01      	subs	r7, #1
 800b9b4:	e7ea      	b.n	800b98c <__mdiff+0xe0>
 800b9b6:	bf00      	nop
 800b9b8:	0800c863 	.word	0x0800c863
 800b9bc:	0800c874 	.word	0x0800c874

0800b9c0 <__d2b>:
 800b9c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b9c4:	460f      	mov	r7, r1
 800b9c6:	2101      	movs	r1, #1
 800b9c8:	ec59 8b10 	vmov	r8, r9, d0
 800b9cc:	4616      	mov	r6, r2
 800b9ce:	f7ff fcd5 	bl	800b37c <_Balloc>
 800b9d2:	4604      	mov	r4, r0
 800b9d4:	b930      	cbnz	r0, 800b9e4 <__d2b+0x24>
 800b9d6:	4602      	mov	r2, r0
 800b9d8:	4b24      	ldr	r3, [pc, #144]	; (800ba6c <__d2b+0xac>)
 800b9da:	4825      	ldr	r0, [pc, #148]	; (800ba70 <__d2b+0xb0>)
 800b9dc:	f240 310f 	movw	r1, #783	; 0x30f
 800b9e0:	f7fe fd34 	bl	800a44c <__assert_func>
 800b9e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b9e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b9ec:	bb2d      	cbnz	r5, 800ba3a <__d2b+0x7a>
 800b9ee:	9301      	str	r3, [sp, #4]
 800b9f0:	f1b8 0300 	subs.w	r3, r8, #0
 800b9f4:	d026      	beq.n	800ba44 <__d2b+0x84>
 800b9f6:	4668      	mov	r0, sp
 800b9f8:	9300      	str	r3, [sp, #0]
 800b9fa:	f7ff fd87 	bl	800b50c <__lo0bits>
 800b9fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800ba02:	b1e8      	cbz	r0, 800ba40 <__d2b+0x80>
 800ba04:	f1c0 0320 	rsb	r3, r0, #32
 800ba08:	fa02 f303 	lsl.w	r3, r2, r3
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	40c2      	lsrs	r2, r0
 800ba10:	6163      	str	r3, [r4, #20]
 800ba12:	9201      	str	r2, [sp, #4]
 800ba14:	9b01      	ldr	r3, [sp, #4]
 800ba16:	61a3      	str	r3, [r4, #24]
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	bf14      	ite	ne
 800ba1c:	2202      	movne	r2, #2
 800ba1e:	2201      	moveq	r2, #1
 800ba20:	6122      	str	r2, [r4, #16]
 800ba22:	b1bd      	cbz	r5, 800ba54 <__d2b+0x94>
 800ba24:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ba28:	4405      	add	r5, r0
 800ba2a:	603d      	str	r5, [r7, #0]
 800ba2c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ba30:	6030      	str	r0, [r6, #0]
 800ba32:	4620      	mov	r0, r4
 800ba34:	b003      	add	sp, #12
 800ba36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ba3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ba3e:	e7d6      	b.n	800b9ee <__d2b+0x2e>
 800ba40:	6161      	str	r1, [r4, #20]
 800ba42:	e7e7      	b.n	800ba14 <__d2b+0x54>
 800ba44:	a801      	add	r0, sp, #4
 800ba46:	f7ff fd61 	bl	800b50c <__lo0bits>
 800ba4a:	9b01      	ldr	r3, [sp, #4]
 800ba4c:	6163      	str	r3, [r4, #20]
 800ba4e:	3020      	adds	r0, #32
 800ba50:	2201      	movs	r2, #1
 800ba52:	e7e5      	b.n	800ba20 <__d2b+0x60>
 800ba54:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ba58:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ba5c:	6038      	str	r0, [r7, #0]
 800ba5e:	6918      	ldr	r0, [r3, #16]
 800ba60:	f7ff fd34 	bl	800b4cc <__hi0bits>
 800ba64:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ba68:	e7e2      	b.n	800ba30 <__d2b+0x70>
 800ba6a:	bf00      	nop
 800ba6c:	0800c863 	.word	0x0800c863
 800ba70:	0800c874 	.word	0x0800c874

0800ba74 <__ssputs_r>:
 800ba74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba78:	688e      	ldr	r6, [r1, #8]
 800ba7a:	461f      	mov	r7, r3
 800ba7c:	42be      	cmp	r6, r7
 800ba7e:	680b      	ldr	r3, [r1, #0]
 800ba80:	4682      	mov	sl, r0
 800ba82:	460c      	mov	r4, r1
 800ba84:	4690      	mov	r8, r2
 800ba86:	d82c      	bhi.n	800bae2 <__ssputs_r+0x6e>
 800ba88:	898a      	ldrh	r2, [r1, #12]
 800ba8a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ba8e:	d026      	beq.n	800bade <__ssputs_r+0x6a>
 800ba90:	6965      	ldr	r5, [r4, #20]
 800ba92:	6909      	ldr	r1, [r1, #16]
 800ba94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba98:	eba3 0901 	sub.w	r9, r3, r1
 800ba9c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800baa0:	1c7b      	adds	r3, r7, #1
 800baa2:	444b      	add	r3, r9
 800baa4:	106d      	asrs	r5, r5, #1
 800baa6:	429d      	cmp	r5, r3
 800baa8:	bf38      	it	cc
 800baaa:	461d      	movcc	r5, r3
 800baac:	0553      	lsls	r3, r2, #21
 800baae:	d527      	bpl.n	800bb00 <__ssputs_r+0x8c>
 800bab0:	4629      	mov	r1, r5
 800bab2:	f7ff fbd7 	bl	800b264 <_malloc_r>
 800bab6:	4606      	mov	r6, r0
 800bab8:	b360      	cbz	r0, 800bb14 <__ssputs_r+0xa0>
 800baba:	6921      	ldr	r1, [r4, #16]
 800babc:	464a      	mov	r2, r9
 800babe:	f000 fa1b 	bl	800bef8 <memcpy>
 800bac2:	89a3      	ldrh	r3, [r4, #12]
 800bac4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bacc:	81a3      	strh	r3, [r4, #12]
 800bace:	6126      	str	r6, [r4, #16]
 800bad0:	6165      	str	r5, [r4, #20]
 800bad2:	444e      	add	r6, r9
 800bad4:	eba5 0509 	sub.w	r5, r5, r9
 800bad8:	6026      	str	r6, [r4, #0]
 800bada:	60a5      	str	r5, [r4, #8]
 800badc:	463e      	mov	r6, r7
 800bade:	42be      	cmp	r6, r7
 800bae0:	d900      	bls.n	800bae4 <__ssputs_r+0x70>
 800bae2:	463e      	mov	r6, r7
 800bae4:	6820      	ldr	r0, [r4, #0]
 800bae6:	4632      	mov	r2, r6
 800bae8:	4641      	mov	r1, r8
 800baea:	f000 f9db 	bl	800bea4 <memmove>
 800baee:	68a3      	ldr	r3, [r4, #8]
 800baf0:	1b9b      	subs	r3, r3, r6
 800baf2:	60a3      	str	r3, [r4, #8]
 800baf4:	6823      	ldr	r3, [r4, #0]
 800baf6:	4433      	add	r3, r6
 800baf8:	6023      	str	r3, [r4, #0]
 800bafa:	2000      	movs	r0, #0
 800bafc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb00:	462a      	mov	r2, r5
 800bb02:	f000 fa36 	bl	800bf72 <_realloc_r>
 800bb06:	4606      	mov	r6, r0
 800bb08:	2800      	cmp	r0, #0
 800bb0a:	d1e0      	bne.n	800bace <__ssputs_r+0x5a>
 800bb0c:	6921      	ldr	r1, [r4, #16]
 800bb0e:	4650      	mov	r0, sl
 800bb10:	f7ff fb34 	bl	800b17c <_free_r>
 800bb14:	230c      	movs	r3, #12
 800bb16:	f8ca 3000 	str.w	r3, [sl]
 800bb1a:	89a3      	ldrh	r3, [r4, #12]
 800bb1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb20:	81a3      	strh	r3, [r4, #12]
 800bb22:	f04f 30ff 	mov.w	r0, #4294967295
 800bb26:	e7e9      	b.n	800bafc <__ssputs_r+0x88>

0800bb28 <_svfiprintf_r>:
 800bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb2c:	4698      	mov	r8, r3
 800bb2e:	898b      	ldrh	r3, [r1, #12]
 800bb30:	061b      	lsls	r3, r3, #24
 800bb32:	b09d      	sub	sp, #116	; 0x74
 800bb34:	4607      	mov	r7, r0
 800bb36:	460d      	mov	r5, r1
 800bb38:	4614      	mov	r4, r2
 800bb3a:	d50e      	bpl.n	800bb5a <_svfiprintf_r+0x32>
 800bb3c:	690b      	ldr	r3, [r1, #16]
 800bb3e:	b963      	cbnz	r3, 800bb5a <_svfiprintf_r+0x32>
 800bb40:	2140      	movs	r1, #64	; 0x40
 800bb42:	f7ff fb8f 	bl	800b264 <_malloc_r>
 800bb46:	6028      	str	r0, [r5, #0]
 800bb48:	6128      	str	r0, [r5, #16]
 800bb4a:	b920      	cbnz	r0, 800bb56 <_svfiprintf_r+0x2e>
 800bb4c:	230c      	movs	r3, #12
 800bb4e:	603b      	str	r3, [r7, #0]
 800bb50:	f04f 30ff 	mov.w	r0, #4294967295
 800bb54:	e0d0      	b.n	800bcf8 <_svfiprintf_r+0x1d0>
 800bb56:	2340      	movs	r3, #64	; 0x40
 800bb58:	616b      	str	r3, [r5, #20]
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb5e:	2320      	movs	r3, #32
 800bb60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bb64:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb68:	2330      	movs	r3, #48	; 0x30
 800bb6a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bd10 <_svfiprintf_r+0x1e8>
 800bb6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bb72:	f04f 0901 	mov.w	r9, #1
 800bb76:	4623      	mov	r3, r4
 800bb78:	469a      	mov	sl, r3
 800bb7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb7e:	b10a      	cbz	r2, 800bb84 <_svfiprintf_r+0x5c>
 800bb80:	2a25      	cmp	r2, #37	; 0x25
 800bb82:	d1f9      	bne.n	800bb78 <_svfiprintf_r+0x50>
 800bb84:	ebba 0b04 	subs.w	fp, sl, r4
 800bb88:	d00b      	beq.n	800bba2 <_svfiprintf_r+0x7a>
 800bb8a:	465b      	mov	r3, fp
 800bb8c:	4622      	mov	r2, r4
 800bb8e:	4629      	mov	r1, r5
 800bb90:	4638      	mov	r0, r7
 800bb92:	f7ff ff6f 	bl	800ba74 <__ssputs_r>
 800bb96:	3001      	adds	r0, #1
 800bb98:	f000 80a9 	beq.w	800bcee <_svfiprintf_r+0x1c6>
 800bb9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bb9e:	445a      	add	r2, fp
 800bba0:	9209      	str	r2, [sp, #36]	; 0x24
 800bba2:	f89a 3000 	ldrb.w	r3, [sl]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	f000 80a1 	beq.w	800bcee <_svfiprintf_r+0x1c6>
 800bbac:	2300      	movs	r3, #0
 800bbae:	f04f 32ff 	mov.w	r2, #4294967295
 800bbb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbb6:	f10a 0a01 	add.w	sl, sl, #1
 800bbba:	9304      	str	r3, [sp, #16]
 800bbbc:	9307      	str	r3, [sp, #28]
 800bbbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbc2:	931a      	str	r3, [sp, #104]	; 0x68
 800bbc4:	4654      	mov	r4, sl
 800bbc6:	2205      	movs	r2, #5
 800bbc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bbcc:	4850      	ldr	r0, [pc, #320]	; (800bd10 <_svfiprintf_r+0x1e8>)
 800bbce:	f7f4 fb37 	bl	8000240 <memchr>
 800bbd2:	9a04      	ldr	r2, [sp, #16]
 800bbd4:	b9d8      	cbnz	r0, 800bc0e <_svfiprintf_r+0xe6>
 800bbd6:	06d0      	lsls	r0, r2, #27
 800bbd8:	bf44      	itt	mi
 800bbda:	2320      	movmi	r3, #32
 800bbdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbe0:	0711      	lsls	r1, r2, #28
 800bbe2:	bf44      	itt	mi
 800bbe4:	232b      	movmi	r3, #43	; 0x2b
 800bbe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bbea:	f89a 3000 	ldrb.w	r3, [sl]
 800bbee:	2b2a      	cmp	r3, #42	; 0x2a
 800bbf0:	d015      	beq.n	800bc1e <_svfiprintf_r+0xf6>
 800bbf2:	9a07      	ldr	r2, [sp, #28]
 800bbf4:	4654      	mov	r4, sl
 800bbf6:	2000      	movs	r0, #0
 800bbf8:	f04f 0c0a 	mov.w	ip, #10
 800bbfc:	4621      	mov	r1, r4
 800bbfe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc02:	3b30      	subs	r3, #48	; 0x30
 800bc04:	2b09      	cmp	r3, #9
 800bc06:	d94d      	bls.n	800bca4 <_svfiprintf_r+0x17c>
 800bc08:	b1b0      	cbz	r0, 800bc38 <_svfiprintf_r+0x110>
 800bc0a:	9207      	str	r2, [sp, #28]
 800bc0c:	e014      	b.n	800bc38 <_svfiprintf_r+0x110>
 800bc0e:	eba0 0308 	sub.w	r3, r0, r8
 800bc12:	fa09 f303 	lsl.w	r3, r9, r3
 800bc16:	4313      	orrs	r3, r2
 800bc18:	9304      	str	r3, [sp, #16]
 800bc1a:	46a2      	mov	sl, r4
 800bc1c:	e7d2      	b.n	800bbc4 <_svfiprintf_r+0x9c>
 800bc1e:	9b03      	ldr	r3, [sp, #12]
 800bc20:	1d19      	adds	r1, r3, #4
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	9103      	str	r1, [sp, #12]
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	bfbb      	ittet	lt
 800bc2a:	425b      	neglt	r3, r3
 800bc2c:	f042 0202 	orrlt.w	r2, r2, #2
 800bc30:	9307      	strge	r3, [sp, #28]
 800bc32:	9307      	strlt	r3, [sp, #28]
 800bc34:	bfb8      	it	lt
 800bc36:	9204      	strlt	r2, [sp, #16]
 800bc38:	7823      	ldrb	r3, [r4, #0]
 800bc3a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc3c:	d10c      	bne.n	800bc58 <_svfiprintf_r+0x130>
 800bc3e:	7863      	ldrb	r3, [r4, #1]
 800bc40:	2b2a      	cmp	r3, #42	; 0x2a
 800bc42:	d134      	bne.n	800bcae <_svfiprintf_r+0x186>
 800bc44:	9b03      	ldr	r3, [sp, #12]
 800bc46:	1d1a      	adds	r2, r3, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	9203      	str	r2, [sp, #12]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	bfb8      	it	lt
 800bc50:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc54:	3402      	adds	r4, #2
 800bc56:	9305      	str	r3, [sp, #20]
 800bc58:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bd20 <_svfiprintf_r+0x1f8>
 800bc5c:	7821      	ldrb	r1, [r4, #0]
 800bc5e:	2203      	movs	r2, #3
 800bc60:	4650      	mov	r0, sl
 800bc62:	f7f4 faed 	bl	8000240 <memchr>
 800bc66:	b138      	cbz	r0, 800bc78 <_svfiprintf_r+0x150>
 800bc68:	9b04      	ldr	r3, [sp, #16]
 800bc6a:	eba0 000a 	sub.w	r0, r0, sl
 800bc6e:	2240      	movs	r2, #64	; 0x40
 800bc70:	4082      	lsls	r2, r0
 800bc72:	4313      	orrs	r3, r2
 800bc74:	3401      	adds	r4, #1
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc7c:	4825      	ldr	r0, [pc, #148]	; (800bd14 <_svfiprintf_r+0x1ec>)
 800bc7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bc82:	2206      	movs	r2, #6
 800bc84:	f7f4 fadc 	bl	8000240 <memchr>
 800bc88:	2800      	cmp	r0, #0
 800bc8a:	d038      	beq.n	800bcfe <_svfiprintf_r+0x1d6>
 800bc8c:	4b22      	ldr	r3, [pc, #136]	; (800bd18 <_svfiprintf_r+0x1f0>)
 800bc8e:	bb1b      	cbnz	r3, 800bcd8 <_svfiprintf_r+0x1b0>
 800bc90:	9b03      	ldr	r3, [sp, #12]
 800bc92:	3307      	adds	r3, #7
 800bc94:	f023 0307 	bic.w	r3, r3, #7
 800bc98:	3308      	adds	r3, #8
 800bc9a:	9303      	str	r3, [sp, #12]
 800bc9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc9e:	4433      	add	r3, r6
 800bca0:	9309      	str	r3, [sp, #36]	; 0x24
 800bca2:	e768      	b.n	800bb76 <_svfiprintf_r+0x4e>
 800bca4:	fb0c 3202 	mla	r2, ip, r2, r3
 800bca8:	460c      	mov	r4, r1
 800bcaa:	2001      	movs	r0, #1
 800bcac:	e7a6      	b.n	800bbfc <_svfiprintf_r+0xd4>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	3401      	adds	r4, #1
 800bcb2:	9305      	str	r3, [sp, #20]
 800bcb4:	4619      	mov	r1, r3
 800bcb6:	f04f 0c0a 	mov.w	ip, #10
 800bcba:	4620      	mov	r0, r4
 800bcbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcc0:	3a30      	subs	r2, #48	; 0x30
 800bcc2:	2a09      	cmp	r2, #9
 800bcc4:	d903      	bls.n	800bcce <_svfiprintf_r+0x1a6>
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d0c6      	beq.n	800bc58 <_svfiprintf_r+0x130>
 800bcca:	9105      	str	r1, [sp, #20]
 800bccc:	e7c4      	b.n	800bc58 <_svfiprintf_r+0x130>
 800bcce:	fb0c 2101 	mla	r1, ip, r1, r2
 800bcd2:	4604      	mov	r4, r0
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	e7f0      	b.n	800bcba <_svfiprintf_r+0x192>
 800bcd8:	ab03      	add	r3, sp, #12
 800bcda:	9300      	str	r3, [sp, #0]
 800bcdc:	462a      	mov	r2, r5
 800bcde:	4b0f      	ldr	r3, [pc, #60]	; (800bd1c <_svfiprintf_r+0x1f4>)
 800bce0:	a904      	add	r1, sp, #16
 800bce2:	4638      	mov	r0, r7
 800bce4:	f7fd fdca 	bl	800987c <_printf_float>
 800bce8:	1c42      	adds	r2, r0, #1
 800bcea:	4606      	mov	r6, r0
 800bcec:	d1d6      	bne.n	800bc9c <_svfiprintf_r+0x174>
 800bcee:	89ab      	ldrh	r3, [r5, #12]
 800bcf0:	065b      	lsls	r3, r3, #25
 800bcf2:	f53f af2d 	bmi.w	800bb50 <_svfiprintf_r+0x28>
 800bcf6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bcf8:	b01d      	add	sp, #116	; 0x74
 800bcfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bcfe:	ab03      	add	r3, sp, #12
 800bd00:	9300      	str	r3, [sp, #0]
 800bd02:	462a      	mov	r2, r5
 800bd04:	4b05      	ldr	r3, [pc, #20]	; (800bd1c <_svfiprintf_r+0x1f4>)
 800bd06:	a904      	add	r1, sp, #16
 800bd08:	4638      	mov	r0, r7
 800bd0a:	f7fe f85b 	bl	8009dc4 <_printf_i>
 800bd0e:	e7eb      	b.n	800bce8 <_svfiprintf_r+0x1c0>
 800bd10:	0800c9cc 	.word	0x0800c9cc
 800bd14:	0800c9d6 	.word	0x0800c9d6
 800bd18:	0800987d 	.word	0x0800987d
 800bd1c:	0800ba75 	.word	0x0800ba75
 800bd20:	0800c9d2 	.word	0x0800c9d2

0800bd24 <__sflush_r>:
 800bd24:	898a      	ldrh	r2, [r1, #12]
 800bd26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd2a:	4605      	mov	r5, r0
 800bd2c:	0710      	lsls	r0, r2, #28
 800bd2e:	460c      	mov	r4, r1
 800bd30:	d458      	bmi.n	800bde4 <__sflush_r+0xc0>
 800bd32:	684b      	ldr	r3, [r1, #4]
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	dc05      	bgt.n	800bd44 <__sflush_r+0x20>
 800bd38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	dc02      	bgt.n	800bd44 <__sflush_r+0x20>
 800bd3e:	2000      	movs	r0, #0
 800bd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd46:	2e00      	cmp	r6, #0
 800bd48:	d0f9      	beq.n	800bd3e <__sflush_r+0x1a>
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bd50:	682f      	ldr	r7, [r5, #0]
 800bd52:	6a21      	ldr	r1, [r4, #32]
 800bd54:	602b      	str	r3, [r5, #0]
 800bd56:	d032      	beq.n	800bdbe <__sflush_r+0x9a>
 800bd58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bd5a:	89a3      	ldrh	r3, [r4, #12]
 800bd5c:	075a      	lsls	r2, r3, #29
 800bd5e:	d505      	bpl.n	800bd6c <__sflush_r+0x48>
 800bd60:	6863      	ldr	r3, [r4, #4]
 800bd62:	1ac0      	subs	r0, r0, r3
 800bd64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bd66:	b10b      	cbz	r3, 800bd6c <__sflush_r+0x48>
 800bd68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bd6a:	1ac0      	subs	r0, r0, r3
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	4602      	mov	r2, r0
 800bd70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bd72:	6a21      	ldr	r1, [r4, #32]
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b0      	blx	r6
 800bd78:	1c43      	adds	r3, r0, #1
 800bd7a:	89a3      	ldrh	r3, [r4, #12]
 800bd7c:	d106      	bne.n	800bd8c <__sflush_r+0x68>
 800bd7e:	6829      	ldr	r1, [r5, #0]
 800bd80:	291d      	cmp	r1, #29
 800bd82:	d82b      	bhi.n	800bddc <__sflush_r+0xb8>
 800bd84:	4a29      	ldr	r2, [pc, #164]	; (800be2c <__sflush_r+0x108>)
 800bd86:	410a      	asrs	r2, r1
 800bd88:	07d6      	lsls	r6, r2, #31
 800bd8a:	d427      	bmi.n	800bddc <__sflush_r+0xb8>
 800bd8c:	2200      	movs	r2, #0
 800bd8e:	6062      	str	r2, [r4, #4]
 800bd90:	04d9      	lsls	r1, r3, #19
 800bd92:	6922      	ldr	r2, [r4, #16]
 800bd94:	6022      	str	r2, [r4, #0]
 800bd96:	d504      	bpl.n	800bda2 <__sflush_r+0x7e>
 800bd98:	1c42      	adds	r2, r0, #1
 800bd9a:	d101      	bne.n	800bda0 <__sflush_r+0x7c>
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	b903      	cbnz	r3, 800bda2 <__sflush_r+0x7e>
 800bda0:	6560      	str	r0, [r4, #84]	; 0x54
 800bda2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bda4:	602f      	str	r7, [r5, #0]
 800bda6:	2900      	cmp	r1, #0
 800bda8:	d0c9      	beq.n	800bd3e <__sflush_r+0x1a>
 800bdaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bdae:	4299      	cmp	r1, r3
 800bdb0:	d002      	beq.n	800bdb8 <__sflush_r+0x94>
 800bdb2:	4628      	mov	r0, r5
 800bdb4:	f7ff f9e2 	bl	800b17c <_free_r>
 800bdb8:	2000      	movs	r0, #0
 800bdba:	6360      	str	r0, [r4, #52]	; 0x34
 800bdbc:	e7c0      	b.n	800bd40 <__sflush_r+0x1c>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	4628      	mov	r0, r5
 800bdc2:	47b0      	blx	r6
 800bdc4:	1c41      	adds	r1, r0, #1
 800bdc6:	d1c8      	bne.n	800bd5a <__sflush_r+0x36>
 800bdc8:	682b      	ldr	r3, [r5, #0]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d0c5      	beq.n	800bd5a <__sflush_r+0x36>
 800bdce:	2b1d      	cmp	r3, #29
 800bdd0:	d001      	beq.n	800bdd6 <__sflush_r+0xb2>
 800bdd2:	2b16      	cmp	r3, #22
 800bdd4:	d101      	bne.n	800bdda <__sflush_r+0xb6>
 800bdd6:	602f      	str	r7, [r5, #0]
 800bdd8:	e7b1      	b.n	800bd3e <__sflush_r+0x1a>
 800bdda:	89a3      	ldrh	r3, [r4, #12]
 800bddc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde0:	81a3      	strh	r3, [r4, #12]
 800bde2:	e7ad      	b.n	800bd40 <__sflush_r+0x1c>
 800bde4:	690f      	ldr	r7, [r1, #16]
 800bde6:	2f00      	cmp	r7, #0
 800bde8:	d0a9      	beq.n	800bd3e <__sflush_r+0x1a>
 800bdea:	0793      	lsls	r3, r2, #30
 800bdec:	680e      	ldr	r6, [r1, #0]
 800bdee:	bf08      	it	eq
 800bdf0:	694b      	ldreq	r3, [r1, #20]
 800bdf2:	600f      	str	r7, [r1, #0]
 800bdf4:	bf18      	it	ne
 800bdf6:	2300      	movne	r3, #0
 800bdf8:	eba6 0807 	sub.w	r8, r6, r7
 800bdfc:	608b      	str	r3, [r1, #8]
 800bdfe:	f1b8 0f00 	cmp.w	r8, #0
 800be02:	dd9c      	ble.n	800bd3e <__sflush_r+0x1a>
 800be04:	6a21      	ldr	r1, [r4, #32]
 800be06:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be08:	4643      	mov	r3, r8
 800be0a:	463a      	mov	r2, r7
 800be0c:	4628      	mov	r0, r5
 800be0e:	47b0      	blx	r6
 800be10:	2800      	cmp	r0, #0
 800be12:	dc06      	bgt.n	800be22 <__sflush_r+0xfe>
 800be14:	89a3      	ldrh	r3, [r4, #12]
 800be16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be1a:	81a3      	strh	r3, [r4, #12]
 800be1c:	f04f 30ff 	mov.w	r0, #4294967295
 800be20:	e78e      	b.n	800bd40 <__sflush_r+0x1c>
 800be22:	4407      	add	r7, r0
 800be24:	eba8 0800 	sub.w	r8, r8, r0
 800be28:	e7e9      	b.n	800bdfe <__sflush_r+0xda>
 800be2a:	bf00      	nop
 800be2c:	dfbffffe 	.word	0xdfbffffe

0800be30 <_fflush_r>:
 800be30:	b538      	push	{r3, r4, r5, lr}
 800be32:	690b      	ldr	r3, [r1, #16]
 800be34:	4605      	mov	r5, r0
 800be36:	460c      	mov	r4, r1
 800be38:	b913      	cbnz	r3, 800be40 <_fflush_r+0x10>
 800be3a:	2500      	movs	r5, #0
 800be3c:	4628      	mov	r0, r5
 800be3e:	bd38      	pop	{r3, r4, r5, pc}
 800be40:	b118      	cbz	r0, 800be4a <_fflush_r+0x1a>
 800be42:	6a03      	ldr	r3, [r0, #32]
 800be44:	b90b      	cbnz	r3, 800be4a <_fflush_r+0x1a>
 800be46:	f7fe f959 	bl	800a0fc <__sinit>
 800be4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d0f3      	beq.n	800be3a <_fflush_r+0xa>
 800be52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800be54:	07d0      	lsls	r0, r2, #31
 800be56:	d404      	bmi.n	800be62 <_fflush_r+0x32>
 800be58:	0599      	lsls	r1, r3, #22
 800be5a:	d402      	bmi.n	800be62 <_fflush_r+0x32>
 800be5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be5e:	f7fe faf3 	bl	800a448 <__retarget_lock_acquire_recursive>
 800be62:	4628      	mov	r0, r5
 800be64:	4621      	mov	r1, r4
 800be66:	f7ff ff5d 	bl	800bd24 <__sflush_r>
 800be6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be6c:	07da      	lsls	r2, r3, #31
 800be6e:	4605      	mov	r5, r0
 800be70:	d4e4      	bmi.n	800be3c <_fflush_r+0xc>
 800be72:	89a3      	ldrh	r3, [r4, #12]
 800be74:	059b      	lsls	r3, r3, #22
 800be76:	d4e1      	bmi.n	800be3c <_fflush_r+0xc>
 800be78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be7a:	f7fe fae6 	bl	800a44a <__retarget_lock_release_recursive>
 800be7e:	e7dd      	b.n	800be3c <_fflush_r+0xc>

0800be80 <fiprintf>:
 800be80:	b40e      	push	{r1, r2, r3}
 800be82:	b503      	push	{r0, r1, lr}
 800be84:	4601      	mov	r1, r0
 800be86:	ab03      	add	r3, sp, #12
 800be88:	4805      	ldr	r0, [pc, #20]	; (800bea0 <fiprintf+0x20>)
 800be8a:	f853 2b04 	ldr.w	r2, [r3], #4
 800be8e:	6800      	ldr	r0, [r0, #0]
 800be90:	9301      	str	r3, [sp, #4]
 800be92:	f000 f8d3 	bl	800c03c <_vfiprintf_r>
 800be96:	b002      	add	sp, #8
 800be98:	f85d eb04 	ldr.w	lr, [sp], #4
 800be9c:	b003      	add	sp, #12
 800be9e:	4770      	bx	lr
 800bea0:	20000134 	.word	0x20000134

0800bea4 <memmove>:
 800bea4:	4288      	cmp	r0, r1
 800bea6:	b510      	push	{r4, lr}
 800bea8:	eb01 0402 	add.w	r4, r1, r2
 800beac:	d902      	bls.n	800beb4 <memmove+0x10>
 800beae:	4284      	cmp	r4, r0
 800beb0:	4623      	mov	r3, r4
 800beb2:	d807      	bhi.n	800bec4 <memmove+0x20>
 800beb4:	1e43      	subs	r3, r0, #1
 800beb6:	42a1      	cmp	r1, r4
 800beb8:	d008      	beq.n	800becc <memmove+0x28>
 800beba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bec2:	e7f8      	b.n	800beb6 <memmove+0x12>
 800bec4:	4402      	add	r2, r0
 800bec6:	4601      	mov	r1, r0
 800bec8:	428a      	cmp	r2, r1
 800beca:	d100      	bne.n	800bece <memmove+0x2a>
 800becc:	bd10      	pop	{r4, pc}
 800bece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bed6:	e7f7      	b.n	800bec8 <memmove+0x24>

0800bed8 <_sbrk_r>:
 800bed8:	b538      	push	{r3, r4, r5, lr}
 800beda:	4d06      	ldr	r5, [pc, #24]	; (800bef4 <_sbrk_r+0x1c>)
 800bedc:	2300      	movs	r3, #0
 800bede:	4604      	mov	r4, r0
 800bee0:	4608      	mov	r0, r1
 800bee2:	602b      	str	r3, [r5, #0]
 800bee4:	f7f5 fec8 	bl	8001c78 <_sbrk>
 800bee8:	1c43      	adds	r3, r0, #1
 800beea:	d102      	bne.n	800bef2 <_sbrk_r+0x1a>
 800beec:	682b      	ldr	r3, [r5, #0]
 800beee:	b103      	cbz	r3, 800bef2 <_sbrk_r+0x1a>
 800bef0:	6023      	str	r3, [r4, #0]
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	200007a0 	.word	0x200007a0

0800bef8 <memcpy>:
 800bef8:	440a      	add	r2, r1
 800befa:	4291      	cmp	r1, r2
 800befc:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf00:	d100      	bne.n	800bf04 <memcpy+0xc>
 800bf02:	4770      	bx	lr
 800bf04:	b510      	push	{r4, lr}
 800bf06:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf0a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf0e:	4291      	cmp	r1, r2
 800bf10:	d1f9      	bne.n	800bf06 <memcpy+0xe>
 800bf12:	bd10      	pop	{r4, pc}

0800bf14 <abort>:
 800bf14:	b508      	push	{r3, lr}
 800bf16:	2006      	movs	r0, #6
 800bf18:	f000 fa68 	bl	800c3ec <raise>
 800bf1c:	2001      	movs	r0, #1
 800bf1e:	f7f5 fe33 	bl	8001b88 <_exit>

0800bf22 <_calloc_r>:
 800bf22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf24:	fba1 2402 	umull	r2, r4, r1, r2
 800bf28:	b94c      	cbnz	r4, 800bf3e <_calloc_r+0x1c>
 800bf2a:	4611      	mov	r1, r2
 800bf2c:	9201      	str	r2, [sp, #4]
 800bf2e:	f7ff f999 	bl	800b264 <_malloc_r>
 800bf32:	9a01      	ldr	r2, [sp, #4]
 800bf34:	4605      	mov	r5, r0
 800bf36:	b930      	cbnz	r0, 800bf46 <_calloc_r+0x24>
 800bf38:	4628      	mov	r0, r5
 800bf3a:	b003      	add	sp, #12
 800bf3c:	bd30      	pop	{r4, r5, pc}
 800bf3e:	220c      	movs	r2, #12
 800bf40:	6002      	str	r2, [r0, #0]
 800bf42:	2500      	movs	r5, #0
 800bf44:	e7f8      	b.n	800bf38 <_calloc_r+0x16>
 800bf46:	4621      	mov	r1, r4
 800bf48:	f7fe f9a5 	bl	800a296 <memset>
 800bf4c:	e7f4      	b.n	800bf38 <_calloc_r+0x16>

0800bf4e <__ascii_mbtowc>:
 800bf4e:	b082      	sub	sp, #8
 800bf50:	b901      	cbnz	r1, 800bf54 <__ascii_mbtowc+0x6>
 800bf52:	a901      	add	r1, sp, #4
 800bf54:	b142      	cbz	r2, 800bf68 <__ascii_mbtowc+0x1a>
 800bf56:	b14b      	cbz	r3, 800bf6c <__ascii_mbtowc+0x1e>
 800bf58:	7813      	ldrb	r3, [r2, #0]
 800bf5a:	600b      	str	r3, [r1, #0]
 800bf5c:	7812      	ldrb	r2, [r2, #0]
 800bf5e:	1e10      	subs	r0, r2, #0
 800bf60:	bf18      	it	ne
 800bf62:	2001      	movne	r0, #1
 800bf64:	b002      	add	sp, #8
 800bf66:	4770      	bx	lr
 800bf68:	4610      	mov	r0, r2
 800bf6a:	e7fb      	b.n	800bf64 <__ascii_mbtowc+0x16>
 800bf6c:	f06f 0001 	mvn.w	r0, #1
 800bf70:	e7f8      	b.n	800bf64 <__ascii_mbtowc+0x16>

0800bf72 <_realloc_r>:
 800bf72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf76:	4680      	mov	r8, r0
 800bf78:	4614      	mov	r4, r2
 800bf7a:	460e      	mov	r6, r1
 800bf7c:	b921      	cbnz	r1, 800bf88 <_realloc_r+0x16>
 800bf7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf82:	4611      	mov	r1, r2
 800bf84:	f7ff b96e 	b.w	800b264 <_malloc_r>
 800bf88:	b92a      	cbnz	r2, 800bf96 <_realloc_r+0x24>
 800bf8a:	f7ff f8f7 	bl	800b17c <_free_r>
 800bf8e:	4625      	mov	r5, r4
 800bf90:	4628      	mov	r0, r5
 800bf92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf96:	f000 fa45 	bl	800c424 <_malloc_usable_size_r>
 800bf9a:	4284      	cmp	r4, r0
 800bf9c:	4607      	mov	r7, r0
 800bf9e:	d802      	bhi.n	800bfa6 <_realloc_r+0x34>
 800bfa0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfa4:	d812      	bhi.n	800bfcc <_realloc_r+0x5a>
 800bfa6:	4621      	mov	r1, r4
 800bfa8:	4640      	mov	r0, r8
 800bfaa:	f7ff f95b 	bl	800b264 <_malloc_r>
 800bfae:	4605      	mov	r5, r0
 800bfb0:	2800      	cmp	r0, #0
 800bfb2:	d0ed      	beq.n	800bf90 <_realloc_r+0x1e>
 800bfb4:	42bc      	cmp	r4, r7
 800bfb6:	4622      	mov	r2, r4
 800bfb8:	4631      	mov	r1, r6
 800bfba:	bf28      	it	cs
 800bfbc:	463a      	movcs	r2, r7
 800bfbe:	f7ff ff9b 	bl	800bef8 <memcpy>
 800bfc2:	4631      	mov	r1, r6
 800bfc4:	4640      	mov	r0, r8
 800bfc6:	f7ff f8d9 	bl	800b17c <_free_r>
 800bfca:	e7e1      	b.n	800bf90 <_realloc_r+0x1e>
 800bfcc:	4635      	mov	r5, r6
 800bfce:	e7df      	b.n	800bf90 <_realloc_r+0x1e>

0800bfd0 <__ascii_wctomb>:
 800bfd0:	b149      	cbz	r1, 800bfe6 <__ascii_wctomb+0x16>
 800bfd2:	2aff      	cmp	r2, #255	; 0xff
 800bfd4:	bf85      	ittet	hi
 800bfd6:	238a      	movhi	r3, #138	; 0x8a
 800bfd8:	6003      	strhi	r3, [r0, #0]
 800bfda:	700a      	strbls	r2, [r1, #0]
 800bfdc:	f04f 30ff 	movhi.w	r0, #4294967295
 800bfe0:	bf98      	it	ls
 800bfe2:	2001      	movls	r0, #1
 800bfe4:	4770      	bx	lr
 800bfe6:	4608      	mov	r0, r1
 800bfe8:	4770      	bx	lr

0800bfea <__sfputc_r>:
 800bfea:	6893      	ldr	r3, [r2, #8]
 800bfec:	3b01      	subs	r3, #1
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	b410      	push	{r4}
 800bff2:	6093      	str	r3, [r2, #8]
 800bff4:	da08      	bge.n	800c008 <__sfputc_r+0x1e>
 800bff6:	6994      	ldr	r4, [r2, #24]
 800bff8:	42a3      	cmp	r3, r4
 800bffa:	db01      	blt.n	800c000 <__sfputc_r+0x16>
 800bffc:	290a      	cmp	r1, #10
 800bffe:	d103      	bne.n	800c008 <__sfputc_r+0x1e>
 800c000:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c004:	f000 b934 	b.w	800c270 <__swbuf_r>
 800c008:	6813      	ldr	r3, [r2, #0]
 800c00a:	1c58      	adds	r0, r3, #1
 800c00c:	6010      	str	r0, [r2, #0]
 800c00e:	7019      	strb	r1, [r3, #0]
 800c010:	4608      	mov	r0, r1
 800c012:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <__sfputs_r>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	4606      	mov	r6, r0
 800c01c:	460f      	mov	r7, r1
 800c01e:	4614      	mov	r4, r2
 800c020:	18d5      	adds	r5, r2, r3
 800c022:	42ac      	cmp	r4, r5
 800c024:	d101      	bne.n	800c02a <__sfputs_r+0x12>
 800c026:	2000      	movs	r0, #0
 800c028:	e007      	b.n	800c03a <__sfputs_r+0x22>
 800c02a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c02e:	463a      	mov	r2, r7
 800c030:	4630      	mov	r0, r6
 800c032:	f7ff ffda 	bl	800bfea <__sfputc_r>
 800c036:	1c43      	adds	r3, r0, #1
 800c038:	d1f3      	bne.n	800c022 <__sfputs_r+0xa>
 800c03a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c03c <_vfiprintf_r>:
 800c03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c040:	460d      	mov	r5, r1
 800c042:	b09d      	sub	sp, #116	; 0x74
 800c044:	4614      	mov	r4, r2
 800c046:	4698      	mov	r8, r3
 800c048:	4606      	mov	r6, r0
 800c04a:	b118      	cbz	r0, 800c054 <_vfiprintf_r+0x18>
 800c04c:	6a03      	ldr	r3, [r0, #32]
 800c04e:	b90b      	cbnz	r3, 800c054 <_vfiprintf_r+0x18>
 800c050:	f7fe f854 	bl	800a0fc <__sinit>
 800c054:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c056:	07d9      	lsls	r1, r3, #31
 800c058:	d405      	bmi.n	800c066 <_vfiprintf_r+0x2a>
 800c05a:	89ab      	ldrh	r3, [r5, #12]
 800c05c:	059a      	lsls	r2, r3, #22
 800c05e:	d402      	bmi.n	800c066 <_vfiprintf_r+0x2a>
 800c060:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c062:	f7fe f9f1 	bl	800a448 <__retarget_lock_acquire_recursive>
 800c066:	89ab      	ldrh	r3, [r5, #12]
 800c068:	071b      	lsls	r3, r3, #28
 800c06a:	d501      	bpl.n	800c070 <_vfiprintf_r+0x34>
 800c06c:	692b      	ldr	r3, [r5, #16]
 800c06e:	b99b      	cbnz	r3, 800c098 <_vfiprintf_r+0x5c>
 800c070:	4629      	mov	r1, r5
 800c072:	4630      	mov	r0, r6
 800c074:	f000 f93a 	bl	800c2ec <__swsetup_r>
 800c078:	b170      	cbz	r0, 800c098 <_vfiprintf_r+0x5c>
 800c07a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c07c:	07dc      	lsls	r4, r3, #31
 800c07e:	d504      	bpl.n	800c08a <_vfiprintf_r+0x4e>
 800c080:	f04f 30ff 	mov.w	r0, #4294967295
 800c084:	b01d      	add	sp, #116	; 0x74
 800c086:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08a:	89ab      	ldrh	r3, [r5, #12]
 800c08c:	0598      	lsls	r0, r3, #22
 800c08e:	d4f7      	bmi.n	800c080 <_vfiprintf_r+0x44>
 800c090:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c092:	f7fe f9da 	bl	800a44a <__retarget_lock_release_recursive>
 800c096:	e7f3      	b.n	800c080 <_vfiprintf_r+0x44>
 800c098:	2300      	movs	r3, #0
 800c09a:	9309      	str	r3, [sp, #36]	; 0x24
 800c09c:	2320      	movs	r3, #32
 800c09e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c0a2:	f8cd 800c 	str.w	r8, [sp, #12]
 800c0a6:	2330      	movs	r3, #48	; 0x30
 800c0a8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c25c <_vfiprintf_r+0x220>
 800c0ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c0b0:	f04f 0901 	mov.w	r9, #1
 800c0b4:	4623      	mov	r3, r4
 800c0b6:	469a      	mov	sl, r3
 800c0b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0bc:	b10a      	cbz	r2, 800c0c2 <_vfiprintf_r+0x86>
 800c0be:	2a25      	cmp	r2, #37	; 0x25
 800c0c0:	d1f9      	bne.n	800c0b6 <_vfiprintf_r+0x7a>
 800c0c2:	ebba 0b04 	subs.w	fp, sl, r4
 800c0c6:	d00b      	beq.n	800c0e0 <_vfiprintf_r+0xa4>
 800c0c8:	465b      	mov	r3, fp
 800c0ca:	4622      	mov	r2, r4
 800c0cc:	4629      	mov	r1, r5
 800c0ce:	4630      	mov	r0, r6
 800c0d0:	f7ff ffa2 	bl	800c018 <__sfputs_r>
 800c0d4:	3001      	adds	r0, #1
 800c0d6:	f000 80a9 	beq.w	800c22c <_vfiprintf_r+0x1f0>
 800c0da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0dc:	445a      	add	r2, fp
 800c0de:	9209      	str	r2, [sp, #36]	; 0x24
 800c0e0:	f89a 3000 	ldrb.w	r3, [sl]
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 80a1 	beq.w	800c22c <_vfiprintf_r+0x1f0>
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	f04f 32ff 	mov.w	r2, #4294967295
 800c0f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0f4:	f10a 0a01 	add.w	sl, sl, #1
 800c0f8:	9304      	str	r3, [sp, #16]
 800c0fa:	9307      	str	r3, [sp, #28]
 800c0fc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c100:	931a      	str	r3, [sp, #104]	; 0x68
 800c102:	4654      	mov	r4, sl
 800c104:	2205      	movs	r2, #5
 800c106:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c10a:	4854      	ldr	r0, [pc, #336]	; (800c25c <_vfiprintf_r+0x220>)
 800c10c:	f7f4 f898 	bl	8000240 <memchr>
 800c110:	9a04      	ldr	r2, [sp, #16]
 800c112:	b9d8      	cbnz	r0, 800c14c <_vfiprintf_r+0x110>
 800c114:	06d1      	lsls	r1, r2, #27
 800c116:	bf44      	itt	mi
 800c118:	2320      	movmi	r3, #32
 800c11a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c11e:	0713      	lsls	r3, r2, #28
 800c120:	bf44      	itt	mi
 800c122:	232b      	movmi	r3, #43	; 0x2b
 800c124:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c128:	f89a 3000 	ldrb.w	r3, [sl]
 800c12c:	2b2a      	cmp	r3, #42	; 0x2a
 800c12e:	d015      	beq.n	800c15c <_vfiprintf_r+0x120>
 800c130:	9a07      	ldr	r2, [sp, #28]
 800c132:	4654      	mov	r4, sl
 800c134:	2000      	movs	r0, #0
 800c136:	f04f 0c0a 	mov.w	ip, #10
 800c13a:	4621      	mov	r1, r4
 800c13c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c140:	3b30      	subs	r3, #48	; 0x30
 800c142:	2b09      	cmp	r3, #9
 800c144:	d94d      	bls.n	800c1e2 <_vfiprintf_r+0x1a6>
 800c146:	b1b0      	cbz	r0, 800c176 <_vfiprintf_r+0x13a>
 800c148:	9207      	str	r2, [sp, #28]
 800c14a:	e014      	b.n	800c176 <_vfiprintf_r+0x13a>
 800c14c:	eba0 0308 	sub.w	r3, r0, r8
 800c150:	fa09 f303 	lsl.w	r3, r9, r3
 800c154:	4313      	orrs	r3, r2
 800c156:	9304      	str	r3, [sp, #16]
 800c158:	46a2      	mov	sl, r4
 800c15a:	e7d2      	b.n	800c102 <_vfiprintf_r+0xc6>
 800c15c:	9b03      	ldr	r3, [sp, #12]
 800c15e:	1d19      	adds	r1, r3, #4
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	9103      	str	r1, [sp, #12]
 800c164:	2b00      	cmp	r3, #0
 800c166:	bfbb      	ittet	lt
 800c168:	425b      	neglt	r3, r3
 800c16a:	f042 0202 	orrlt.w	r2, r2, #2
 800c16e:	9307      	strge	r3, [sp, #28]
 800c170:	9307      	strlt	r3, [sp, #28]
 800c172:	bfb8      	it	lt
 800c174:	9204      	strlt	r2, [sp, #16]
 800c176:	7823      	ldrb	r3, [r4, #0]
 800c178:	2b2e      	cmp	r3, #46	; 0x2e
 800c17a:	d10c      	bne.n	800c196 <_vfiprintf_r+0x15a>
 800c17c:	7863      	ldrb	r3, [r4, #1]
 800c17e:	2b2a      	cmp	r3, #42	; 0x2a
 800c180:	d134      	bne.n	800c1ec <_vfiprintf_r+0x1b0>
 800c182:	9b03      	ldr	r3, [sp, #12]
 800c184:	1d1a      	adds	r2, r3, #4
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	9203      	str	r2, [sp, #12]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	bfb8      	it	lt
 800c18e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c192:	3402      	adds	r4, #2
 800c194:	9305      	str	r3, [sp, #20]
 800c196:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c26c <_vfiprintf_r+0x230>
 800c19a:	7821      	ldrb	r1, [r4, #0]
 800c19c:	2203      	movs	r2, #3
 800c19e:	4650      	mov	r0, sl
 800c1a0:	f7f4 f84e 	bl	8000240 <memchr>
 800c1a4:	b138      	cbz	r0, 800c1b6 <_vfiprintf_r+0x17a>
 800c1a6:	9b04      	ldr	r3, [sp, #16]
 800c1a8:	eba0 000a 	sub.w	r0, r0, sl
 800c1ac:	2240      	movs	r2, #64	; 0x40
 800c1ae:	4082      	lsls	r2, r0
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	3401      	adds	r4, #1
 800c1b4:	9304      	str	r3, [sp, #16]
 800c1b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1ba:	4829      	ldr	r0, [pc, #164]	; (800c260 <_vfiprintf_r+0x224>)
 800c1bc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1c0:	2206      	movs	r2, #6
 800c1c2:	f7f4 f83d 	bl	8000240 <memchr>
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d03f      	beq.n	800c24a <_vfiprintf_r+0x20e>
 800c1ca:	4b26      	ldr	r3, [pc, #152]	; (800c264 <_vfiprintf_r+0x228>)
 800c1cc:	bb1b      	cbnz	r3, 800c216 <_vfiprintf_r+0x1da>
 800c1ce:	9b03      	ldr	r3, [sp, #12]
 800c1d0:	3307      	adds	r3, #7
 800c1d2:	f023 0307 	bic.w	r3, r3, #7
 800c1d6:	3308      	adds	r3, #8
 800c1d8:	9303      	str	r3, [sp, #12]
 800c1da:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1dc:	443b      	add	r3, r7
 800c1de:	9309      	str	r3, [sp, #36]	; 0x24
 800c1e0:	e768      	b.n	800c0b4 <_vfiprintf_r+0x78>
 800c1e2:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1e6:	460c      	mov	r4, r1
 800c1e8:	2001      	movs	r0, #1
 800c1ea:	e7a6      	b.n	800c13a <_vfiprintf_r+0xfe>
 800c1ec:	2300      	movs	r3, #0
 800c1ee:	3401      	adds	r4, #1
 800c1f0:	9305      	str	r3, [sp, #20]
 800c1f2:	4619      	mov	r1, r3
 800c1f4:	f04f 0c0a 	mov.w	ip, #10
 800c1f8:	4620      	mov	r0, r4
 800c1fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1fe:	3a30      	subs	r2, #48	; 0x30
 800c200:	2a09      	cmp	r2, #9
 800c202:	d903      	bls.n	800c20c <_vfiprintf_r+0x1d0>
 800c204:	2b00      	cmp	r3, #0
 800c206:	d0c6      	beq.n	800c196 <_vfiprintf_r+0x15a>
 800c208:	9105      	str	r1, [sp, #20]
 800c20a:	e7c4      	b.n	800c196 <_vfiprintf_r+0x15a>
 800c20c:	fb0c 2101 	mla	r1, ip, r1, r2
 800c210:	4604      	mov	r4, r0
 800c212:	2301      	movs	r3, #1
 800c214:	e7f0      	b.n	800c1f8 <_vfiprintf_r+0x1bc>
 800c216:	ab03      	add	r3, sp, #12
 800c218:	9300      	str	r3, [sp, #0]
 800c21a:	462a      	mov	r2, r5
 800c21c:	4b12      	ldr	r3, [pc, #72]	; (800c268 <_vfiprintf_r+0x22c>)
 800c21e:	a904      	add	r1, sp, #16
 800c220:	4630      	mov	r0, r6
 800c222:	f7fd fb2b 	bl	800987c <_printf_float>
 800c226:	4607      	mov	r7, r0
 800c228:	1c78      	adds	r0, r7, #1
 800c22a:	d1d6      	bne.n	800c1da <_vfiprintf_r+0x19e>
 800c22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	d405      	bmi.n	800c23e <_vfiprintf_r+0x202>
 800c232:	89ab      	ldrh	r3, [r5, #12]
 800c234:	059a      	lsls	r2, r3, #22
 800c236:	d402      	bmi.n	800c23e <_vfiprintf_r+0x202>
 800c238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23a:	f7fe f906 	bl	800a44a <__retarget_lock_release_recursive>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	065b      	lsls	r3, r3, #25
 800c242:	f53f af1d 	bmi.w	800c080 <_vfiprintf_r+0x44>
 800c246:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c248:	e71c      	b.n	800c084 <_vfiprintf_r+0x48>
 800c24a:	ab03      	add	r3, sp, #12
 800c24c:	9300      	str	r3, [sp, #0]
 800c24e:	462a      	mov	r2, r5
 800c250:	4b05      	ldr	r3, [pc, #20]	; (800c268 <_vfiprintf_r+0x22c>)
 800c252:	a904      	add	r1, sp, #16
 800c254:	4630      	mov	r0, r6
 800c256:	f7fd fdb5 	bl	8009dc4 <_printf_i>
 800c25a:	e7e4      	b.n	800c226 <_vfiprintf_r+0x1ea>
 800c25c:	0800c9cc 	.word	0x0800c9cc
 800c260:	0800c9d6 	.word	0x0800c9d6
 800c264:	0800987d 	.word	0x0800987d
 800c268:	0800c019 	.word	0x0800c019
 800c26c:	0800c9d2 	.word	0x0800c9d2

0800c270 <__swbuf_r>:
 800c270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c272:	460e      	mov	r6, r1
 800c274:	4614      	mov	r4, r2
 800c276:	4605      	mov	r5, r0
 800c278:	b118      	cbz	r0, 800c282 <__swbuf_r+0x12>
 800c27a:	6a03      	ldr	r3, [r0, #32]
 800c27c:	b90b      	cbnz	r3, 800c282 <__swbuf_r+0x12>
 800c27e:	f7fd ff3d 	bl	800a0fc <__sinit>
 800c282:	69a3      	ldr	r3, [r4, #24]
 800c284:	60a3      	str	r3, [r4, #8]
 800c286:	89a3      	ldrh	r3, [r4, #12]
 800c288:	071a      	lsls	r2, r3, #28
 800c28a:	d525      	bpl.n	800c2d8 <__swbuf_r+0x68>
 800c28c:	6923      	ldr	r3, [r4, #16]
 800c28e:	b31b      	cbz	r3, 800c2d8 <__swbuf_r+0x68>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	6922      	ldr	r2, [r4, #16]
 800c294:	1a98      	subs	r0, r3, r2
 800c296:	6963      	ldr	r3, [r4, #20]
 800c298:	b2f6      	uxtb	r6, r6
 800c29a:	4283      	cmp	r3, r0
 800c29c:	4637      	mov	r7, r6
 800c29e:	dc04      	bgt.n	800c2aa <__swbuf_r+0x3a>
 800c2a0:	4621      	mov	r1, r4
 800c2a2:	4628      	mov	r0, r5
 800c2a4:	f7ff fdc4 	bl	800be30 <_fflush_r>
 800c2a8:	b9e0      	cbnz	r0, 800c2e4 <__swbuf_r+0x74>
 800c2aa:	68a3      	ldr	r3, [r4, #8]
 800c2ac:	3b01      	subs	r3, #1
 800c2ae:	60a3      	str	r3, [r4, #8]
 800c2b0:	6823      	ldr	r3, [r4, #0]
 800c2b2:	1c5a      	adds	r2, r3, #1
 800c2b4:	6022      	str	r2, [r4, #0]
 800c2b6:	701e      	strb	r6, [r3, #0]
 800c2b8:	6962      	ldr	r2, [r4, #20]
 800c2ba:	1c43      	adds	r3, r0, #1
 800c2bc:	429a      	cmp	r2, r3
 800c2be:	d004      	beq.n	800c2ca <__swbuf_r+0x5a>
 800c2c0:	89a3      	ldrh	r3, [r4, #12]
 800c2c2:	07db      	lsls	r3, r3, #31
 800c2c4:	d506      	bpl.n	800c2d4 <__swbuf_r+0x64>
 800c2c6:	2e0a      	cmp	r6, #10
 800c2c8:	d104      	bne.n	800c2d4 <__swbuf_r+0x64>
 800c2ca:	4621      	mov	r1, r4
 800c2cc:	4628      	mov	r0, r5
 800c2ce:	f7ff fdaf 	bl	800be30 <_fflush_r>
 800c2d2:	b938      	cbnz	r0, 800c2e4 <__swbuf_r+0x74>
 800c2d4:	4638      	mov	r0, r7
 800c2d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d8:	4621      	mov	r1, r4
 800c2da:	4628      	mov	r0, r5
 800c2dc:	f000 f806 	bl	800c2ec <__swsetup_r>
 800c2e0:	2800      	cmp	r0, #0
 800c2e2:	d0d5      	beq.n	800c290 <__swbuf_r+0x20>
 800c2e4:	f04f 37ff 	mov.w	r7, #4294967295
 800c2e8:	e7f4      	b.n	800c2d4 <__swbuf_r+0x64>
	...

0800c2ec <__swsetup_r>:
 800c2ec:	b538      	push	{r3, r4, r5, lr}
 800c2ee:	4b2a      	ldr	r3, [pc, #168]	; (800c398 <__swsetup_r+0xac>)
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	6818      	ldr	r0, [r3, #0]
 800c2f4:	460c      	mov	r4, r1
 800c2f6:	b118      	cbz	r0, 800c300 <__swsetup_r+0x14>
 800c2f8:	6a03      	ldr	r3, [r0, #32]
 800c2fa:	b90b      	cbnz	r3, 800c300 <__swsetup_r+0x14>
 800c2fc:	f7fd fefe 	bl	800a0fc <__sinit>
 800c300:	89a3      	ldrh	r3, [r4, #12]
 800c302:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c306:	0718      	lsls	r0, r3, #28
 800c308:	d422      	bmi.n	800c350 <__swsetup_r+0x64>
 800c30a:	06d9      	lsls	r1, r3, #27
 800c30c:	d407      	bmi.n	800c31e <__swsetup_r+0x32>
 800c30e:	2309      	movs	r3, #9
 800c310:	602b      	str	r3, [r5, #0]
 800c312:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c316:	81a3      	strh	r3, [r4, #12]
 800c318:	f04f 30ff 	mov.w	r0, #4294967295
 800c31c:	e034      	b.n	800c388 <__swsetup_r+0x9c>
 800c31e:	0758      	lsls	r0, r3, #29
 800c320:	d512      	bpl.n	800c348 <__swsetup_r+0x5c>
 800c322:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c324:	b141      	cbz	r1, 800c338 <__swsetup_r+0x4c>
 800c326:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c32a:	4299      	cmp	r1, r3
 800c32c:	d002      	beq.n	800c334 <__swsetup_r+0x48>
 800c32e:	4628      	mov	r0, r5
 800c330:	f7fe ff24 	bl	800b17c <_free_r>
 800c334:	2300      	movs	r3, #0
 800c336:	6363      	str	r3, [r4, #52]	; 0x34
 800c338:	89a3      	ldrh	r3, [r4, #12]
 800c33a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c33e:	81a3      	strh	r3, [r4, #12]
 800c340:	2300      	movs	r3, #0
 800c342:	6063      	str	r3, [r4, #4]
 800c344:	6923      	ldr	r3, [r4, #16]
 800c346:	6023      	str	r3, [r4, #0]
 800c348:	89a3      	ldrh	r3, [r4, #12]
 800c34a:	f043 0308 	orr.w	r3, r3, #8
 800c34e:	81a3      	strh	r3, [r4, #12]
 800c350:	6923      	ldr	r3, [r4, #16]
 800c352:	b94b      	cbnz	r3, 800c368 <__swsetup_r+0x7c>
 800c354:	89a3      	ldrh	r3, [r4, #12]
 800c356:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c35a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c35e:	d003      	beq.n	800c368 <__swsetup_r+0x7c>
 800c360:	4621      	mov	r1, r4
 800c362:	4628      	mov	r0, r5
 800c364:	f000 f88c 	bl	800c480 <__smakebuf_r>
 800c368:	89a0      	ldrh	r0, [r4, #12]
 800c36a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c36e:	f010 0301 	ands.w	r3, r0, #1
 800c372:	d00a      	beq.n	800c38a <__swsetup_r+0x9e>
 800c374:	2300      	movs	r3, #0
 800c376:	60a3      	str	r3, [r4, #8]
 800c378:	6963      	ldr	r3, [r4, #20]
 800c37a:	425b      	negs	r3, r3
 800c37c:	61a3      	str	r3, [r4, #24]
 800c37e:	6923      	ldr	r3, [r4, #16]
 800c380:	b943      	cbnz	r3, 800c394 <__swsetup_r+0xa8>
 800c382:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c386:	d1c4      	bne.n	800c312 <__swsetup_r+0x26>
 800c388:	bd38      	pop	{r3, r4, r5, pc}
 800c38a:	0781      	lsls	r1, r0, #30
 800c38c:	bf58      	it	pl
 800c38e:	6963      	ldrpl	r3, [r4, #20]
 800c390:	60a3      	str	r3, [r4, #8]
 800c392:	e7f4      	b.n	800c37e <__swsetup_r+0x92>
 800c394:	2000      	movs	r0, #0
 800c396:	e7f7      	b.n	800c388 <__swsetup_r+0x9c>
 800c398:	20000134 	.word	0x20000134

0800c39c <_raise_r>:
 800c39c:	291f      	cmp	r1, #31
 800c39e:	b538      	push	{r3, r4, r5, lr}
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	460d      	mov	r5, r1
 800c3a4:	d904      	bls.n	800c3b0 <_raise_r+0x14>
 800c3a6:	2316      	movs	r3, #22
 800c3a8:	6003      	str	r3, [r0, #0]
 800c3aa:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ae:	bd38      	pop	{r3, r4, r5, pc}
 800c3b0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c3b2:	b112      	cbz	r2, 800c3ba <_raise_r+0x1e>
 800c3b4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c3b8:	b94b      	cbnz	r3, 800c3ce <_raise_r+0x32>
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 f830 	bl	800c420 <_getpid_r>
 800c3c0:	462a      	mov	r2, r5
 800c3c2:	4601      	mov	r1, r0
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c3ca:	f000 b817 	b.w	800c3fc <_kill_r>
 800c3ce:	2b01      	cmp	r3, #1
 800c3d0:	d00a      	beq.n	800c3e8 <_raise_r+0x4c>
 800c3d2:	1c59      	adds	r1, r3, #1
 800c3d4:	d103      	bne.n	800c3de <_raise_r+0x42>
 800c3d6:	2316      	movs	r3, #22
 800c3d8:	6003      	str	r3, [r0, #0]
 800c3da:	2001      	movs	r0, #1
 800c3dc:	e7e7      	b.n	800c3ae <_raise_r+0x12>
 800c3de:	2400      	movs	r4, #0
 800c3e0:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c3e4:	4628      	mov	r0, r5
 800c3e6:	4798      	blx	r3
 800c3e8:	2000      	movs	r0, #0
 800c3ea:	e7e0      	b.n	800c3ae <_raise_r+0x12>

0800c3ec <raise>:
 800c3ec:	4b02      	ldr	r3, [pc, #8]	; (800c3f8 <raise+0xc>)
 800c3ee:	4601      	mov	r1, r0
 800c3f0:	6818      	ldr	r0, [r3, #0]
 800c3f2:	f7ff bfd3 	b.w	800c39c <_raise_r>
 800c3f6:	bf00      	nop
 800c3f8:	20000134 	.word	0x20000134

0800c3fc <_kill_r>:
 800c3fc:	b538      	push	{r3, r4, r5, lr}
 800c3fe:	4d07      	ldr	r5, [pc, #28]	; (800c41c <_kill_r+0x20>)
 800c400:	2300      	movs	r3, #0
 800c402:	4604      	mov	r4, r0
 800c404:	4608      	mov	r0, r1
 800c406:	4611      	mov	r1, r2
 800c408:	602b      	str	r3, [r5, #0]
 800c40a:	f7f5 fbad 	bl	8001b68 <_kill>
 800c40e:	1c43      	adds	r3, r0, #1
 800c410:	d102      	bne.n	800c418 <_kill_r+0x1c>
 800c412:	682b      	ldr	r3, [r5, #0]
 800c414:	b103      	cbz	r3, 800c418 <_kill_r+0x1c>
 800c416:	6023      	str	r3, [r4, #0]
 800c418:	bd38      	pop	{r3, r4, r5, pc}
 800c41a:	bf00      	nop
 800c41c:	200007a0 	.word	0x200007a0

0800c420 <_getpid_r>:
 800c420:	f7f5 bb9a 	b.w	8001b58 <_getpid>

0800c424 <_malloc_usable_size_r>:
 800c424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c428:	1f18      	subs	r0, r3, #4
 800c42a:	2b00      	cmp	r3, #0
 800c42c:	bfbc      	itt	lt
 800c42e:	580b      	ldrlt	r3, [r1, r0]
 800c430:	18c0      	addlt	r0, r0, r3
 800c432:	4770      	bx	lr

0800c434 <__swhatbuf_r>:
 800c434:	b570      	push	{r4, r5, r6, lr}
 800c436:	460c      	mov	r4, r1
 800c438:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c43c:	2900      	cmp	r1, #0
 800c43e:	b096      	sub	sp, #88	; 0x58
 800c440:	4615      	mov	r5, r2
 800c442:	461e      	mov	r6, r3
 800c444:	da0d      	bge.n	800c462 <__swhatbuf_r+0x2e>
 800c446:	89a3      	ldrh	r3, [r4, #12]
 800c448:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c44c:	f04f 0100 	mov.w	r1, #0
 800c450:	bf0c      	ite	eq
 800c452:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c456:	2340      	movne	r3, #64	; 0x40
 800c458:	2000      	movs	r0, #0
 800c45a:	6031      	str	r1, [r6, #0]
 800c45c:	602b      	str	r3, [r5, #0]
 800c45e:	b016      	add	sp, #88	; 0x58
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	466a      	mov	r2, sp
 800c464:	f000 f848 	bl	800c4f8 <_fstat_r>
 800c468:	2800      	cmp	r0, #0
 800c46a:	dbec      	blt.n	800c446 <__swhatbuf_r+0x12>
 800c46c:	9901      	ldr	r1, [sp, #4]
 800c46e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c472:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c476:	4259      	negs	r1, r3
 800c478:	4159      	adcs	r1, r3
 800c47a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c47e:	e7eb      	b.n	800c458 <__swhatbuf_r+0x24>

0800c480 <__smakebuf_r>:
 800c480:	898b      	ldrh	r3, [r1, #12]
 800c482:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c484:	079d      	lsls	r5, r3, #30
 800c486:	4606      	mov	r6, r0
 800c488:	460c      	mov	r4, r1
 800c48a:	d507      	bpl.n	800c49c <__smakebuf_r+0x1c>
 800c48c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c490:	6023      	str	r3, [r4, #0]
 800c492:	6123      	str	r3, [r4, #16]
 800c494:	2301      	movs	r3, #1
 800c496:	6163      	str	r3, [r4, #20]
 800c498:	b002      	add	sp, #8
 800c49a:	bd70      	pop	{r4, r5, r6, pc}
 800c49c:	ab01      	add	r3, sp, #4
 800c49e:	466a      	mov	r2, sp
 800c4a0:	f7ff ffc8 	bl	800c434 <__swhatbuf_r>
 800c4a4:	9900      	ldr	r1, [sp, #0]
 800c4a6:	4605      	mov	r5, r0
 800c4a8:	4630      	mov	r0, r6
 800c4aa:	f7fe fedb 	bl	800b264 <_malloc_r>
 800c4ae:	b948      	cbnz	r0, 800c4c4 <__smakebuf_r+0x44>
 800c4b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c4b4:	059a      	lsls	r2, r3, #22
 800c4b6:	d4ef      	bmi.n	800c498 <__smakebuf_r+0x18>
 800c4b8:	f023 0303 	bic.w	r3, r3, #3
 800c4bc:	f043 0302 	orr.w	r3, r3, #2
 800c4c0:	81a3      	strh	r3, [r4, #12]
 800c4c2:	e7e3      	b.n	800c48c <__smakebuf_r+0xc>
 800c4c4:	89a3      	ldrh	r3, [r4, #12]
 800c4c6:	6020      	str	r0, [r4, #0]
 800c4c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4cc:	81a3      	strh	r3, [r4, #12]
 800c4ce:	9b00      	ldr	r3, [sp, #0]
 800c4d0:	6163      	str	r3, [r4, #20]
 800c4d2:	9b01      	ldr	r3, [sp, #4]
 800c4d4:	6120      	str	r0, [r4, #16]
 800c4d6:	b15b      	cbz	r3, 800c4f0 <__smakebuf_r+0x70>
 800c4d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c4dc:	4630      	mov	r0, r6
 800c4de:	f000 f81d 	bl	800c51c <_isatty_r>
 800c4e2:	b128      	cbz	r0, 800c4f0 <__smakebuf_r+0x70>
 800c4e4:	89a3      	ldrh	r3, [r4, #12]
 800c4e6:	f023 0303 	bic.w	r3, r3, #3
 800c4ea:	f043 0301 	orr.w	r3, r3, #1
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	89a3      	ldrh	r3, [r4, #12]
 800c4f2:	431d      	orrs	r5, r3
 800c4f4:	81a5      	strh	r5, [r4, #12]
 800c4f6:	e7cf      	b.n	800c498 <__smakebuf_r+0x18>

0800c4f8 <_fstat_r>:
 800c4f8:	b538      	push	{r3, r4, r5, lr}
 800c4fa:	4d07      	ldr	r5, [pc, #28]	; (800c518 <_fstat_r+0x20>)
 800c4fc:	2300      	movs	r3, #0
 800c4fe:	4604      	mov	r4, r0
 800c500:	4608      	mov	r0, r1
 800c502:	4611      	mov	r1, r2
 800c504:	602b      	str	r3, [r5, #0]
 800c506:	f7f5 fb8e 	bl	8001c26 <_fstat>
 800c50a:	1c43      	adds	r3, r0, #1
 800c50c:	d102      	bne.n	800c514 <_fstat_r+0x1c>
 800c50e:	682b      	ldr	r3, [r5, #0]
 800c510:	b103      	cbz	r3, 800c514 <_fstat_r+0x1c>
 800c512:	6023      	str	r3, [r4, #0]
 800c514:	bd38      	pop	{r3, r4, r5, pc}
 800c516:	bf00      	nop
 800c518:	200007a0 	.word	0x200007a0

0800c51c <_isatty_r>:
 800c51c:	b538      	push	{r3, r4, r5, lr}
 800c51e:	4d06      	ldr	r5, [pc, #24]	; (800c538 <_isatty_r+0x1c>)
 800c520:	2300      	movs	r3, #0
 800c522:	4604      	mov	r4, r0
 800c524:	4608      	mov	r0, r1
 800c526:	602b      	str	r3, [r5, #0]
 800c528:	f7f5 fb8d 	bl	8001c46 <_isatty>
 800c52c:	1c43      	adds	r3, r0, #1
 800c52e:	d102      	bne.n	800c536 <_isatty_r+0x1a>
 800c530:	682b      	ldr	r3, [r5, #0]
 800c532:	b103      	cbz	r3, 800c536 <_isatty_r+0x1a>
 800c534:	6023      	str	r3, [r4, #0]
 800c536:	bd38      	pop	{r3, r4, r5, pc}
 800c538:	200007a0 	.word	0x200007a0

0800c53c <_init>:
 800c53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c53e:	bf00      	nop
 800c540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c542:	bc08      	pop	{r3}
 800c544:	469e      	mov	lr, r3
 800c546:	4770      	bx	lr

0800c548 <_fini>:
 800c548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c54a:	bf00      	nop
 800c54c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c54e:	bc08      	pop	{r3}
 800c550:	469e      	mov	lr, r3
 800c552:	4770      	bx	lr
